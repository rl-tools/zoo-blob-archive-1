// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 201, 188, 62, 67, 117, 75, 190, 161, 37, 248, 62, 140, 215, 84, 190, 205, 147, 131, 191, 216, 240, 152, 189, 109, 107, 20, 191, 231, 23, 115, 189, 16, 26, 83, 191, 145, 92, 141, 62, 142, 136, 129, 62, 186, 232, 146, 59, 178, 45, 187, 190, 73, 80, 209, 62, 7, 101, 208, 189, 83, 218, 45, 63, 199, 177, 78, 61, 93, 253, 18, 190, 119, 158, 161, 62, 250, 255, 69, 62, 255, 120, 48, 191, 138, 229, 117, 62, 89, 145, 215, 190, 31, 162, 56, 62, 32, 129, 244, 60, 107, 175, 114, 191, 209, 23, 98, 190, 101, 243, 153, 62, 77, 171, 132, 63, 205, 119, 12, 63, 21, 60, 9, 191, 225, 219, 34, 190, 196, 253, 14, 191, 40, 133, 174, 61, 157, 228, 28, 62, 233, 96, 48, 191, 187, 101, 10, 63, 123, 82, 90, 63, 71, 1, 143, 62, 29, 224, 0, 190, 30, 192, 236, 62, 213, 102, 72, 60, 16, 248, 52, 63, 42, 206, 114, 191, 203, 235, 211, 190, 142, 246, 225, 62, 220, 222, 99, 63, 58, 139, 99, 62, 63, 66, 26, 63, 4, 205, 135, 63, 224, 72, 136, 62, 234, 187, 224, 61, 238, 40, 57, 191, 135, 1, 0, 63, 4, 236, 66, 62, 214, 243, 20, 190, 46, 9, 0, 191, 5, 28, 174, 61, 130, 221, 76, 191, 58, 177, 139, 190, 40, 210, 211, 62, 185, 92, 164, 63, 43, 12, 25, 62, 70, 74, 164, 62, 251, 189, 221, 190, 192, 194, 168, 62, 183, 23, 55, 190, 253, 30, 76, 62, 75, 38, 78, 63, 8, 181, 31, 63, 238, 190, 26, 63, 175, 11, 243, 62, 119, 178, 17, 63, 40, 212, 62, 191, 10, 76, 0, 190, 115, 190, 170, 190, 137, 84, 48, 63, 6, 167, 212, 190, 52, 215, 42, 63, 185, 247, 85, 63, 14, 74, 54, 62, 225, 88, 108, 63, 179, 228, 68, 63, 189, 127, 183, 62, 40, 166, 149, 190, 40, 45, 158, 63, 56, 58, 125, 62, 11, 108, 230, 190, 11, 95, 174, 60, 190, 181, 37, 63, 35, 196, 116, 61, 16, 161, 96, 191, 228, 98, 171, 62, 66, 94, 248, 189, 38, 218, 169, 63, 27, 6, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 145, 62, 191, 96, 175, 167, 61, 9, 209, 83, 61, 232, 47, 208, 190, 139, 86, 244, 62, 85, 147, 167, 62, 135, 17, 247, 190, 88, 10, 48, 190, 40, 248, 228, 62, 149, 195, 39, 62, 79, 32, 29, 62, 98, 84, 18, 63, 145, 27, 21, 190, 224, 171, 167, 190, 57, 215, 245, 190, 220, 25, 19, 191, 64, 1, 188, 189, 103, 13, 189, 190, 71, 219, 187, 188, 204, 67, 251, 62, 176, 216, 233, 190, 15, 210, 27, 191, 188, 109, 210, 61, 177, 114, 9, 190, 163, 47, 126, 62, 89, 173, 146, 62, 158, 228, 34, 62, 118, 139, 69, 62, 204, 39, 9, 63, 76, 87, 30, 191, 143, 192, 222, 61, 200, 78, 13, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 12, 169, 188, 145, 130, 14, 59, 10, 106, 20, 62, 13, 254, 122, 61, 195, 227, 174, 188, 30, 180, 198, 187, 28, 43, 92, 190, 21, 157, 41, 62, 249, 104, 204, 61, 17, 150, 99, 190, 192, 3, 40, 62, 112, 157, 231, 61, 224, 83, 145, 61, 47, 36, 78, 62, 162, 239, 135, 190, 88, 108, 18, 191, 186, 77, 7, 62, 200, 188, 192, 189, 53, 46, 191, 189, 108, 98, 133, 189, 239, 86, 101, 62, 123, 243, 157, 189, 242, 240, 6, 61, 120, 62, 197, 60, 124, 34, 253, 189, 39, 56, 182, 61, 187, 179, 99, 62, 78, 153, 32, 62, 189, 203, 173, 61, 238, 165, 200, 190, 45, 13, 70, 189, 147, 251, 61, 190, 191, 143, 84, 190, 150, 51, 83, 62, 74, 186, 250, 189, 101, 94, 8, 62, 249, 31, 87, 61, 156, 0, 178, 59, 216, 178, 110, 190, 200, 160, 9, 190, 184, 210, 110, 62, 243, 243, 139, 59, 229, 186, 235, 61, 190, 27, 75, 189, 157, 100, 234, 189, 122, 7, 106, 62, 145, 28, 196, 189, 117, 165, 230, 189, 234, 144, 255, 190, 254, 255, 33, 189, 39, 99, 33, 190, 245, 149, 171, 61, 74, 204, 18, 191, 137, 95, 83, 190, 248, 213, 122, 62, 209, 180, 122, 190, 165, 251, 79, 187, 203, 60, 4, 190, 27, 29, 131, 190, 24, 88, 76, 189, 123, 223, 251, 60, 158, 118, 57, 62, 175, 186, 24, 62, 4, 115, 183, 62, 96, 24, 65, 190, 161, 47, 4, 191, 9, 20, 249, 60, 71, 213, 9, 62, 65, 200, 122, 62, 45, 215, 37, 61, 165, 47, 170, 188, 41, 232, 254, 188, 128, 45, 146, 190, 203, 106, 222, 61, 200, 203, 80, 190, 147, 195, 154, 61, 182, 253, 15, 190, 71, 11, 80, 189, 162, 76, 137, 62, 181, 174, 27, 61, 161, 204, 62, 191, 212, 16, 139, 61, 31, 0, 25, 62, 201, 244, 155, 190, 102, 248, 68, 191, 215, 125, 86, 61, 109, 70, 106, 62, 124, 222, 8, 190, 61, 18, 130, 62, 162, 25, 243, 189, 109, 154, 155, 190, 110, 156, 170, 190, 26, 54, 200, 60, 162, 91, 9, 61, 6, 132, 243, 61, 166, 179, 221, 62, 194, 127, 116, 61, 82, 146, 134, 190, 7, 232, 29, 190, 96, 177, 174, 189, 181, 26, 198, 189, 236, 85, 82, 61, 150, 137, 155, 60, 179, 82, 241, 61, 176, 140, 160, 190, 187, 127, 191, 189, 140, 196, 207, 189, 201, 16, 25, 62, 232, 87, 93, 62, 168, 157, 13, 60, 15, 60, 53, 191, 25, 55, 13, 189, 85, 146, 226, 62, 159, 222, 123, 62, 2, 187, 71, 62, 46, 36, 213, 61, 72, 161, 146, 62, 101, 154, 174, 61, 89, 184, 93, 190, 213, 123, 52, 189, 30, 93, 61, 190, 227, 195, 134, 62, 195, 114, 119, 62, 217, 118, 121, 62, 124, 186, 33, 190, 49, 207, 192, 189, 156, 129, 187, 61, 208, 250, 116, 62, 199, 153, 90, 60, 149, 0, 134, 62, 40, 152, 26, 62, 11, 8, 24, 61, 166, 131, 67, 62, 122, 124, 31, 188, 97, 9, 74, 190, 104, 98, 165, 60, 165, 176, 236, 189, 153, 238, 104, 190, 214, 28, 27, 62, 127, 10, 205, 61, 36, 112, 130, 62, 159, 255, 205, 62, 249, 161, 16, 191, 86, 150, 87, 191, 36, 22, 215, 62, 229, 145, 155, 62, 68, 185, 133, 189, 97, 136, 14, 60, 57, 193, 162, 62, 48, 33, 254, 62, 177, 192, 191, 189, 190, 110, 21, 62, 19, 29, 51, 190, 131, 220, 44, 62, 184, 243, 84, 62, 45, 129, 92, 61, 248, 88, 231, 189, 136, 45, 168, 190, 123, 50, 19, 190, 208, 114, 150, 190, 229, 183, 38, 190, 182, 63, 95, 62, 121, 25, 150, 61, 174, 158, 76, 190, 244, 201, 172, 61, 64, 106, 167, 61, 120, 186, 147, 190, 17, 189, 41, 190, 168, 244, 65, 62, 93, 237, 79, 190, 184, 32, 153, 62, 187, 38, 28, 189, 143, 160, 31, 62, 50, 101, 89, 62, 202, 50, 30, 191, 253, 213, 55, 191, 222, 51, 229, 62, 246, 137, 21, 190, 168, 17, 68, 189, 3, 11, 37, 62, 214, 243, 116, 62, 189, 90, 133, 62, 20, 184, 227, 189, 81, 66, 107, 60, 134, 184, 155, 190, 97, 61, 166, 62, 49, 49, 206, 61, 125, 69, 163, 62, 14, 175, 201, 60, 81, 151, 44, 191, 104, 16, 167, 190, 15, 253, 135, 190, 67, 217, 254, 189, 193, 79, 186, 61, 243, 166, 234, 190, 220, 37, 35, 186, 226, 202, 28, 189, 24, 32, 152, 62, 156, 159, 29, 190, 172, 134, 169, 60, 71, 64, 27, 190, 58, 88, 107, 60, 189, 255, 113, 190, 222, 84, 24, 190, 10, 4, 233, 190, 84, 184, 224, 189, 132, 103, 33, 62, 243, 113, 53, 190, 4, 181, 249, 190, 238, 163, 195, 189, 212, 188, 225, 60, 77, 28, 54, 62, 123, 100, 88, 191, 240, 125, 133, 189, 115, 231, 64, 62, 235, 111, 228, 189, 250, 135, 31, 62, 183, 26, 126, 62, 174, 253, 222, 189, 96, 202, 110, 190, 167, 49, 139, 61, 104, 72, 4, 62, 5, 78, 147, 62, 0, 252, 30, 63, 95, 105, 126, 190, 17, 96, 77, 62, 170, 74, 95, 189, 242, 125, 34, 189, 29, 38, 219, 190, 222, 1, 131, 62, 252, 164, 216, 62, 194, 79, 196, 61, 46, 230, 175, 62, 105, 190, 245, 61, 229, 92, 220, 190, 164, 188, 170, 61, 56, 19, 83, 190, 69, 254, 141, 190, 63, 162, 165, 62, 85, 229, 27, 62, 164, 116, 232, 190, 67, 255, 28, 61, 61, 148, 58, 62, 115, 54, 242, 58, 181, 56, 185, 190, 107, 222, 42, 190, 39, 113, 18, 61, 207, 179, 159, 190, 94, 159, 214, 62, 70, 226, 204, 190, 227, 54, 70, 191, 86, 41, 19, 191, 166, 87, 145, 61, 38, 99, 119, 62, 21, 149, 177, 61, 109, 234, 150, 60, 183, 244, 148, 190, 31, 173, 49, 188, 67, 125, 30, 190, 42, 52, 246, 187, 68, 35, 239, 61, 216, 144, 43, 61, 123, 163, 255, 190, 38, 197, 129, 190, 48, 131, 41, 62, 46, 221, 227, 190, 133, 146, 143, 61, 158, 238, 89, 190, 49, 108, 166, 61, 239, 90, 152, 188, 189, 176, 204, 190, 133, 61, 14, 190, 206, 194, 207, 61, 182, 184, 124, 190, 232, 37, 134, 190, 187, 91, 19, 189, 43, 215, 51, 190, 45, 74, 117, 190, 144, 37, 100, 61, 125, 94, 42, 62, 31, 68, 106, 189, 140, 234, 2, 62, 110, 95, 104, 61, 132, 90, 146, 62, 253, 223, 98, 62, 77, 153, 60, 191, 180, 46, 149, 190, 113, 54, 82, 191, 73, 71, 145, 61, 154, 48, 243, 189, 236, 155, 153, 190, 40, 94, 232, 189, 197, 46, 17, 190, 58, 119, 32, 62, 111, 81, 162, 62, 131, 85, 249, 189, 182, 183, 196, 189, 176, 101, 144, 190, 188, 185, 252, 189, 105, 235, 202, 188, 36, 194, 145, 190, 28, 142, 59, 60, 145, 43, 20, 63, 14, 244, 142, 189, 115, 158, 21, 191, 189, 142, 19, 62, 172, 18, 167, 62, 249, 243, 176, 188, 190, 244, 91, 188, 22, 39, 134, 61, 109, 87, 27, 61, 145, 1, 193, 189, 10, 254, 9, 62, 156, 215, 194, 189, 87, 127, 177, 188, 250, 21, 35, 190, 62, 246, 74, 191, 108, 240, 140, 61, 117, 216, 210, 62, 166, 176, 31, 62, 191, 99, 170, 62, 154, 167, 31, 62, 215, 141, 124, 61, 121, 113, 161, 61, 66, 251, 25, 61, 2, 169, 99, 189, 44, 255, 64, 60, 250, 222, 144, 62, 150, 107, 133, 62, 27, 98, 156, 191, 132, 160, 72, 62, 39, 50, 30, 62, 3, 60, 104, 62, 222, 42, 158, 189, 13, 232, 198, 189, 90, 175, 41, 190, 240, 120, 36, 63, 131, 104, 86, 190, 214, 48, 241, 61, 24, 159, 6, 62, 143, 81, 220, 62, 95, 166, 30, 63, 93, 133, 29, 62, 228, 201, 240, 189, 45, 154, 111, 190, 254, 254, 85, 61, 195, 4, 193, 190, 81, 208, 6, 62, 74, 53, 209, 62, 129, 73, 56, 191, 163, 102, 28, 62, 194, 231, 192, 190, 224, 184, 7, 62, 234, 121, 176, 62, 82, 58, 43, 62, 48, 241, 211, 61, 106, 75, 57, 62, 19, 70, 161, 187, 70, 84, 132, 190, 229, 229, 160, 61, 246, 72, 54, 189, 91, 19, 180, 190, 142, 158, 133, 62, 60, 203, 223, 60, 191, 8, 57, 62, 52, 7, 19, 62, 255, 163, 254, 190, 98, 160, 219, 190, 152, 9, 138, 62, 147, 165, 191, 189, 64, 249, 209, 189, 197, 131, 247, 61, 146, 112, 211, 62, 163, 240, 125, 188, 70, 149, 63, 190, 42, 48, 24, 62, 83, 195, 200, 189, 81, 186, 84, 62, 231, 42, 54, 62, 205, 114, 46, 62, 198, 188, 175, 61, 10, 216, 100, 190, 224, 139, 191, 190, 225, 36, 188, 190, 43, 189, 99, 190, 25, 172, 77, 61, 9, 208, 237, 190, 15, 168, 225, 189, 82, 42, 132, 62, 240, 182, 135, 62, 70, 188, 176, 61, 149, 253, 223, 188, 11, 130, 148, 62, 46, 198, 181, 189, 94, 8, 250, 190, 168, 162, 128, 61, 0, 196, 126, 190, 111, 134, 147, 189, 63, 99, 21, 62, 55, 141, 42, 62, 124, 125, 76, 190, 97, 201, 124, 188, 25, 239, 235, 58, 239, 227, 116, 189, 227, 134, 245, 190, 151, 25, 239, 190, 240, 188, 149, 62, 107, 50, 172, 190, 180, 79, 24, 62, 78, 234, 167, 190, 235, 16, 174, 190, 160, 21, 250, 190, 47, 80, 184, 62, 3, 251, 204, 61, 180, 72, 92, 62, 96, 57, 232, 190, 116, 175, 246, 61, 37, 85, 19, 189, 77, 196, 172, 190, 2, 174, 16, 62, 88, 169, 146, 62, 202, 194, 13, 191, 83, 132, 191, 190, 78, 10, 143, 190, 50, 147, 83, 61, 175, 59, 169, 190, 195, 218, 13, 62, 186, 12, 136, 190, 79, 87, 99, 189, 238, 94, 11, 190, 8, 163, 149, 190, 99, 51, 213, 189, 160, 233, 20, 59, 228, 218, 12, 61, 189, 189, 54, 191, 164, 33, 133, 190, 111, 4, 160, 189, 34, 97, 104, 189, 153, 129, 98, 62, 222, 190, 142, 189, 78, 104, 38, 191, 114, 248, 29, 62, 250, 214, 17, 190, 255, 212, 167, 61, 35, 188, 191, 62, 28, 153, 207, 190, 181, 112, 92, 61, 48, 10, 128, 191, 148, 187, 61, 190, 18, 10, 35, 190, 203, 2, 162, 190, 163, 19, 23, 62, 26, 6, 59, 190, 139, 194, 206, 62, 96, 213, 156, 190, 19, 242, 44, 62, 53, 66, 132, 61, 37, 29, 161, 60, 89, 18, 188, 190, 167, 5, 9, 62, 130, 57, 153, 61, 160, 253, 232, 188, 71, 196, 35, 191, 149, 134, 89, 190, 161, 171, 170, 189, 143, 103, 159, 61, 249, 132, 41, 190, 84, 14, 133, 188, 230, 57, 40, 60, 214, 53, 165, 61, 8, 92, 234, 61, 113, 69, 39, 190, 143, 77, 14, 62, 216, 224, 136, 190, 10, 179, 140, 60, 199, 126, 69, 62, 86, 17, 236, 189, 251, 210, 92, 62, 72, 4, 133, 62, 141, 22, 120, 189, 144, 252, 206, 189, 134, 98, 17, 190, 169, 200, 33, 190, 125, 211, 188, 60, 160, 75, 49, 62, 156, 237, 119, 60, 208, 142, 95, 190, 239, 59, 102, 62, 62, 148, 138, 190, 49, 21, 45, 62, 120, 150, 63, 191, 42, 64, 89, 190, 56, 150, 12, 190, 128, 154, 168, 190, 66, 81, 181, 190, 187, 165, 157, 190, 189, 89, 193, 61, 207, 48, 81, 189, 232, 139, 147, 58, 10, 110, 199, 190, 21, 180, 50, 190, 12, 126, 2, 61, 66, 235, 209, 189, 173, 56, 149, 61, 174, 22, 150, 59, 234, 205, 41, 62, 50, 201, 172, 61, 22, 116, 36, 190, 165, 138, 55, 190, 173, 58, 47, 62, 168, 28, 92, 62, 229, 65, 133, 62, 129, 140, 243, 190, 40, 152, 107, 190, 89, 209, 7, 61, 91, 206, 186, 61, 26, 167, 168, 189, 8, 168, 95, 61, 176, 185, 206, 189, 246, 200, 220, 189, 115, 151, 7, 62, 184, 166, 33, 62, 182, 194, 73, 62, 144, 92, 90, 59, 107, 77, 103, 188, 175, 226, 90, 62, 45, 92, 225, 189, 248, 221, 22, 191, 219, 231, 121, 189, 13, 175, 151, 189, 58, 208, 231, 189, 184, 27, 49, 62, 116, 187, 16, 191, 137, 128, 185, 190, 2, 237, 73, 190, 146, 86, 133, 62, 30, 144, 8, 189, 109, 199, 140, 189, 44, 214, 90, 62, 192, 247, 91, 62, 179, 112, 48, 190, 68, 225, 119, 190, 213, 83, 165, 189, 78, 134, 16, 62, 255, 216, 240, 189, 133, 148, 108, 190, 248, 238, 13, 60, 155, 22, 47, 62, 149, 56, 92, 190, 226, 158, 217, 62, 40, 214, 5, 61, 135, 28, 195, 189, 252, 80, 72, 190, 132, 41, 226, 190, 190, 87, 1, 59, 84, 33, 8, 62, 60, 135, 224, 190, 216, 227, 101, 61, 4, 236, 202, 62, 123, 46, 37, 62, 174, 179, 193, 190, 112, 37, 13, 190, 214, 59, 207, 188, 4, 245, 174, 61, 220, 48, 75, 60, 139, 54, 190, 190, 7, 231, 16, 61, 16, 123, 171, 190, 157, 166, 73, 62, 144, 236, 49, 59, 61, 114, 13, 62, 183, 211, 27, 190, 42, 201, 170, 191, 249, 19, 158, 189, 233, 201, 211, 62, 194, 98, 68, 61, 217, 199, 64, 190, 149, 115, 248, 189, 182, 51, 213, 190, 59, 253, 137, 189, 247, 201, 108, 61, 249, 60, 160, 62, 46, 172, 146, 61, 89, 95, 156, 61, 138, 138, 66, 190, 245, 198, 85, 61, 218, 120, 60, 190, 104, 251, 169, 189, 80, 241, 146, 190, 48, 159, 173, 188, 80, 240, 80, 61, 246, 207, 117, 190, 184, 221, 92, 191, 255, 221, 37, 188, 245, 4, 39, 62, 73, 71, 4, 190, 47, 4, 60, 191, 66, 140, 235, 189, 105, 67, 108, 62, 36, 151, 83, 190, 34, 154, 102, 62, 163, 95, 194, 189, 116, 35, 203, 60, 101, 254, 121, 190, 200, 214, 168, 59, 150, 108, 18, 189, 185, 87, 115, 62, 27, 176, 21, 63, 115, 97, 66, 190, 198, 255, 40, 190, 162, 136, 35, 190, 152, 47, 150, 60, 90, 229, 131, 189, 172, 212, 181, 62, 133, 47, 96, 62, 112, 216, 32, 190, 155, 232, 6, 62, 105, 95, 9, 62, 139, 8, 65, 190, 202, 191, 103, 189, 94, 58, 45, 190, 190, 163, 25, 190, 30, 252, 219, 62, 71, 81, 12, 190, 190, 91, 13, 191, 130, 236, 69, 189, 73, 190, 167, 62, 151, 49, 159, 61, 179, 220, 162, 190, 188, 215, 130, 189, 35, 94, 73, 189, 137, 175, 15, 189, 79, 175, 29, 62, 97, 53, 86, 190, 95, 67, 45, 190, 14, 121, 183, 187, 112, 198, 75, 191, 89, 183, 39, 62, 219, 25, 235, 62, 143, 189, 36, 62, 165, 117, 90, 62, 231, 203, 8, 191, 247, 164, 151, 189, 110, 17, 208, 189, 92, 162, 4, 62, 179, 222, 2, 62, 74, 91, 65, 188, 249, 131, 198, 189, 232, 228, 17, 61, 72, 48, 251, 189, 149, 181, 18, 62, 25, 222, 10, 62, 250, 1, 140, 189, 153, 28, 160, 61, 4, 109, 54, 191, 11, 241, 22, 191, 147, 203, 136, 62, 80, 71, 114, 189, 114, 251, 135, 190, 119, 235, 125, 189, 67, 196, 153, 62, 36, 7, 149, 62, 68, 190, 84, 190, 122, 160, 97, 62, 50, 19, 12, 190, 254, 91, 119, 62, 45, 120, 108, 62, 160, 69, 61, 62, 131, 4, 216, 189, 66, 212, 20, 190, 153, 42, 107, 61, 75, 213, 104, 188, 35, 20, 28, 62, 208, 162, 124, 60, 198, 49, 92, 190, 5, 255, 243, 60, 145, 209, 49, 191, 254, 124, 167, 189, 81, 163, 145, 189, 229, 39, 36, 61, 58, 248, 27, 61, 91, 22, 216, 189, 147, 87, 231, 190, 100, 20, 143, 61, 215, 118, 177, 61, 100, 150, 16, 190, 119, 109, 191, 62, 110, 5, 204, 189, 196, 45, 232, 61, 31, 30, 29, 62, 154, 161, 26, 62, 157, 43, 202, 61, 225, 50, 166, 189, 196, 43, 135, 62, 253, 213, 89, 62, 253, 161, 187, 188, 23, 186, 165, 61, 6, 149, 25, 189, 69, 229, 255, 188, 16, 0, 132, 189, 174, 138, 20, 190, 244, 144, 155, 62, 190, 231, 73, 62, 56, 92, 241, 190, 51, 79, 165, 189, 180, 142, 142, 61, 222, 139, 143, 191, 69, 26, 202, 60, 137, 249, 159, 62, 175, 204, 24, 191, 60, 232, 167, 188, 253, 146, 137, 190, 236, 3, 40, 190, 69, 36, 122, 62, 109, 203, 148, 190, 51, 204, 18, 191, 38, 170, 138, 190, 59, 226, 126, 61, 142, 102, 9, 190, 187, 100, 11, 190, 225, 126, 182, 190, 76, 109, 32, 190, 39, 119, 224, 189, 255, 174, 159, 190, 71, 108, 248, 189, 215, 89, 235, 189, 75, 109, 251, 61, 149, 240, 71, 190, 202, 196, 134, 190, 46, 153, 191, 187, 195, 117, 97, 190, 214, 44, 142, 190, 250, 146, 194, 62, 151, 20, 157, 62, 13, 68, 113, 62, 118, 52, 193, 62, 160, 187, 30, 190, 78, 179, 157, 60, 11, 34, 12, 189, 187, 35, 114, 189, 239, 142, 130, 61, 45, 128, 224, 62, 46, 83, 91, 189, 250, 149, 114, 62, 154, 24, 167, 61, 92, 105, 184, 189, 26, 13, 221, 61, 100, 54, 6, 62, 159, 96, 70, 190, 175, 9, 139, 189, 76, 137, 160, 190, 124, 185, 141, 191, 122, 228, 135, 190, 199, 86, 215, 61, 206, 17, 79, 60, 124, 2, 123, 61, 121, 168, 98, 190, 25, 111, 112, 188, 213, 172, 164, 188, 76, 233, 16, 62, 70, 75, 113, 62, 51, 178, 69, 62, 10, 168, 109, 62, 46, 5, 72, 62, 229, 73, 129, 190, 249, 186, 166, 189, 60, 254, 13, 62, 239, 140, 102, 190, 243, 72, 128, 62, 137, 93, 170, 62, 165, 102, 238, 60, 250, 176, 218, 189, 38, 212, 162, 61, 192, 173, 138, 61, 4, 188, 141, 190, 184, 251, 73, 189, 239, 108, 103, 189, 132, 73, 145, 190, 122, 19, 161, 62, 13, 193, 99, 62, 54, 79, 171, 61, 157, 124, 60, 62, 211, 128, 76, 191, 224, 120, 85, 191, 187, 142, 216, 62, 66, 51, 24, 62, 92, 184, 32, 189, 22, 161, 66, 62, 178, 68, 182, 62, 239, 18, 111, 62, 92, 167, 141, 61, 33, 106, 19, 62, 73, 214, 175, 190, 236, 50, 48, 62, 88, 176, 17, 62, 66, 236, 64, 62, 43, 174, 11, 189, 56, 11, 230, 190, 235, 182, 82, 190, 100, 115, 161, 190, 142, 63, 130, 189, 11, 88, 90, 62, 146, 193, 200, 190, 112, 198, 48, 62, 151, 58, 23, 61, 140, 153, 188, 62, 52, 51, 6, 191, 193, 32, 236, 61, 2, 175, 40, 62, 248, 137, 7, 190, 132, 192, 152, 190, 181, 173, 75, 61, 142, 110, 135, 190, 115, 157, 82, 62, 5, 126, 157, 62, 29, 242, 161, 190, 226, 168, 198, 190, 246, 230, 48, 62, 158, 67, 215, 61, 88, 0, 38, 62, 231, 187, 246, 190, 112, 123, 249, 61, 187, 230, 13, 189, 59, 73, 244, 189, 242, 82, 241, 62, 27, 212, 135, 190, 16, 148, 197, 189, 235, 188, 46, 62, 23, 231, 234, 190, 198, 119, 186, 189, 160, 170, 156, 60, 28, 7, 31, 190, 126, 196, 178, 189, 216, 37, 185, 61, 82, 28, 153, 190, 176, 218, 99, 61, 28, 29, 9, 189, 40, 224, 45, 62, 92, 5, 2, 61, 112, 18, 223, 188, 122, 104, 103, 62, 75, 253, 112, 61, 129, 192, 214, 189, 56, 125, 137, 61, 252, 17, 67, 190, 110, 196, 64, 189, 132, 188, 7, 62, 203, 203, 118, 189, 211, 241, 6, 191, 88, 137, 154, 189, 201, 61, 7, 62, 142, 248, 245, 61, 227, 158, 75, 191, 15, 122, 63, 189, 213, 90, 25, 62, 156, 104, 14, 190, 115, 70, 191, 62, 220, 194, 85, 189, 235, 211, 8, 190, 72, 189, 107, 189, 106, 152, 145, 191, 127, 179, 49, 189, 38, 110, 127, 62, 168, 100, 0, 63, 163, 193, 30, 188, 180, 106, 46, 190, 198, 178, 73, 190, 208, 227, 8, 188, 3, 198, 85, 61, 91, 219, 35, 61, 54, 163, 102, 62, 233, 176, 85, 190, 120, 116, 223, 189, 40, 38, 97, 61, 189, 34, 103, 190, 107, 84, 0, 190, 73, 36, 62, 190, 172, 3, 156, 188, 253, 181, 146, 62, 213, 192, 214, 60, 10, 36, 48, 191, 247, 229, 73, 61, 95, 182, 5, 61, 60, 45, 82, 189, 119, 188, 37, 191, 22, 237, 210, 189, 51, 194, 31, 62, 151, 217, 76, 190, 180, 15, 100, 190, 62, 238, 23, 189, 211, 237, 194, 190, 156, 100, 15, 190, 94, 112, 252, 189, 237, 19, 253, 61, 37, 233, 237, 61, 177, 222, 30, 63, 48, 253, 180, 190, 37, 152, 165, 62, 111, 186, 62, 191, 62, 144, 78, 61, 197, 79, 34, 62, 206, 221, 193, 62, 80, 163, 164, 62, 18, 128, 201, 190, 54, 123, 165, 62, 180, 156, 136, 62, 45, 3, 24, 190, 19, 189, 168, 190, 65, 220, 144, 190, 127, 97, 116, 62, 36, 248, 208, 62, 224, 169, 54, 62, 108, 122, 60, 190, 11, 63, 150, 190, 140, 145, 142, 62, 202, 158, 6, 62, 131, 187, 168, 190, 37, 84, 173, 190, 204, 5, 250, 61, 239, 180, 125, 189, 180, 203, 103, 61, 142, 132, 5, 191, 0, 235, 3, 190, 56, 224, 97, 190, 79, 222, 183, 61, 199, 95, 184, 62, 168, 105, 200, 62, 207, 232, 95, 62, 230, 224, 133, 190, 40, 103, 121, 60, 59, 82, 238, 190, 21, 123, 237, 189, 141, 237, 45, 61, 215, 43, 178, 62, 159, 227, 14, 61, 16, 206, 76, 62, 50, 126, 1, 188, 143, 24, 17, 190, 208, 98, 11, 191, 86, 202, 172, 61, 6, 250, 49, 190, 94, 51, 6, 189, 148, 32, 6, 62, 23, 75, 7, 190, 0, 188, 194, 190, 86, 72, 109, 189, 54, 160, 77, 62, 64, 240, 97, 62, 212, 101, 5, 189, 126, 49, 50, 190, 22, 208, 138, 62, 23, 223, 241, 190, 42, 243, 244, 61, 87, 97, 165, 190, 65, 115, 10, 191, 69, 205, 7, 191, 194, 208, 30, 62, 246, 17, 38, 62, 126, 179, 92, 62, 35, 58, 191, 190, 223, 223, 129, 60, 217, 138, 45, 190, 215, 41, 16, 190, 56, 207, 86, 188, 114, 40, 5, 62, 162, 103, 85, 61, 209, 200, 86, 60, 242, 129, 49, 61, 96, 201, 182, 189, 180, 247, 60, 62, 252, 114, 211, 189, 33, 89, 3, 62, 46, 210, 142, 189, 62, 40, 78, 61, 188, 26, 168, 189, 97, 174, 218, 62, 143, 237, 212, 190, 106, 137, 13, 190, 169, 167, 177, 61, 114, 244, 0, 62, 102, 77, 227, 188, 245, 59, 25, 190, 126, 94, 202, 189, 46, 135, 254, 61, 207, 108, 47, 62, 216, 15, 133, 189, 162, 53, 232, 188, 168, 225, 214, 61, 161, 27, 218, 61, 114, 98, 46, 62, 32, 61, 189, 61, 177, 177, 206, 62, 225, 195, 2, 61, 241, 111, 47, 61, 130, 24, 48, 62, 180, 90, 10, 62, 7, 58, 41, 62, 244, 89, 12, 62, 43, 80, 204, 189, 253, 120, 83, 62, 36, 46, 108, 57, 233, 148, 142, 189, 160, 178, 166, 61, 22, 187, 156, 61, 77, 120, 170, 189, 109, 93, 168, 61, 26, 133, 107, 190, 211, 226, 156, 191, 100, 86, 178, 61, 63, 51, 208, 61, 150, 231, 161, 60, 252, 43, 39, 62, 190, 155, 73, 190, 138, 148, 21, 61, 219, 39, 13, 190, 161, 77, 20, 62, 77, 175, 78, 189, 170, 140, 121, 60, 108, 204, 189, 61, 191, 181, 4, 62, 103, 2, 153, 188, 83, 51, 131, 189, 152, 160, 156, 187, 236, 68, 35, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 42, 242, 187, 244, 44, 173, 62, 233, 71, 129, 189, 45, 150, 138, 189, 90, 190, 112, 62, 58, 54, 25, 62, 121, 177, 79, 61, 248, 252, 39, 190, 32, 171, 152, 62, 246, 171, 155, 61, 169, 212, 59, 187, 31, 236, 0, 62, 246, 253, 1, 61, 1, 232, 56, 62, 58, 199, 193, 61, 238, 67, 148, 61, 255, 30, 169, 62, 20, 228, 131, 190, 28, 172, 95, 62, 131, 145, 160, 61, 235, 212, 170, 187, 242, 84, 3, 189, 205, 128, 185, 61, 55, 70, 195, 62, 111, 31, 26, 61, 209, 124, 162, 187, 14, 20, 114, 62, 57, 88, 234, 61, 255, 42, 135, 62, 206, 45, 18, 62, 134, 227, 102, 62, 77, 228, 222, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 60, 2, 190, 47, 202, 197, 62, 20, 156, 234, 62, 159, 61, 6, 191, 91, 123, 14, 191, 10, 57, 47, 191, 218, 132, 164, 62, 205, 17, 63, 191, 127, 239, 34, 191, 109, 43, 42, 63, 109, 202, 131, 190, 147, 202, 155, 190, 165, 223, 57, 191, 141, 55, 95, 191, 146, 48, 152, 189, 224, 186, 28, 190, 118, 159, 115, 61, 169, 113, 198, 62, 58, 171, 32, 63, 200, 100, 202, 62, 74, 212, 194, 190, 187, 23, 159, 190, 204, 81, 102, 63, 232, 101, 199, 189, 84, 71, 9, 191, 130, 234, 235, 62, 183, 64, 243, 62, 42, 82, 173, 62, 161, 96, 68, 63, 117, 167, 86, 191, 225, 235, 141, 61, 78, 61, 49, 189, 241, 167, 130, 186, 99, 206, 41, 188, 120, 58, 11, 188, 224, 72, 117, 188, 131, 38, 187, 59, 121, 38, 154, 61, 189, 28, 47, 62, 97, 222, 179, 60, 190, 113, 178, 190, 136, 19, 146, 62, 229, 84, 161, 188, 39, 205, 104, 62, 57, 32, 108, 60, 217, 119, 226, 189, 19, 9, 203, 190, 44, 194, 160, 61, 25, 33, 149, 190, 68, 150, 134, 62, 153, 118, 49, 62, 255, 12, 72, 61, 92, 10, 156, 189, 49, 239, 179, 61, 107, 146, 213, 60, 38, 139, 218, 190, 58, 71, 114, 62, 21, 104, 223, 59, 250, 244, 69, 189, 27, 12, 228, 189, 41, 86, 205, 188, 172, 68, 166, 61, 215, 62, 49, 190, 21, 237, 25, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 136, 248, 61, 113, 58, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {194, 68, 175, 63, 78, 179, 143, 63, 243, 177, 213, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {34, 241, 120, 192, 50, 9, 53, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0051/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}