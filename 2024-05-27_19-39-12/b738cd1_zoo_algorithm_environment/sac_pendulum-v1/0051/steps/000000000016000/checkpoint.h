// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 63, 69, 62, 78, 226, 239, 189, 157, 134, 251, 62, 34, 120, 143, 190, 37, 109, 146, 191, 33, 227, 205, 189, 1, 235, 40, 191, 30, 249, 232, 189, 82, 27, 84, 191, 145, 92, 141, 62, 142, 136, 129, 62, 186, 232, 146, 59, 186, 150, 33, 191, 205, 72, 135, 62, 78, 1, 107, 189, 202, 128, 58, 63, 27, 150, 181, 61, 102, 224, 105, 189, 86, 252, 240, 62, 18, 74, 102, 62, 138, 43, 47, 191, 80, 15, 166, 62, 248, 54, 231, 190, 189, 153, 73, 62, 91, 44, 13, 61, 211, 96, 138, 191, 16, 88, 118, 190, 112, 251, 101, 62, 88, 112, 147, 63, 171, 251, 9, 63, 141, 46, 49, 191, 169, 246, 140, 190, 144, 26, 15, 191, 198, 93, 245, 61, 119, 10, 99, 62, 28, 67, 40, 191, 144, 218, 3, 63, 255, 135, 116, 63, 218, 72, 140, 62, 127, 81, 87, 190, 126, 229, 216, 62, 75, 251, 167, 61, 21, 6, 57, 63, 199, 248, 119, 191, 195, 195, 207, 190, 168, 88, 59, 62, 99, 196, 144, 63, 48, 86, 143, 62, 71, 205, 22, 63, 154, 196, 149, 63, 60, 169, 120, 62, 247, 7, 203, 61, 103, 39, 65, 191, 23, 191, 248, 62, 6, 141, 63, 62, 182, 70, 75, 189, 4, 90, 253, 190, 172, 156, 161, 61, 92, 50, 74, 191, 2, 66, 109, 190, 119, 229, 185, 62, 24, 190, 176, 63, 116, 23, 33, 62, 34, 138, 161, 62, 130, 216, 226, 190, 20, 13, 186, 62, 128, 95, 161, 190, 79, 3, 152, 62, 125, 71, 66, 63, 231, 44, 28, 63, 209, 49, 12, 63, 164, 249, 6, 63, 157, 55, 21, 63, 170, 190, 64, 191, 162, 94, 7, 190, 27, 148, 2, 191, 59, 5, 41, 63, 146, 179, 211, 190, 134, 202, 47, 63, 155, 87, 110, 63, 39, 252, 70, 62, 161, 66, 101, 63, 250, 65, 133, 63, 246, 20, 184, 62, 68, 143, 149, 190, 65, 120, 165, 63, 139, 122, 135, 62, 239, 205, 34, 191, 33, 70, 33, 62, 116, 191, 29, 63, 170, 154, 238, 187, 63, 234, 107, 191, 162, 97, 161, 62, 65, 23, 147, 189, 35, 136, 173, 63, 126, 135, 149, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 249, 95, 191, 9, 89, 185, 61, 136, 105, 63, 189, 232, 47, 208, 190, 75, 249, 27, 63, 43, 56, 156, 62, 226, 132, 32, 191, 250, 248, 83, 190, 169, 4, 203, 62, 200, 10, 100, 62, 175, 138, 93, 62, 54, 92, 7, 63, 52, 249, 34, 190, 82, 124, 178, 190, 230, 186, 7, 191, 150, 75, 248, 190, 21, 206, 127, 189, 16, 96, 222, 190, 152, 171, 203, 189, 0, 200, 186, 62, 184, 66, 239, 190, 230, 10, 41, 191, 220, 158, 113, 62, 239, 127, 39, 190, 56, 251, 78, 62, 158, 144, 96, 62, 247, 202, 40, 62, 243, 115, 240, 61, 72, 66, 22, 63, 214, 180, 3, 191, 246, 63, 186, 61, 51, 88, 71, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 207, 52, 61, 25, 146, 155, 189, 200, 70, 4, 62, 13, 254, 122, 61, 183, 204, 29, 188, 213, 230, 26, 186, 197, 107, 112, 190, 177, 76, 35, 62, 23, 23, 139, 61, 211, 135, 113, 190, 82, 84, 20, 62, 128, 77, 218, 61, 138, 8, 35, 61, 9, 16, 96, 62, 25, 167, 187, 190, 227, 213, 51, 191, 243, 210, 237, 61, 0, 168, 76, 188, 236, 168, 204, 189, 151, 117, 194, 189, 218, 97, 248, 62, 238, 7, 252, 61, 108, 193, 212, 187, 33, 213, 8, 185, 50, 163, 11, 190, 14, 78, 201, 61, 104, 3, 116, 62, 215, 215, 21, 62, 64, 179, 2, 62, 239, 31, 2, 191, 60, 108, 206, 188, 113, 187, 32, 190, 211, 250, 128, 190, 171, 38, 142, 62, 149, 138, 43, 190, 101, 94, 8, 62, 2, 106, 58, 62, 139, 237, 39, 60, 65, 16, 205, 190, 67, 110, 8, 190, 97, 238, 148, 62, 148, 84, 140, 189, 56, 7, 15, 62, 132, 243, 253, 189, 112, 220, 165, 190, 176, 218, 135, 61, 69, 150, 134, 190, 164, 168, 63, 190, 212, 177, 58, 191, 26, 34, 76, 189, 232, 239, 137, 190, 132, 123, 252, 61, 25, 246, 53, 191, 30, 227, 100, 190, 0, 146, 89, 62, 0, 176, 125, 190, 25, 124, 233, 59, 14, 17, 88, 190, 161, 203, 95, 190, 183, 124, 103, 187, 131, 113, 152, 189, 67, 194, 158, 61, 253, 207, 50, 62, 73, 233, 191, 62, 7, 109, 85, 190, 130, 198, 13, 191, 212, 112, 248, 60, 71, 213, 9, 62, 107, 181, 128, 62, 115, 173, 82, 61, 156, 164, 106, 187, 34, 189, 74, 189, 171, 82, 133, 190, 91, 173, 136, 61, 193, 129, 74, 190, 31, 223, 151, 61, 236, 150, 78, 190, 96, 248, 142, 189, 134, 72, 201, 62, 81, 200, 103, 61, 49, 249, 90, 191, 3, 133, 50, 61, 155, 181, 24, 62, 200, 74, 145, 190, 205, 136, 128, 191, 117, 136, 19, 61, 93, 140, 95, 62, 191, 56, 65, 190, 136, 34, 147, 62, 78, 109, 235, 189, 47, 209, 1, 191, 228, 42, 192, 190, 26, 67, 114, 187, 36, 101, 0, 60, 115, 108, 211, 61, 130, 102, 215, 62, 196, 254, 20, 61, 5, 77, 140, 190, 26, 174, 50, 190, 96, 177, 174, 189, 46, 139, 195, 189, 9, 19, 168, 61, 9, 36, 154, 188, 9, 75, 226, 61, 39, 80, 153, 190, 133, 241, 15, 190, 89, 57, 241, 189, 228, 58, 28, 62, 126, 7, 44, 62, 117, 255, 208, 189, 175, 7, 70, 191, 21, 219, 63, 190, 66, 51, 212, 62, 180, 109, 93, 62, 177, 191, 63, 62, 249, 176, 221, 61, 119, 66, 182, 62, 220, 197, 178, 61, 90, 79, 150, 190, 17, 192, 159, 189, 121, 50, 34, 190, 161, 205, 132, 62, 254, 82, 136, 62, 49, 247, 118, 62, 107, 5, 80, 190, 194, 144, 22, 190, 199, 77, 6, 62, 151, 234, 116, 62, 119, 64, 177, 61, 122, 191, 52, 62, 26, 168, 9, 62, 11, 8, 24, 61, 142, 236, 33, 62, 60, 246, 134, 59, 139, 75, 96, 190, 174, 45, 10, 61, 10, 230, 25, 190, 31, 171, 119, 190, 138, 238, 3, 62, 99, 17, 221, 61, 210, 96, 118, 62, 184, 58, 142, 62, 122, 178, 36, 191, 251, 132, 133, 191, 87, 164, 213, 62, 75, 132, 172, 62, 6, 85, 128, 189, 33, 182, 194, 188, 243, 169, 225, 62, 125, 102, 17, 63, 19, 122, 215, 189, 131, 132, 9, 62, 79, 60, 55, 190, 103, 108, 45, 62, 59, 238, 115, 62, 77, 95, 88, 61, 146, 133, 29, 190, 97, 153, 142, 190, 21, 248, 228, 189, 211, 85, 142, 190, 169, 121, 160, 188, 28, 66, 143, 62, 5, 191, 176, 61, 174, 158, 76, 190, 166, 113, 186, 61, 232, 22, 202, 61, 240, 151, 155, 190, 206, 202, 65, 190, 235, 72, 91, 62, 252, 51, 88, 190, 249, 12, 160, 62, 135, 79, 219, 188, 59, 11, 5, 62, 125, 49, 31, 62, 43, 151, 36, 191, 246, 172, 93, 191, 27, 122, 224, 62, 8, 6, 1, 190, 196, 74, 211, 188, 218, 220, 52, 62, 239, 124, 4, 63, 126, 242, 26, 63, 243, 146, 90, 190, 238, 39, 134, 59, 44, 24, 145, 190, 105, 85, 169, 62, 128, 202, 1, 62, 206, 110, 163, 62, 185, 201, 133, 60, 240, 7, 95, 191, 235, 179, 181, 190, 167, 92, 144, 190, 164, 255, 26, 190, 42, 220, 17, 62, 184, 188, 244, 190, 220, 37, 35, 186, 167, 189, 76, 61, 18, 234, 157, 62, 114, 195, 221, 189, 5, 178, 177, 188, 245, 67, 191, 189, 168, 88, 84, 189, 127, 147, 45, 190, 230, 229, 26, 190, 18, 142, 34, 191, 206, 138, 94, 190, 6, 71, 100, 62, 69, 220, 79, 190, 43, 42, 42, 191, 50, 250, 214, 189, 8, 182, 92, 61, 45, 101, 108, 62, 183, 244, 143, 191, 141, 2, 151, 189, 132, 182, 48, 62, 223, 96, 16, 190, 84, 208, 61, 62, 57, 48, 85, 62, 40, 232, 0, 190, 151, 120, 107, 190, 208, 74, 65, 188, 66, 6, 115, 61, 164, 21, 125, 62, 96, 26, 16, 63, 81, 240, 219, 190, 67, 119, 93, 62, 161, 106, 194, 189, 242, 125, 34, 189, 62, 95, 14, 191, 118, 195, 223, 62, 246, 249, 212, 62, 24, 81, 131, 62, 148, 56, 196, 62, 43, 91, 170, 189, 71, 79, 250, 190, 144, 61, 171, 61, 179, 83, 116, 190, 231, 202, 160, 190, 142, 98, 197, 62, 85, 229, 27, 62, 198, 43, 39, 191, 70, 139, 34, 61, 138, 187, 59, 62, 53, 18, 65, 61, 151, 124, 188, 190, 18, 216, 92, 190, 194, 36, 87, 189, 117, 178, 46, 191, 131, 133, 13, 63, 172, 178, 205, 190, 23, 174, 188, 191, 2, 154, 162, 191, 36, 198, 213, 188, 217, 29, 198, 61, 177, 18, 193, 61, 68, 160, 68, 189, 166, 204, 125, 190, 179, 252, 80, 190, 154, 174, 28, 190, 42, 52, 246, 187, 97, 74, 98, 61, 17, 78, 68, 61, 150, 157, 142, 191, 214, 56, 129, 190, 171, 187, 55, 62, 191, 237, 227, 190, 222, 67, 39, 61, 245, 1, 107, 190, 162, 143, 40, 61, 205, 90, 152, 188, 62, 140, 185, 190, 67, 91, 62, 190, 255, 222, 141, 61, 21, 129, 157, 190, 253, 143, 128, 190, 244, 153, 8, 189, 19, 129, 82, 190, 150, 46, 115, 61, 54, 14, 82, 189, 182, 200, 30, 62, 64, 192, 52, 189, 34, 128, 214, 61, 38, 229, 49, 61, 176, 3, 142, 62, 167, 22, 138, 61, 182, 56, 114, 191, 20, 100, 118, 190, 197, 130, 180, 191, 225, 48, 219, 60, 97, 93, 134, 190, 161, 74, 138, 190, 40, 94, 232, 189, 243, 190, 29, 190, 224, 171, 54, 62, 61, 18, 200, 62, 68, 201, 234, 189, 121, 123, 15, 190, 254, 221, 139, 190, 87, 195, 207, 189, 10, 55, 123, 188, 67, 132, 237, 190, 255, 53, 165, 61, 61, 64, 32, 63, 195, 147, 239, 189, 29, 113, 63, 191, 199, 59, 37, 62, 107, 232, 181, 62, 18, 66, 48, 189, 196, 236, 147, 190, 180, 72, 99, 61, 70, 29, 76, 61, 181, 145, 198, 188, 144, 146, 202, 61, 17, 41, 144, 189, 12, 76, 210, 188, 237, 22, 225, 188, 217, 108, 139, 191, 99, 197, 202, 188, 133, 184, 227, 62, 117, 145, 87, 62, 85, 104, 163, 62, 210, 134, 109, 62, 113, 81, 71, 61, 121, 113, 161, 61, 197, 205, 204, 60, 129, 226, 123, 188, 50, 6, 120, 188, 174, 19, 15, 63, 60, 24, 146, 62, 189, 96, 238, 191, 11, 217, 52, 62, 84, 242, 32, 62, 92, 98, 84, 62, 95, 120, 2, 190, 159, 206, 36, 190, 90, 31, 140, 190, 15, 3, 41, 63, 46, 12, 132, 189, 229, 79, 226, 61, 197, 241, 27, 62, 172, 250, 57, 63, 86, 236, 65, 63, 239, 183, 102, 61, 90, 46, 28, 191, 111, 122, 49, 190, 129, 185, 103, 61, 8, 69, 195, 190, 196, 138, 215, 189, 177, 216, 246, 62, 134, 96, 84, 191, 173, 165, 75, 62, 231, 19, 188, 190, 146, 114, 187, 61, 69, 7, 211, 62, 161, 59, 56, 62, 48, 241, 211, 61, 138, 60, 63, 62, 0, 245, 23, 60, 51, 157, 141, 190, 79, 226, 93, 60, 230, 186, 163, 188, 158, 0, 200, 190, 64, 215, 139, 62, 157, 98, 41, 61, 241, 6, 19, 62, 121, 203, 175, 61, 27, 217, 4, 191, 6, 85, 40, 191, 138, 143, 129, 62, 116, 137, 220, 190, 128, 121, 156, 189, 25, 86, 12, 62, 134, 181, 44, 63, 157, 226, 57, 188, 141, 72, 248, 190, 124, 21, 229, 61, 161, 128, 161, 189, 185, 109, 91, 62, 102, 77, 72, 62, 206, 183, 37, 62, 142, 77, 118, 61, 210, 164, 231, 190, 166, 190, 229, 190, 245, 41, 198, 190, 81, 79, 179, 190, 17, 186, 240, 60, 251, 246, 58, 191, 15, 168, 225, 189, 137, 44, 56, 61, 94, 56, 196, 62, 138, 207, 9, 60, 54, 208, 42, 61, 4, 165, 161, 62, 200, 194, 36, 189, 121, 50, 91, 191, 69, 88, 81, 60, 255, 115, 244, 189, 12, 225, 177, 62, 224, 117, 123, 62, 131, 194, 143, 62, 36, 128, 40, 189, 195, 7, 208, 188, 191, 137, 49, 189, 255, 237, 143, 188, 167, 47, 181, 190, 254, 203, 16, 191, 193, 118, 149, 62, 62, 10, 6, 191, 169, 197, 137, 62, 194, 78, 216, 190, 104, 160, 75, 191, 70, 12, 101, 191, 58, 222, 7, 63, 12, 14, 234, 61, 136, 60, 115, 62, 128, 80, 172, 190, 98, 84, 248, 61, 20, 188, 198, 188, 218, 94, 165, 190, 2, 174, 16, 62, 132, 217, 148, 62, 85, 251, 73, 191, 83, 132, 191, 190, 191, 117, 177, 190, 154, 142, 75, 61, 94, 107, 141, 190, 12, 84, 213, 61, 224, 65, 138, 190, 147, 143, 168, 57, 177, 254, 64, 189, 8, 163, 149, 190, 147, 138, 133, 189, 229, 160, 141, 61, 200, 209, 238, 60, 32, 11, 55, 191, 156, 55, 128, 190, 254, 46, 94, 188, 17, 111, 188, 189, 122, 128, 105, 62, 212, 170, 152, 188, 107, 154, 28, 191, 103, 56, 196, 61, 155, 16, 176, 189, 53, 108, 10, 62, 182, 111, 192, 62, 78, 203, 191, 190, 244, 150, 243, 60, 234, 62, 144, 191, 97, 254, 65, 190, 193, 53, 179, 189, 136, 164, 166, 190, 163, 19, 23, 62, 188, 31, 179, 190, 199, 163, 179, 62, 154, 118, 20, 191, 101, 89, 129, 62, 160, 79, 205, 61, 197, 166, 103, 188, 107, 118, 193, 190, 136, 31, 71, 61, 255, 62, 39, 61, 140, 16, 66, 189, 158, 152, 43, 191, 250, 106, 121, 190, 17, 195, 1, 190, 131, 236, 174, 61, 28, 55, 177, 190, 168, 65, 96, 188, 21, 139, 136, 59, 38, 78, 207, 61, 77, 43, 210, 61, 182, 25, 58, 190, 206, 211, 26, 62, 232, 158, 151, 190, 102, 224, 234, 188, 126, 173, 34, 62, 160, 34, 59, 190, 254, 187, 74, 62, 210, 183, 168, 62, 14, 132, 138, 190, 144, 171, 130, 189, 13, 204, 56, 190, 91, 24, 117, 190, 125, 211, 188, 60, 118, 143, 113, 62, 94, 21, 215, 189, 166, 247, 148, 190, 215, 71, 131, 62, 162, 146, 219, 190, 94, 150, 72, 62, 100, 154, 52, 191, 204, 73, 32, 190, 160, 249, 16, 190, 11, 159, 6, 191, 66, 81, 181, 190, 90, 206, 9, 191, 13, 213, 135, 61, 226, 234, 165, 188, 105, 117, 154, 189, 156, 142, 49, 191, 131, 134, 182, 190, 80, 239, 144, 61, 245, 79, 153, 189, 252, 181, 186, 61, 224, 121, 45, 189, 115, 253, 113, 62, 255, 106, 175, 61, 93, 61, 17, 190, 12, 12, 57, 190, 94, 179, 73, 62, 41, 41, 129, 62, 180, 0, 145, 62, 57, 148, 220, 190, 251, 245, 147, 190, 92, 183, 23, 61, 91, 206, 186, 61, 133, 70, 163, 189, 229, 85, 236, 60, 56, 31, 122, 189, 43, 185, 134, 189, 213, 255, 189, 61, 170, 140, 242, 61, 151, 201, 78, 62, 60, 226, 172, 59, 56, 187, 84, 189, 16, 114, 134, 62, 2, 69, 7, 190, 90, 33, 33, 191, 250, 117, 225, 189, 32, 65, 161, 189, 133, 109, 2, 190, 112, 40, 24, 62, 180, 245, 50, 191, 75, 240, 166, 190, 91, 121, 67, 190, 173, 195, 134, 62, 104, 36, 147, 189, 201, 103, 103, 189, 52, 223, 82, 62, 235, 159, 78, 62, 98, 5, 61, 190, 99, 44, 208, 190, 130, 140, 84, 189, 67, 83, 66, 62, 245, 90, 143, 188, 215, 147, 6, 191, 8, 208, 247, 60, 155, 22, 47, 62, 108, 8, 133, 190, 140, 232, 235, 62, 213, 193, 231, 61, 115, 182, 88, 190, 122, 117, 165, 190, 205, 218, 191, 190, 6, 107, 80, 59, 143, 96, 24, 62, 226, 145, 6, 191, 43, 205, 208, 61, 67, 236, 223, 62, 123, 46, 37, 62, 104, 172, 222, 190, 78, 163, 34, 190, 119, 169, 125, 59, 25, 24, 145, 59, 55, 163, 252, 189, 87, 78, 126, 190, 74, 211, 62, 62, 144, 73, 249, 189, 233, 85, 169, 61, 156, 103, 16, 61, 139, 178, 44, 62, 55, 110, 199, 60, 17, 179, 192, 191, 247, 72, 3, 190, 134, 202, 153, 62, 219, 8, 225, 61, 51, 137, 68, 190, 209, 206, 138, 190, 121, 183, 251, 190, 59, 253, 137, 189, 133, 161, 65, 62, 156, 14, 177, 62, 42, 211, 145, 61, 175, 242, 52, 61, 198, 129, 149, 190, 113, 200, 60, 60, 194, 181, 94, 190, 135, 217, 205, 189, 245, 88, 211, 190, 60, 34, 214, 189, 220, 55, 143, 189, 214, 93, 192, 190, 133, 230, 120, 191, 176, 78, 25, 188, 117, 165, 245, 61, 16, 85, 96, 190, 129, 148, 129, 191, 171, 236, 178, 189, 211, 147, 112, 62, 210, 88, 62, 190, 133, 167, 63, 62, 160, 180, 168, 189, 198, 81, 236, 61, 76, 45, 8, 190, 33, 87, 34, 188, 139, 58, 0, 190, 154, 67, 43, 62, 54, 150, 21, 63, 183, 89, 90, 190, 42, 7, 81, 190, 33, 164, 19, 190, 152, 47, 150, 60, 140, 67, 182, 189, 229, 252, 187, 62, 185, 23, 143, 62, 92, 190, 32, 190, 239, 164, 225, 61, 223, 253, 247, 61, 16, 68, 56, 190, 224, 53, 24, 189, 52, 43, 36, 190, 100, 64, 217, 189, 152, 191, 231, 62, 23, 140, 14, 190, 225, 13, 12, 191, 162, 14, 238, 188, 248, 105, 178, 62, 232, 134, 153, 61, 99, 113, 27, 191, 89, 245, 143, 189, 183, 156, 35, 189, 30, 239, 97, 59, 239, 18, 24, 62, 185, 252, 79, 190, 104, 191, 18, 190, 18, 229, 27, 61, 20, 216, 98, 191, 4, 83, 195, 61, 21, 222, 231, 62, 225, 88, 77, 62, 62, 213, 59, 62, 219, 147, 235, 190, 173, 195, 177, 189, 110, 17, 208, 189, 194, 96, 26, 62, 127, 249, 19, 62, 3, 246, 72, 189, 254, 247, 193, 189, 1, 101, 80, 61, 110, 4, 33, 190, 35, 169, 11, 62, 123, 35, 6, 62, 91, 25, 241, 189, 236, 49, 102, 187, 142, 54, 78, 191, 60, 53, 79, 191, 237, 240, 115, 62, 54, 235, 161, 189, 50, 228, 141, 190, 91, 39, 115, 189, 163, 89, 228, 62, 180, 52, 161, 62, 41, 34, 148, 190, 139, 20, 65, 62, 3, 196, 250, 189, 110, 184, 121, 62, 46, 19, 129, 62, 68, 105, 56, 62, 107, 121, 227, 189, 60, 204, 119, 190, 11, 129, 1, 62, 113, 112, 19, 188, 221, 226, 52, 62, 72, 35, 187, 188, 63, 133, 240, 190, 5, 255, 243, 60, 89, 98, 111, 191, 134, 58, 45, 189, 69, 188, 203, 189, 89, 62, 63, 61, 112, 111, 143, 61, 181, 78, 140, 189, 76, 232, 69, 191, 231, 115, 204, 61, 72, 192, 219, 61, 161, 120, 46, 190, 183, 34, 246, 62, 94, 114, 13, 190, 100, 65, 13, 62, 252, 31, 33, 62, 78, 152, 114, 62, 241, 68, 243, 61, 212, 227, 194, 189, 87, 15, 146, 62, 89, 201, 98, 62, 129, 18, 249, 188, 2, 131, 2, 62, 152, 14, 35, 190, 177, 17, 204, 188, 145, 249, 129, 189, 143, 115, 25, 190, 231, 167, 175, 62, 195, 80, 115, 62, 247, 255, 79, 191, 236, 136, 5, 190, 114, 61, 122, 61, 18, 248, 76, 191, 69, 26, 202, 60, 193, 137, 31, 63, 220, 166, 90, 191, 73, 72, 92, 189, 83, 244, 176, 190, 143, 107, 129, 189, 230, 132, 124, 62, 194, 59, 158, 60, 192, 168, 218, 190, 90, 53, 102, 190, 214, 99, 57, 62, 133, 249, 13, 190, 134, 58, 237, 188, 80, 216, 150, 190, 33, 174, 84, 190, 71, 211, 72, 190, 187, 64, 5, 190, 211, 170, 43, 189, 157, 60, 60, 190, 149, 117, 1, 62, 226, 63, 111, 190, 54, 48, 203, 190, 63, 9, 106, 62, 219, 202, 82, 190, 194, 5, 155, 190, 210, 114, 8, 63, 196, 69, 157, 62, 6, 202, 58, 62, 132, 46, 14, 63, 187, 89, 20, 190, 247, 8, 252, 60, 113, 15, 12, 189, 187, 35, 114, 189, 241, 19, 146, 61, 51, 230, 251, 62, 153, 158, 2, 189, 39, 14, 184, 62, 0, 36, 210, 61, 240, 44, 177, 189, 71, 182, 215, 61, 211, 76, 33, 62, 145, 157, 61, 190, 98, 128, 9, 190, 209, 37, 175, 190, 187, 237, 148, 191, 21, 52, 139, 190, 138, 25, 8, 62, 210, 73, 151, 60, 211, 131, 163, 61, 57, 124, 135, 61, 58, 42, 197, 60, 88, 209, 149, 188, 62, 52, 47, 62, 220, 164, 140, 62, 39, 140, 92, 62, 0, 180, 148, 62, 184, 106, 86, 62, 6, 232, 96, 190, 77, 51, 220, 189, 64, 227, 115, 62, 203, 216, 42, 190, 91, 138, 165, 62, 21, 27, 140, 62, 70, 194, 98, 60, 250, 176, 218, 189, 64, 130, 66, 61, 199, 227, 177, 61, 98, 194, 153, 190, 105, 28, 30, 189, 41, 156, 161, 189, 36, 170, 151, 190, 244, 69, 150, 62, 120, 146, 111, 62, 125, 77, 160, 61, 76, 148, 197, 61, 216, 167, 92, 191, 66, 158, 126, 191, 51, 165, 221, 62, 65, 137, 62, 62, 135, 15, 250, 188, 39, 219, 42, 62, 104, 132, 0, 63, 59, 225, 154, 62, 59, 127, 119, 61, 95, 163, 7, 62, 62, 7, 174, 190, 145, 229, 47, 62, 128, 15, 57, 62, 187, 95, 72, 62, 3, 197, 148, 189, 166, 130, 200, 190, 15, 237, 51, 190, 189, 238, 155, 190, 134, 249, 159, 189, 173, 81, 92, 62, 242, 71, 247, 190, 112, 198, 48, 62, 190, 136, 4, 62, 216, 104, 199, 62, 237, 123, 251, 190, 147, 44, 254, 61, 76, 93, 34, 62, 143, 114, 31, 190, 194, 179, 185, 190, 196, 190, 149, 61, 37, 55, 130, 190, 115, 157, 82, 62, 197, 136, 110, 62, 182, 58, 164, 190, 91, 114, 193, 190, 38, 16, 79, 62, 10, 38, 162, 61, 26, 20, 46, 62, 181, 12, 129, 191, 146, 152, 0, 62, 234, 122, 121, 188, 161, 222, 171, 189, 93, 26, 244, 62, 240, 199, 200, 190, 229, 17, 82, 189, 221, 23, 91, 62, 45, 195, 219, 190, 52, 92, 38, 190, 248, 139, 179, 60, 222, 102, 23, 62, 220, 54, 218, 189, 156, 191, 211, 61, 35, 210, 143, 190, 176, 218, 99, 61, 40, 163, 43, 189, 55, 13, 53, 62, 238, 73, 160, 61, 182, 30, 76, 188, 228, 6, 110, 62, 152, 233, 81, 61, 51, 104, 177, 189, 252, 174, 172, 61, 135, 150, 50, 190, 64, 70, 186, 188, 139, 68, 27, 62, 14, 237, 128, 189, 122, 175, 4, 191, 157, 107, 78, 189, 156, 233, 20, 62, 232, 117, 11, 62, 34, 224, 147, 191, 148, 237, 63, 189, 249, 52, 44, 62, 21, 58, 187, 189, 175, 188, 192, 62, 195, 186, 81, 189, 46, 175, 218, 189, 91, 77, 252, 187, 147, 252, 159, 191, 216, 183, 233, 189, 160, 194, 135, 62, 239, 140, 5, 63, 131, 29, 30, 189, 150, 173, 77, 190, 122, 241, 54, 190, 208, 227, 8, 188, 39, 58, 193, 61, 179, 41, 11, 61, 182, 27, 131, 62, 92, 99, 85, 190, 20, 222, 183, 189, 163, 54, 193, 58, 207, 254, 75, 190, 166, 107, 233, 189, 86, 39, 150, 190, 230, 211, 178, 188, 184, 78, 201, 62, 32, 252, 126, 189, 39, 151, 101, 191, 14, 196, 207, 60, 181, 240, 52, 61, 133, 0, 34, 189, 228, 248, 85, 191, 246, 68, 223, 189, 175, 213, 19, 62, 93, 53, 135, 190, 193, 217, 141, 190, 79, 71, 50, 188, 107, 156, 21, 191, 23, 218, 44, 190, 160, 106, 29, 190, 141, 75, 140, 61, 62, 186, 224, 61, 82, 91, 33, 63, 125, 196, 195, 190, 94, 222, 167, 62, 178, 131, 86, 191, 62, 144, 78, 61, 170, 252, 146, 62, 70, 182, 194, 62, 187, 249, 143, 62, 33, 186, 214, 190, 70, 59, 163, 62, 225, 133, 137, 62, 60, 31, 60, 190, 252, 80, 177, 190, 144, 192, 132, 190, 46, 17, 188, 62, 251, 202, 172, 62, 177, 66, 164, 62, 155, 106, 41, 190, 152, 31, 157, 190, 134, 208, 92, 62, 44, 68, 12, 62, 13, 59, 163, 190, 115, 16, 192, 190, 90, 216, 18, 62, 80, 157, 253, 188, 91, 223, 65, 61, 192, 176, 48, 191, 20, 0, 197, 189, 101, 101, 65, 190, 225, 166, 56, 62, 5, 36, 174, 62, 242, 45, 185, 62, 57, 13, 157, 62, 146, 233, 226, 190, 94, 133, 180, 187, 115, 72, 70, 191, 21, 123, 237, 189, 23, 12, 176, 190, 32, 246, 245, 62, 114, 15, 172, 189, 234, 150, 156, 62, 130, 242, 140, 60, 222, 223, 102, 190, 149, 38, 117, 191, 9, 121, 74, 60, 190, 155, 232, 189, 26, 104, 46, 61, 7, 65, 90, 62, 139, 173, 4, 190, 121, 237, 141, 190, 126, 129, 137, 189, 52, 196, 4, 62, 172, 70, 131, 62, 118, 7, 252, 188, 193, 143, 139, 190, 11, 149, 87, 62, 167, 123, 69, 191, 24, 131, 128, 62, 191, 73, 254, 190, 208, 71, 142, 191, 35, 13, 132, 191, 248, 229, 70, 62, 159, 53, 178, 61, 177, 193, 121, 62, 186, 5, 215, 190, 197, 12, 61, 188, 200, 62, 242, 189, 180, 28, 30, 190, 56, 207, 86, 188, 166, 180, 32, 62, 73, 46, 6, 61, 84, 15, 217, 60, 33, 251, 147, 61, 217, 177, 171, 189, 204, 179, 47, 62, 189, 17, 213, 189, 166, 253, 232, 61, 10, 152, 170, 189, 203, 4, 23, 62, 49, 17, 191, 189, 144, 71, 248, 62, 17, 253, 224, 190, 224, 111, 18, 190, 40, 235, 111, 61, 111, 49, 6, 62, 41, 66, 160, 188, 235, 39, 39, 190, 101, 19, 181, 189, 93, 127, 5, 62, 108, 169, 37, 62, 101, 154, 158, 189, 34, 150, 237, 188, 53, 179, 216, 61, 130, 228, 8, 62, 5, 62, 14, 62, 48, 150, 236, 61, 197, 158, 218, 62, 245, 56, 15, 61, 35, 180, 10, 61, 84, 77, 29, 62, 180, 90, 10, 62, 143, 2, 34, 62, 237, 10, 219, 61, 198, 214, 206, 189, 55, 95, 159, 62, 144, 140, 189, 188, 196, 95, 242, 189, 158, 123, 125, 61, 235, 33, 117, 61, 116, 79, 29, 190, 96, 255, 128, 61, 202, 28, 151, 190, 209, 122, 177, 191, 254, 160, 16, 58, 129, 70, 3, 62, 207, 49, 14, 188, 99, 197, 12, 62, 70, 207, 44, 188, 242, 158, 131, 61, 155, 148, 16, 190, 9, 115, 255, 61, 66, 237, 157, 189, 94, 99, 159, 60, 240, 245, 133, 61, 191, 16, 148, 61, 187, 7, 178, 188, 120, 164, 204, 189, 182, 53, 152, 61, 11, 239, 3, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 224, 1, 59, 22, 117, 217, 62, 2, 68, 132, 189, 1, 238, 8, 189, 22, 156, 116, 62, 240, 166, 43, 62, 252, 187, 141, 61, 119, 196, 236, 189, 240, 59, 148, 62, 248, 202, 239, 187, 62, 184, 113, 61, 197, 104, 12, 62, 35, 54, 14, 61, 87, 57, 34, 62, 13, 155, 179, 61, 95, 127, 177, 61, 94, 4, 155, 62, 177, 152, 208, 190, 153, 41, 125, 62, 155, 68, 117, 61, 231, 70, 239, 60, 26, 160, 174, 187, 174, 51, 87, 62, 146, 99, 233, 62, 237, 7, 67, 61, 93, 120, 219, 60, 71, 84, 112, 62, 228, 197, 4, 62, 52, 86, 147, 62, 222, 39, 7, 62, 49, 79, 108, 62, 113, 45, 221, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 222, 12, 189, 60, 78, 15, 63, 187, 49, 244, 62, 64, 110, 244, 190, 161, 226, 3, 191, 6, 30, 51, 191, 15, 63, 163, 62, 106, 84, 133, 191, 133, 200, 10, 191, 177, 77, 119, 63, 11, 56, 162, 190, 234, 138, 174, 190, 216, 31, 143, 191, 139, 94, 83, 191, 69, 235, 83, 189, 108, 195, 148, 190, 58, 72, 23, 61, 103, 119, 55, 63, 58, 59, 102, 63, 145, 59, 193, 62, 66, 70, 199, 190, 249, 72, 187, 190, 2, 68, 135, 63, 181, 133, 183, 189, 102, 15, 246, 190, 236, 61, 235, 62, 15, 235, 239, 62, 192, 223, 201, 62, 43, 48, 63, 63, 116, 86, 174, 191, 89, 241, 201, 60, 248, 94, 69, 187, 107, 251, 201, 189, 13, 99, 109, 189, 241, 211, 59, 189, 182, 173, 37, 190, 248, 157, 217, 189, 242, 33, 74, 61, 151, 185, 57, 62, 168, 245, 149, 60, 22, 44, 4, 191, 5, 37, 138, 62, 42, 106, 100, 188, 8, 39, 99, 62, 44, 152, 221, 60, 43, 94, 149, 189, 38, 115, 205, 190, 226, 186, 15, 62, 231, 118, 143, 190, 38, 16, 143, 62, 188, 167, 99, 62, 32, 199, 53, 61, 224, 126, 127, 190, 248, 78, 15, 60, 182, 192, 152, 61, 209, 150, 254, 190, 226, 184, 41, 62, 68, 41, 26, 189, 174, 171, 178, 189, 73, 55, 69, 190, 221, 158, 250, 188, 52, 93, 129, 61, 129, 229, 81, 190, 27, 244, 214, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 124, 220, 61, 82, 49, 218, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {57, 19, 172, 63, 96, 182, 183, 63, 45, 68, 237, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {117, 235, 42, 192, 78, 79, 145, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0051/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}