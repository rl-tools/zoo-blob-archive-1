// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 230, 158, 62, 47, 180, 55, 190, 95, 255, 232, 62, 196, 154, 29, 190, 152, 57, 254, 190, 188, 196, 58, 190, 85, 22, 89, 190, 221, 141, 82, 63, 124, 102, 16, 191, 99, 162, 142, 62, 180, 142, 130, 62, 79, 246, 9, 60, 123, 30, 71, 190, 188, 229, 57, 63, 197, 167, 68, 189, 77, 49, 194, 62, 216, 88, 168, 61, 110, 94, 241, 189, 68, 62, 98, 62, 71, 131, 255, 61, 29, 58, 21, 191, 187, 118, 194, 61, 128, 23, 134, 190, 138, 16, 0, 62, 90, 8, 153, 189, 106, 213, 42, 191, 178, 233, 172, 190, 177, 133, 25, 189, 204, 197, 136, 61, 57, 20, 8, 63, 118, 192, 195, 190, 86, 103, 33, 63, 160, 200, 199, 190, 9, 102, 224, 62, 182, 243, 207, 62, 93, 190, 11, 191, 141, 194, 73, 62, 151, 14, 220, 62, 47, 206, 215, 62, 197, 177, 35, 190, 66, 69, 150, 62, 33, 141, 8, 62, 151, 18, 5, 63, 172, 34, 156, 190, 70, 148, 244, 190, 252, 151, 27, 190, 217, 186, 222, 62, 71, 25, 128, 61, 3, 178, 98, 62, 239, 169, 195, 62, 113, 173, 132, 62, 139, 186, 183, 62, 255, 59, 54, 191, 126, 132, 250, 62, 68, 219, 155, 62, 238, 50, 188, 189, 20, 37, 213, 190, 205, 122, 24, 62, 210, 147, 127, 190, 75, 211, 217, 190, 113, 10, 170, 61, 113, 138, 232, 62, 50, 213, 144, 62, 125, 31, 35, 62, 239, 189, 124, 190, 129, 143, 114, 62, 181, 191, 227, 190, 8, 20, 16, 191, 215, 202, 255, 62, 109, 176, 105, 62, 42, 137, 149, 62, 69, 161, 9, 63, 58, 160, 147, 62, 242, 119, 68, 191, 71, 213, 234, 61, 217, 151, 72, 190, 186, 184, 128, 63, 145, 96, 149, 190, 152, 57, 175, 62, 65, 143, 23, 63, 155, 158, 112, 62, 80, 147, 24, 63, 13, 136, 203, 62, 35, 186, 225, 62, 151, 12, 151, 190, 61, 34, 4, 63, 33, 12, 235, 61, 219, 13, 58, 191, 101, 22, 2, 191, 200, 219, 135, 62, 12, 240, 139, 190, 133, 116, 96, 191, 229, 240, 232, 61, 1, 40, 203, 62, 182, 243, 3, 63, 24, 226, 67, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 6, 30, 191, 223, 141, 175, 62, 116, 23, 177, 188, 171, 230, 206, 190, 118, 48, 250, 62, 20, 53, 172, 62, 127, 90, 47, 191, 15, 67, 185, 60, 220, 136, 229, 62, 77, 151, 231, 62, 122, 244, 153, 62, 226, 106, 7, 63, 118, 225, 115, 190, 156, 72, 109, 190, 129, 7, 164, 190, 221, 76, 34, 191, 57, 208, 95, 190, 132, 158, 107, 190, 208, 238, 227, 189, 62, 67, 22, 63, 158, 242, 28, 191, 125, 200, 230, 190, 176, 32, 250, 62, 123, 79, 38, 190, 51, 251, 72, 62, 60, 139, 176, 62, 144, 35, 5, 63, 253, 34, 216, 62, 158, 144, 156, 62, 207, 0, 109, 190, 122, 59, 151, 62, 36, 77, 135, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 67, 47, 60, 135, 149, 106, 190, 222, 188, 59, 62, 100, 64, 123, 61, 168, 33, 52, 61, 36, 74, 232, 189, 182, 156, 22, 190, 126, 83, 49, 62, 196, 76, 121, 188, 240, 184, 234, 187, 206, 105, 58, 62, 68, 57, 189, 61, 166, 62, 148, 61, 56, 82, 29, 62, 75, 248, 80, 188, 164, 181, 47, 190, 38, 156, 164, 189, 130, 80, 218, 188, 125, 186, 147, 189, 221, 182, 37, 190, 77, 115, 99, 189, 44, 227, 242, 189, 67, 139, 218, 61, 95, 109, 19, 61, 62, 132, 62, 186, 242, 193, 16, 62, 198, 74, 251, 61, 60, 8, 145, 61, 44, 13, 242, 61, 3, 235, 21, 190, 91, 21, 183, 189, 46, 12, 202, 60, 209, 189, 35, 190, 98, 141, 18, 62, 14, 107, 62, 189, 101, 94, 8, 62, 86, 238, 185, 189, 36, 108, 26, 61, 184, 162, 132, 189, 168, 181, 146, 189, 209, 134, 81, 62, 238, 102, 202, 189, 134, 253, 15, 62, 47, 180, 123, 60, 128, 132, 24, 61, 181, 233, 60, 62, 124, 194, 84, 189, 172, 152, 143, 189, 55, 78, 109, 61, 169, 52, 168, 188, 189, 53, 88, 189, 85, 69, 170, 61, 130, 115, 224, 189, 70, 37, 218, 189, 35, 174, 124, 62, 149, 84, 42, 190, 164, 5, 255, 189, 118, 87, 248, 189, 106, 70, 86, 190, 235, 189, 228, 60, 193, 86, 153, 61, 70, 59, 18, 62, 196, 218, 229, 61, 138, 200, 95, 62, 126, 200, 100, 190, 164, 164, 158, 61, 8, 64, 191, 61, 71, 213, 9, 62, 254, 79, 13, 62, 137, 98, 43, 62, 45, 57, 253, 59, 78, 91, 7, 189, 240, 62, 238, 61, 78, 82, 8, 188, 142, 158, 26, 190, 59, 42, 42, 62, 140, 140, 180, 60, 99, 173, 172, 189, 205, 18, 196, 61, 234, 230, 188, 61, 71, 197, 76, 189, 43, 255, 224, 61, 142, 105, 75, 62, 64, 89, 115, 189, 214, 68, 50, 190, 68, 39, 25, 60, 229, 175, 94, 62, 133, 171, 227, 188, 80, 92, 142, 62, 126, 6, 73, 190, 237, 243, 108, 189, 35, 103, 26, 190, 51, 3, 150, 60, 149, 160, 229, 188, 37, 204, 114, 62, 246, 86, 77, 62, 28, 40, 72, 189, 127, 228, 13, 61, 59, 149, 55, 190, 96, 177, 174, 189, 23, 0, 201, 189, 165, 6, 250, 189, 238, 161, 18, 189, 15, 56, 36, 189, 138, 114, 0, 190, 119, 33, 234, 189, 123, 152, 60, 189, 176, 165, 148, 61, 60, 102, 235, 61, 216, 27, 254, 61, 112, 175, 178, 189, 36, 52, 28, 62, 62, 230, 43, 62, 145, 223, 44, 62, 22, 241, 18, 62, 254, 81, 27, 62, 24, 220, 195, 61, 1, 188, 40, 190, 128, 151, 49, 190, 108, 114, 41, 190, 199, 95, 15, 190, 212, 63, 200, 61, 150, 51, 19, 59, 28, 196, 93, 61, 166, 0, 98, 188, 77, 214, 53, 189, 2, 165, 70, 60, 0, 41, 14, 189, 219, 254, 17, 190, 56, 141, 111, 61, 60, 238, 201, 61, 183, 166, 24, 61, 32, 115, 128, 62, 76, 214, 28, 188, 237, 212, 75, 190, 175, 247, 135, 189, 113, 94, 115, 190, 63, 126, 66, 60, 139, 241, 160, 61, 116, 214, 87, 61, 45, 236, 50, 62, 187, 170, 39, 62, 91, 229, 101, 190, 108, 216, 229, 189, 89, 56, 184, 61, 123, 206, 71, 62, 114, 53, 109, 189, 210, 224, 191, 189, 119, 123, 9, 188, 216, 255, 57, 62, 243, 74, 28, 190, 74, 215, 172, 61, 100, 77, 42, 62, 231, 157, 39, 62, 129, 47, 25, 62, 17, 220, 235, 188, 155, 141, 147, 189, 56, 48, 89, 190, 131, 202, 87, 190, 246, 232, 197, 189, 21, 135, 42, 190, 204, 146, 75, 190, 236, 140, 16, 61, 161, 156, 76, 190, 11, 28, 225, 61, 168, 232, 49, 61, 45, 128, 121, 190, 194, 45, 248, 189, 28, 234, 201, 188, 103, 93, 18, 62, 114, 139, 101, 62, 9, 79, 177, 189, 54, 194, 186, 61, 78, 14, 136, 60, 34, 75, 146, 190, 64, 140, 145, 190, 187, 229, 86, 61, 54, 171, 126, 189, 120, 180, 143, 188, 231, 16, 70, 59, 177, 95, 71, 190, 155, 187, 122, 188, 198, 228, 164, 189, 86, 118, 1, 189, 52, 94, 223, 188, 162, 144, 171, 62, 129, 96, 224, 60, 94, 20, 96, 62, 169, 153, 141, 60, 45, 230, 39, 190, 217, 185, 199, 190, 31, 118, 27, 189, 105, 213, 250, 188, 169, 85, 133, 62, 172, 163, 10, 190, 39, 150, 35, 186, 123, 125, 40, 190, 114, 172, 169, 61, 114, 152, 22, 190, 210, 43, 211, 61, 228, 67, 9, 189, 131, 218, 135, 60, 72, 120, 28, 190, 6, 236, 147, 189, 77, 207, 38, 190, 146, 198, 131, 61, 108, 193, 193, 189, 200, 154, 116, 61, 52, 82, 173, 61, 80, 75, 20, 189, 23, 60, 248, 189, 53, 48, 115, 62, 115, 55, 156, 61, 7, 133, 210, 60, 25, 13, 66, 62, 127, 212, 174, 61, 57, 51, 95, 61, 69, 211, 148, 61, 108, 176, 110, 188, 163, 64, 165, 189, 203, 14, 159, 61, 45, 175, 5, 62, 92, 226, 148, 62, 47, 203, 159, 59, 28, 34, 18, 190, 136, 114, 115, 61, 21, 146, 174, 189, 242, 125, 34, 189, 31, 196, 102, 189, 134, 223, 39, 61, 68, 190, 3, 62, 2, 94, 47, 189, 66, 88, 33, 62, 163, 251, 251, 61, 65, 217, 92, 190, 116, 173, 60, 61, 57, 21, 106, 187, 85, 56, 230, 189, 32, 132, 90, 189, 33, 217, 219, 61, 218, 128, 217, 61, 66, 47, 109, 61, 170, 97, 155, 189, 185, 91, 6, 190, 119, 64, 198, 60, 2, 25, 4, 190, 36, 113, 104, 58, 228, 92, 224, 189, 208, 254, 234, 61, 52, 222, 226, 189, 175, 100, 146, 61, 220, 64, 16, 190, 223, 107, 230, 188, 164, 212, 46, 62, 182, 214, 113, 61, 50, 27, 158, 61, 99, 184, 2, 190, 215, 194, 166, 189, 223, 210, 124, 62, 172, 213, 245, 187, 223, 87, 235, 61, 42, 14, 251, 60, 89, 71, 87, 190, 247, 106, 34, 190, 255, 232, 65, 188, 86, 200, 29, 190, 18, 65, 114, 62, 240, 78, 166, 189, 117, 151, 49, 61, 247, 74, 100, 188, 64, 216, 145, 190, 155, 208, 46, 188, 25, 155, 209, 189, 234, 49, 93, 189, 182, 171, 210, 189, 115, 251, 221, 189, 151, 44, 6, 190, 140, 209, 130, 189, 12, 51, 96, 189, 214, 224, 147, 61, 232, 167, 81, 61, 148, 92, 124, 62, 60, 128, 220, 61, 172, 83, 33, 62, 49, 132, 14, 62, 1, 184, 83, 190, 102, 130, 221, 190, 91, 72, 140, 190, 161, 191, 231, 61, 153, 76, 58, 61, 25, 190, 42, 190, 115, 142, 232, 189, 44, 48, 164, 189, 186, 137, 189, 189, 62, 198, 58, 62, 237, 213, 152, 189, 218, 99, 179, 188, 210, 83, 14, 190, 234, 92, 240, 59, 73, 22, 73, 59, 39, 224, 17, 61, 136, 36, 123, 188, 92, 33, 127, 62, 24, 91, 3, 60, 120, 52, 145, 189, 141, 160, 217, 61, 79, 36, 42, 62, 230, 112, 74, 187, 141, 251, 90, 61, 93, 247, 164, 61, 75, 92, 43, 189, 112, 97, 7, 62, 40, 163, 210, 60, 180, 180, 125, 189, 174, 74, 26, 61, 20, 143, 128, 187, 151, 178, 174, 60, 145, 136, 168, 61, 105, 7, 115, 62, 221, 183, 27, 61, 124, 81, 29, 190, 253, 106, 63, 189, 187, 181, 189, 61, 121, 113, 161, 61, 87, 222, 182, 61, 20, 237, 22, 190, 123, 20, 169, 59, 205, 91, 38, 61, 106, 230, 89, 61, 238, 74, 89, 190, 148, 128, 44, 62, 88, 133, 25, 62, 200, 26, 128, 189, 75, 187, 237, 188, 193, 182, 23, 190, 181, 88, 241, 189, 180, 56, 5, 189, 93, 207, 151, 189, 23, 131, 170, 61, 203, 214, 138, 60, 53, 7, 220, 187, 243, 56, 205, 188, 86, 137, 39, 189, 165, 212, 134, 188, 57, 123, 76, 190, 23, 120, 227, 61, 228, 212, 234, 189, 39, 78, 63, 189, 229, 251, 192, 60, 147, 214, 108, 189, 152, 11, 249, 61, 137, 0, 101, 189, 112, 134, 62, 62, 52, 135, 63, 190, 240, 109, 222, 61, 59, 25, 212, 61, 151, 80, 152, 62, 99, 213, 203, 60, 160, 171, 74, 190, 8, 35, 7, 62, 240, 62, 161, 190, 182, 82, 207, 189, 139, 254, 65, 62, 245, 251, 217, 188, 140, 126, 69, 62, 235, 149, 165, 61, 164, 180, 78, 190, 244, 130, 167, 189, 78, 133, 211, 60, 97, 107, 142, 188, 171, 231, 147, 189, 144, 34, 65, 189, 121, 188, 200, 189, 198, 200, 46, 189, 31, 97, 137, 189, 74, 243, 59, 62, 147, 82, 176, 61, 4, 79, 130, 62, 23, 195, 11, 62, 81, 158, 252, 61, 113, 158, 46, 62, 12, 192, 194, 61, 149, 138, 168, 190, 54, 16, 232, 189, 123, 245, 220, 61, 186, 209, 145, 189, 235, 220, 12, 190, 15, 168, 225, 189, 193, 224, 85, 61, 104, 74, 112, 61, 129, 15, 21, 62, 95, 106, 114, 189, 100, 135, 251, 61, 103, 9, 10, 190, 56, 188, 176, 189, 244, 251, 99, 61, 19, 35, 225, 188, 47, 163, 73, 189, 200, 103, 126, 189, 63, 86, 24, 62, 64, 140, 102, 188, 27, 133, 158, 61, 0, 102, 242, 189, 148, 245, 39, 190, 101, 45, 52, 190, 220, 94, 21, 190, 102, 239, 29, 62, 15, 77, 124, 189, 111, 36, 52, 189, 2, 18, 143, 58, 1, 118, 86, 189, 196, 153, 224, 189, 66, 42, 1, 61, 117, 211, 164, 188, 4, 250, 185, 61, 153, 97, 33, 190, 33, 134, 38, 62, 187, 255, 24, 189, 171, 172, 75, 189, 19, 211, 16, 62, 22, 93, 1, 61, 174, 6, 42, 190, 176, 175, 208, 187, 246, 236, 220, 189, 55, 45, 59, 61, 235, 81, 53, 189, 167, 38, 192, 61, 41, 172, 20, 62, 127, 80, 169, 61, 111, 218, 17, 190, 53, 17, 137, 61, 111, 162, 40, 62, 64, 53, 154, 189, 162, 171, 20, 62, 230, 108, 20, 190, 55, 18, 135, 189, 230, 245, 65, 61, 111, 96, 196, 189, 128, 79, 147, 61, 87, 223, 37, 61, 24, 206, 78, 190, 213, 165, 210, 61, 225, 249, 5, 190, 186, 19, 49, 62, 171, 118, 16, 189, 211, 200, 13, 190, 215, 151, 62, 59, 16, 59, 190, 189, 83, 107, 58, 190, 66, 174, 216, 189, 184, 29, 157, 189, 2, 33, 23, 62, 228, 15, 11, 189, 24, 114, 126, 62, 34, 106, 60, 190, 145, 135, 220, 61, 172, 189, 214, 61, 182, 139, 222, 186, 217, 75, 113, 190, 171, 101, 77, 62, 205, 131, 210, 61, 228, 125, 248, 189, 220, 72, 123, 190, 95, 120, 4, 190, 238, 97, 98, 189, 67, 111, 169, 61, 115, 31, 120, 188, 83, 35, 153, 188, 30, 130, 230, 60, 205, 0, 111, 61, 25, 13, 192, 61, 153, 157, 56, 190, 207, 198, 235, 61, 46, 122, 152, 189, 46, 148, 136, 189, 117, 97, 3, 62, 30, 151, 108, 187, 255, 58, 19, 62, 83, 200, 71, 62, 130, 177, 152, 61, 156, 14, 6, 190, 39, 37, 16, 190, 43, 138, 242, 189, 86, 19, 189, 60, 112, 49, 231, 61, 164, 250, 111, 190, 240, 96, 28, 190, 65, 223, 235, 61, 4, 104, 77, 190, 139, 157, 31, 62, 246, 12, 13, 190, 207, 36, 187, 189, 25, 68, 242, 189, 114, 69, 8, 190, 248, 181, 214, 189, 163, 50, 177, 61, 10, 114, 217, 61, 141, 1, 233, 189, 198, 222, 103, 189, 117, 45, 168, 189, 129, 252, 4, 62, 222, 229, 154, 189, 245, 88, 12, 190, 59, 24, 169, 61, 158, 181, 2, 190, 195, 187, 230, 189, 186, 106, 87, 61, 74, 207, 47, 190, 189, 78, 14, 190, 151, 68, 250, 61, 132, 89, 21, 61, 90, 236, 138, 190, 44, 12, 12, 190, 33, 156, 13, 190, 140, 23, 70, 60, 91, 206, 186, 61, 230, 146, 84, 190, 161, 211, 66, 187, 88, 221, 176, 189, 146, 205, 163, 188, 117, 80, 19, 62, 128, 172, 5, 62, 213, 209, 13, 62, 241, 49, 48, 188, 237, 111, 10, 190, 178, 119, 4, 61, 185, 144, 86, 188, 43, 172, 83, 61, 134, 120, 156, 189, 213, 44, 13, 62, 1, 204, 109, 189, 168, 69, 26, 62, 122, 94, 122, 188, 162, 187, 220, 189, 36, 62, 51, 190, 141, 245, 214, 60, 170, 198, 118, 61, 152, 132, 195, 189, 35, 125, 211, 188, 79, 240, 221, 188, 203, 227, 63, 190, 12, 99, 161, 60, 194, 117, 57, 189, 219, 114, 84, 62, 255, 171, 174, 188, 39, 177, 46, 61, 248, 28, 54, 61, 104, 22, 47, 62, 175, 70, 1, 190, 53, 8, 91, 61, 223, 195, 141, 189, 23, 107, 62, 61, 245, 109, 191, 189, 195, 56, 172, 59, 69, 15, 197, 61, 86, 99, 153, 61, 125, 36, 109, 61, 168, 131, 128, 61, 247, 8, 198, 61, 185, 197, 38, 62, 229, 70, 212, 61, 141, 74, 48, 190, 242, 79, 20, 190, 136, 55, 171, 61, 238, 89, 114, 61, 81, 11, 30, 190, 29, 147, 165, 61, 242, 90, 163, 61, 52, 32, 134, 61, 144, 2, 178, 188, 119, 217, 214, 61, 36, 108, 202, 60, 19, 198, 36, 190, 120, 166, 0, 62, 211, 28, 64, 62, 48, 167, 170, 189, 177, 21, 232, 189, 56, 11, 73, 62, 180, 248, 14, 190, 59, 253, 137, 189, 250, 161, 11, 190, 43, 201, 84, 62, 172, 214, 33, 62, 249, 201, 199, 61, 252, 67, 12, 61, 134, 105, 118, 187, 237, 245, 90, 60, 206, 192, 17, 61, 212, 122, 163, 188, 109, 236, 70, 61, 63, 84, 79, 188, 251, 215, 108, 59, 137, 101, 80, 190, 173, 44, 37, 61, 15, 122, 44, 62, 167, 171, 216, 60, 153, 102, 48, 61, 158, 151, 137, 189, 20, 33, 85, 62, 46, 168, 118, 189, 113, 72, 18, 62, 238, 146, 126, 190, 44, 163, 155, 61, 230, 176, 11, 190, 23, 195, 231, 60, 63, 120, 125, 188, 175, 27, 131, 62, 58, 61, 7, 62, 101, 144, 4, 190, 109, 41, 96, 61, 113, 226, 205, 186, 152, 47, 150, 60, 220, 162, 45, 61, 55, 234, 235, 61, 68, 248, 231, 61, 64, 181, 206, 189, 33, 185, 110, 62, 45, 122, 45, 62, 166, 123, 127, 188, 13, 217, 237, 188, 179, 137, 44, 189, 138, 52, 57, 190, 56, 155, 94, 62, 115, 58, 63, 61, 132, 15, 49, 190, 163, 45, 30, 189, 209, 153, 75, 62, 39, 140, 221, 61, 72, 150, 157, 61, 201, 86, 255, 188, 43, 209, 155, 189, 165, 21, 105, 61, 237, 162, 141, 61, 208, 59, 13, 190, 119, 156, 74, 190, 210, 149, 117, 61, 119, 223, 138, 189, 181, 202, 24, 62, 99, 22, 199, 62, 211, 5, 172, 59, 56, 121, 15, 62, 6, 130, 157, 190, 82, 89, 173, 189, 81, 228, 207, 189, 13, 153, 66, 62, 47, 12, 14, 62, 214, 179, 81, 188, 72, 155, 29, 190, 154, 236, 189, 58, 249, 195, 175, 61, 165, 208, 237, 61, 169, 32, 255, 61, 30, 46, 229, 189, 213, 100, 231, 61, 93, 74, 136, 190, 175, 244, 30, 190, 245, 225, 135, 60, 87, 213, 153, 189, 30, 56, 93, 190, 121, 218, 180, 189, 182, 89, 223, 61, 97, 26, 14, 62, 224, 165, 36, 190, 155, 63, 57, 62, 37, 219, 27, 62, 165, 119, 91, 62, 91, 137, 62, 62, 12, 217, 196, 61, 177, 143, 111, 188, 102, 40, 99, 60, 59, 24, 85, 189, 101, 87, 170, 61, 213, 44, 181, 61, 21, 203, 17, 61, 71, 62, 162, 189, 103, 166, 244, 60, 37, 202, 150, 190, 189, 94, 108, 190, 1, 164, 199, 189, 140, 246, 144, 189, 54, 134, 39, 61, 55, 19, 39, 190, 5, 143, 111, 190, 102, 134, 241, 187, 240, 22, 158, 61, 198, 16, 61, 189, 156, 145, 189, 61, 87, 103, 105, 61, 109, 181, 21, 62, 195, 218, 227, 61, 206, 2, 198, 189, 138, 252, 13, 62, 246, 16, 50, 60, 130, 220, 15, 62, 184, 106, 19, 62, 175, 108, 202, 188, 107, 20, 96, 189, 102, 175, 191, 60, 26, 153, 9, 61, 135, 158, 39, 189, 122, 67, 199, 189, 48, 131, 61, 62, 172, 26, 141, 61, 158, 115, 184, 189, 206, 210, 16, 61, 33, 142, 140, 62, 120, 245, 169, 190, 69, 26, 202, 60, 100, 212, 11, 62, 67, 119, 145, 189, 165, 172, 181, 188, 8, 34, 5, 189, 103, 8, 214, 61, 152, 61, 138, 61, 135, 50, 13, 190, 51, 110, 190, 189, 167, 253, 44, 190, 221, 167, 210, 189, 0, 154, 8, 190, 148, 199, 151, 189, 46, 85, 0, 190, 251, 17, 136, 188, 46, 243, 225, 189, 182, 26, 31, 61, 154, 159, 237, 61, 13, 14, 161, 61, 209, 136, 4, 60, 162, 193, 151, 189, 59, 217, 136, 190, 238, 188, 122, 58, 126, 23, 33, 190, 90, 158, 2, 190, 126, 152, 179, 61, 163, 234, 48, 62, 246, 249, 137, 62, 158, 218, 178, 189, 211, 179, 18, 190, 2, 187, 201, 60, 0, 50, 112, 189, 1, 219, 113, 189, 246, 218, 98, 61, 133, 125, 123, 62, 137, 158, 246, 189, 156, 45, 198, 61, 65, 160, 100, 187, 37, 209, 38, 61, 98, 97, 112, 61, 21, 105, 163, 61, 221, 191, 226, 189, 77, 237, 152, 189, 143, 188, 76, 190, 17, 245, 129, 189, 179, 121, 26, 190, 157, 26, 181, 61, 202, 135, 217, 188, 193, 239, 250, 188, 134, 237, 111, 189, 158, 122, 148, 189, 42, 70, 92, 189, 142, 114, 6, 62, 88, 122, 125, 62, 227, 46, 49, 62, 57, 157, 83, 62, 76, 166, 9, 62, 239, 145, 249, 189, 75, 167, 144, 189, 97, 144, 182, 60, 67, 45, 224, 189, 255, 105, 8, 62, 57, 243, 132, 189, 226, 136, 151, 188, 225, 127, 218, 189, 145, 47, 71, 62, 61, 47, 129, 61, 90, 45, 84, 190, 106, 215, 7, 190, 165, 254, 159, 190, 71, 111, 230, 59, 83, 74, 102, 62, 16, 139, 45, 62, 226, 114, 104, 188, 0, 118, 8, 62, 43, 90, 247, 190, 252, 209, 12, 190, 119, 184, 0, 187, 73, 193, 41, 61, 103, 140, 157, 59, 100, 87, 197, 60, 0, 122, 22, 188, 215, 167, 144, 189, 188, 94, 200, 61, 26, 0, 161, 61, 111, 45, 247, 189, 20, 68, 86, 62, 164, 122, 140, 61, 196, 178, 76, 61, 183, 129, 156, 61, 46, 143, 59, 190, 78, 254, 168, 190, 228, 63, 24, 189, 119, 142, 183, 189, 60, 53, 237, 60, 36, 190, 61, 190, 84, 159, 48, 62, 82, 250, 105, 187, 255, 19, 103, 62, 91, 243, 115, 61, 56, 239, 102, 61, 64, 153, 55, 61, 94, 107, 32, 188, 173, 215, 27, 190, 107, 153, 151, 189, 85, 7, 30, 190, 155, 36, 235, 61, 170, 154, 57, 62, 8, 37, 6, 190, 52, 177, 171, 189, 169, 43, 116, 60, 245, 247, 118, 60, 1, 74, 23, 59, 31, 88, 234, 60, 100, 114, 144, 61, 248, 140, 113, 189, 23, 143, 8, 189, 238, 134, 160, 62, 166, 12, 26, 190, 11, 214, 137, 189, 189, 153, 74, 62, 155, 30, 152, 189, 95, 174, 83, 187, 84, 243, 199, 189, 93, 78, 101, 190, 12, 154, 139, 189, 97, 139, 186, 61, 67, 22, 53, 190, 176, 218, 99, 61, 215, 192, 17, 189, 160, 169, 95, 189, 134, 48, 227, 189, 133, 13, 219, 60, 172, 79, 81, 62, 113, 112, 37, 61, 75, 73, 16, 189, 249, 79, 42, 61, 9, 137, 31, 189, 104, 55, 112, 60, 80, 106, 5, 190, 185, 97, 50, 188, 116, 33, 10, 61, 19, 96, 0, 190, 12, 200, 154, 189, 123, 203, 136, 61, 127, 232, 88, 189, 143, 204, 88, 189, 152, 170, 57, 61, 14, 101, 203, 188, 219, 106, 162, 62, 175, 120, 37, 189, 83, 162, 241, 189, 222, 86, 57, 61, 248, 138, 120, 190, 96, 241, 217, 189, 104, 139, 170, 61, 225, 14, 123, 62, 101, 80, 136, 61, 55, 122, 17, 62, 20, 55, 176, 189, 71, 179, 9, 188, 205, 49, 149, 189, 160, 115, 158, 61, 91, 101, 50, 62, 175, 169, 1, 190, 166, 51, 20, 62, 33, 43, 171, 60, 154, 92, 32, 190, 38, 52, 119, 189, 192, 66, 15, 61, 153, 63, 30, 188, 166, 95, 194, 61, 32, 206, 228, 61, 14, 15, 63, 60, 112, 89, 251, 61, 161, 108, 151, 188, 243, 187, 221, 61, 100, 160, 9, 189, 204, 11, 150, 188, 142, 135, 21, 62, 130, 142, 251, 188, 225, 119, 165, 189, 175, 84, 250, 189, 94, 142, 196, 189, 102, 94, 109, 61, 82, 95, 45, 187, 176, 53, 245, 61, 6, 206, 48, 62, 30, 241, 178, 62, 120, 252, 93, 190, 105, 161, 35, 62, 240, 104, 95, 190, 62, 144, 78, 61, 110, 225, 14, 62, 207, 3, 240, 189, 43, 223, 197, 61, 119, 136, 79, 190, 38, 75, 94, 62, 98, 173, 57, 62, 47, 131, 241, 189, 12, 151, 120, 190, 93, 14, 41, 190, 120, 103, 156, 189, 7, 16, 85, 189, 5, 66, 235, 61, 42, 38, 29, 61, 247, 149, 48, 190, 169, 44, 230, 189, 2, 186, 76, 60, 107, 38, 225, 189, 219, 237, 207, 189, 65, 90, 165, 61, 22, 175, 6, 61, 5, 176, 162, 189, 84, 148, 26, 190, 217, 148, 66, 190, 99, 212, 85, 190, 154, 42, 87, 61, 94, 148, 141, 62, 67, 195, 200, 62, 70, 126, 10, 189, 147, 146, 90, 61, 67, 3, 227, 189, 248, 18, 173, 189, 21, 123, 237, 189, 242, 81, 226, 189, 7, 89, 196, 61, 197, 125, 63, 61, 103, 93, 17, 62, 240, 48, 50, 190, 249, 215, 17, 190, 120, 101, 10, 190, 201, 228, 172, 61, 210, 62, 171, 61, 54, 254, 43, 189, 140, 212, 71, 189, 27, 120, 229, 189, 181, 82, 252, 189, 69, 223, 120, 61, 228, 54, 181, 61, 50, 229, 213, 61, 250, 110, 176, 61, 134, 62, 221, 61, 152, 232, 23, 62, 85, 205, 49, 190, 155, 85, 125, 189, 162, 152, 153, 60, 115, 234, 19, 190, 232, 3, 218, 189, 194, 217, 14, 190, 216, 38, 186, 60, 234, 207, 141, 61, 8, 42, 127, 189, 190, 31, 159, 61, 221, 165, 187, 189, 109, 255, 196, 189, 168, 64, 87, 188, 219, 12, 54, 189, 184, 218, 33, 62, 30, 39, 208, 61, 48, 103, 245, 61, 215, 143, 174, 188, 191, 154, 227, 61, 6, 220, 242, 189, 152, 228, 76, 62, 117, 14, 149, 188, 85, 228, 211, 189, 182, 26, 105, 188, 165, 255, 27, 62, 209, 148, 34, 190, 244, 111, 192, 189, 20, 172, 74, 62, 65, 43, 70, 62, 49, 188, 2, 62, 146, 8, 204, 188, 150, 138, 225, 189, 251, 86, 17, 62, 145, 161, 78, 62, 92, 233, 183, 189, 2, 109, 105, 189, 27, 75, 31, 62, 2, 132, 70, 61, 161, 66, 18, 62, 106, 167, 223, 61, 49, 59, 163, 62, 63, 89, 231, 60, 113, 221, 252, 186, 25, 8, 53, 62, 201, 106, 10, 62, 225, 212, 68, 62, 61, 55, 56, 60, 247, 40, 2, 190, 232, 172, 199, 61, 51, 129, 236, 189, 20, 9, 2, 62, 99, 102, 111, 61, 191, 253, 79, 61, 178, 57, 71, 189, 118, 206, 171, 60, 197, 196, 13, 190, 205, 169, 68, 190, 193, 90, 202, 60, 88, 82, 224, 61, 164, 10, 17, 60, 90, 201, 144, 61, 63, 69, 35, 190, 132, 111, 106, 189, 161, 94, 58, 190, 160, 228, 222, 61, 69, 184, 100, 61, 126, 203, 26, 61, 153, 149, 192, 61, 21, 160, 83, 61, 235, 45, 32, 189, 12, 118, 178, 61, 11, 85, 179, 189, 121, 159, 196, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 126, 88, 189, 95, 210, 65, 62, 184, 30, 180, 61, 239, 60, 96, 189, 72, 169, 108, 62, 192, 111, 100, 61, 85, 103, 133, 188, 177, 210, 27, 190, 255, 20, 27, 62, 173, 226, 31, 62, 225, 212, 26, 190, 244, 235, 248, 61, 245, 255, 67, 190, 2, 58, 234, 188, 100, 220, 34, 61, 181, 38, 133, 61, 236, 207, 80, 62, 57, 173, 5, 190, 129, 124, 19, 62, 98, 246, 28, 62, 211, 39, 18, 60, 142, 31, 37, 59, 57, 124, 206, 188, 67, 70, 136, 62, 151, 253, 22, 60, 122, 9, 200, 189, 19, 129, 75, 62, 218, 241, 46, 62, 216, 125, 25, 62, 207, 191, 78, 189, 75, 39, 31, 62, 134, 77, 73, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 239, 52, 190, 89, 29, 128, 62, 253, 51, 85, 62, 86, 171, 242, 189, 18, 225, 154, 190, 65, 138, 180, 190, 5, 55, 162, 61, 176, 168, 187, 189, 207, 12, 184, 190, 21, 220, 33, 62, 243, 122, 220, 189, 166, 141, 104, 190, 202, 26, 248, 189, 104, 38, 248, 188, 215, 250, 23, 189, 83, 224, 241, 189, 189, 1, 17, 61, 224, 187, 132, 60, 84, 60, 78, 62, 14, 69, 45, 62, 229, 9, 88, 190, 161, 110, 53, 190, 179, 117, 131, 62, 242, 203, 153, 189, 76, 65, 79, 190, 211, 29, 19, 62, 2, 47, 1, 62, 243, 209, 223, 61, 137, 143, 218, 62, 252, 49, 20, 190, 188, 2, 34, 62, 71, 51, 223, 189, 168, 255, 170, 189, 23, 118, 183, 60, 137, 94, 197, 58, 92, 60, 234, 61, 135, 166, 201, 189, 85, 137, 56, 186, 14, 11, 0, 189, 110, 47, 210, 60, 72, 228, 27, 189, 49, 179, 161, 61, 99, 181, 83, 58, 217, 55, 177, 61, 70, 27, 185, 189, 4, 102, 116, 61, 221, 14, 142, 190, 101, 25, 14, 188, 73, 165, 62, 190, 165, 148, 8, 60, 80, 94, 31, 189, 159, 108, 206, 188, 254, 91, 30, 189, 229, 103, 6, 62, 68, 251, 190, 187, 200, 138, 146, 190, 91, 227, 154, 61, 110, 65, 115, 60, 201, 141, 252, 189, 68, 244, 194, 189, 59, 208, 190, 188, 5, 83, 205, 189, 63, 191, 19, 190, 109, 14, 7, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 154, 203, 61, 196, 46, 21, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 54, 2, 63, 13, 24, 197, 189, 162, 220, 157, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {88, 215, 157, 188, 59, 163, 70, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0051/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}