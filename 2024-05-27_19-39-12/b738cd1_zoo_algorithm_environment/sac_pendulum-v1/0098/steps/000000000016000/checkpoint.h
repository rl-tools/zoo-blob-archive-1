// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 226, 107, 191, 197, 208, 125, 190, 9, 34, 21, 191, 0, 121, 45, 61, 103, 186, 49, 190, 178, 3, 142, 190, 121, 66, 162, 190, 136, 37, 15, 63, 45, 234, 249, 190, 75, 240, 26, 62, 84, 6, 132, 191, 132, 4, 51, 62, 220, 198, 7, 63, 240, 80, 144, 63, 58, 100, 144, 62, 221, 36, 44, 63, 29, 90, 27, 191, 97, 123, 249, 190, 184, 11, 198, 190, 106, 187, 70, 191, 208, 135, 235, 62, 122, 31, 51, 189, 193, 246, 147, 191, 47, 215, 118, 190, 36, 53, 164, 62, 136, 182, 10, 63, 130, 160, 85, 190, 3, 171, 36, 63, 78, 76, 224, 190, 253, 187, 222, 190, 48, 64, 167, 190, 95, 92, 99, 63, 43, 241, 88, 62, 200, 183, 8, 191, 20, 156, 102, 63, 197, 135, 108, 62, 130, 152, 103, 190, 48, 221, 210, 62, 92, 147, 171, 190, 134, 243, 143, 191, 254, 158, 204, 190, 240, 223, 8, 188, 62, 54, 172, 62, 67, 182, 78, 191, 41, 99, 36, 63, 217, 103, 29, 63, 251, 121, 30, 191, 174, 142, 201, 61, 109, 19, 92, 60, 210, 2, 172, 62, 238, 104, 56, 63, 79, 166, 206, 190, 140, 2, 134, 191, 121, 205, 218, 190, 137, 17, 36, 63, 157, 94, 215, 62, 161, 142, 2, 63, 210, 41, 90, 63, 76, 229, 70, 191, 186, 232, 174, 190, 166, 211, 244, 190, 93, 202, 118, 191, 244, 76, 117, 190, 6, 32, 140, 189, 231, 27, 196, 63, 132, 228, 151, 62, 175, 112, 105, 63, 220, 92, 100, 191, 216, 2, 37, 190, 250, 112, 198, 62, 40, 148, 92, 190, 214, 217, 0, 63, 98, 95, 211, 190, 16, 70, 135, 191, 145, 11, 134, 190, 244, 206, 212, 190, 46, 28, 2, 63, 72, 250, 173, 62, 239, 5, 21, 63, 45, 120, 114, 191, 40, 226, 100, 190, 124, 15, 240, 190, 118, 34, 34, 190, 141, 136, 4, 189, 137, 237, 100, 191, 108, 183, 5, 62, 161, 13, 202, 189, 255, 91, 205, 190, 66, 238, 83, 63, 70, 1, 4, 63, 209, 160, 215, 190, 165, 163, 184, 190, 206, 141, 248, 190, 37, 32, 183, 190, 245, 36, 135, 63, 79, 37, 130, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 118, 13, 191, 248, 114, 253, 61, 117, 91, 0, 190, 112, 233, 63, 190, 142, 3, 27, 190, 227, 148, 149, 190, 96, 168, 161, 62, 142, 117, 144, 190, 40, 133, 142, 62, 72, 19, 153, 189, 118, 192, 211, 188, 140, 167, 40, 62, 231, 197, 29, 63, 51, 186, 168, 62, 131, 3, 234, 190, 159, 84, 52, 62, 29, 67, 163, 62, 129, 253, 173, 62, 2, 58, 182, 190, 82, 253, 42, 191, 207, 11, 48, 63, 10, 139, 188, 62, 169, 112, 164, 62, 22, 44, 27, 62, 58, 1, 186, 61, 153, 127, 183, 190, 39, 105, 248, 190, 41, 52, 17, 63, 245, 221, 46, 63, 124, 168, 169, 62, 127, 201, 90, 191, 99, 3, 228, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 70, 171, 190, 27, 30, 120, 62, 85, 156, 232, 62, 221, 117, 159, 62, 162, 136, 142, 62, 128, 89, 168, 61, 226, 67, 51, 189, 233, 204, 131, 60, 182, 78, 42, 62, 100, 251, 154, 60, 41, 189, 133, 190, 199, 78, 19, 191, 166, 159, 41, 62, 124, 94, 72, 191, 227, 176, 145, 62, 202, 138, 23, 189, 158, 228, 108, 61, 116, 73, 13, 190, 230, 171, 178, 62, 103, 54, 7, 62, 53, 115, 136, 191, 187, 48, 98, 61, 85, 67, 163, 190, 130, 39, 245, 61, 203, 152, 116, 61, 253, 143, 98, 61, 151, 217, 120, 61, 235, 21, 187, 190, 106, 168, 19, 191, 55, 100, 98, 189, 70, 197, 128, 61, 236, 125, 26, 190, 179, 226, 115, 60, 219, 237, 8, 190, 233, 215, 223, 61, 28, 171, 169, 189, 144, 100, 200, 189, 107, 68, 31, 190, 242, 21, 218, 61, 134, 54, 47, 61, 175, 141, 48, 62, 26, 191, 129, 61, 41, 178, 7, 190, 57, 37, 32, 190, 239, 61, 40, 190, 67, 252, 239, 189, 143, 242, 33, 190, 48, 210, 51, 189, 219, 79, 58, 60, 199, 182, 25, 190, 71, 0, 21, 61, 162, 22, 201, 61, 87, 15, 22, 190, 124, 83, 191, 189, 127, 35, 150, 59, 29, 223, 137, 189, 243, 141, 159, 189, 18, 246, 46, 62, 187, 5, 190, 61, 26, 8, 199, 189, 218, 107, 96, 61, 184, 145, 20, 190, 133, 187, 176, 188, 15, 201, 30, 62, 91, 63, 194, 188, 126, 174, 18, 188, 67, 251, 198, 61, 189, 160, 36, 62, 82, 119, 58, 188, 1, 233, 61, 59, 151, 63, 28, 62, 148, 254, 1, 189, 170, 10, 234, 61, 42, 100, 16, 61, 246, 155, 115, 60, 19, 86, 177, 59, 59, 243, 166, 62, 161, 83, 248, 61, 56, 182, 12, 62, 73, 48, 255, 189, 62, 92, 246, 61, 5, 3, 250, 61, 159, 232, 200, 189, 73, 59, 182, 190, 21, 57, 144, 62, 188, 184, 59, 60, 216, 238, 93, 62, 217, 102, 28, 188, 93, 141, 28, 62, 16, 166, 180, 187, 187, 218, 90, 62, 206, 78, 144, 62, 152, 201, 236, 61, 207, 18, 51, 62, 187, 58, 199, 189, 35, 101, 172, 189, 19, 31, 131, 62, 238, 51, 2, 62, 186, 188, 245, 189, 70, 165, 182, 190, 134, 141, 2, 191, 167, 131, 99, 190, 22, 217, 32, 62, 0, 190, 197, 60, 57, 16, 33, 190, 101, 33, 204, 190, 222, 95, 47, 191, 91, 238, 8, 190, 215, 28, 129, 60, 217, 132, 219, 62, 30, 153, 137, 62, 151, 14, 183, 190, 111, 81, 161, 191, 1, 175, 170, 62, 5, 78, 150, 190, 19, 253, 77, 191, 15, 83, 162, 62, 109, 140, 74, 190, 151, 83, 100, 190, 190, 223, 27, 191, 230, 30, 109, 62, 86, 162, 190, 191, 84, 97, 145, 190, 251, 121, 231, 61, 199, 221, 100, 62, 104, 217, 130, 190, 75, 121, 157, 190, 163, 179, 219, 61, 149, 104, 113, 189, 52, 2, 28, 61, 156, 187, 11, 62, 182, 232, 24, 191, 61, 214, 142, 61, 34, 195, 130, 190, 173, 23, 108, 190, 80, 64, 223, 190, 242, 170, 97, 62, 35, 172, 41, 190, 128, 57, 101, 191, 142, 26, 8, 191, 188, 229, 87, 62, 117, 77, 85, 62, 174, 91, 129, 190, 196, 163, 68, 62, 133, 42, 46, 189, 56, 104, 77, 62, 137, 67, 251, 62, 25, 233, 83, 191, 30, 254, 160, 61, 21, 3, 199, 61, 56, 194, 95, 60, 29, 106, 108, 62, 22, 243, 23, 190, 14, 29, 127, 191, 7, 191, 157, 190, 83, 222, 7, 62, 147, 116, 132, 62, 95, 40, 204, 190, 92, 177, 15, 190, 20, 198, 143, 186, 93, 73, 7, 190, 93, 137, 30, 190, 155, 126, 160, 61, 177, 184, 242, 61, 202, 4, 18, 62, 104, 239, 131, 61, 88, 181, 23, 62, 228, 20, 110, 60, 141, 116, 157, 189, 250, 188, 151, 61, 90, 13, 243, 60, 155, 112, 200, 189, 248, 248, 23, 188, 168, 215, 167, 60, 66, 34, 163, 189, 102, 148, 51, 61, 27, 74, 171, 187, 93, 207, 21, 190, 112, 80, 239, 61, 57, 84, 209, 189, 133, 111, 69, 61, 145, 227, 2, 61, 54, 29, 245, 189, 5, 251, 51, 190, 18, 239, 35, 190, 15, 171, 247, 189, 220, 37, 154, 59, 55, 34, 7, 190, 239, 200, 245, 189, 11, 175, 163, 189, 61, 223, 19, 189, 108, 97, 127, 189, 119, 25, 174, 191, 204, 245, 129, 190, 152, 156, 238, 190, 132, 29, 209, 62, 91, 187, 23, 191, 176, 88, 126, 62, 25, 66, 1, 62, 208, 43, 128, 191, 79, 20, 207, 61, 76, 147, 51, 62, 191, 246, 71, 189, 87, 227, 2, 62, 138, 240, 104, 61, 188, 252, 33, 62, 194, 126, 16, 61, 150, 121, 106, 62, 169, 136, 83, 190, 41, 5, 150, 190, 76, 67, 137, 190, 133, 23, 10, 190, 198, 227, 161, 61, 246, 72, 51, 61, 172, 128, 85, 62, 53, 50, 51, 190, 92, 6, 28, 190, 188, 126, 216, 59, 27, 4, 81, 191, 173, 143, 58, 62, 180, 17, 66, 62, 135, 102, 231, 188, 199, 101, 157, 190, 160, 149, 163, 61, 6, 136, 79, 190, 31, 35, 229, 61, 235, 37, 226, 60, 7, 93, 132, 191, 228, 79, 146, 189, 137, 204, 66, 62, 23, 17, 129, 190, 75, 27, 73, 191, 88, 234, 132, 62, 82, 221, 178, 61, 38, 147, 232, 190, 47, 231, 32, 191, 75, 27, 177, 62, 247, 247, 186, 190, 2, 227, 71, 60, 222, 21, 150, 188, 213, 101, 75, 191, 39, 203, 33, 190, 255, 158, 251, 190, 124, 39, 77, 190, 243, 120, 164, 190, 129, 64, 140, 62, 169, 228, 90, 61, 104, 247, 70, 190, 46, 180, 233, 189, 169, 30, 53, 190, 15, 115, 149, 191, 226, 32, 137, 61, 212, 22, 162, 190, 6, 224, 37, 190, 176, 78, 71, 190, 190, 116, 146, 62, 110, 170, 32, 190, 86, 232, 6, 62, 194, 158, 36, 190, 84, 79, 95, 62, 100, 93, 9, 189, 64, 141, 127, 61, 28, 39, 45, 61, 59, 224, 98, 190, 189, 0, 42, 190, 230, 92, 41, 189, 43, 237, 10, 190, 38, 190, 77, 61, 98, 0, 16, 62, 161, 105, 85, 62, 54, 20, 11, 188, 207, 27, 219, 61, 113, 237, 128, 60, 206, 58, 50, 62, 131, 209, 20, 190, 81, 144, 26, 190, 76, 153, 65, 62, 244, 145, 13, 62, 4, 181, 71, 188, 38, 87, 185, 61, 78, 16, 200, 61, 37, 56, 94, 189, 9, 232, 7, 60, 205, 251, 16, 190, 63, 105, 19, 189, 131, 23, 7, 189, 189, 131, 224, 189, 77, 191, 8, 190, 201, 233, 249, 190, 123, 92, 11, 62, 235, 68, 11, 63, 23, 41, 190, 62, 136, 149, 13, 62, 154, 58, 121, 62, 20, 105, 124, 61, 221, 179, 172, 62, 188, 242, 148, 62, 40, 212, 172, 58, 220, 100, 161, 190, 238, 31, 25, 191, 191, 107, 10, 61, 141, 235, 47, 191, 242, 106, 79, 190, 56, 125, 72, 62, 232, 221, 113, 61, 0, 240, 135, 190, 74, 172, 52, 62, 7, 164, 211, 187, 49, 0, 232, 190, 145, 141, 63, 61, 219, 63, 168, 62, 117, 177, 184, 62, 192, 0, 254, 190, 255, 249, 89, 190, 189, 117, 217, 62, 171, 187, 17, 190, 215, 78, 167, 190, 43, 137, 203, 60, 140, 239, 151, 61, 81, 82, 185, 189, 179, 96, 69, 191, 233, 223, 151, 61, 236, 115, 8, 190, 36, 188, 85, 62, 49, 114, 33, 190, 54, 220, 30, 62, 188, 249, 136, 62, 125, 89, 164, 190, 104, 120, 64, 62, 173, 43, 214, 61, 31, 242, 45, 62, 38, 206, 5, 62, 20, 199, 206, 58, 154, 221, 66, 62, 8, 54, 202, 189, 232, 4, 183, 189, 176, 185, 163, 61, 230, 29, 215, 189, 128, 121, 111, 190, 60, 247, 130, 190, 8, 38, 70, 62, 244, 176, 14, 61, 223, 206, 19, 60, 78, 164, 134, 61, 197, 118, 7, 62, 58, 218, 233, 61, 202, 93, 32, 190, 254, 24, 243, 60, 178, 219, 133, 60, 248, 197, 2, 62, 224, 133, 177, 190, 217, 27, 175, 61, 122, 153, 38, 61, 123, 255, 134, 61, 74, 173, 113, 62, 134, 176, 124, 61, 76, 168, 10, 62, 40, 159, 37, 62, 70, 202, 39, 62, 100, 120, 100, 61, 62, 226, 95, 189, 167, 242, 243, 61, 189, 79, 201, 190, 166, 161, 17, 191, 36, 49, 16, 62, 169, 112, 62, 62, 237, 124, 230, 61, 43, 191, 190, 62, 28, 159, 163, 61, 164, 70, 210, 61, 216, 249, 39, 61, 35, 124, 0, 190, 96, 123, 149, 62, 88, 165, 218, 58, 253, 121, 76, 62, 146, 101, 161, 62, 239, 210, 194, 61, 14, 66, 139, 190, 186, 157, 155, 58, 42, 209, 24, 61, 56, 32, 60, 62, 31, 66, 187, 189, 199, 18, 197, 189, 140, 72, 223, 189, 180, 27, 171, 189, 182, 77, 171, 190, 108, 174, 159, 189, 115, 150, 82, 191, 233, 247, 49, 63, 60, 110, 250, 189, 188, 2, 136, 190, 195, 83, 9, 62, 135, 49, 47, 62, 179, 233, 63, 190, 169, 180, 182, 189, 139, 193, 152, 62, 122, 148, 85, 190, 157, 158, 9, 191, 128, 149, 234, 189, 144, 139, 4, 191, 189, 224, 64, 189, 76, 62, 42, 190, 7, 144, 25, 62, 164, 103, 40, 62, 187, 74, 253, 190, 48, 86, 162, 62, 88, 177, 78, 191, 39, 108, 165, 188, 114, 105, 64, 190, 149, 175, 68, 189, 62, 202, 159, 189, 245, 253, 7, 190, 175, 223, 184, 190, 204, 219, 24, 62, 145, 0, 242, 61, 20, 78, 99, 62, 43, 148, 190, 61, 41, 102, 212, 61, 130, 182, 198, 189, 191, 228, 168, 61, 92, 83, 192, 61, 157, 253, 126, 61, 234, 122, 28, 189, 218, 63, 225, 188, 147, 24, 20, 189, 19, 243, 212, 189, 153, 167, 207, 189, 137, 126, 106, 57, 32, 171, 8, 190, 121, 217, 174, 188, 6, 221, 15, 190, 142, 146, 16, 62, 90, 241, 45, 190, 244, 172, 62, 185, 199, 135, 33, 190, 92, 5, 170, 61, 32, 193, 59, 61, 125, 150, 130, 189, 241, 69, 106, 189, 158, 66, 220, 61, 168, 207, 23, 190, 64, 153, 201, 186, 12, 101, 47, 189, 194, 104, 177, 189, 245, 130, 203, 61, 0, 104, 101, 61, 126, 170, 27, 62, 194, 228, 50, 62, 75, 105, 224, 189, 70, 83, 78, 62, 166, 142, 153, 189, 147, 180, 26, 63, 101, 176, 209, 190, 166, 190, 192, 62, 52, 1, 169, 62, 154, 23, 92, 190, 221, 205, 129, 61, 252, 24, 91, 62, 101, 218, 249, 190, 95, 57, 51, 191, 98, 109, 49, 62, 48, 207, 170, 190, 135, 188, 220, 61, 89, 218, 145, 62, 22, 98, 129, 188, 232, 254, 244, 189, 69, 134, 221, 59, 238, 113, 197, 61, 181, 250, 198, 61, 204, 60, 60, 190, 124, 136, 194, 62, 131, 228, 91, 60, 233, 154, 18, 190, 105, 190, 135, 189, 74, 180, 80, 190, 220, 174, 42, 190, 48, 2, 163, 190, 181, 217, 47, 190, 49, 235, 31, 62, 242, 113, 140, 191, 227, 16, 47, 189, 201, 81, 50, 190, 106, 154, 215, 62, 150, 181, 243, 61, 132, 93, 8, 62, 115, 238, 58, 189, 58, 90, 163, 61, 21, 155, 51, 62, 116, 164, 28, 62, 174, 183, 202, 61, 35, 185, 208, 61, 217, 15, 178, 188, 240, 110, 187, 189, 145, 231, 180, 61, 173, 8, 148, 61, 119, 240, 104, 62, 221, 41, 215, 61, 209, 242, 210, 189, 250, 57, 214, 189, 246, 153, 132, 189, 38, 249, 216, 189, 163, 206, 14, 62, 176, 3, 58, 62, 109, 219, 159, 61, 157, 52, 229, 60, 200, 4, 6, 62, 168, 200, 91, 62, 134, 244, 210, 61, 176, 175, 75, 188, 4, 195, 46, 190, 183, 144, 51, 62, 221, 49, 7, 62, 175, 155, 150, 59, 46, 75, 177, 61, 128, 7, 144, 62, 12, 229, 125, 61, 48, 78, 110, 62, 99, 198, 88, 62, 58, 252, 36, 190, 87, 156, 151, 190, 49, 202, 110, 189, 211, 153, 127, 60, 225, 110, 243, 62, 205, 61, 227, 62, 10, 249, 91, 62, 12, 243, 150, 190, 47, 215, 117, 60, 86, 108, 9, 63, 87, 6, 154, 191, 9, 118, 134, 61, 213, 102, 82, 191, 235, 10, 156, 62, 38, 82, 230, 189, 24, 39, 149, 190, 151, 188, 61, 62, 202, 204, 154, 190, 133, 136, 202, 61, 91, 133, 9, 61, 25, 66, 189, 189, 203, 133, 84, 190, 180, 44, 23, 190, 67, 20, 44, 191, 195, 101, 53, 61, 173, 161, 115, 190, 16, 157, 3, 61, 21, 137, 24, 62, 212, 35, 68, 61, 99, 96, 251, 61, 173, 55, 35, 190, 234, 137, 149, 60, 171, 212, 12, 190, 223, 207, 38, 190, 88, 123, 191, 60, 6, 48, 173, 189, 202, 112, 187, 188, 113, 104, 16, 190, 159, 28, 65, 190, 226, 195, 200, 60, 165, 247, 176, 189, 41, 230, 35, 61, 22, 240, 22, 62, 160, 195, 119, 61, 211, 57, 60, 189, 166, 124, 19, 190, 184, 106, 32, 190, 115, 147, 85, 61, 98, 140, 92, 61, 200, 238, 11, 189, 60, 132, 209, 189, 217, 12, 246, 60, 63, 32, 10, 62, 39, 46, 228, 60, 232, 145, 24, 190, 130, 66, 76, 188, 151, 184, 35, 60, 61, 115, 11, 189, 164, 224, 220, 61, 155, 152, 225, 61, 115, 209, 180, 61, 81, 242, 9, 61, 15, 19, 48, 191, 153, 102, 173, 62, 36, 228, 7, 62, 240, 41, 152, 191, 117, 19, 141, 62, 238, 223, 227, 62, 91, 99, 160, 190, 141, 232, 93, 190, 70, 97, 37, 60, 97, 65, 23, 191, 106, 253, 222, 62, 143, 242, 172, 62, 101, 65, 101, 61, 53, 245, 128, 189, 122, 10, 119, 190, 216, 58, 191, 189, 110, 38, 68, 190, 225, 232, 20, 191, 194, 131, 177, 62, 93, 134, 20, 62, 21, 33, 14, 190, 122, 100, 167, 188, 89, 227, 121, 191, 153, 65, 25, 189, 210, 34, 10, 191, 97, 189, 26, 190, 126, 163, 63, 189, 135, 150, 150, 191, 68, 94, 213, 191, 57, 44, 21, 191, 56, 17, 171, 191, 246, 39, 146, 62, 255, 50, 104, 191, 186, 132, 144, 61, 128, 33, 202, 62, 186, 119, 135, 190, 162, 92, 47, 189, 39, 11, 22, 189, 223, 80, 30, 62, 175, 13, 28, 62, 202, 255, 139, 190, 226, 166, 194, 62, 55, 0, 120, 190, 186, 136, 28, 62, 8, 136, 42, 190, 168, 32, 244, 190, 185, 50, 163, 190, 214, 177, 65, 190, 116, 93, 7, 63, 11, 65, 77, 189, 100, 250, 141, 62, 136, 36, 165, 188, 207, 129, 233, 190, 59, 12, 117, 62, 95, 184, 106, 190, 118, 78, 75, 62, 249, 202, 95, 62, 107, 196, 53, 62, 96, 211, 28, 190, 174, 137, 131, 62, 60, 243, 112, 188, 104, 104, 213, 60, 198, 90, 222, 62, 111, 156, 95, 62, 161, 60, 88, 62, 81, 199, 231, 190, 242, 164, 248, 190, 199, 236, 180, 190, 244, 218, 211, 62, 75, 60, 253, 189, 18, 72, 84, 191, 150, 58, 24, 191, 218, 54, 141, 62, 100, 85, 111, 190, 33, 77, 251, 189, 46, 240, 8, 190, 227, 198, 88, 190, 4, 117, 31, 61, 203, 161, 177, 62, 34, 148, 188, 191, 123, 84, 51, 190, 137, 120, 67, 62, 170, 227, 147, 188, 201, 193, 28, 62, 37, 209, 179, 190, 85, 169, 215, 190, 230, 178, 214, 190, 30, 101, 21, 61, 182, 139, 73, 189, 96, 252, 40, 191, 145, 107, 225, 190, 77, 9, 199, 61, 67, 142, 207, 191, 39, 116, 56, 191, 25, 94, 223, 190, 3, 39, 201, 61, 244, 175, 153, 190, 32, 82, 153, 189, 78, 56, 80, 62, 136, 221, 54, 190, 163, 219, 193, 62, 63, 48, 176, 60, 130, 153, 79, 62, 42, 173, 162, 62, 139, 40, 149, 62, 237, 170, 185, 61, 238, 215, 117, 190, 52, 89, 100, 190, 89, 44, 180, 61, 237, 202, 201, 190, 137, 95, 143, 190, 228, 112, 122, 189, 199, 167, 55, 189, 56, 218, 19, 61, 41, 92, 166, 190, 64, 197, 22, 190, 64, 24, 148, 188, 4, 55, 24, 61, 202, 136, 5, 190, 137, 237, 84, 189, 28, 231, 187, 62, 189, 34, 114, 62, 236, 97, 162, 190, 71, 251, 77, 62, 241, 95, 209, 189, 77, 186, 174, 189, 84, 205, 75, 62, 238, 40, 250, 190, 24, 111, 84, 190, 181, 58, 3, 61, 222, 21, 61, 190, 245, 189, 35, 61, 226, 39, 247, 188, 148, 111, 43, 62, 105, 43, 232, 61, 217, 66, 8, 190, 60, 108, 19, 190, 88, 186, 156, 190, 207, 64, 145, 189, 150, 133, 34, 190, 19, 165, 242, 188, 90, 158, 16, 61, 122, 174, 129, 189, 27, 146, 163, 62, 244, 67, 165, 59, 16, 196, 221, 190, 215, 189, 246, 61, 114, 89, 6, 62, 103, 196, 11, 190, 193, 198, 238, 61, 168, 181, 168, 61, 43, 241, 119, 190, 179, 52, 136, 190, 119, 189, 169, 189, 184, 237, 151, 61, 223, 97, 231, 190, 174, 124, 184, 190, 36, 198, 159, 189, 103, 185, 76, 189, 139, 97, 73, 188, 33, 225, 133, 189, 49, 244, 244, 61, 21, 229, 82, 60, 108, 218, 123, 191, 252, 9, 130, 62, 136, 194, 241, 60, 131, 42, 133, 189, 78, 149, 229, 61, 82, 137, 133, 62, 99, 89, 8, 61, 239, 200, 58, 189, 14, 236, 49, 190, 191, 213, 16, 61, 116, 53, 7, 190, 252, 17, 209, 189, 3, 193, 39, 191, 18, 126, 146, 59, 118, 88, 214, 61, 123, 219, 139, 61, 131, 16, 116, 190, 134, 9, 184, 188, 247, 148, 119, 190, 160, 146, 95, 191, 233, 231, 176, 60, 21, 50, 42, 62, 109, 181, 196, 61, 14, 127, 74, 190, 248, 82, 24, 62, 66, 227, 144, 190, 67, 140, 204, 188, 89, 131, 136, 62, 39, 183, 242, 61, 248, 20, 244, 61, 154, 83, 140, 189, 164, 208, 34, 62, 28, 88, 140, 191, 52, 129, 139, 62, 239, 246, 20, 189, 143, 203, 54, 188, 180, 2, 165, 62, 133, 136, 59, 62, 242, 188, 217, 60, 34, 244, 24, 62, 49, 68, 91, 190, 168, 50, 36, 62, 237, 182, 35, 62, 152, 139, 249, 189, 16, 11, 189, 190, 12, 163, 6, 190, 211, 230, 5, 61, 126, 113, 244, 61, 7, 172, 14, 190, 224, 13, 169, 190, 156, 13, 199, 188, 10, 78, 75, 191, 234, 199, 161, 61, 14, 166, 26, 61, 112, 18, 248, 61, 106, 130, 187, 188, 108, 249, 208, 188, 72, 0, 26, 191, 98, 31, 18, 189, 126, 170, 186, 190, 19, 21, 242, 62, 26, 113, 86, 191, 154, 251, 224, 61, 242, 17, 213, 62, 161, 99, 190, 190, 138, 195, 134, 61, 18, 129, 158, 61, 195, 85, 43, 190, 89, 185, 71, 190, 238, 145, 156, 190, 219, 128, 160, 62, 165, 98, 103, 190, 65, 143, 17, 61, 193, 150, 147, 61, 159, 173, 182, 189, 197, 181, 91, 190, 224, 185, 229, 188, 158, 40, 17, 62, 12, 254, 26, 190, 20, 54, 94, 62, 44, 138, 144, 189, 210, 36, 108, 190, 21, 19, 188, 188, 244, 68, 151, 60, 216, 156, 55, 62, 216, 9, 233, 60, 212, 227, 66, 190, 170, 51, 7, 190, 72, 125, 16, 190, 31, 18, 109, 189, 152, 93, 9, 190, 52, 157, 36, 61, 112, 56, 25, 190, 80, 18, 218, 61, 143, 6, 232, 189, 46, 1, 21, 62, 153, 226, 41, 190, 31, 241, 86, 190, 208, 124, 11, 62, 183, 58, 29, 190, 93, 54, 52, 61, 152, 254, 56, 190, 158, 133, 16, 190, 101, 44, 30, 190, 79, 86, 189, 188, 6, 163, 252, 188, 105, 124, 138, 61, 80, 230, 192, 188, 118, 136, 28, 190, 173, 75, 102, 61, 138, 254, 66, 61, 249, 42, 2, 61, 28, 183, 58, 190, 57, 131, 22, 189, 215, 36, 191, 61, 208, 25, 232, 189, 227, 113, 63, 190, 236, 82, 85, 189, 187, 178, 53, 190, 126, 172, 251, 61, 199, 23, 188, 189, 114, 228, 196, 61, 104, 177, 15, 190, 39, 8, 144, 61, 205, 205, 93, 61, 107, 37, 154, 61, 126, 241, 31, 189, 153, 234, 28, 190, 248, 234, 23, 62, 143, 186, 92, 61, 37, 145, 224, 60, 69, 133, 231, 61, 138, 93, 103, 188, 197, 128, 55, 190, 128, 48, 185, 61, 100, 92, 181, 189, 18, 250, 232, 61, 83, 116, 168, 189, 209, 77, 141, 189, 254, 159, 192, 189, 192, 151, 139, 189, 61, 207, 235, 60, 171, 78, 47, 190, 191, 71, 2, 190, 58, 58, 12, 190, 176, 139, 9, 61, 77, 211, 42, 62, 27, 73, 160, 61, 147, 79, 20, 190, 68, 63, 160, 189, 70, 8, 204, 189, 187, 207, 137, 187, 142, 251, 236, 189, 226, 140, 8, 60, 242, 80, 140, 61, 83, 213, 74, 188, 4, 217, 44, 62, 170, 146, 36, 190, 235, 255, 183, 186, 35, 105, 146, 61, 198, 64, 209, 60, 219, 141, 198, 61, 114, 234, 71, 61, 65, 252, 103, 61, 10, 90, 27, 62, 23, 183, 52, 190, 132, 65, 16, 190, 28, 64, 133, 61, 219, 243, 36, 189, 115, 193, 236, 189, 251, 9, 220, 187, 181, 183, 174, 189, 24, 181, 186, 61, 110, 122, 175, 189, 253, 234, 43, 190, 132, 186, 207, 189, 175, 4, 23, 190, 39, 149, 246, 189, 162, 3, 15, 62, 152, 121, 45, 190, 154, 176, 194, 189, 123, 7, 182, 188, 32, 217, 123, 60, 83, 184, 170, 61, 242, 121, 241, 189, 110, 39, 184, 187, 124, 149, 34, 61, 167, 113, 102, 61, 165, 105, 208, 62, 23, 159, 233, 190, 115, 149, 185, 62, 196, 211, 75, 62, 238, 217, 73, 190, 189, 239, 65, 187, 10, 70, 184, 62, 51, 167, 73, 189, 116, 246, 28, 190, 84, 28, 161, 189, 203, 175, 144, 190, 154, 215, 206, 61, 66, 58, 75, 62, 63, 56, 14, 190, 100, 245, 181, 61, 14, 230, 153, 190, 66, 78, 179, 62, 98, 2, 121, 61, 171, 14, 161, 190, 32, 212, 218, 62, 129, 42, 91, 59, 189, 4, 145, 190, 239, 107, 140, 61, 38, 0, 61, 190, 128, 22, 57, 189, 108, 203, 218, 190, 238, 51, 72, 62, 53, 45, 37, 59, 177, 196, 63, 191, 120, 2, 6, 190, 61, 177, 49, 61, 214, 189, 61, 190, 243, 12, 202, 62, 140, 161, 120, 191, 167, 253, 194, 62, 0, 189, 164, 62, 47, 202, 22, 190, 26, 203, 107, 62, 7, 215, 79, 62, 189, 218, 53, 190, 204, 139, 205, 190, 245, 244, 186, 189, 98, 45, 217, 189, 124, 88, 142, 61, 184, 44, 40, 62, 106, 153, 171, 189, 181, 232, 130, 190, 94, 168, 89, 190, 87, 2, 88, 62, 221, 71, 36, 190, 139, 197, 141, 190, 214, 137, 152, 62, 68, 133, 216, 189, 203, 220, 32, 189, 52, 115, 130, 188, 116, 121, 169, 60, 189, 19, 109, 188, 119, 225, 158, 190, 245, 214, 168, 61, 66, 140, 124, 62, 234, 199, 18, 191, 85, 153, 66, 62, 59, 188, 26, 186, 170, 125, 63, 62, 48, 76, 159, 190, 241, 195, 204, 62, 177, 83, 138, 60, 106, 104, 178, 189, 101, 43, 169, 61, 241, 78, 129, 60, 250, 192, 4, 190, 162, 58, 166, 62, 90, 127, 1, 63, 181, 137, 35, 189, 122, 167, 187, 190, 36, 47, 195, 61, 72, 46, 139, 190, 142, 195, 230, 61, 141, 54, 27, 62, 16, 202, 139, 62, 42, 163, 238, 62, 216, 130, 210, 189, 247, 145, 101, 62, 252, 218, 93, 190, 116, 181, 145, 189, 26, 56, 24, 62, 155, 246, 68, 190, 66, 179, 183, 187, 52, 239, 229, 189, 173, 132, 157, 61, 95, 55, 184, 189, 248, 169, 81, 62, 69, 231, 253, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 148, 5, 190, 195, 76, 241, 189, 15, 80, 170, 62, 154, 33, 131, 62, 248, 1, 0, 62, 183, 151, 124, 188, 89, 58, 118, 62, 219, 216, 38, 62, 191, 114, 42, 60, 187, 251, 24, 62, 217, 54, 132, 62, 21, 226, 178, 61, 238, 167, 38, 62, 115, 181, 35, 190, 222, 237, 191, 189, 97, 194, 163, 57, 27, 44, 190, 189, 95, 78, 117, 189, 203, 85, 58, 62, 46, 46, 6, 62, 234, 243, 158, 62, 234, 192, 142, 189, 209, 188, 131, 190, 237, 238, 139, 62, 141, 250, 155, 62, 73, 226, 67, 61, 209, 229, 210, 61, 214, 139, 73, 190, 110, 38, 236, 61, 58, 206, 41, 189, 104, 2, 15, 189, 102, 197, 196, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 45, 69, 191, 183, 78, 44, 190, 222, 184, 113, 188, 77, 149, 100, 191, 133, 108, 22, 191, 254, 2, 157, 60, 128, 67, 253, 62, 231, 40, 214, 61, 243, 190, 138, 187, 133, 139, 38, 191, 163, 113, 251, 61, 143, 69, 32, 190, 45, 168, 242, 62, 206, 93, 146, 58, 154, 48, 16, 63, 186, 170, 211, 189, 69, 246, 207, 62, 132, 182, 94, 189, 110, 184, 80, 63, 200, 117, 113, 63, 33, 20, 139, 191, 55, 155, 40, 63, 105, 35, 139, 190, 99, 111, 68, 61, 150, 116, 215, 60, 143, 208, 48, 63, 158, 8, 198, 189, 5, 145, 132, 61, 75, 167, 9, 188, 241, 100, 5, 63, 23, 178, 234, 62, 122, 92, 134, 62, 9, 104, 153, 61, 19, 50, 44, 189, 177, 156, 161, 190, 80, 243, 148, 62, 143, 95, 138, 188, 207, 205, 112, 189, 201, 57, 34, 62, 237, 203, 68, 191, 109, 110, 218, 189, 36, 204, 4, 190, 28, 42, 73, 190, 126, 113, 144, 190, 97, 169, 229, 189, 95, 166, 105, 189, 21, 3, 145, 189, 133, 184, 10, 188, 96, 47, 175, 61, 255, 173, 150, 61, 137, 102, 100, 190, 23, 193, 100, 62, 193, 190, 58, 190, 106, 21, 141, 62, 197, 68, 201, 62, 126, 58, 156, 190, 174, 93, 138, 190, 103, 80, 132, 62, 5, 211, 112, 189, 114, 221, 60, 61, 186, 19, 50, 62, 147, 118, 67, 60, 77, 114, 136, 62, 153, 75, 254, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 4, 55, 190, 241, 163, 157, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {25, 231, 134, 63, 132, 243, 137, 63, 247, 80, 244, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {92, 162, 110, 191, 178, 111, 0, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0098/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}