// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 58, 13, 191, 89, 70, 180, 62, 99, 111, 221, 189, 61, 61, 81, 62, 200, 33, 58, 62, 93, 221, 172, 190, 92, 161, 35, 61, 178, 245, 9, 63, 44, 239, 183, 189, 10, 242, 182, 189, 177, 28, 117, 190, 134, 34, 141, 189, 164, 247, 154, 62, 53, 110, 7, 63, 33, 203, 10, 62, 53, 254, 16, 63, 214, 53, 98, 190, 203, 171, 228, 190, 65, 126, 197, 190, 213, 206, 233, 190, 153, 177, 140, 62, 214, 57, 194, 189, 224, 157, 223, 190, 95, 130, 72, 189, 225, 72, 107, 62, 235, 253, 219, 62, 227, 14, 182, 187, 143, 102, 227, 62, 65, 249, 228, 190, 221, 247, 195, 190, 39, 131, 134, 190, 184, 43, 77, 61, 66, 116, 194, 61, 215, 200, 179, 190, 23, 148, 22, 61, 129, 99, 203, 61, 235, 144, 174, 190, 16, 108, 226, 62, 111, 222, 113, 190, 208, 8, 168, 190, 139, 254, 158, 61, 230, 85, 149, 188, 55, 140, 217, 62, 63, 95, 16, 191, 147, 148, 18, 63, 126, 92, 4, 63, 127, 218, 228, 190, 89, 67, 199, 61, 81, 170, 238, 62, 97, 93, 51, 190, 53, 165, 14, 63, 230, 28, 107, 190, 34, 139, 165, 61, 127, 233, 10, 191, 6, 178, 23, 189, 158, 21, 130, 189, 21, 238, 13, 63, 176, 122, 7, 63, 105, 43, 2, 190, 95, 167, 147, 190, 249, 15, 210, 189, 2, 172, 167, 61, 90, 189, 202, 190, 38, 41, 79, 190, 5, 87, 228, 62, 37, 178, 186, 62, 197, 136, 10, 63, 27, 150, 244, 190, 105, 231, 77, 190, 42, 178, 185, 62, 28, 128, 191, 60, 83, 22, 149, 62, 205, 47, 97, 190, 36, 9, 64, 62, 15, 65, 222, 190, 117, 81, 80, 190, 28, 5, 156, 189, 117, 157, 54, 62, 7, 226, 221, 61, 113, 57, 146, 189, 222, 154, 134, 190, 103, 234, 49, 190, 167, 224, 190, 61, 93, 187, 247, 190, 254, 103, 187, 190, 176, 225, 212, 62, 5, 68, 35, 190, 37, 91, 1, 191, 186, 132, 151, 62, 254, 192, 243, 62, 244, 175, 186, 190, 157, 19, 112, 190, 156, 91, 15, 191, 104, 182, 134, 190, 124, 1, 208, 62, 66, 126, 148, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 146, 19, 191, 141, 58, 144, 62, 34, 153, 147, 190, 214, 152, 138, 190, 223, 237, 132, 189, 49, 178, 71, 190, 60, 239, 159, 62, 228, 219, 186, 190, 35, 187, 14, 63, 118, 39, 27, 62, 12, 22, 76, 189, 4, 45, 205, 57, 147, 75, 19, 63, 199, 158, 59, 61, 115, 236, 197, 190, 245, 112, 143, 61, 199, 245, 81, 62, 113, 78, 194, 62, 214, 240, 162, 189, 87, 198, 202, 190, 153, 45, 6, 63, 209, 238, 6, 63, 200, 239, 3, 63, 89, 26, 148, 62, 184, 254, 174, 62, 243, 113, 181, 190, 91, 142, 166, 190, 233, 181, 242, 62, 214, 186, 238, 62, 74, 103, 187, 62, 141, 108, 17, 191, 131, 19, 62, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 42, 184, 188, 131, 247, 225, 61, 158, 217, 155, 60, 2, 185, 10, 62, 93, 84, 135, 188, 107, 94, 220, 189, 184, 208, 38, 189, 134, 130, 20, 188, 220, 42, 25, 61, 136, 107, 5, 190, 84, 127, 153, 61, 138, 134, 229, 188, 5, 143, 247, 60, 13, 218, 31, 190, 59, 217, 113, 61, 118, 69, 93, 189, 122, 237, 57, 188, 22, 123, 38, 190, 248, 218, 25, 62, 86, 185, 38, 62, 201, 123, 70, 189, 109, 241, 30, 62, 103, 146, 254, 189, 24, 241, 4, 188, 127, 209, 199, 61, 122, 24, 25, 61, 4, 133, 146, 189, 137, 229, 128, 60, 29, 233, 21, 188, 4, 243, 113, 60, 241, 220, 195, 58, 54, 120, 82, 60, 179, 226, 115, 60, 219, 237, 8, 190, 233, 215, 223, 61, 28, 171, 169, 189, 144, 100, 200, 189, 107, 68, 31, 190, 242, 21, 218, 61, 134, 54, 47, 61, 175, 141, 48, 62, 26, 191, 129, 61, 41, 178, 7, 190, 57, 37, 32, 190, 239, 61, 40, 190, 67, 252, 239, 189, 143, 242, 33, 190, 48, 210, 51, 189, 219, 79, 58, 60, 199, 182, 25, 190, 71, 0, 21, 61, 162, 22, 201, 61, 87, 15, 22, 190, 124, 83, 191, 189, 127, 35, 150, 59, 29, 223, 137, 189, 243, 141, 159, 189, 18, 246, 46, 62, 187, 5, 190, 61, 26, 8, 199, 189, 218, 107, 96, 61, 184, 145, 20, 190, 133, 187, 176, 188, 15, 201, 30, 62, 51, 228, 189, 61, 155, 207, 227, 189, 67, 97, 76, 61, 26, 239, 17, 187, 207, 10, 82, 61, 103, 160, 210, 189, 218, 215, 213, 59, 143, 168, 164, 61, 43, 188, 149, 187, 160, 105, 162, 189, 17, 20, 78, 61, 208, 126, 213, 189, 127, 83, 27, 62, 53, 74, 188, 189, 192, 248, 48, 62, 13, 165, 18, 190, 2, 191, 202, 61, 17, 221, 184, 60, 255, 159, 184, 189, 226, 87, 32, 190, 46, 104, 252, 61, 105, 150, 165, 189, 234, 213, 33, 62, 95, 27, 203, 188, 168, 63, 13, 62, 226, 46, 157, 61, 87, 132, 43, 62, 12, 147, 5, 62, 136, 171, 132, 188, 84, 137, 58, 61, 237, 8, 9, 189, 174, 187, 16, 190, 74, 78, 185, 61, 145, 171, 178, 61, 251, 5, 161, 61, 140, 134, 12, 190, 229, 16, 254, 61, 98, 246, 202, 61, 253, 111, 244, 60, 98, 202, 33, 62, 154, 21, 107, 189, 248, 217, 248, 189, 21, 149, 175, 189, 19, 98, 35, 62, 35, 84, 167, 189, 2, 45, 62, 60, 104, 53, 155, 189, 205, 187, 1, 62, 56, 245, 252, 189, 244, 110, 31, 62, 204, 91, 21, 62, 155, 68, 212, 189, 47, 132, 236, 188, 20, 65, 46, 190, 34, 177, 31, 190, 174, 131, 21, 190, 180, 34, 179, 60, 168, 201, 50, 190, 197, 194, 14, 61, 11, 126, 82, 189, 215, 216, 193, 60, 5, 25, 52, 189, 208, 169, 129, 189, 67, 65, 221, 61, 57, 200, 37, 190, 244, 66, 74, 189, 13, 180, 19, 190, 23, 165, 69, 61, 16, 165, 121, 189, 237, 244, 237, 189, 118, 236, 1, 190, 37, 246, 43, 190, 88, 152, 22, 187, 155, 5, 171, 189, 123, 67, 222, 61, 87, 78, 10, 61, 201, 126, 92, 61, 210, 62, 15, 60, 94, 196, 9, 190, 74, 85, 20, 62, 16, 169, 20, 61, 67, 65, 234, 61, 92, 235, 28, 62, 221, 53, 215, 189, 184, 118, 9, 190, 5, 154, 49, 62, 228, 52, 103, 189, 170, 49, 245, 189, 224, 86, 251, 189, 79, 111, 81, 59, 34, 163, 242, 188, 206, 230, 120, 52, 45, 64, 129, 59, 85, 113, 50, 190, 17, 25, 39, 61, 103, 101, 221, 61, 93, 73, 7, 190, 93, 137, 30, 190, 155, 126, 160, 61, 133, 8, 244, 61, 131, 134, 18, 62, 104, 239, 131, 61, 104, 247, 26, 62, 228, 20, 110, 60, 141, 116, 157, 189, 250, 188, 151, 61, 121, 202, 253, 60, 234, 62, 200, 189, 248, 248, 23, 188, 97, 233, 170, 60, 244, 174, 156, 189, 205, 214, 54, 61, 153, 206, 254, 186, 93, 207, 21, 190, 251, 44, 244, 61, 57, 84, 209, 189, 117, 91, 70, 61, 250, 243, 10, 61, 54, 29, 245, 189, 119, 116, 50, 190, 18, 239, 35, 190, 57, 125, 244, 189, 220, 37, 154, 59, 55, 34, 7, 190, 142, 180, 245, 189, 235, 223, 155, 189, 61, 223, 19, 189, 87, 147, 123, 189, 196, 254, 199, 189, 102, 219, 151, 189, 162, 234, 94, 61, 118, 165, 53, 61, 97, 179, 92, 61, 15, 251, 19, 62, 243, 116, 188, 189, 152, 216, 11, 190, 166, 162, 23, 189, 129, 61, 89, 61, 230, 156, 179, 61, 190, 69, 23, 61, 128, 242, 2, 190, 208, 164, 25, 59, 0, 255, 33, 62, 101, 119, 9, 62, 207, 37, 5, 190, 131, 131, 80, 189, 131, 216, 48, 60, 215, 230, 29, 61, 83, 115, 25, 190, 185, 42, 242, 61, 71, 88, 240, 60, 152, 29, 219, 189, 188, 123, 21, 188, 13, 204, 203, 61, 245, 238, 37, 62, 253, 39, 109, 61, 205, 212, 12, 62, 50, 20, 104, 189, 193, 72, 39, 190, 147, 65, 59, 61, 70, 194, 18, 190, 20, 121, 230, 187, 64, 197, 255, 189, 80, 85, 96, 61, 191, 146, 28, 190, 58, 215, 4, 62, 166, 118, 24, 189, 54, 13, 39, 190, 157, 164, 212, 188, 117, 33, 155, 60, 60, 219, 150, 61, 249, 201, 9, 190, 240, 74, 14, 62, 41, 39, 227, 189, 124, 239, 21, 62, 244, 176, 48, 62, 254, 239, 25, 190, 10, 134, 197, 189, 178, 65, 103, 61, 4, 188, 233, 188, 142, 231, 244, 189, 140, 195, 6, 62, 13, 152, 120, 61, 190, 192, 63, 61, 75, 186, 33, 62, 87, 104, 228, 188, 145, 112, 26, 190, 198, 19, 21, 62, 205, 131, 0, 190, 200, 245, 211, 188, 77, 200, 187, 59, 233, 128, 24, 62, 32, 29, 57, 61, 113, 158, 14, 62, 135, 27, 119, 189, 228, 16, 43, 61, 39, 179, 1, 62, 136, 148, 241, 60, 131, 242, 64, 189, 47, 157, 223, 189, 43, 143, 31, 190, 144, 182, 183, 189, 232, 207, 200, 189, 129, 218, 121, 189, 18, 2, 180, 61, 124, 198, 200, 61, 251, 5, 231, 61, 218, 134, 25, 62, 79, 175, 149, 61, 80, 3, 26, 62, 65, 62, 162, 189, 222, 91, 217, 60, 201, 5, 226, 61, 6, 219, 251, 61, 84, 183, 30, 188, 123, 110, 50, 62, 49, 233, 4, 62, 127, 0, 93, 61, 24, 77, 9, 189, 239, 133, 49, 190, 187, 233, 142, 189, 137, 123, 174, 189, 9, 233, 244, 187, 166, 111, 215, 189, 242, 206, 138, 189, 232, 6, 72, 60, 113, 68, 5, 62, 214, 89, 217, 189, 106, 113, 187, 188, 120, 81, 207, 61, 188, 156, 137, 61, 55, 215, 145, 61, 43, 150, 142, 61, 161, 58, 243, 189, 136, 123, 190, 61, 177, 14, 19, 62, 207, 105, 49, 189, 180, 207, 13, 188, 148, 33, 38, 190, 185, 107, 248, 189, 80, 52, 178, 189, 145, 73, 20, 190, 150, 73, 6, 60, 194, 156, 6, 190, 21, 139, 71, 189, 207, 187, 73, 61, 218, 36, 203, 61, 118, 21, 216, 61, 4, 222, 250, 189, 155, 34, 61, 188, 9, 247, 168, 61, 226, 58, 148, 188, 178, 29, 110, 189, 161, 231, 42, 62, 45, 249, 141, 188, 122, 57, 78, 61, 126, 171, 49, 190, 0, 22, 63, 187, 53, 119, 14, 62, 101, 15, 207, 189, 158, 2, 144, 189, 29, 141, 210, 61, 36, 232, 168, 61, 162, 100, 17, 190, 228, 83, 11, 62, 134, 203, 106, 60, 94, 155, 178, 61, 167, 51, 178, 189, 3, 15, 253, 189, 114, 129, 19, 61, 36, 128, 227, 188, 106, 171, 108, 189, 99, 122, 187, 61, 115, 73, 240, 189, 241, 116, 33, 190, 122, 77, 249, 189, 156, 246, 205, 61, 12, 48, 188, 189, 134, 229, 72, 189, 29, 22, 29, 62, 26, 182, 36, 62, 109, 193, 27, 62, 228, 212, 235, 189, 83, 121, 51, 188, 89, 38, 192, 61, 113, 175, 25, 61, 23, 129, 1, 190, 5, 238, 204, 186, 19, 173, 213, 59, 147, 203, 174, 187, 87, 37, 24, 62, 235, 98, 17, 61, 228, 126, 236, 61, 106, 33, 33, 62, 101, 20, 143, 61, 168, 172, 30, 61, 223, 238, 36, 190, 58, 51, 199, 61, 31, 43, 177, 189, 106, 250, 3, 190, 158, 138, 86, 61, 45, 239, 211, 188, 223, 218, 112, 61, 54, 209, 228, 61, 170, 143, 156, 61, 4, 102, 88, 60, 191, 234, 60, 189, 114, 233, 40, 62, 131, 19, 29, 62, 97, 242, 190, 187, 20, 137, 133, 187, 123, 54, 200, 61, 174, 255, 188, 61, 239, 12, 73, 188, 192, 3, 245, 189, 66, 106, 133, 189, 196, 121, 160, 61, 182, 66, 19, 189, 68, 140, 224, 188, 53, 54, 44, 188, 28, 99, 174, 61, 103, 47, 140, 189, 138, 185, 221, 60, 227, 142, 255, 189, 65, 164, 243, 60, 108, 240, 119, 189, 38, 233, 40, 62, 202, 96, 9, 62, 154, 35, 41, 190, 75, 224, 234, 59, 22, 176, 187, 189, 236, 176, 39, 62, 166, 8, 173, 189, 162, 30, 14, 190, 205, 37, 252, 61, 48, 214, 178, 189, 233, 28, 251, 188, 178, 53, 133, 189, 76, 14, 143, 187, 164, 103, 40, 62, 157, 74, 23, 189, 153, 88, 76, 61, 172, 133, 16, 190, 20, 215, 132, 189, 71, 1, 29, 190, 231, 2, 234, 61, 62, 202, 159, 189, 209, 131, 196, 59, 145, 196, 0, 61, 17, 154, 36, 62, 149, 187, 250, 61, 138, 240, 0, 189, 147, 181, 193, 61, 199, 213, 219, 61, 8, 197, 198, 189, 242, 22, 171, 61, 92, 83, 192, 61, 201, 80, 135, 61, 234, 122, 28, 189, 218, 63, 225, 188, 191, 9, 17, 189, 45, 76, 205, 189, 153, 167, 207, 189, 137, 126, 106, 57, 141, 125, 5, 190, 206, 164, 159, 188, 6, 221, 15, 190, 142, 146, 16, 62, 90, 241, 45, 190, 27, 82, 191, 59, 199, 135, 33, 190, 93, 182, 173, 61, 59, 9, 79, 61, 125, 150, 130, 189, 112, 79, 95, 189, 158, 66, 220, 61, 93, 4, 19, 190, 64, 153, 201, 186, 235, 221, 39, 189, 215, 160, 166, 189, 199, 197, 209, 61, 0, 104, 101, 61, 224, 224, 32, 62, 194, 228, 50, 62, 187, 99, 14, 189, 87, 124, 36, 62, 4, 236, 125, 188, 154, 173, 186, 61, 18, 26, 16, 61, 214, 72, 23, 62, 236, 20, 37, 61, 49, 158, 7, 189, 66, 18, 129, 60, 28, 142, 130, 187, 250, 150, 16, 190, 210, 2, 233, 189, 210, 23, 31, 62, 147, 175, 12, 190, 242, 219, 0, 189, 146, 227, 47, 62, 107, 178, 239, 61, 113, 196, 179, 189, 128, 169, 224, 61, 107, 247, 166, 189, 23, 45, 31, 62, 207, 153, 41, 62, 121, 162, 22, 62, 215, 175, 157, 188, 148, 210, 113, 188, 116, 182, 3, 62, 164, 211, 42, 190, 36, 100, 236, 189, 173, 163, 227, 187, 79, 140, 175, 189, 160, 141, 178, 61, 1, 87, 50, 190, 252, 227, 255, 61, 169, 36, 5, 190, 249, 243, 185, 60, 112, 185, 194, 60, 78, 184, 67, 188, 98, 207, 57, 61, 174, 59, 44, 62, 44, 234, 10, 190, 193, 7, 62, 61, 122, 142, 36, 62, 207, 129, 177, 61, 203, 59, 162, 61, 150, 100, 215, 189, 93, 253, 10, 62, 244, 163, 252, 61, 178, 11, 138, 61, 157, 229, 189, 61, 228, 138, 135, 189, 166, 147, 104, 189, 75, 25, 174, 189, 143, 97, 36, 189, 227, 28, 163, 61, 139, 23, 34, 61, 17, 127, 150, 61, 158, 254, 189, 61, 18, 15, 231, 60, 193, 25, 136, 189, 142, 32, 37, 189, 177, 250, 28, 190, 59, 154, 46, 190, 53, 228, 13, 62, 81, 237, 165, 60, 70, 30, 204, 189, 191, 167, 251, 60, 105, 122, 239, 61, 175, 30, 236, 189, 151, 65, 201, 61, 120, 228, 45, 62, 60, 47, 255, 189, 165, 214, 175, 189, 138, 180, 50, 190, 94, 55, 208, 188, 62, 81, 187, 189, 27, 181, 181, 60, 138, 204, 27, 62, 183, 1, 224, 189, 203, 189, 32, 62, 58, 53, 62, 61, 143, 98, 47, 190, 70, 69, 185, 60, 16, 221, 27, 61, 12, 78, 227, 188, 39, 239, 33, 188, 36, 173, 97, 61, 156, 158, 96, 61, 66, 171, 29, 189, 99, 187, 52, 61, 81, 130, 38, 190, 36, 80, 37, 61, 175, 19, 20, 190, 145, 233, 148, 189, 75, 111, 51, 190, 252, 239, 179, 60, 183, 109, 103, 61, 16, 157, 3, 61, 181, 247, 45, 62, 212, 35, 68, 61, 17, 240, 2, 62, 119, 62, 34, 190, 209, 46, 33, 61, 238, 43, 248, 189, 45, 78, 39, 190, 32, 44, 83, 61, 76, 149, 125, 189, 175, 40, 86, 188, 15, 120, 6, 190, 124, 183, 46, 190, 246, 11, 251, 60, 79, 224, 144, 189, 171, 148, 137, 61, 65, 84, 42, 62, 150, 15, 163, 61, 134, 140, 9, 189, 187, 129, 4, 190, 230, 44, 13, 190, 100, 111, 133, 61, 66, 96, 176, 61, 176, 157, 40, 188, 47, 50, 167, 189, 14, 143, 32, 61, 118, 215, 21, 62, 75, 223, 61, 61, 146, 176, 9, 190, 4, 154, 160, 183, 255, 47, 2, 61, 19, 217, 199, 188, 151, 170, 230, 189, 171, 232, 70, 189, 235, 21, 52, 190, 87, 172, 94, 189, 251, 152, 218, 189, 117, 198, 10, 186, 153, 150, 111, 189, 65, 160, 11, 62, 34, 31, 34, 189, 97, 75, 34, 62, 144, 187, 166, 61, 116, 112, 65, 61, 246, 243, 213, 59, 168, 41, 12, 62, 50, 74, 141, 189, 173, 210, 29, 62, 30, 82, 253, 189, 186, 160, 199, 59, 211, 2, 15, 190, 255, 143, 59, 188, 46, 79, 147, 189, 4, 43, 207, 189, 105, 214, 214, 61, 236, 80, 199, 189, 192, 250, 33, 190, 30, 123, 13, 62, 208, 147, 180, 183, 171, 180, 6, 188, 53, 80, 100, 61, 40, 208, 173, 189, 188, 144, 46, 190, 78, 252, 36, 61, 188, 50, 235, 189, 157, 122, 237, 189, 109, 186, 194, 189, 81, 94, 129, 60, 16, 20, 208, 189, 124, 153, 112, 61, 67, 95, 254, 61, 164, 255, 11, 62, 236, 35, 134, 61, 45, 21, 12, 190, 38, 69, 3, 189, 138, 100, 51, 190, 14, 60, 144, 59, 93, 116, 177, 61, 218, 72, 232, 58, 75, 122, 177, 61, 40, 86, 37, 190, 254, 119, 36, 190, 121, 221, 113, 189, 153, 41, 101, 188, 7, 132, 11, 61, 45, 49, 139, 61, 112, 60, 57, 189, 216, 233, 134, 61, 230, 244, 31, 190, 159, 16, 216, 61, 124, 93, 155, 61, 144, 195, 199, 61, 210, 191, 100, 189, 150, 126, 130, 61, 5, 97, 153, 187, 204, 29, 49, 62, 207, 245, 252, 187, 24, 119, 13, 60, 58, 103, 36, 62, 250, 63, 56, 61, 254, 61, 5, 62, 2, 68, 42, 190, 241, 82, 202, 189, 179, 43, 192, 189, 244, 2, 20, 62, 159, 184, 120, 61, 12, 145, 13, 190, 29, 53, 8, 60, 205, 69, 144, 61, 184, 105, 144, 189, 55, 50, 166, 188, 116, 22, 24, 190, 94, 14, 17, 190, 83, 74, 34, 60, 56, 49, 49, 189, 32, 12, 38, 190, 59, 231, 35, 190, 250, 158, 242, 60, 128, 144, 7, 189, 59, 78, 242, 189, 134, 241, 218, 189, 249, 139, 43, 188, 233, 26, 192, 61, 232, 56, 201, 60, 68, 193, 236, 189, 195, 157, 39, 190, 100, 15, 207, 189, 245, 233, 143, 189, 101, 138, 227, 60, 176, 43, 15, 62, 192, 250, 31, 62, 240, 184, 171, 189, 95, 119, 134, 60, 150, 78, 213, 61, 143, 195, 143, 61, 19, 199, 65, 187, 128, 167, 31, 62, 9, 95, 241, 189, 50, 129, 11, 62, 167, 69, 185, 61, 204, 148, 39, 62, 150, 192, 245, 189, 98, 147, 221, 189, 71, 219, 58, 189, 248, 85, 9, 62, 147, 153, 27, 190, 105, 29, 34, 190, 175, 145, 24, 61, 195, 180, 226, 189, 207, 162, 154, 189, 147, 70, 253, 189, 128, 29, 185, 60, 94, 240, 148, 61, 176, 123, 34, 61, 102, 138, 182, 189, 36, 151, 177, 188, 161, 171, 38, 62, 0, 182, 8, 62, 218, 137, 30, 190, 19, 89, 65, 61, 195, 11, 161, 189, 30, 85, 68, 189, 222, 12, 18, 62, 192, 192, 49, 61, 160, 130, 68, 188, 202, 197, 110, 189, 232, 11, 87, 189, 240, 138, 153, 61, 61, 69, 26, 188, 92, 219, 13, 62, 64, 153, 35, 62, 116, 207, 162, 189, 202, 245, 2, 189, 173, 158, 20, 61, 242, 20, 85, 189, 212, 95, 161, 59, 6, 44, 31, 61, 104, 190, 230, 61, 119, 228, 189, 188, 103, 215, 210, 60, 202, 53, 50, 62, 178, 165, 250, 60, 183, 108, 46, 62, 27, 120, 0, 62, 248, 213, 138, 188, 29, 249, 252, 61, 94, 152, 251, 188, 51, 67, 206, 59, 72, 129, 166, 61, 147, 253, 89, 189, 185, 89, 129, 60, 187, 181, 13, 190, 25, 149, 24, 190, 137, 204, 4, 190, 133, 219, 129, 60, 225, 170, 34, 190, 78, 88, 35, 62, 188, 191, 49, 186, 5, 231, 168, 189, 145, 236, 51, 190, 138, 186, 249, 61, 14, 53, 15, 190, 57, 33, 76, 189, 197, 12, 3, 189, 34, 92, 175, 60, 86, 33, 18, 190, 127, 89, 111, 61, 29, 175, 96, 189, 56, 179, 2, 62, 173, 56, 46, 190, 195, 236, 237, 60, 97, 171, 249, 189, 144, 118, 166, 189, 159, 172, 49, 61, 205, 44, 154, 60, 7, 166, 244, 189, 161, 6, 227, 61, 36, 143, 3, 190, 6, 107, 16, 190, 93, 255, 253, 189, 191, 185, 223, 61, 7, 137, 52, 60, 157, 47, 134, 189, 223, 1, 237, 61, 179, 59, 94, 189, 194, 79, 141, 189, 8, 163, 198, 188, 62, 188, 238, 61, 4, 42, 28, 62, 176, 199, 1, 190, 97, 227, 139, 61, 175, 213, 48, 60, 178, 105, 222, 60, 176, 42, 2, 190, 250, 39, 174, 61, 129, 231, 32, 62, 82, 218, 219, 189, 243, 87, 71, 189, 213, 174, 37, 62, 119, 24, 40, 190, 22, 120, 39, 62, 7, 118, 36, 62, 243, 183, 136, 189, 82, 163, 37, 190, 2, 42, 34, 190, 138, 180, 129, 189, 184, 229, 240, 61, 210, 69, 11, 190, 138, 237, 48, 190, 31, 182, 30, 62, 178, 254, 23, 189, 232, 198, 5, 188, 213, 152, 85, 189, 122, 198, 74, 60, 23, 57, 248, 61, 214, 168, 249, 189, 200, 226, 236, 189, 27, 46, 52, 62, 177, 122, 38, 190, 159, 219, 51, 62, 65, 11, 23, 190, 228, 115, 153, 60, 104, 159, 42, 62, 188, 92, 84, 189, 124, 83, 4, 62, 129, 42, 204, 58, 199, 198, 136, 60, 188, 171, 216, 189, 157, 221, 201, 189, 52, 237, 6, 62, 248, 135, 198, 189, 13, 55, 164, 189, 102, 140, 220, 61, 114, 195, 205, 61, 211, 240, 17, 61, 122, 2, 174, 189, 134, 46, 129, 188, 145, 90, 6, 62, 35, 183, 66, 61, 177, 210, 119, 189, 155, 104, 134, 189, 182, 47, 103, 61, 157, 180, 21, 61, 19, 233, 35, 62, 178, 112, 181, 61, 113, 249, 45, 190, 1, 15, 35, 190, 157, 91, 213, 61, 24, 43, 31, 189, 101, 39, 200, 189, 201, 74, 26, 61, 41, 71, 228, 189, 80, 18, 218, 61, 174, 83, 151, 189, 178, 128, 38, 62, 59, 183, 19, 190, 247, 105, 31, 190, 123, 89, 50, 62, 157, 157, 31, 190, 213, 15, 55, 61, 118, 49, 24, 190, 254, 40, 216, 189, 237, 166, 25, 190, 172, 84, 3, 188, 1, 172, 143, 188, 70, 246, 206, 61, 198, 4, 227, 188, 106, 236, 4, 190, 229, 241, 190, 61, 229, 0, 72, 61, 173, 141, 145, 61, 34, 116, 42, 190, 90, 45, 30, 187, 215, 36, 191, 61, 0, 225, 175, 189, 150, 154, 28, 190, 209, 36, 159, 188, 221, 147, 51, 190, 226, 215, 27, 62, 223, 129, 183, 189, 129, 108, 2, 62, 120, 21, 221, 189, 208, 111, 208, 61, 205, 205, 93, 61, 107, 37, 154, 61, 104, 207, 218, 187, 153, 234, 28, 190, 62, 219, 29, 62, 98, 135, 146, 61, 100, 240, 117, 61, 69, 133, 231, 61, 61, 90, 71, 188, 105, 14, 21, 190, 137, 240, 236, 61, 100, 92, 181, 189, 18, 250, 232, 61, 83, 116, 168, 189, 11, 151, 13, 189, 254, 159, 192, 189, 227, 1, 68, 189, 91, 221, 127, 61, 171, 78, 47, 190, 128, 88, 238, 189, 58, 58, 12, 190, 213, 203, 137, 61, 77, 211, 42, 62, 124, 201, 191, 61, 100, 144, 227, 189, 229, 251, 55, 189, 70, 8, 204, 189, 17, 141, 236, 60, 198, 32, 230, 189, 226, 140, 8, 60, 242, 80, 140, 61, 83, 213, 74, 188, 130, 3, 49, 62, 170, 146, 36, 190, 235, 255, 183, 186, 149, 13, 193, 61, 198, 64, 209, 60, 131, 77, 199, 61, 114, 234, 71, 61, 26, 226, 132, 61, 159, 184, 28, 62, 23, 183, 52, 190, 134, 241, 9, 190, 171, 66, 160, 61, 248, 18, 13, 189, 195, 159, 201, 189, 251, 9, 220, 187, 76, 96, 156, 189, 24, 181, 186, 61, 169, 83, 160, 189, 212, 85, 32, 190, 51, 7, 202, 189, 41, 247, 15, 190, 39, 149, 246, 189, 51, 56, 24, 62, 152, 121, 45, 190, 122, 68, 193, 189, 48, 215, 142, 188, 48, 42, 31, 61, 83, 184, 170, 61, 13, 58, 227, 189, 127, 44, 42, 62, 53, 235, 184, 59, 43, 170, 192, 61, 206, 199, 168, 60, 210, 246, 22, 62, 214, 28, 175, 61, 94, 43, 0, 190, 169, 178, 81, 188, 200, 11, 27, 190, 49, 137, 191, 61, 208, 71, 79, 189, 154, 80, 248, 61, 97, 95, 154, 189, 184, 175, 170, 189, 115, 33, 8, 61, 255, 190, 7, 189, 60, 32, 32, 190, 227, 51, 31, 62, 183, 32, 216, 189, 71, 37, 236, 61, 208, 119, 231, 61, 235, 128, 184, 189, 243, 179, 7, 62, 221, 196, 168, 189, 5, 222, 16, 190, 46, 45, 148, 189, 28, 8, 22, 190, 230, 63, 136, 60, 209, 43, 1, 190, 245, 35, 38, 62, 44, 44, 163, 189, 5, 255, 51, 190, 18, 71, 71, 189, 80, 87, 161, 61, 207, 243, 170, 187, 254, 64, 235, 186, 207, 101, 233, 189, 240, 250, 39, 62, 208, 224, 131, 61, 199, 232, 22, 61, 11, 151, 25, 62, 107, 16, 78, 61, 57, 161, 38, 190, 34, 156, 49, 190, 95, 105, 161, 189, 193, 118, 8, 62, 63, 115, 5, 61, 251, 77, 147, 189, 105, 58, 128, 189, 197, 67, 10, 190, 107, 50, 222, 61, 46, 78, 35, 190, 23, 3, 106, 189, 130, 217, 18, 61, 58, 50, 223, 61, 20, 248, 185, 189, 51, 238, 1, 62, 4, 39, 152, 189, 222, 173, 215, 61, 43, 201, 188, 61, 111, 6, 2, 60, 70, 93, 189, 61, 40, 131, 35, 62, 181, 185, 167, 189, 164, 126, 17, 62, 198, 230, 239, 61, 46, 174, 52, 62, 136, 62, 170, 189, 84, 59, 1, 62, 84, 40, 0, 62, 41, 138, 47, 62, 30, 198, 41, 61, 194, 102, 3, 62, 166, 242, 219, 60, 62, 121, 243, 61, 146, 3, 22, 62, 129, 68, 61, 61, 64, 9, 16, 190, 165, 66, 9, 62, 250, 185, 192, 60, 250, 1, 7, 62, 31, 100, 50, 62, 56, 18, 49, 62, 246, 137, 154, 61, 245, 179, 11, 61, 94, 69, 4, 62, 250, 150, 32, 62, 143, 183, 7, 61, 36, 21, 25, 61, 21, 28, 0, 190, 226, 39, 191, 189, 235, 63, 67, 188, 53, 79, 50, 62, 76, 22, 220, 189, 173, 166, 25, 62, 91, 214, 4, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 246, 19, 62, 195, 76, 241, 189, 206, 221, 237, 61, 143, 111, 4, 60, 72, 110, 229, 189, 219, 117, 105, 188, 15, 138, 190, 61, 29, 201, 186, 61, 165, 198, 212, 189, 36, 225, 9, 62, 246, 66, 17, 62, 144, 170, 234, 189, 84, 119, 243, 61, 8, 34, 34, 190, 97, 211, 132, 189, 66, 51, 31, 189, 233, 213, 76, 189, 211, 34, 248, 188, 94, 116, 218, 61, 122, 147, 151, 189, 231, 78, 226, 61, 55, 69, 43, 190, 90, 165, 112, 188, 11, 104, 6, 62, 152, 118, 232, 61, 154, 195, 139, 57, 150, 32, 9, 62, 45, 245, 52, 190, 94, 195, 1, 62, 70, 86, 216, 189, 209, 173, 32, 186, 242, 134, 127, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 101, 143, 189, 183, 78, 44, 190, 162, 157, 195, 188, 24, 33, 73, 189, 108, 100, 193, 189, 243, 50, 157, 60, 157, 136, 152, 61, 83, 112, 34, 190, 181, 9, 201, 60, 198, 121, 15, 190, 16, 232, 15, 62, 180, 162, 15, 190, 132, 104, 16, 188, 124, 233, 22, 59, 116, 179, 40, 62, 229, 109, 1, 190, 135, 154, 44, 62, 134, 130, 133, 189, 75, 122, 247, 59, 210, 214, 0, 60, 128, 45, 130, 189, 243, 76, 4, 62, 123, 23, 131, 189, 60, 54, 89, 61, 181, 223, 236, 188, 192, 225, 32, 62, 62, 250, 251, 189, 129, 131, 142, 61, 196, 213, 32, 188, 40, 168, 249, 61, 103, 210, 182, 188, 167, 119, 20, 61, 111, 171, 44, 62, 19, 50, 44, 189, 71, 162, 41, 190, 59, 99, 140, 60, 101, 60, 249, 189, 140, 254, 112, 189, 71, 128, 193, 60, 10, 211, 63, 189, 204, 14, 200, 189, 67, 147, 243, 61, 175, 230, 163, 189, 103, 224, 19, 190, 76, 45, 7, 61, 175, 138, 107, 189, 185, 98, 252, 61, 44, 54, 200, 61, 224, 5, 169, 61, 23, 78, 213, 61, 113, 92, 93, 61, 177, 105, 214, 60, 111, 53, 157, 61, 196, 146, 194, 60, 54, 159, 2, 61, 166, 92, 33, 188, 112, 238, 132, 189, 237, 84, 34, 62, 222, 153, 94, 188, 47, 211, 65, 61, 125, 236, 50, 62, 254, 111, 157, 61, 38, 81, 8, 62, 112, 241, 197, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 115, 24, 190, 152, 219, 241, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {104, 25, 18, 62, 43, 37, 91, 63, 121, 237, 72, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {12, 83, 57, 189, 213, 165, 255, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0098/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}