// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 251, 22, 191, 224, 111, 134, 190, 200, 118, 254, 190, 98, 54, 148, 60, 168, 148, 242, 190, 120, 252, 112, 190, 15, 148, 132, 189, 132, 1, 254, 62, 148, 91, 212, 190, 118, 241, 201, 61, 159, 19, 37, 191, 184, 83, 0, 62, 77, 14, 7, 63, 145, 172, 107, 63, 42, 30, 148, 62, 178, 249, 53, 63, 239, 217, 14, 191, 111, 199, 233, 190, 29, 54, 98, 190, 199, 195, 68, 191, 130, 160, 235, 62, 214, 29, 94, 62, 8, 30, 86, 191, 88, 255, 36, 190, 168, 111, 157, 62, 147, 100, 14, 63, 196, 159, 23, 190, 102, 121, 34, 63, 93, 34, 10, 191, 226, 170, 202, 190, 60, 129, 164, 190, 113, 238, 21, 63, 163, 107, 78, 62, 235, 37, 24, 191, 85, 174, 17, 63, 37, 238, 37, 62, 9, 96, 155, 190, 69, 143, 245, 62, 252, 126, 182, 190, 80, 105, 27, 191, 84, 221, 228, 190, 132, 237, 76, 189, 145, 71, 1, 62, 114, 105, 51, 191, 65, 181, 38, 63, 127, 182, 29, 63, 77, 227, 35, 191, 53, 176, 204, 60, 216, 85, 92, 62, 26, 213, 220, 62, 57, 76, 12, 63, 102, 17, 149, 190, 1, 219, 90, 191, 77, 229, 8, 191, 213, 74, 28, 63, 63, 129, 6, 63, 66, 201, 235, 62, 128, 171, 49, 63, 244, 225, 58, 191, 178, 138, 141, 190, 215, 149, 198, 190, 192, 77, 50, 191, 10, 173, 247, 189, 137, 152, 253, 59, 94, 120, 162, 63, 61, 84, 178, 62, 83, 61, 103, 63, 102, 72, 84, 191, 142, 176, 6, 190, 64, 29, 28, 63, 202, 161, 250, 61, 47, 120, 191, 62, 180, 37, 214, 190, 14, 70, 64, 191, 18, 158, 172, 190, 139, 6, 237, 190, 232, 209, 6, 63, 245, 148, 149, 62, 4, 255, 221, 62, 158, 50, 74, 191, 141, 6, 59, 190, 187, 156, 66, 190, 94, 93, 82, 189, 44, 111, 179, 189, 26, 188, 71, 191, 196, 68, 178, 61, 193, 196, 206, 189, 236, 136, 10, 191, 211, 180, 21, 63, 145, 138, 14, 63, 2, 10, 90, 190, 175, 127, 144, 190, 138, 39, 15, 191, 86, 213, 179, 190, 90, 61, 93, 63, 124, 65, 51, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 60, 44, 191, 222, 75, 104, 62, 1, 110, 26, 190, 161, 42, 161, 190, 42, 41, 204, 189, 72, 232, 56, 190, 54, 70, 163, 62, 120, 42, 198, 190, 195, 51, 6, 63, 96, 24, 139, 60, 80, 252, 24, 190, 104, 91, 179, 60, 6, 124, 33, 63, 123, 27, 103, 62, 161, 128, 40, 190, 92, 100, 112, 62, 13, 75, 188, 62, 175, 37, 224, 62, 207, 218, 110, 190, 250, 232, 34, 191, 95, 97, 69, 63, 87, 155, 206, 62, 6, 154, 242, 62, 38, 130, 196, 62, 122, 218, 26, 62, 191, 153, 157, 190, 189, 254, 19, 191, 156, 58, 14, 63, 52, 206, 227, 62, 117, 95, 145, 62, 16, 62, 55, 191, 176, 131, 221, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 101, 84, 190, 210, 187, 85, 62, 126, 137, 194, 62, 181, 148, 106, 62, 98, 234, 165, 62, 17, 29, 18, 61, 93, 123, 198, 189, 255, 107, 33, 62, 72, 230, 205, 61, 228, 123, 64, 189, 10, 6, 90, 189, 9, 230, 172, 190, 231, 202, 88, 61, 25, 116, 46, 191, 53, 181, 64, 62, 139, 236, 169, 189, 145, 65, 115, 61, 42, 244, 9, 190, 95, 164, 151, 62, 89, 120, 201, 62, 182, 151, 0, 191, 227, 21, 41, 62, 51, 23, 124, 190, 180, 80, 198, 61, 17, 6, 17, 62, 235, 42, 45, 188, 103, 79, 251, 61, 106, 15, 166, 189, 123, 19, 89, 190, 92, 8, 54, 189, 212, 138, 104, 62, 215, 157, 66, 59, 179, 226, 115, 60, 219, 237, 8, 190, 233, 215, 223, 61, 28, 171, 169, 189, 144, 100, 200, 189, 107, 68, 31, 190, 242, 21, 218, 61, 134, 54, 47, 61, 175, 141, 48, 62, 26, 191, 129, 61, 41, 178, 7, 190, 57, 37, 32, 190, 239, 61, 40, 190, 67, 252, 239, 189, 143, 242, 33, 190, 48, 210, 51, 189, 219, 79, 58, 60, 199, 182, 25, 190, 71, 0, 21, 61, 162, 22, 201, 61, 87, 15, 22, 190, 124, 83, 191, 189, 127, 35, 150, 59, 29, 223, 137, 189, 243, 141, 159, 189, 18, 246, 46, 62, 187, 5, 190, 61, 26, 8, 199, 189, 218, 107, 96, 61, 184, 145, 20, 190, 133, 187, 176, 188, 15, 201, 30, 62, 138, 47, 176, 61, 173, 77, 189, 189, 213, 213, 80, 61, 1, 110, 148, 189, 106, 43, 214, 61, 204, 60, 41, 189, 155, 98, 134, 61, 192, 153, 178, 189, 41, 107, 16, 62, 212, 129, 228, 60, 176, 87, 153, 61, 35, 243, 105, 188, 230, 231, 59, 62, 202, 66, 21, 61, 63, 70, 136, 61, 249, 173, 119, 188, 79, 20, 8, 62, 195, 78, 176, 187, 14, 40, 179, 189, 40, 82, 139, 190, 90, 196, 42, 62, 86, 160, 41, 60, 240, 116, 166, 62, 238, 241, 0, 62, 97, 45, 228, 61, 225, 105, 166, 61, 189, 54, 33, 62, 170, 91, 27, 62, 157, 244, 93, 61, 190, 220, 225, 61, 28, 73, 189, 60, 11, 132, 12, 190, 125, 32, 133, 62, 22, 139, 209, 61, 244, 15, 3, 189, 236, 216, 165, 190, 58, 48, 201, 190, 218, 102, 64, 190, 235, 136, 0, 63, 27, 103, 141, 190, 229, 251, 29, 189, 150, 28, 183, 190, 84, 255, 84, 191, 171, 111, 51, 189, 185, 78, 28, 61, 217, 44, 162, 62, 101, 34, 196, 62, 247, 51, 149, 190, 140, 32, 64, 191, 19, 1, 146, 62, 241, 60, 41, 190, 228, 193, 43, 191, 193, 147, 107, 62, 31, 250, 55, 191, 186, 50, 182, 190, 68, 221, 196, 190, 233, 192, 3, 62, 47, 151, 136, 191, 151, 67, 8, 191, 188, 144, 160, 61, 85, 125, 66, 62, 38, 151, 141, 189, 158, 49, 138, 190, 9, 60, 233, 60, 21, 83, 97, 189, 52, 82, 35, 61, 45, 9, 129, 61, 223, 51, 63, 190, 27, 85, 78, 62, 31, 23, 137, 190, 243, 242, 44, 188, 99, 189, 242, 190, 22, 189, 112, 62, 82, 44, 61, 190, 63, 193, 20, 191, 92, 88, 177, 190, 185, 70, 94, 62, 30, 239, 21, 62, 213, 134, 46, 190, 81, 25, 255, 61, 225, 212, 213, 189, 49, 10, 75, 62, 107, 164, 170, 62, 158, 32, 2, 191, 145, 27, 201, 60, 239, 138, 180, 61, 141, 90, 61, 188, 216, 186, 31, 62, 19, 29, 2, 189, 210, 11, 81, 191, 76, 67, 184, 190, 203, 30, 202, 61, 91, 147, 16, 62, 175, 68, 174, 190, 243, 213, 113, 189, 224, 210, 19, 61, 93, 73, 7, 190, 93, 137, 30, 190, 155, 126, 160, 61, 177, 184, 242, 61, 202, 4, 18, 62, 104, 239, 131, 61, 88, 181, 23, 62, 228, 20, 110, 60, 141, 116, 157, 189, 250, 188, 151, 61, 90, 13, 243, 60, 155, 112, 200, 189, 248, 248, 23, 188, 168, 215, 167, 60, 66, 34, 163, 189, 102, 148, 51, 61, 27, 74, 171, 187, 93, 207, 21, 190, 112, 80, 239, 61, 57, 84, 209, 189, 133, 111, 69, 61, 145, 227, 2, 61, 54, 29, 245, 189, 5, 251, 51, 190, 18, 239, 35, 190, 15, 171, 247, 189, 220, 37, 154, 59, 55, 34, 7, 190, 239, 200, 245, 189, 11, 175, 163, 189, 61, 223, 19, 189, 108, 97, 127, 189, 37, 107, 66, 191, 49, 3, 131, 190, 26, 188, 206, 189, 57, 245, 163, 62, 45, 11, 8, 191, 227, 206, 144, 62, 178, 25, 248, 60, 192, 44, 5, 191, 55, 251, 179, 61, 220, 35, 77, 62, 255, 223, 96, 62, 142, 30, 98, 62, 156, 40, 193, 60, 192, 85, 45, 188, 134, 3, 5, 61, 85, 197, 118, 62, 14, 187, 27, 190, 220, 220, 142, 190, 39, 43, 41, 190, 59, 156, 6, 190, 194, 250, 196, 189, 55, 77, 18, 62, 187, 24, 72, 62, 171, 92, 16, 190, 80, 22, 128, 190, 118, 234, 84, 62, 126, 104, 100, 190, 224, 86, 177, 61, 127, 53, 107, 62, 78, 76, 206, 60, 49, 203, 168, 190, 203, 124, 235, 61, 141, 247, 157, 60, 240, 176, 59, 60, 210, 16, 74, 60, 251, 37, 188, 190, 135, 154, 38, 189, 230, 116, 101, 61, 49, 117, 37, 190, 88, 82, 169, 190, 25, 158, 192, 61, 171, 188, 48, 189, 33, 78, 221, 189, 134, 75, 147, 190, 162, 172, 59, 62, 197, 186, 165, 189, 125, 59, 57, 60, 229, 185, 103, 62, 214, 58, 99, 190, 245, 243, 162, 189, 136, 92, 65, 61, 91, 215, 147, 189, 39, 80, 228, 189, 3, 219, 176, 61, 179, 54, 178, 61, 195, 49, 33, 62, 228, 153, 45, 62, 221, 182, 72, 190, 83, 14, 49, 190, 10, 6, 38, 62, 109, 110, 155, 189, 3, 195, 234, 189, 245, 233, 10, 188, 16, 249, 185, 61, 6, 114, 55, 188, 109, 81, 7, 62, 61, 14, 231, 189, 183, 205, 141, 59, 238, 123, 235, 61, 134, 61, 166, 61, 218, 11, 206, 60, 226, 229, 93, 190, 24, 154, 86, 189, 90, 33, 248, 59, 172, 168, 25, 189, 222, 127, 169, 61, 49, 160, 192, 61, 149, 167, 77, 62, 196, 161, 120, 59, 76, 174, 97, 62, 58, 114, 204, 61, 151, 217, 202, 61, 59, 206, 166, 189, 63, 61, 170, 189, 87, 41, 251, 61, 108, 114, 101, 62, 49, 185, 227, 61, 244, 67, 136, 62, 110, 210, 177, 61, 47, 1, 193, 61, 207, 83, 44, 189, 118, 24, 63, 190, 32, 186, 15, 189, 187, 199, 141, 188, 167, 12, 4, 61, 53, 51, 202, 189, 16, 71, 186, 190, 228, 171, 45, 62, 167, 161, 235, 62, 115, 128, 126, 62, 238, 97, 141, 62, 122, 151, 129, 62, 236, 62, 101, 61, 203, 108, 157, 62, 4, 176, 150, 62, 43, 171, 208, 187, 239, 20, 160, 189, 197, 49, 181, 190, 12, 165, 101, 61, 201, 34, 202, 190, 46, 195, 118, 190, 129, 104, 184, 61, 217, 100, 5, 61, 116, 3, 102, 190, 103, 31, 253, 61, 187, 33, 25, 62, 134, 120, 180, 190, 220, 99, 240, 61, 76, 126, 163, 62, 24, 192, 166, 62, 119, 64, 73, 190, 206, 129, 68, 190, 32, 221, 193, 62, 208, 65, 134, 189, 251, 86, 102, 190, 246, 178, 134, 61, 63, 66, 128, 62, 24, 119, 155, 60, 232, 51, 147, 190, 249, 34, 223, 188, 206, 211, 176, 61, 53, 206, 64, 189, 81, 71, 56, 190, 109, 112, 21, 62, 194, 232, 42, 62, 221, 32, 156, 190, 79, 137, 74, 62, 109, 69, 233, 61, 123, 205, 83, 62, 33, 34, 4, 62, 220, 79, 231, 189, 18, 216, 12, 62, 67, 169, 1, 190, 44, 35, 21, 189, 76, 53, 220, 61, 138, 31, 52, 190, 9, 239, 60, 190, 74, 157, 142, 190, 165, 222, 227, 61, 204, 86, 202, 59, 218, 78, 124, 61, 181, 168, 46, 62, 6, 10, 242, 61, 147, 41, 117, 62, 138, 192, 82, 190, 106, 249, 209, 188, 156, 92, 239, 61, 217, 73, 206, 61, 158, 106, 241, 189, 62, 233, 132, 60, 77, 20, 194, 61, 168, 154, 157, 60, 51, 36, 37, 62, 77, 183, 114, 187, 236, 113, 53, 62, 243, 57, 15, 62, 211, 109, 205, 61, 107, 25, 211, 189, 236, 28, 99, 189, 141, 169, 212, 61, 8, 173, 213, 190, 160, 200, 5, 191, 254, 74, 185, 61, 26, 0, 41, 62, 96, 76, 148, 188, 208, 223, 201, 62, 92, 9, 214, 60, 77, 3, 23, 61, 168, 157, 145, 189, 3, 87, 134, 61, 130, 178, 145, 62, 125, 113, 15, 190, 118, 201, 100, 62, 213, 190, 157, 62, 83, 68, 190, 61, 30, 193, 169, 190, 15, 24, 250, 189, 193, 88, 224, 59, 166, 130, 32, 62, 220, 84, 72, 190, 57, 50, 22, 188, 190, 76, 90, 190, 28, 99, 174, 61, 36, 71, 33, 190, 166, 210, 251, 189, 174, 211, 171, 190, 146, 44, 208, 62, 108, 240, 119, 189, 42, 221, 108, 187, 195, 83, 9, 62, 199, 105, 122, 190, 180, 168, 92, 59, 38, 46, 38, 190, 243, 67, 90, 62, 158, 123, 210, 190, 74, 165, 66, 190, 164, 5, 10, 62, 196, 207, 197, 190, 151, 134, 64, 189, 49, 158, 194, 189, 206, 236, 165, 61, 164, 103, 40, 62, 8, 38, 87, 190, 89, 79, 172, 61, 216, 20, 74, 191, 8, 40, 129, 189, 114, 105, 64, 190, 114, 231, 196, 61, 62, 202, 159, 189, 36, 15, 62, 190, 57, 7, 181, 190, 164, 20, 24, 62, 149, 187, 250, 61, 122, 134, 55, 61, 43, 148, 190, 61, 41, 102, 212, 61, 130, 182, 198, 189, 191, 228, 168, 61, 92, 83, 192, 61, 157, 253, 126, 61, 234, 122, 28, 189, 218, 63, 225, 188, 147, 24, 20, 189, 19, 243, 212, 189, 153, 167, 207, 189, 137, 126, 106, 57, 32, 171, 8, 190, 121, 217, 174, 188, 6, 221, 15, 190, 142, 146, 16, 62, 90, 241, 45, 190, 244, 172, 62, 185, 199, 135, 33, 190, 92, 5, 170, 61, 32, 193, 59, 61, 125, 150, 130, 189, 241, 69, 106, 189, 158, 66, 220, 61, 168, 207, 23, 190, 64, 153, 201, 186, 12, 101, 47, 189, 194, 104, 177, 189, 245, 130, 203, 61, 0, 104, 101, 61, 126, 170, 27, 62, 194, 228, 50, 62, 240, 34, 203, 189, 172, 216, 64, 62, 225, 196, 174, 189, 230, 157, 211, 61, 117, 8, 181, 190, 212, 151, 147, 62, 140, 76, 228, 61, 96, 26, 52, 189, 211, 197, 252, 188, 194, 239, 17, 62, 22, 204, 145, 190, 210, 28, 248, 190, 36, 201, 5, 62, 115, 187, 150, 189, 144, 90, 78, 189, 186, 141, 110, 62, 35, 24, 107, 187, 12, 228, 117, 189, 10, 37, 187, 61, 210, 224, 82, 189, 140, 205, 86, 62, 224, 61, 17, 189, 170, 179, 178, 62, 62, 5, 230, 60, 139, 22, 185, 187, 47, 124, 163, 189, 166, 56, 12, 190, 139, 3, 135, 189, 180, 174, 54, 189, 234, 167, 123, 190, 128, 234, 222, 61, 147, 67, 94, 191, 138, 229, 112, 189, 174, 63, 21, 190, 182, 44, 191, 62, 121, 103, 186, 62, 73, 135, 141, 62, 152, 207, 33, 188, 176, 45, 79, 62, 117, 243, 19, 61, 161, 204, 86, 62, 136, 153, 2, 62, 21, 115, 218, 61, 137, 61, 174, 188, 211, 222, 157, 189, 222, 217, 11, 61, 106, 93, 220, 61, 3, 2, 142, 62, 28, 71, 11, 62, 168, 99, 200, 189, 62, 77, 179, 189, 120, 150, 231, 61, 43, 126, 190, 189, 61, 154, 10, 62, 1, 74, 76, 62, 55, 230, 199, 61, 129, 169, 50, 61, 112, 122, 128, 61, 104, 174, 31, 62, 244, 82, 160, 61, 68, 96, 18, 190, 63, 252, 27, 190, 236, 37, 101, 62, 96, 252, 6, 62, 93, 102, 169, 188, 245, 179, 243, 61, 31, 28, 176, 62, 226, 188, 32, 190, 247, 25, 5, 62, 36, 239, 76, 62, 13, 208, 39, 189, 184, 115, 212, 189, 127, 185, 158, 189, 158, 201, 21, 60, 189, 19, 174, 62, 253, 99, 127, 62, 231, 21, 113, 62, 169, 24, 214, 189, 119, 83, 106, 62, 122, 158, 137, 62, 208, 1, 25, 191, 78, 248, 222, 61, 112, 111, 16, 191, 118, 109, 36, 188, 75, 39, 184, 60, 173, 201, 32, 58, 84, 165, 19, 62, 104, 170, 156, 190, 46, 168, 11, 62, 164, 189, 46, 62, 93, 50, 225, 60, 176, 239, 168, 189, 182, 114, 219, 187, 71, 245, 192, 190, 232, 136, 171, 59, 242, 135, 39, 189, 16, 157, 3, 61, 21, 137, 24, 62, 212, 35, 68, 61, 99, 96, 251, 61, 173, 55, 35, 190, 234, 137, 149, 60, 171, 212, 12, 190, 223, 207, 38, 190, 88, 123, 191, 60, 6, 48, 173, 189, 202, 112, 187, 188, 113, 104, 16, 190, 159, 28, 65, 190, 226, 195, 200, 60, 165, 247, 176, 189, 41, 230, 35, 61, 22, 240, 22, 62, 160, 195, 119, 61, 211, 57, 60, 189, 166, 124, 19, 190, 184, 106, 32, 190, 115, 147, 85, 61, 98, 140, 92, 61, 200, 238, 11, 189, 60, 132, 209, 189, 217, 12, 246, 60, 63, 32, 10, 62, 39, 46, 228, 60, 232, 145, 24, 190, 130, 66, 76, 188, 151, 184, 35, 60, 61, 115, 11, 189, 14, 54, 14, 190, 87, 85, 190, 61, 107, 169, 118, 61, 238, 222, 135, 190, 94, 206, 40, 191, 124, 3, 164, 62, 32, 118, 190, 189, 73, 65, 31, 191, 119, 161, 130, 62, 151, 1, 227, 62, 178, 228, 44, 189, 252, 58, 65, 187, 173, 15, 99, 189, 86, 97, 43, 191, 46, 120, 87, 62, 159, 47, 189, 62, 205, 151, 35, 61, 244, 146, 162, 189, 118, 181, 66, 190, 197, 227, 2, 190, 196, 209, 60, 190, 134, 19, 198, 190, 31, 112, 182, 62, 17, 185, 19, 62, 75, 172, 58, 190, 148, 88, 244, 59, 2, 85, 205, 190, 219, 19, 29, 189, 121, 82, 226, 190, 38, 150, 143, 190, 63, 205, 158, 190, 145, 190, 86, 191, 138, 159, 150, 191, 62, 139, 219, 190, 213, 124, 83, 191, 183, 91, 184, 62, 215, 87, 51, 191, 58, 207, 58, 62, 179, 194, 185, 62, 1, 48, 143, 189, 248, 140, 108, 61, 218, 112, 32, 61, 40, 227, 50, 62, 60, 186, 34, 188, 50, 197, 103, 189, 19, 108, 15, 62, 159, 232, 37, 190, 167, 173, 81, 62, 94, 192, 44, 190, 218, 109, 14, 191, 235, 6, 111, 190, 197, 146, 161, 190, 224, 178, 236, 61, 188, 185, 188, 61, 88, 166, 88, 62, 12, 160, 59, 60, 174, 28, 19, 191, 51, 14, 91, 62, 177, 81, 65, 190, 64, 239, 177, 60, 137, 36, 200, 188, 111, 22, 48, 62, 74, 33, 28, 190, 173, 221, 91, 62, 150, 184, 254, 61, 159, 56, 166, 61, 58, 249, 182, 62, 126, 230, 54, 190, 108, 225, 169, 62, 119, 237, 226, 190, 45, 107, 31, 190, 103, 117, 251, 190, 213, 24, 163, 62, 94, 128, 29, 190, 118, 128, 220, 190, 179, 103, 156, 190, 225, 88, 84, 62, 52, 100, 40, 190, 63, 78, 205, 186, 110, 50, 60, 190, 153, 71, 58, 190, 86, 134, 191, 61, 81, 223, 59, 61, 152, 251, 25, 191, 60, 99, 80, 190, 133, 226, 127, 60, 97, 249, 4, 190, 214, 245, 110, 61, 146, 248, 56, 188, 167, 227, 139, 190, 152, 1, 150, 190, 131, 100, 79, 61, 162, 186, 142, 189, 147, 77, 130, 190, 249, 2, 97, 190, 251, 126, 49, 189, 50, 68, 84, 191, 115, 38, 194, 190, 13, 240, 34, 190, 243, 241, 146, 61, 167, 187, 223, 190, 106, 16, 26, 190, 211, 74, 134, 61, 8, 255, 124, 189, 162, 217, 139, 62, 205, 181, 175, 190, 122, 138, 92, 62, 5, 91, 166, 62, 68, 16, 224, 62, 196, 219, 200, 60, 56, 29, 137, 190, 148, 68, 251, 189, 128, 71, 66, 61, 15, 183, 199, 190, 131, 239, 148, 190, 228, 112, 122, 189, 182, 50, 27, 190, 111, 235, 129, 60, 192, 186, 183, 190, 132, 122, 40, 190, 70, 242, 144, 190, 132, 198, 145, 61, 202, 136, 5, 190, 123, 130, 150, 58, 143, 91, 195, 62, 226, 96, 78, 62, 195, 181, 165, 190, 210, 49, 74, 62, 173, 56, 3, 190, 63, 28, 180, 189, 108, 156, 210, 61, 198, 215, 32, 189, 7, 107, 23, 188, 0, 15, 145, 189, 200, 43, 39, 190, 143, 149, 226, 60, 142, 45, 101, 189, 2, 31, 178, 61, 105, 43, 232, 61, 198, 58, 8, 190, 43, 7, 190, 189, 114, 195, 179, 189, 174, 202, 123, 189, 158, 64, 159, 189, 207, 38, 85, 60, 24, 105, 112, 61, 219, 9, 211, 188, 224, 139, 197, 61, 64, 199, 204, 61, 1, 16, 141, 59, 207, 19, 131, 61, 163, 180, 169, 61, 149, 67, 134, 189, 193, 198, 238, 61, 96, 64, 151, 188, 39, 209, 81, 189, 152, 65, 5, 60, 186, 117, 172, 189, 48, 171, 105, 187, 245, 180, 42, 190, 160, 201, 82, 190, 53, 3, 246, 189, 56, 15, 241, 189, 232, 180, 43, 190, 207, 140, 53, 61, 150, 89, 128, 61, 249, 158, 66, 189, 89, 134, 250, 190, 181, 45, 88, 62, 72, 91, 131, 60, 11, 10, 153, 185, 213, 11, 201, 61, 38, 210, 139, 61, 26, 96, 16, 187, 222, 3, 158, 189, 40, 41, 50, 189, 52, 27, 224, 61, 6, 240, 70, 190, 24, 0, 66, 188, 213, 191, 213, 190, 119, 135, 231, 59, 128, 50, 173, 61, 108, 143, 81, 62, 164, 131, 119, 189, 117, 59, 192, 61, 215, 105, 227, 189, 200, 66, 128, 190, 83, 154, 140, 189, 169, 122, 53, 62, 141, 157, 71, 61, 205, 143, 139, 188, 193, 197, 156, 61, 238, 55, 41, 190, 222, 23, 93, 189, 25, 104, 57, 62, 80, 1, 191, 189, 137, 163, 91, 62, 200, 86, 214, 189, 31, 255, 74, 61, 187, 130, 129, 190, 203, 30, 127, 62, 196, 7, 199, 188, 87, 238, 150, 61, 57, 142, 163, 62, 206, 6, 112, 188, 222, 240, 6, 60, 217, 137, 119, 61, 230, 192, 174, 189, 23, 34, 62, 62, 0, 125, 162, 61, 33, 189, 168, 189, 76, 23, 156, 190, 55, 171, 29, 190, 245, 248, 45, 61, 14, 18, 136, 62, 214, 102, 92, 188, 196, 150, 96, 190, 101, 152, 246, 61, 9, 148, 59, 190, 14, 77, 23, 188, 213, 224, 86, 61, 221, 178, 146, 61, 171, 32, 220, 61, 64, 222, 158, 189, 79, 248, 9, 191, 166, 0, 204, 60, 225, 171, 79, 190, 30, 145, 166, 62, 156, 188, 37, 191, 124, 249, 48, 62, 40, 235, 179, 62, 109, 239, 143, 190, 128, 251, 228, 61, 192, 254, 4, 62, 11, 67, 103, 62, 195, 207, 115, 189, 67, 232, 133, 190, 252, 192, 174, 60, 55, 251, 85, 190, 166, 102, 107, 59, 135, 137, 249, 61, 37, 36, 251, 189, 39, 164, 197, 189, 37, 210, 198, 188, 164, 238, 211, 189, 98, 23, 202, 61, 18, 133, 49, 62, 24, 245, 153, 189, 108, 74, 119, 190, 13, 190, 84, 62, 18, 110, 4, 61, 126, 104, 208, 60, 102, 44, 223, 189, 48, 35, 167, 189, 9, 194, 27, 190, 86, 155, 134, 60, 31, 18, 109, 189, 152, 93, 9, 190, 52, 157, 36, 61, 112, 56, 25, 190, 80, 18, 218, 61, 143, 6, 232, 189, 46, 1, 21, 62, 153, 226, 41, 190, 31, 241, 86, 190, 208, 124, 11, 62, 183, 58, 29, 190, 93, 54, 52, 61, 152, 254, 56, 190, 158, 133, 16, 190, 101, 44, 30, 190, 79, 86, 189, 188, 6, 163, 252, 188, 105, 124, 138, 61, 80, 230, 192, 188, 118, 136, 28, 190, 173, 75, 102, 61, 138, 254, 66, 61, 249, 42, 2, 61, 28, 183, 58, 190, 57, 131, 22, 189, 215, 36, 191, 61, 208, 25, 232, 189, 227, 113, 63, 190, 236, 82, 85, 189, 187, 178, 53, 190, 126, 172, 251, 61, 199, 23, 188, 189, 114, 228, 196, 61, 104, 177, 15, 190, 39, 8, 144, 61, 205, 205, 93, 61, 107, 37, 154, 61, 126, 241, 31, 189, 153, 234, 28, 190, 248, 234, 23, 62, 143, 186, 92, 61, 37, 145, 224, 60, 69, 133, 231, 61, 138, 93, 103, 188, 197, 128, 55, 190, 128, 48, 185, 61, 100, 92, 181, 189, 18, 250, 232, 61, 83, 116, 168, 189, 209, 77, 141, 189, 254, 159, 192, 189, 192, 151, 139, 189, 61, 207, 235, 60, 171, 78, 47, 190, 191, 71, 2, 190, 58, 58, 12, 190, 176, 139, 9, 61, 77, 211, 42, 62, 27, 73, 160, 61, 147, 79, 20, 190, 68, 63, 160, 189, 70, 8, 204, 189, 187, 207, 137, 187, 142, 251, 236, 189, 226, 140, 8, 60, 242, 80, 140, 61, 83, 213, 74, 188, 4, 217, 44, 62, 170, 146, 36, 190, 235, 255, 183, 186, 35, 105, 146, 61, 198, 64, 209, 60, 219, 141, 198, 61, 114, 234, 71, 61, 65, 252, 103, 61, 10, 90, 27, 62, 23, 183, 52, 190, 132, 65, 16, 190, 28, 64, 133, 61, 219, 243, 36, 189, 115, 193, 236, 189, 251, 9, 220, 187, 181, 183, 174, 189, 24, 181, 186, 61, 110, 122, 175, 189, 253, 234, 43, 190, 132, 186, 207, 189, 175, 4, 23, 190, 39, 149, 246, 189, 162, 3, 15, 62, 152, 121, 45, 190, 154, 176, 194, 189, 123, 7, 182, 188, 32, 217, 123, 60, 83, 184, 170, 61, 242, 121, 241, 189, 78, 165, 168, 188, 101, 161, 140, 60, 147, 92, 128, 61, 65, 243, 78, 62, 23, 19, 189, 190, 40, 47, 144, 62, 161, 86, 42, 62, 184, 69, 24, 189, 159, 87, 177, 189, 164, 89, 150, 62, 97, 72, 24, 62, 66, 48, 219, 189, 149, 147, 246, 189, 71, 51, 176, 189, 191, 10, 14, 62, 145, 1, 65, 62, 126, 237, 19, 189, 166, 130, 7, 62, 227, 230, 5, 190, 27, 69, 75, 62, 138, 37, 10, 62, 81, 77, 33, 190, 206, 96, 206, 62, 161, 149, 130, 61, 82, 95, 57, 190, 208, 163, 3, 62, 238, 216, 230, 189, 247, 226, 153, 60, 95, 82, 112, 190, 159, 152, 148, 62, 87, 153, 123, 189, 221, 208, 15, 191, 4, 120, 41, 190, 166, 238, 151, 61, 147, 183, 35, 190, 37, 153, 216, 61, 241, 194, 94, 191, 32, 19, 177, 62, 136, 52, 104, 62, 234, 166, 205, 61, 93, 154, 56, 62, 224, 108, 58, 62, 215, 192, 186, 60, 190, 232, 174, 190, 242, 133, 174, 189, 209, 95, 150, 61, 144, 158, 72, 61, 130, 194, 238, 61, 200, 88, 90, 189, 213, 148, 41, 190, 20, 140, 170, 189, 71, 189, 200, 61, 93, 59, 109, 189, 252, 184, 108, 189, 206, 95, 149, 62, 188, 47, 214, 189, 51, 196, 185, 61, 228, 105, 13, 61, 181, 120, 74, 62, 7, 55, 148, 61, 238, 176, 234, 189, 24, 146, 27, 62, 99, 153, 47, 62, 116, 155, 154, 190, 59, 219, 134, 61, 75, 175, 126, 61, 50, 2, 57, 62, 28, 132, 204, 189, 190, 70, 16, 62, 223, 11, 148, 61, 188, 174, 100, 61, 37, 47, 252, 58, 194, 100, 187, 61, 181, 82, 43, 189, 79, 32, 10, 62, 90, 230, 180, 62, 180, 160, 126, 60, 171, 159, 162, 190, 28, 67, 84, 62, 125, 195, 27, 190, 103, 28, 2, 62, 86, 39, 12, 62, 30, 150, 62, 62, 6, 68, 75, 61, 160, 214, 51, 189, 255, 107, 59, 62, 22, 28, 50, 60, 36, 111, 148, 189, 106, 196, 35, 60, 191, 137, 12, 190, 88, 104, 51, 190, 176, 211, 89, 189, 30, 91, 159, 61, 23, 14, 187, 189, 158, 15, 100, 61, 176, 239, 170, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 214, 26, 189, 195, 76, 241, 189, 42, 69, 157, 62, 239, 208, 91, 62, 159, 143, 192, 61, 183, 151, 124, 188, 232, 210, 76, 62, 247, 139, 32, 62, 161, 145, 39, 61, 120, 212, 31, 62, 28, 143, 119, 62, 17, 27, 100, 61, 58, 13, 212, 189, 115, 181, 35, 190, 137, 29, 154, 189, 190, 97, 244, 60, 184, 233, 247, 187, 95, 78, 117, 189, 11, 181, 72, 62, 151, 19, 97, 61, 117, 186, 59, 62, 51, 184, 230, 189, 27, 191, 4, 190, 206, 59, 135, 62, 233, 105, 150, 62, 14, 215, 180, 187, 209, 229, 210, 61, 214, 139, 73, 190, 110, 38, 236, 61, 37, 81, 146, 188, 28, 69, 181, 59, 13, 255, 61, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 80, 208, 190, 183, 78, 44, 190, 185, 8, 122, 186, 120, 32, 64, 191, 117, 210, 245, 190, 254, 2, 157, 60, 254, 221, 237, 62, 179, 253, 50, 189, 121, 41, 0, 60, 71, 210, 27, 191, 28, 168, 34, 62, 245, 117, 68, 190, 68, 80, 112, 62, 206, 93, 146, 58, 149, 156, 217, 62, 25, 252, 78, 190, 216, 207, 150, 62, 132, 182, 94, 189, 29, 22, 65, 63, 183, 33, 39, 63, 109, 132, 237, 190, 182, 76, 51, 63, 159, 236, 4, 189, 243, 208, 77, 60, 154, 41, 19, 61, 166, 44, 199, 62, 158, 8, 198, 189, 5, 145, 132, 61, 75, 167, 9, 188, 198, 115, 213, 62, 145, 161, 127, 62, 55, 130, 79, 61, 216, 124, 199, 62, 19, 50, 44, 189, 47, 217, 112, 190, 135, 224, 156, 62, 191, 53, 75, 190, 207, 205, 112, 189, 137, 185, 178, 61, 245, 238, 64, 190, 212, 128, 241, 189, 95, 255, 211, 189, 72, 171, 88, 190, 125, 78, 137, 190, 27, 24, 37, 61, 95, 166, 105, 189, 182, 153, 139, 188, 133, 125, 115, 61, 76, 195, 27, 62, 255, 173, 150, 61, 179, 240, 0, 190, 234, 16, 172, 61, 8, 5, 7, 61, 135, 61, 122, 62, 180, 91, 119, 60, 107, 35, 20, 190, 140, 118, 15, 190, 175, 228, 80, 62, 5, 211, 112, 189, 114, 221, 60, 61, 186, 19, 50, 62, 185, 129, 224, 61, 126, 64, 149, 62, 152, 214, 191, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 4, 19, 190, 101, 28, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {24, 9, 145, 189, 196, 223, 186, 191, 144, 116, 89, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 110, 74, 63, 59, 51, 118, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0098/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}