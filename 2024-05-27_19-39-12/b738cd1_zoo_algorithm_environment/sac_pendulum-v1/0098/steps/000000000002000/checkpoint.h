// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 214, 62, 191, 79, 82, 9, 63, 23, 78, 114, 190, 103, 163, 217, 61, 171, 240, 2, 62, 37, 177, 171, 190, 105, 8, 18, 190, 236, 178, 74, 63, 239, 68, 68, 190, 102, 153, 137, 190, 145, 81, 11, 191, 55, 246, 251, 59, 156, 70, 111, 62, 207, 188, 78, 63, 56, 237, 52, 62, 145, 44, 254, 62, 247, 182, 204, 190, 44, 172, 0, 191, 122, 138, 214, 190, 52, 76, 112, 191, 211, 92, 162, 62, 243, 238, 111, 189, 1, 11, 174, 190, 124, 97, 88, 188, 126, 8, 125, 62, 3, 56, 233, 62, 92, 194, 128, 189, 3, 213, 212, 62, 92, 121, 239, 190, 196, 119, 222, 190, 182, 210, 152, 190, 33, 227, 151, 190, 77, 188, 45, 62, 188, 41, 162, 190, 83, 200, 182, 62, 170, 60, 210, 60, 12, 226, 149, 190, 83, 46, 34, 63, 1, 248, 138, 190, 213, 61, 12, 191, 97, 28, 149, 190, 14, 232, 179, 189, 135, 45, 2, 63, 91, 118, 55, 191, 80, 40, 33, 63, 11, 167, 157, 62, 161, 149, 37, 191, 48, 98, 98, 61, 197, 254, 156, 62, 241, 47, 178, 190, 95, 149, 7, 63, 180, 146, 136, 190, 50, 240, 154, 62, 186, 88, 2, 191, 238, 239, 136, 62, 223, 25, 2, 62, 238, 5, 7, 63, 113, 52, 223, 62, 207, 93, 37, 190, 138, 74, 173, 190, 95, 43, 197, 190, 192, 224, 173, 190, 178, 136, 94, 190, 216, 255, 161, 189, 48, 21, 59, 63, 175, 202, 150, 62, 62, 87, 1, 63, 232, 35, 78, 191, 167, 244, 19, 190, 15, 128, 3, 63, 16, 88, 223, 187, 174, 35, 140, 62, 206, 184, 62, 190, 244, 191, 149, 62, 50, 231, 207, 190, 131, 157, 213, 190, 71, 148, 188, 190, 78, 140, 95, 62, 179, 10, 173, 61, 134, 241, 0, 190, 163, 42, 136, 190, 253, 100, 93, 190, 103, 26, 136, 188, 171, 64, 141, 190, 75, 217, 8, 191, 170, 102, 45, 62, 20, 120, 36, 190, 217, 64, 8, 191, 142, 124, 69, 188, 11, 226, 0, 63, 54, 237, 158, 190, 25, 167, 250, 189, 23, 26, 15, 191, 245, 50, 139, 190, 9, 31, 53, 63, 180, 69, 6, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 76, 244, 190, 243, 220, 139, 62, 13, 179, 219, 60, 196, 148, 152, 189, 87, 242, 42, 62, 201, 185, 196, 189, 48, 237, 180, 62, 86, 221, 222, 190, 179, 139, 27, 63, 41, 206, 251, 61, 85, 177, 172, 189, 223, 253, 183, 189, 9, 77, 33, 63, 150, 144, 21, 62, 79, 91, 159, 190, 235, 86, 183, 62, 189, 120, 155, 62, 200, 45, 243, 62, 103, 73, 124, 190, 183, 214, 244, 190, 49, 137, 63, 63, 100, 196, 16, 63, 143, 192, 33, 63, 125, 41, 194, 62, 52, 186, 160, 62, 179, 85, 108, 190, 135, 237, 203, 190, 97, 179, 16, 63, 237, 104, 1, 63, 181, 110, 195, 62, 77, 103, 43, 191, 57, 254, 180, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 182, 24, 190, 142, 186, 59, 62, 61, 14, 27, 62, 245, 94, 136, 61, 7, 127, 34, 62, 228, 36, 195, 189, 154, 239, 35, 190, 169, 236, 58, 188, 191, 151, 165, 61, 82, 11, 6, 190, 241, 245, 182, 186, 168, 140, 216, 189, 87, 195, 32, 189, 138, 29, 220, 190, 138, 182, 154, 61, 219, 205, 178, 189, 12, 184, 141, 187, 169, 235, 33, 190, 51, 126, 58, 62, 175, 236, 65, 62, 51, 245, 133, 190, 97, 94, 22, 62, 217, 76, 82, 190, 115, 19, 149, 60, 67, 179, 140, 61, 93, 205, 30, 61, 25, 154, 205, 189, 108, 165, 38, 60, 177, 184, 43, 190, 122, 4, 253, 188, 124, 144, 197, 188, 4, 69, 232, 186, 179, 226, 115, 60, 219, 237, 8, 190, 233, 215, 223, 61, 28, 171, 169, 189, 144, 100, 200, 189, 107, 68, 31, 190, 242, 21, 218, 61, 134, 54, 47, 61, 175, 141, 48, 62, 26, 191, 129, 61, 41, 178, 7, 190, 57, 37, 32, 190, 239, 61, 40, 190, 67, 252, 239, 189, 143, 242, 33, 190, 48, 210, 51, 189, 219, 79, 58, 60, 199, 182, 25, 190, 71, 0, 21, 61, 162, 22, 201, 61, 87, 15, 22, 190, 124, 83, 191, 189, 127, 35, 150, 59, 29, 223, 137, 189, 243, 141, 159, 189, 18, 246, 46, 62, 187, 5, 190, 61, 26, 8, 199, 189, 218, 107, 96, 61, 184, 145, 20, 190, 133, 187, 176, 188, 15, 201, 30, 62, 233, 137, 167, 57, 56, 103, 221, 189, 143, 57, 255, 61, 97, 121, 8, 61, 38, 52, 172, 61, 112, 86, 159, 189, 52, 14, 0, 62, 205, 106, 246, 61, 228, 67, 130, 61, 63, 245, 183, 188, 61, 124, 167, 61, 153, 96, 149, 189, 223, 61, 51, 62, 148, 203, 108, 189, 240, 66, 35, 62, 224, 62, 87, 61, 183, 241, 16, 62, 54, 81, 28, 60, 213, 50, 172, 189, 173, 193, 27, 190, 249, 28, 11, 62, 146, 46, 235, 188, 26, 61, 156, 62, 22, 136, 20, 61, 99, 44, 252, 61, 4, 34, 166, 61, 130, 171, 40, 62, 57, 210, 251, 61, 92, 91, 154, 60, 193, 19, 210, 61, 155, 15, 32, 189, 227, 175, 240, 189, 125, 184, 127, 62, 101, 201, 141, 61, 174, 5, 28, 61, 95, 171, 193, 190, 200, 176, 6, 60, 197, 130, 40, 190, 96, 18, 27, 187, 98, 202, 33, 62, 242, 207, 92, 61, 208, 50, 188, 190, 123, 9, 75, 190, 186, 110, 193, 62, 44, 102, 67, 61, 52, 65, 247, 61, 109, 230, 68, 190, 11, 67, 146, 190, 164, 222, 207, 190, 109, 104, 86, 62, 33, 0, 70, 188, 98, 84, 182, 190, 171, 219, 43, 61, 250, 130, 129, 189, 252, 153, 193, 190, 223, 219, 184, 190, 84, 223, 180, 61, 239, 15, 26, 191, 65, 230, 87, 190, 214, 222, 163, 59, 118, 33, 21, 62, 188, 221, 85, 59, 166, 165, 97, 190, 217, 210, 150, 62, 236, 43, 255, 189, 50, 167, 114, 60, 254, 162, 230, 61, 150, 93, 218, 189, 96, 1, 168, 61, 217, 220, 85, 190, 143, 111, 140, 190, 29, 7, 46, 190, 212, 254, 85, 62, 107, 176, 25, 190, 120, 161, 48, 189, 99, 212, 41, 61, 97, 104, 98, 62, 74, 238, 205, 59, 115, 38, 159, 190, 176, 176, 238, 61, 97, 29, 109, 189, 241, 20, 30, 62, 33, 153, 139, 61, 6, 125, 140, 190, 100, 160, 134, 189, 199, 4, 115, 62, 232, 72, 37, 189, 108, 176, 222, 189, 188, 98, 102, 189, 29, 96, 153, 190, 217, 118, 80, 190, 135, 221, 139, 61, 93, 31, 12, 62, 74, 170, 69, 190, 66, 84, 157, 189, 217, 172, 47, 62, 93, 73, 7, 190, 93, 137, 30, 190, 155, 126, 160, 61, 133, 8, 244, 61, 131, 134, 18, 62, 104, 239, 131, 61, 104, 247, 26, 62, 228, 20, 110, 60, 141, 116, 157, 189, 250, 188, 151, 61, 121, 202, 253, 60, 234, 62, 200, 189, 248, 248, 23, 188, 97, 233, 170, 60, 244, 174, 156, 189, 205, 214, 54, 61, 153, 206, 254, 186, 93, 207, 21, 190, 251, 44, 244, 61, 57, 84, 209, 189, 117, 91, 70, 61, 250, 243, 10, 61, 54, 29, 245, 189, 119, 116, 50, 190, 18, 239, 35, 190, 57, 125, 244, 189, 220, 37, 154, 59, 55, 34, 7, 190, 142, 180, 245, 189, 235, 223, 155, 189, 61, 223, 19, 189, 87, 147, 123, 189, 101, 44, 177, 190, 140, 107, 236, 189, 54, 174, 189, 190, 42, 77, 77, 62, 81, 59, 192, 189, 125, 59, 33, 62, 237, 17, 16, 61, 175, 213, 13, 190, 119, 135, 201, 189, 244, 3, 187, 61, 134, 252, 76, 62, 146, 113, 22, 61, 48, 87, 237, 189, 0, 177, 40, 62, 139, 251, 77, 60, 206, 149, 236, 61, 43, 189, 51, 190, 192, 4, 51, 189, 234, 116, 204, 188, 208, 175, 50, 189, 234, 245, 15, 189, 234, 200, 211, 61, 161, 250, 219, 61, 187, 7, 46, 190, 172, 14, 178, 188, 81, 252, 77, 62, 220, 153, 166, 61, 121, 219, 203, 61, 169, 66, 83, 62, 204, 125, 131, 188, 129, 128, 94, 190, 148, 140, 33, 61, 176, 88, 92, 189, 105, 194, 140, 188, 38, 148, 172, 61, 95, 183, 47, 190, 117, 155, 140, 186, 142, 143, 0, 61, 156, 223, 137, 189, 184, 173, 57, 190, 75, 196, 241, 61, 175, 185, 151, 189, 165, 193, 152, 60, 68, 7, 239, 189, 21, 42, 60, 62, 222, 26, 97, 190, 102, 123, 51, 62, 12, 251, 132, 62, 250, 222, 234, 189, 82, 249, 229, 189, 72, 66, 149, 61, 138, 44, 44, 188, 212, 227, 43, 190, 121, 161, 76, 62, 185, 125, 82, 61, 228, 155, 239, 61, 65, 142, 25, 62, 177, 137, 186, 189, 182, 31, 52, 190, 247, 83, 2, 62, 29, 80, 220, 189, 115, 217, 41, 187, 214, 156, 136, 189, 248, 200, 85, 62, 116, 70, 157, 189, 85, 12, 16, 62, 161, 139, 50, 189, 206, 57, 232, 61, 134, 52, 159, 61, 89, 71, 136, 61, 69, 43, 211, 61, 208, 155, 116, 189, 157, 171, 5, 190, 198, 129, 105, 188, 21, 208, 36, 189, 173, 139, 42, 189, 87, 195, 209, 61, 170, 247, 48, 62, 87, 192, 161, 61, 26, 178, 167, 62, 247, 112, 204, 61, 194, 252, 17, 62, 223, 148, 177, 189, 125, 128, 188, 60, 81, 192, 14, 62, 67, 112, 20, 62, 19, 112, 30, 62, 48, 182, 81, 62, 139, 110, 242, 61, 61, 205, 170, 61, 93, 254, 10, 189, 113, 223, 51, 190, 139, 169, 12, 189, 227, 140, 16, 189, 141, 115, 7, 188, 220, 30, 233, 189, 74, 220, 235, 189, 245, 125, 64, 61, 90, 106, 185, 62, 48, 80, 217, 189, 101, 45, 146, 61, 196, 146, 213, 61, 141, 175, 60, 189, 68, 31, 150, 61, 47, 32, 5, 62, 115, 74, 254, 189, 162, 222, 112, 188, 38, 243, 119, 61, 197, 30, 84, 189, 119, 49, 56, 190, 10, 111, 119, 190, 52, 157, 215, 189, 42, 22, 8, 190, 100, 162, 89, 190, 116, 146, 10, 189, 4, 91, 8, 190, 15, 153, 115, 190, 58, 85, 201, 60, 152, 76, 0, 62, 248, 209, 201, 61, 110, 92, 64, 190, 29, 6, 226, 189, 9, 247, 168, 61, 92, 12, 164, 189, 212, 249, 22, 190, 198, 165, 200, 61, 45, 249, 141, 188, 40, 214, 162, 60, 151, 82, 159, 190, 126, 193, 187, 59, 228, 247, 210, 61, 95, 246, 188, 60, 189, 155, 97, 190, 207, 15, 41, 62, 136, 42, 118, 62, 171, 177, 192, 189, 242, 10, 218, 61, 211, 177, 249, 61, 104, 40, 42, 62, 160, 0, 208, 189, 9, 100, 211, 189, 12, 238, 40, 62, 11, 106, 226, 189, 162, 29, 131, 61, 188, 75, 159, 61, 77, 91, 217, 189, 197, 226, 78, 190, 148, 211, 8, 190, 212, 111, 38, 62, 137, 66, 253, 189, 201, 88, 4, 62, 19, 70, 2, 62, 178, 165, 41, 62, 62, 232, 68, 62, 245, 55, 207, 189, 246, 59, 182, 59, 178, 183, 19, 62, 148, 66, 121, 61, 63, 30, 221, 189, 197, 27, 115, 189, 32, 13, 38, 61, 126, 10, 155, 187, 205, 222, 127, 62, 123, 180, 34, 188, 40, 184, 52, 62, 253, 97, 253, 61, 229, 92, 46, 61, 251, 167, 42, 61, 255, 79, 131, 189, 161, 201, 150, 61, 81, 106, 92, 190, 79, 135, 46, 190, 102, 251, 180, 61, 79, 79, 86, 189, 7, 127, 201, 60, 184, 79, 94, 62, 139, 170, 111, 61, 204, 253, 152, 59, 160, 19, 228, 189, 189, 162, 36, 62, 227, 118, 36, 62, 174, 221, 132, 57, 132, 18, 46, 61, 30, 140, 245, 61, 119, 29, 172, 61, 172, 96, 30, 190, 126, 33, 18, 190, 53, 143, 116, 189, 252, 41, 212, 61, 98, 153, 132, 189, 4, 10, 90, 189, 34, 164, 238, 188, 28, 99, 174, 61, 51, 207, 141, 189, 34, 205, 0, 61, 121, 194, 253, 189, 174, 60, 21, 62, 108, 240, 119, 189, 47, 15, 82, 61, 195, 83, 9, 62, 208, 189, 74, 190, 180, 168, 92, 59, 239, 58, 37, 190, 104, 160, 184, 61, 94, 74, 72, 190, 2, 52, 205, 190, 207, 121, 9, 62, 43, 155, 18, 190, 102, 236, 78, 189, 44, 1, 147, 189, 110, 157, 171, 59, 164, 103, 40, 62, 17, 24, 146, 190, 105, 51, 134, 60, 153, 143, 120, 190, 121, 28, 155, 189, 49, 134, 48, 190, 183, 123, 207, 61, 62, 202, 159, 189, 50, 101, 255, 187, 99, 44, 89, 190, 25, 222, 219, 61, 149, 187, 250, 61, 190, 229, 138, 189, 43, 148, 190, 61, 41, 102, 212, 61, 130, 182, 198, 189, 191, 228, 168, 61, 92, 83, 192, 61, 157, 253, 126, 61, 234, 122, 28, 189, 218, 63, 225, 188, 147, 24, 20, 189, 19, 243, 212, 189, 153, 167, 207, 189, 137, 126, 106, 57, 32, 171, 8, 190, 121, 217, 174, 188, 6, 221, 15, 190, 142, 146, 16, 62, 90, 241, 45, 190, 244, 172, 62, 185, 199, 135, 33, 190, 92, 5, 170, 61, 32, 193, 59, 61, 125, 150, 130, 189, 241, 69, 106, 189, 158, 66, 220, 61, 168, 207, 23, 190, 64, 153, 201, 186, 12, 101, 47, 189, 194, 104, 177, 189, 245, 130, 203, 61, 0, 104, 101, 61, 126, 170, 27, 62, 194, 228, 50, 62, 54, 31, 186, 188, 44, 84, 64, 62, 186, 22, 40, 188, 187, 57, 11, 62, 145, 156, 12, 190, 184, 10, 83, 62, 82, 225, 12, 61, 7, 149, 167, 188, 148, 168, 15, 189, 70, 170, 138, 61, 219, 208, 7, 190, 27, 228, 26, 190, 131, 75, 46, 62, 17, 53, 157, 189, 82, 243, 90, 190, 31, 130, 201, 61, 122, 67, 36, 189, 112, 215, 49, 189, 149, 26, 248, 60, 214, 158, 184, 189, 33, 253, 70, 62, 139, 56, 68, 61, 239, 58, 55, 62, 154, 196, 49, 190, 61, 104, 159, 60, 158, 50, 229, 61, 157, 75, 18, 190, 241, 153, 159, 189, 188, 221, 87, 60, 165, 162, 57, 190, 117, 100, 246, 61, 145, 15, 141, 190, 180, 54, 2, 62, 214, 236, 85, 190, 147, 63, 136, 62, 48, 6, 129, 62, 69, 29, 42, 62, 223, 144, 150, 189, 198, 186, 24, 62, 214, 221, 13, 190, 110, 90, 29, 62, 94, 231, 214, 61, 2, 137, 167, 61, 245, 184, 72, 61, 109, 192, 31, 190, 36, 17, 9, 61, 79, 2, 34, 62, 188, 119, 36, 62, 235, 219, 4, 62, 140, 236, 15, 190, 84, 219, 22, 189, 164, 227, 45, 190, 186, 156, 0, 190, 134, 160, 208, 61, 161, 134, 182, 61, 217, 0, 251, 61, 40, 208, 40, 60, 190, 115, 42, 61, 176, 138, 156, 189, 31, 230, 219, 188, 252, 185, 116, 190, 20, 251, 37, 190, 252, 113, 6, 62, 74, 141, 24, 61, 222, 154, 130, 189, 60, 63, 167, 61, 93, 215, 103, 62, 152, 108, 150, 189, 61, 151, 225, 61, 217, 165, 100, 62, 15, 39, 168, 61, 43, 167, 163, 189, 218, 43, 247, 189, 137, 91, 29, 61, 183, 73, 135, 188, 169, 77, 48, 61, 38, 95, 68, 62, 117, 124, 138, 189, 156, 186, 38, 61, 190, 29, 131, 62, 214, 49, 143, 190, 137, 61, 148, 61, 202, 218, 132, 188, 55, 24, 182, 187, 224, 28, 12, 61, 206, 145, 46, 189, 48, 202, 16, 62, 233, 235, 240, 189, 9, 186, 178, 61, 240, 71, 176, 189, 188, 107, 127, 61, 143, 167, 205, 189, 139, 193, 13, 189, 191, 27, 133, 190, 96, 10, 65, 61, 223, 184, 32, 189, 16, 157, 3, 61, 21, 137, 24, 62, 212, 35, 68, 61, 99, 96, 251, 61, 173, 55, 35, 190, 234, 137, 149, 60, 171, 212, 12, 190, 223, 207, 38, 190, 88, 123, 191, 60, 6, 48, 173, 189, 202, 112, 187, 188, 113, 104, 16, 190, 159, 28, 65, 190, 226, 195, 200, 60, 165, 247, 176, 189, 41, 230, 35, 61, 22, 240, 22, 62, 160, 195, 119, 61, 211, 57, 60, 189, 166, 124, 19, 190, 184, 106, 32, 190, 115, 147, 85, 61, 98, 140, 92, 61, 200, 238, 11, 189, 60, 132, 209, 189, 217, 12, 246, 60, 63, 32, 10, 62, 39, 46, 228, 60, 232, 145, 24, 190, 130, 66, 76, 188, 151, 184, 35, 60, 61, 115, 11, 189, 195, 21, 234, 189, 4, 6, 252, 188, 88, 35, 57, 190, 12, 55, 221, 189, 62, 33, 225, 189, 179, 193, 86, 61, 121, 51, 8, 190, 17, 133, 248, 61, 228, 117, 236, 60, 246, 48, 63, 62, 174, 198, 109, 61, 80, 166, 33, 61, 163, 24, 254, 188, 28, 250, 77, 61, 117, 15, 40, 189, 153, 26, 62, 62, 32, 80, 184, 189, 112, 192, 195, 188, 9, 96, 14, 190, 23, 4, 203, 187, 23, 229, 211, 189, 246, 218, 218, 189, 234, 88, 9, 62, 67, 203, 2, 189, 120, 69, 62, 190, 142, 119, 251, 61, 84, 238, 110, 188, 232, 18, 1, 189, 86, 249, 198, 188, 27, 42, 25, 190, 207, 200, 87, 190, 108, 173, 255, 60, 38, 159, 40, 191, 146, 34, 54, 190, 237, 34, 57, 191, 68, 196, 177, 62, 14, 219, 197, 190, 117, 62, 21, 62, 134, 203, 193, 62, 219, 6, 12, 62, 163, 164, 69, 189, 248, 183, 11, 60, 245, 124, 0, 62, 34, 169, 63, 190, 65, 15, 67, 60, 237, 104, 178, 62, 45, 7, 18, 190, 25, 84, 45, 62, 164, 90, 74, 190, 23, 81, 50, 190, 19, 133, 9, 190, 17, 13, 45, 190, 199, 32, 127, 62, 36, 13, 32, 61, 135, 118, 75, 62, 118, 29, 212, 59, 128, 251, 82, 190, 147, 62, 47, 62, 16, 51, 215, 189, 59, 169, 9, 62, 49, 130, 112, 61, 68, 222, 4, 62, 124, 93, 253, 189, 129, 67, 10, 62, 234, 212, 190, 61, 77, 125, 210, 61, 32, 138, 189, 62, 111, 158, 37, 190, 66, 248, 211, 62, 61, 195, 175, 190, 42, 7, 26, 190, 179, 43, 192, 189, 150, 109, 196, 62, 240, 13, 143, 189, 22, 155, 61, 190, 189, 142, 150, 61, 201, 253, 107, 62, 251, 133, 13, 190, 131, 144, 136, 61, 155, 68, 228, 189, 182, 119, 248, 187, 111, 52, 177, 61, 53, 246, 151, 61, 42, 239, 184, 190, 1, 135, 27, 190, 60, 39, 97, 62, 171, 96, 48, 189, 42, 88, 202, 61, 59, 55, 43, 188, 168, 252, 89, 189, 149, 90, 206, 189, 165, 144, 186, 61, 181, 38, 129, 188, 29, 212, 88, 189, 75, 208, 100, 190, 20, 253, 247, 61, 89, 203, 141, 190, 73, 146, 59, 61, 100, 104, 60, 190, 43, 45, 108, 61, 97, 165, 130, 190, 167, 207, 0, 61, 142, 159, 67, 62, 209, 207, 7, 187, 213, 191, 241, 60, 19, 96, 102, 190, 251, 190, 94, 62, 26, 220, 187, 61, 83, 199, 27, 62, 123, 233, 88, 61, 83, 212, 42, 190, 125, 186, 196, 188, 128, 68, 231, 61, 174, 156, 86, 190, 198, 128, 83, 190, 228, 112, 122, 189, 133, 231, 135, 189, 153, 238, 233, 189, 76, 48, 232, 189, 153, 122, 17, 189, 78, 94, 44, 60, 230, 123, 175, 61, 202, 136, 5, 190, 246, 100, 114, 189, 186, 32, 80, 62, 125, 181, 37, 62, 141, 56, 66, 190, 193, 7, 149, 59, 99, 104, 179, 189, 189, 30, 168, 189, 215, 80, 247, 61, 211, 12, 78, 188, 245, 89, 0, 188, 48, 207, 178, 189, 190, 249, 10, 190, 195, 246, 223, 60, 139, 210, 59, 189, 253, 41, 167, 61, 167, 95, 232, 61, 173, 243, 4, 190, 205, 44, 158, 189, 138, 86, 58, 189, 79, 46, 78, 189, 241, 193, 138, 189, 155, 10, 222, 60, 152, 55, 144, 61, 203, 213, 197, 188, 35, 7, 22, 61, 26, 63, 248, 61, 168, 211, 19, 60, 150, 167, 140, 61, 185, 99, 214, 61, 87, 73, 103, 189, 64, 134, 238, 61, 138, 55, 21, 189, 189, 12, 24, 189, 8, 127, 10, 61, 10, 231, 171, 189, 61, 43, 114, 187, 224, 85, 36, 190, 82, 120, 117, 190, 79, 226, 191, 189, 213, 42, 134, 59, 227, 229, 100, 189, 70, 78, 100, 61, 140, 89, 77, 61, 166, 192, 3, 61, 112, 244, 11, 190, 139, 3, 245, 61, 169, 72, 125, 188, 69, 102, 37, 59, 91, 209, 120, 188, 147, 211, 197, 61, 159, 200, 184, 188, 178, 242, 173, 59, 111, 37, 18, 61, 119, 42, 242, 61, 82, 76, 227, 189, 46, 210, 131, 187, 72, 229, 51, 190, 118, 253, 190, 60, 215, 207, 5, 61, 52, 32, 86, 62, 49, 104, 6, 190, 1, 137, 41, 62, 34, 250, 231, 189, 174, 104, 0, 190, 178, 151, 121, 189, 240, 32, 79, 62, 13, 210, 25, 61, 18, 104, 138, 188, 217, 241, 171, 61, 132, 45, 121, 190, 88, 98, 48, 189, 61, 57, 133, 62, 27, 70, 195, 60, 95, 169, 117, 62, 5, 25, 1, 190, 61, 175, 11, 62, 194, 248, 220, 60, 140, 169, 54, 62, 200, 7, 126, 189, 189, 87, 171, 61, 222, 206, 72, 62, 77, 77, 48, 188, 88, 254, 134, 189, 21, 91, 26, 62, 180, 214, 200, 60, 7, 133, 82, 62, 20, 31, 2, 62, 239, 43, 119, 189, 27, 234, 253, 189, 217, 213, 34, 190, 10, 123, 148, 59, 98, 37, 144, 62, 132, 73, 131, 189, 245, 22, 64, 190, 190, 5, 5, 62, 255, 63, 227, 189, 187, 60, 215, 188, 102, 248, 232, 60, 92, 12, 127, 61, 22, 33, 61, 61, 99, 94, 153, 189, 197, 205, 137, 190, 67, 107, 15, 62, 204, 159, 165, 190, 185, 197, 144, 62, 149, 28, 185, 190, 140, 231, 166, 61, 71, 80, 157, 62, 75, 188, 47, 189, 208, 123, 181, 60, 149, 107, 139, 61, 228, 212, 46, 62, 17, 255, 213, 189, 139, 249, 7, 190, 208, 201, 111, 62, 117, 122, 112, 190, 24, 237, 221, 189, 77, 15, 131, 61, 114, 167, 144, 61, 77, 201, 6, 188, 153, 242, 162, 189, 22, 176, 68, 60, 142, 135, 166, 61, 202, 9, 216, 61, 153, 185, 13, 190, 8, 146, 204, 189, 126, 69, 22, 62, 67, 202, 124, 61, 199, 69, 20, 62, 199, 189, 181, 61, 222, 0, 3, 190, 148, 178, 17, 190, 109, 42, 68, 61, 31, 18, 109, 189, 152, 93, 9, 190, 52, 157, 36, 61, 112, 56, 25, 190, 80, 18, 218, 61, 143, 6, 232, 189, 46, 1, 21, 62, 153, 226, 41, 190, 31, 241, 86, 190, 208, 124, 11, 62, 183, 58, 29, 190, 93, 54, 52, 61, 152, 254, 56, 190, 158, 133, 16, 190, 101, 44, 30, 190, 79, 86, 189, 188, 6, 163, 252, 188, 105, 124, 138, 61, 80, 230, 192, 188, 118, 136, 28, 190, 173, 75, 102, 61, 138, 254, 66, 61, 249, 42, 2, 61, 28, 183, 58, 190, 57, 131, 22, 189, 215, 36, 191, 61, 208, 25, 232, 189, 227, 113, 63, 190, 236, 82, 85, 189, 187, 178, 53, 190, 126, 172, 251, 61, 199, 23, 188, 189, 129, 108, 2, 62, 120, 21, 221, 189, 208, 111, 208, 61, 205, 205, 93, 61, 107, 37, 154, 61, 104, 207, 218, 187, 153, 234, 28, 190, 62, 219, 29, 62, 98, 135, 146, 61, 100, 240, 117, 61, 69, 133, 231, 61, 61, 90, 71, 188, 105, 14, 21, 190, 137, 240, 236, 61, 100, 92, 181, 189, 18, 250, 232, 61, 83, 116, 168, 189, 11, 151, 13, 189, 254, 159, 192, 189, 227, 1, 68, 189, 91, 221, 127, 61, 171, 78, 47, 190, 128, 88, 238, 189, 58, 58, 12, 190, 213, 203, 137, 61, 77, 211, 42, 62, 124, 201, 191, 61, 100, 144, 227, 189, 229, 251, 55, 189, 70, 8, 204, 189, 17, 141, 236, 60, 198, 32, 230, 189, 226, 140, 8, 60, 242, 80, 140, 61, 83, 213, 74, 188, 33, 152, 46, 62, 170, 146, 36, 190, 235, 255, 183, 186, 139, 171, 157, 61, 198, 64, 209, 60, 219, 141, 198, 61, 114, 234, 71, 61, 182, 51, 113, 61, 10, 90, 27, 62, 23, 183, 52, 190, 37, 156, 15, 190, 122, 254, 143, 61, 67, 62, 29, 189, 110, 106, 225, 189, 251, 9, 220, 187, 232, 119, 168, 189, 24, 181, 186, 61, 3, 144, 173, 189, 246, 174, 41, 190, 239, 198, 205, 189, 138, 225, 20, 190, 39, 149, 246, 189, 34, 224, 17, 62, 152, 121, 45, 190, 154, 176, 194, 189, 123, 7, 182, 188, 125, 196, 170, 60, 83, 184, 170, 61, 83, 254, 239, 189, 75, 127, 143, 61, 125, 66, 161, 60, 64, 109, 226, 61, 114, 59, 8, 62, 238, 209, 153, 188, 120, 104, 37, 62, 148, 128, 151, 61, 119, 190, 86, 59, 172, 205, 42, 190, 59, 175, 65, 62, 224, 38, 137, 61, 24, 11, 106, 58, 120, 0, 162, 189, 184, 94, 191, 187, 72, 162, 7, 61, 94, 159, 197, 61, 231, 245, 168, 189, 211, 36, 51, 62, 86, 95, 194, 189, 84, 138, 5, 62, 180, 192, 44, 62, 66, 209, 18, 190, 138, 29, 135, 62, 67, 14, 34, 189, 255, 179, 11, 190, 85, 173, 60, 61, 188, 135, 252, 189, 35, 31, 61, 61, 232, 71, 216, 189, 250, 25, 107, 62, 28, 246, 133, 189, 200, 170, 138, 190, 254, 55, 70, 188, 44, 187, 91, 61, 105, 150, 241, 189, 14, 148, 181, 188, 105, 244, 219, 190, 212, 113, 20, 62, 235, 56, 11, 62, 34, 226, 4, 188, 60, 188, 206, 61, 81, 145, 221, 59, 244, 216, 176, 188, 192, 112, 19, 190, 34, 110, 166, 189, 128, 68, 80, 62, 13, 4, 227, 59, 142, 3, 155, 189, 69, 117, 153, 189, 37, 97, 23, 190, 133, 108, 13, 61, 1, 84, 40, 190, 161, 121, 24, 189, 248, 90, 64, 60, 208, 115, 125, 61, 116, 143, 8, 190, 156, 97, 245, 61, 78, 179, 144, 188, 200, 235, 214, 61, 61, 180, 181, 61, 11, 175, 216, 60, 36, 132, 19, 62, 120, 106, 27, 62, 163, 48, 179, 189, 29, 41, 210, 61, 57, 206, 198, 61, 132, 86, 157, 61, 23, 207, 90, 189, 158, 185, 246, 60, 79, 57, 1, 62, 18, 160, 4, 62, 111, 147, 231, 60, 122, 28, 164, 60, 234, 152, 160, 60, 204, 75, 229, 61, 137, 215, 213, 61, 69, 92, 81, 59, 164, 226, 18, 190, 0, 102, 204, 61, 242, 54, 208, 189, 204, 137, 150, 61, 228, 72, 48, 62, 232, 56, 17, 62, 235, 243, 78, 61, 97, 97, 253, 60, 1, 144, 90, 61, 220, 162, 207, 61, 8, 89, 59, 189, 63, 179, 4, 61, 54, 177, 250, 189, 128, 208, 195, 189, 125, 13, 165, 188, 128, 4, 5, 62, 31, 180, 39, 190, 56, 177, 25, 62, 117, 194, 143, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 230, 66, 61, 195, 76, 241, 189, 227, 201, 124, 62, 204, 52, 212, 61, 83, 107, 46, 60, 219, 117, 105, 188, 122, 108, 23, 62, 149, 217, 19, 62, 195, 192, 207, 60, 224, 8, 198, 61, 186, 208, 127, 62, 43, 134, 80, 189, 135, 138, 153, 188, 115, 181, 35, 190, 171, 225, 181, 189, 122, 244, 59, 189, 160, 181, 56, 60, 95, 78, 117, 189, 53, 43, 226, 61, 144, 80, 145, 61, 35, 23, 130, 62, 100, 119, 14, 190, 245, 153, 214, 189, 236, 113, 113, 62, 68, 149, 135, 62, 164, 146, 50, 60, 209, 229, 210, 61, 45, 245, 52, 190, 205, 13, 240, 61, 221, 255, 242, 188, 253, 20, 138, 187, 51, 116, 35, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 60, 58, 190, 183, 78, 44, 190, 223, 91, 179, 60, 221, 156, 174, 190, 70, 0, 185, 190, 243, 50, 157, 60, 234, 250, 76, 62, 157, 99, 76, 190, 203, 245, 78, 61, 49, 112, 104, 190, 51, 66, 121, 62, 252, 98, 187, 189, 189, 11, 253, 188, 206, 93, 146, 58, 204, 122, 124, 62, 138, 107, 69, 190, 119, 234, 114, 62, 132, 182, 94, 189, 143, 40, 219, 61, 151, 237, 246, 62, 228, 231, 209, 190, 157, 63, 130, 62, 107, 234, 190, 188, 128, 127, 177, 60, 160, 255, 107, 55, 220, 82, 149, 62, 158, 8, 198, 189, 129, 131, 142, 61, 10, 29, 11, 188, 28, 148, 121, 62, 163, 42, 91, 61, 93, 241, 35, 61, 70, 20, 82, 62, 19, 50, 44, 189, 1, 182, 96, 190, 156, 119, 142, 62, 152, 114, 65, 190, 140, 254, 112, 189, 137, 13, 148, 61, 77, 119, 22, 190, 169, 147, 243, 189, 3, 66, 165, 61, 23, 77, 53, 190, 199, 42, 81, 190, 132, 182, 90, 61, 95, 166, 105, 189, 158, 45, 25, 61, 29, 240, 166, 61, 43, 49, 97, 61, 255, 173, 150, 61, 246, 90, 82, 61, 0, 159, 102, 61, 216, 34, 39, 189, 9, 20, 9, 189, 232, 248, 19, 60, 53, 210, 180, 189, 1, 107, 34, 190, 138, 237, 30, 62, 5, 211, 112, 189, 47, 211, 65, 61, 245, 25, 50, 62, 200, 129, 147, 188, 90, 6, 7, 62, 10, 156, 140, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 148, 227, 189, 117, 178, 221, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {148, 229, 133, 191, 14, 248, 148, 191, 233, 165, 116, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {166, 93, 44, 64, 80, 6, 13, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0098/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}