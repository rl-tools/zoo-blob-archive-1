// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 221, 64, 191, 142, 17, 151, 62, 132, 189, 4, 191, 79, 37, 89, 61, 73, 118, 94, 61, 241, 73, 165, 190, 121, 247, 44, 190, 253, 33, 19, 63, 171, 69, 218, 190, 33, 79, 185, 189, 92, 48, 11, 191, 5, 34, 27, 62, 94, 9, 243, 62, 143, 65, 115, 63, 11, 69, 79, 62, 25, 104, 52, 63, 236, 246, 230, 190, 93, 47, 250, 190, 107, 57, 157, 190, 92, 131, 90, 191, 148, 183, 219, 62, 76, 254, 143, 61, 70, 67, 58, 191, 17, 6, 14, 190, 130, 33, 170, 62, 119, 41, 179, 62, 41, 142, 243, 189, 9, 185, 30, 63, 106, 45, 238, 190, 185, 82, 223, 190, 67, 254, 150, 190, 169, 39, 241, 189, 50, 82, 153, 62, 140, 220, 214, 190, 173, 98, 253, 62, 141, 244, 198, 61, 65, 215, 151, 190, 142, 157, 228, 62, 111, 116, 164, 190, 207, 74, 29, 191, 185, 97, 147, 190, 82, 26, 123, 189, 229, 73, 82, 62, 250, 201, 44, 191, 21, 142, 47, 63, 218, 19, 15, 63, 176, 174, 39, 191, 9, 31, 189, 61, 50, 250, 1, 62, 86, 8, 146, 190, 11, 0, 54, 63, 210, 196, 157, 190, 120, 53, 43, 190, 183, 109, 28, 191, 192, 114, 3, 63, 123, 158, 157, 62, 110, 113, 5, 63, 125, 41, 229, 62, 48, 199, 51, 191, 140, 80, 172, 190, 142, 59, 187, 190, 190, 29, 9, 191, 236, 187, 13, 190, 132, 11, 147, 60, 184, 67, 57, 63, 215, 122, 136, 62, 6, 30, 84, 63, 166, 242, 98, 191, 213, 142, 174, 189, 215, 214, 29, 63, 221, 86, 201, 59, 152, 211, 164, 62, 64, 9, 144, 190, 9, 230, 143, 61, 104, 20, 12, 191, 72, 52, 229, 190, 237, 40, 106, 190, 193, 223, 210, 62, 140, 123, 113, 62, 97, 123, 46, 191, 211, 197, 103, 190, 114, 70, 26, 190, 232, 161, 12, 189, 108, 23, 13, 190, 46, 4, 54, 191, 147, 241, 85, 62, 207, 7, 5, 190, 26, 187, 24, 191, 49, 179, 97, 62, 155, 223, 10, 63, 197, 7, 35, 190, 57, 222, 219, 189, 239, 216, 19, 191, 145, 78, 179, 190, 62, 185, 63, 63, 67, 19, 204, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 174, 3, 191, 242, 35, 102, 62, 227, 189, 184, 188, 57, 71, 125, 190, 228, 65, 198, 189, 209, 201, 62, 190, 31, 197, 135, 62, 69, 71, 211, 190, 188, 144, 29, 63, 67, 105, 229, 59, 24, 197, 1, 190, 239, 71, 200, 60, 212, 164, 34, 63, 146, 57, 240, 61, 113, 97, 149, 190, 137, 26, 163, 62, 87, 28, 181, 62, 46, 30, 204, 62, 153, 219, 111, 190, 137, 116, 29, 191, 80, 205, 62, 63, 253, 12, 9, 63, 135, 11, 9, 63, 132, 87, 220, 62, 2, 95, 251, 61, 80, 12, 116, 190, 177, 100, 13, 191, 89, 40, 36, 63, 90, 134, 225, 62, 0, 39, 153, 62, 52, 38, 69, 191, 86, 212, 211, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 24, 99, 190, 64, 231, 130, 62, 198, 26, 159, 62, 112, 18, 105, 61, 223, 187, 142, 62, 86, 33, 1, 62, 251, 142, 45, 190, 93, 249, 148, 61, 142, 246, 2, 62, 50, 228, 77, 61, 248, 65, 169, 188, 114, 217, 109, 190, 71, 128, 39, 60, 192, 216, 18, 191, 141, 200, 190, 61, 201, 114, 211, 189, 240, 138, 229, 60, 220, 56, 2, 190, 233, 46, 110, 62, 95, 72, 207, 62, 90, 231, 222, 190, 163, 135, 35, 62, 64, 222, 79, 190, 159, 210, 153, 61, 199, 170, 2, 62, 173, 118, 138, 60, 59, 37, 147, 61, 54, 251, 185, 188, 30, 94, 70, 190, 196, 246, 48, 189, 255, 111, 84, 62, 235, 202, 136, 188, 179, 226, 115, 60, 219, 237, 8, 190, 233, 215, 223, 61, 28, 171, 169, 189, 144, 100, 200, 189, 107, 68, 31, 190, 242, 21, 218, 61, 134, 54, 47, 61, 175, 141, 48, 62, 26, 191, 129, 61, 41, 178, 7, 190, 57, 37, 32, 190, 239, 61, 40, 190, 67, 252, 239, 189, 143, 242, 33, 190, 48, 210, 51, 189, 219, 79, 58, 60, 199, 182, 25, 190, 71, 0, 21, 61, 162, 22, 201, 61, 87, 15, 22, 190, 124, 83, 191, 189, 127, 35, 150, 59, 29, 223, 137, 189, 243, 141, 159, 189, 18, 246, 46, 62, 187, 5, 190, 61, 26, 8, 199, 189, 218, 107, 96, 61, 184, 145, 20, 190, 133, 187, 176, 188, 15, 201, 30, 62, 150, 242, 11, 61, 171, 30, 206, 189, 113, 175, 151, 61, 84, 239, 70, 189, 244, 98, 130, 61, 197, 128, 116, 189, 179, 14, 201, 61, 204, 16, 59, 189, 159, 233, 209, 61, 78, 135, 98, 59, 175, 46, 137, 61, 80, 251, 246, 188, 207, 79, 72, 62, 17, 18, 187, 186, 120, 10, 181, 61, 245, 151, 185, 59, 195, 13, 3, 62, 48, 75, 48, 60, 68, 68, 200, 189, 158, 86, 101, 190, 89, 54, 30, 62, 65, 225, 70, 187, 58, 179, 172, 62, 94, 96, 155, 61, 76, 216, 240, 61, 75, 141, 140, 61, 71, 122, 19, 62, 75, 32, 22, 62, 2, 130, 132, 61, 232, 104, 242, 61, 100, 195, 86, 188, 2, 26, 245, 189, 165, 198, 129, 62, 53, 244, 97, 61, 185, 255, 64, 189, 218, 211, 197, 190, 23, 163, 165, 190, 16, 28, 128, 190, 89, 205, 180, 61, 5, 18, 131, 190, 102, 207, 90, 188, 14, 43, 212, 190, 98, 41, 9, 191, 47, 45, 161, 62, 185, 241, 96, 61, 173, 233, 129, 62, 108, 47, 82, 190, 169, 129, 206, 190, 173, 133, 90, 191, 188, 197, 111, 62, 227, 157, 243, 60, 207, 109, 31, 191, 185, 118, 12, 62, 148, 48, 185, 190, 101, 150, 221, 190, 170, 188, 243, 190, 198, 137, 196, 61, 85, 206, 136, 191, 221, 129, 243, 190, 91, 246, 66, 61, 150, 158, 77, 62, 197, 111, 30, 189, 225, 93, 153, 190, 149, 56, 119, 62, 191, 44, 177, 189, 88, 7, 239, 60, 8, 226, 142, 61, 58, 96, 76, 190, 169, 253, 13, 62, 77, 200, 137, 190, 71, 234, 111, 190, 213, 92, 10, 191, 60, 22, 132, 62, 33, 178, 55, 190, 58, 120, 201, 190, 157, 0, 235, 189, 105, 88, 111, 62, 164, 220, 2, 62, 188, 140, 53, 190, 57, 133, 20, 62, 101, 169, 245, 189, 157, 211, 59, 62, 166, 0, 135, 62, 160, 9, 237, 190, 83, 96, 209, 59, 58, 152, 30, 62, 31, 31, 129, 60, 7, 243, 7, 62, 168, 178, 34, 189, 220, 10, 77, 191, 43, 149, 198, 190, 23, 133, 224, 61, 216, 225, 34, 62, 113, 238, 139, 190, 38, 209, 204, 189, 200, 232, 255, 61, 93, 73, 7, 190, 93, 137, 30, 190, 155, 126, 160, 61, 177, 184, 242, 61, 202, 4, 18, 62, 104, 239, 131, 61, 88, 181, 23, 62, 228, 20, 110, 60, 141, 116, 157, 189, 250, 188, 151, 61, 90, 13, 243, 60, 155, 112, 200, 189, 248, 248, 23, 188, 168, 215, 167, 60, 66, 34, 163, 189, 102, 148, 51, 61, 27, 74, 171, 187, 93, 207, 21, 190, 112, 80, 239, 61, 57, 84, 209, 189, 133, 111, 69, 61, 145, 227, 2, 61, 54, 29, 245, 189, 5, 251, 51, 190, 18, 239, 35, 190, 15, 171, 247, 189, 220, 37, 154, 59, 55, 34, 7, 190, 239, 200, 245, 189, 11, 175, 163, 189, 61, 223, 19, 189, 108, 97, 127, 189, 215, 129, 83, 191, 65, 251, 84, 190, 181, 251, 15, 191, 207, 192, 130, 62, 21, 202, 210, 190, 63, 88, 120, 62, 234, 6, 139, 61, 125, 243, 222, 190, 203, 5, 58, 61, 176, 186, 46, 62, 144, 98, 93, 62, 39, 177, 82, 61, 254, 71, 243, 188, 108, 25, 8, 62, 5, 3, 139, 188, 177, 221, 91, 62, 0, 246, 25, 190, 226, 158, 42, 190, 232, 55, 254, 189, 176, 197, 48, 190, 41, 59, 228, 188, 182, 242, 211, 61, 131, 205, 51, 62, 228, 249, 17, 190, 58, 111, 45, 190, 37, 234, 99, 62, 141, 7, 150, 189, 156, 148, 177, 61, 145, 74, 98, 62, 1, 60, 132, 59, 67, 179, 139, 190, 82, 213, 215, 60, 253, 255, 134, 188, 42, 172, 16, 60, 32, 39, 26, 61, 199, 255, 138, 190, 209, 210, 89, 189, 25, 47, 53, 61, 20, 22, 177, 189, 241, 216, 182, 190, 210, 96, 208, 61, 226, 204, 88, 189, 151, 125, 141, 189, 67, 227, 76, 190, 231, 207, 71, 62, 143, 238, 215, 189, 6, 82, 230, 61, 243, 186, 117, 62, 178, 116, 74, 190, 157, 176, 148, 189, 165, 8, 84, 61, 252, 80, 84, 189, 3, 30, 227, 189, 52, 89, 240, 61, 174, 154, 186, 61, 155, 149, 3, 62, 1, 137, 51, 62, 242, 253, 64, 190, 206, 59, 107, 190, 170, 22, 47, 62, 36, 175, 150, 189, 130, 112, 107, 189, 82, 29, 42, 189, 178, 107, 26, 62, 124, 100, 117, 189, 224, 202, 7, 62, 47, 86, 180, 189, 216, 244, 238, 60, 144, 209, 203, 61, 33, 146, 152, 61, 136, 189, 136, 61, 212, 23, 43, 190, 203, 221, 165, 189, 203, 52, 158, 187, 101, 69, 21, 189, 234, 49, 134, 61, 153, 80, 231, 61, 101, 102, 46, 62, 95, 163, 242, 60, 252, 189, 128, 62, 58, 48, 219, 61, 211, 66, 252, 61, 134, 32, 155, 189, 20, 46, 7, 189, 117, 155, 244, 61, 218, 199, 101, 62, 194, 146, 13, 62, 127, 72, 115, 62, 130, 115, 201, 61, 250, 110, 188, 61, 162, 114, 43, 189, 150, 162, 59, 190, 250, 92, 139, 188, 76, 104, 240, 185, 91, 34, 152, 59, 11, 207, 150, 189, 131, 87, 200, 190, 32, 186, 77, 62, 184, 222, 224, 62, 20, 159, 3, 62, 192, 122, 102, 62, 24, 240, 144, 62, 71, 107, 132, 60, 96, 151, 141, 62, 213, 98, 148, 62, 200, 72, 194, 60, 241, 75, 185, 189, 134, 213, 136, 190, 89, 200, 3, 61, 202, 36, 144, 190, 129, 144, 156, 190, 215, 140, 156, 61, 228, 204, 102, 187, 2, 44, 78, 190, 193, 60, 137, 61, 140, 81, 41, 62, 220, 200, 151, 190, 179, 143, 149, 61, 251, 239, 168, 62, 47, 104, 152, 62, 195, 99, 44, 190, 6, 41, 79, 190, 94, 122, 166, 62, 78, 94, 15, 189, 153, 116, 93, 190, 178, 71, 54, 61, 27, 187, 100, 62, 220, 162, 12, 189, 83, 43, 152, 190, 239, 152, 212, 186, 32, 86, 234, 61, 114, 24, 37, 189, 110, 202, 19, 190, 156, 72, 51, 62, 245, 245, 90, 62, 192, 17, 22, 190, 79, 194, 45, 62, 40, 71, 3, 62, 190, 139, 88, 62, 247, 20, 170, 61, 135, 250, 178, 189, 185, 237, 237, 61, 178, 27, 239, 189, 58, 241, 194, 188, 112, 141, 247, 61, 85, 6, 2, 190, 211, 223, 37, 190, 77, 138, 33, 190, 146, 233, 247, 61, 239, 94, 81, 60, 80, 185, 145, 61, 16, 250, 27, 62, 88, 151, 27, 62, 170, 170, 124, 62, 155, 95, 162, 189, 214, 121, 168, 188, 14, 21, 21, 62, 231, 1, 249, 61, 218, 129, 188, 189, 144, 61, 28, 61, 159, 113, 133, 61, 80, 237, 240, 59, 50, 109, 59, 62, 198, 124, 144, 61, 219, 130, 71, 62, 174, 26, 3, 62, 66, 170, 20, 62, 97, 8, 27, 190, 103, 107, 57, 189, 89, 104, 195, 61, 82, 120, 143, 190, 186, 74, 175, 190, 242, 130, 189, 61, 42, 209, 254, 61, 36, 29, 148, 61, 57, 68, 213, 62, 108, 189, 194, 61, 213, 92, 211, 60, 25, 66, 10, 189, 73, 5, 160, 61, 253, 48, 133, 62, 31, 93, 93, 189, 42, 17, 104, 62, 247, 90, 167, 62, 4, 170, 178, 61, 53, 145, 121, 190, 87, 180, 79, 190, 67, 212, 57, 59, 179, 72, 16, 62, 119, 147, 183, 189, 139, 218, 35, 189, 110, 93, 242, 189, 28, 99, 174, 61, 165, 115, 22, 190, 3, 9, 211, 189, 55, 169, 138, 190, 179, 165, 218, 62, 108, 240, 119, 189, 56, 134, 52, 188, 195, 83, 9, 62, 6, 26, 1, 190, 180, 168, 92, 59, 182, 83, 23, 190, 47, 93, 130, 62, 149, 43, 144, 190, 237, 197, 236, 190, 52, 48, 246, 61, 171, 110, 198, 190, 201, 131, 39, 189, 43, 157, 194, 189, 185, 117, 179, 61, 164, 103, 40, 62, 107, 82, 224, 190, 52, 165, 232, 61, 200, 114, 59, 191, 204, 95, 111, 189, 43, 105, 64, 190, 104, 59, 220, 61, 62, 202, 159, 189, 16, 92, 58, 190, 159, 238, 184, 190, 60, 228, 38, 62, 149, 187, 250, 61, 207, 118, 170, 61, 43, 148, 190, 61, 41, 102, 212, 61, 130, 182, 198, 189, 191, 228, 168, 61, 92, 83, 192, 61, 157, 253, 126, 61, 234, 122, 28, 189, 218, 63, 225, 188, 147, 24, 20, 189, 19, 243, 212, 189, 153, 167, 207, 189, 137, 126, 106, 57, 32, 171, 8, 190, 121, 217, 174, 188, 6, 221, 15, 190, 142, 146, 16, 62, 90, 241, 45, 190, 244, 172, 62, 185, 199, 135, 33, 190, 92, 5, 170, 61, 32, 193, 59, 61, 125, 150, 130, 189, 241, 69, 106, 189, 158, 66, 220, 61, 168, 207, 23, 190, 64, 153, 201, 186, 12, 101, 47, 189, 194, 104, 177, 189, 245, 130, 203, 61, 0, 104, 101, 61, 126, 170, 27, 62, 194, 228, 50, 62, 221, 243, 146, 189, 236, 212, 44, 62, 200, 125, 242, 189, 50, 237, 167, 61, 101, 246, 128, 190, 162, 180, 132, 62, 173, 118, 146, 188, 177, 37, 192, 60, 188, 38, 131, 189, 7, 189, 234, 61, 225, 35, 55, 190, 41, 248, 235, 190, 43, 6, 240, 61, 122, 150, 197, 189, 137, 92, 154, 189, 119, 165, 60, 62, 20, 93, 172, 60, 219, 22, 142, 189, 200, 131, 50, 62, 231, 233, 22, 189, 160, 167, 47, 62, 158, 5, 101, 61, 121, 164, 153, 62, 186, 249, 211, 60, 195, 103, 27, 188, 119, 244, 19, 61, 152, 232, 138, 189, 196, 193, 206, 189, 136, 118, 44, 189, 67, 27, 53, 190, 102, 10, 5, 62, 252, 203, 47, 191, 195, 102, 149, 189, 120, 35, 29, 190, 163, 138, 179, 62, 20, 35, 192, 62, 73, 148, 100, 62, 240, 66, 137, 186, 144, 163, 68, 62, 111, 204, 6, 189, 23, 63, 76, 62, 145, 58, 16, 62, 177, 19, 183, 61, 80, 139, 127, 189, 24, 138, 16, 190, 146, 129, 38, 61, 25, 132, 235, 61, 71, 233, 153, 62, 37, 48, 248, 61, 225, 216, 253, 189, 83, 195, 225, 189, 183, 225, 187, 61, 227, 33, 193, 189, 86, 242, 155, 61, 251, 63, 99, 62, 30, 217, 229, 61, 220, 69, 215, 60, 97, 120, 69, 61, 219, 93, 210, 61, 191, 38, 100, 61, 0, 136, 113, 190, 147, 85, 61, 190, 131, 203, 81, 62, 235, 3, 208, 60, 250, 193, 25, 188, 175, 239, 193, 61, 59, 129, 176, 62, 211, 11, 46, 190, 26, 56, 71, 62, 150, 135, 73, 62, 18, 91, 71, 190, 80, 201, 63, 188, 233, 116, 191, 189, 134, 95, 197, 57, 64, 92, 67, 189, 166, 103, 58, 62, 114, 15, 90, 62, 61, 255, 59, 190, 100, 112, 33, 62, 204, 16, 77, 62, 176, 163, 232, 190, 221, 209, 164, 61, 128, 169, 191, 190, 218, 90, 235, 58, 22, 39, 7, 189, 168, 106, 178, 61, 144, 62, 177, 61, 48, 213, 150, 190, 248, 208, 230, 61, 56, 112, 142, 189, 165, 176, 210, 61, 7, 139, 0, 190, 146, 159, 51, 189, 160, 148, 222, 190, 44, 230, 0, 61, 136, 205, 255, 187, 16, 157, 3, 61, 21, 137, 24, 62, 212, 35, 68, 61, 99, 96, 251, 61, 173, 55, 35, 190, 234, 137, 149, 60, 171, 212, 12, 190, 223, 207, 38, 190, 88, 123, 191, 60, 6, 48, 173, 189, 202, 112, 187, 188, 113, 104, 16, 190, 159, 28, 65, 190, 226, 195, 200, 60, 165, 247, 176, 189, 41, 230, 35, 61, 22, 240, 22, 62, 160, 195, 119, 61, 211, 57, 60, 189, 166, 124, 19, 190, 184, 106, 32, 190, 115, 147, 85, 61, 98, 140, 92, 61, 200, 238, 11, 189, 60, 132, 209, 189, 217, 12, 246, 60, 63, 32, 10, 62, 39, 46, 228, 60, 232, 145, 24, 190, 130, 66, 76, 188, 151, 184, 35, 60, 61, 115, 11, 189, 235, 245, 214, 189, 141, 41, 253, 61, 18, 254, 165, 189, 136, 238, 117, 190, 69, 246, 19, 191, 177, 2, 167, 62, 216, 11, 184, 189, 100, 24, 135, 190, 188, 94, 89, 62, 145, 197, 228, 62, 154, 91, 119, 60, 226, 72, 54, 60, 159, 159, 161, 189, 53, 143, 12, 191, 126, 83, 106, 62, 247, 152, 193, 62, 200, 119, 111, 61, 44, 225, 196, 57, 88, 19, 12, 190, 87, 160, 165, 61, 75, 24, 10, 190, 98, 108, 161, 190, 26, 246, 180, 62, 217, 125, 11, 62, 43, 76, 214, 189, 165, 158, 129, 61, 22, 33, 147, 189, 210, 41, 54, 189, 123, 193, 214, 190, 61, 98, 106, 190, 94, 97, 133, 190, 106, 196, 31, 191, 10, 162, 149, 191, 201, 102, 154, 190, 76, 130, 129, 191, 16, 192, 181, 62, 33, 169, 37, 191, 254, 176, 103, 62, 50, 209, 194, 62, 33, 227, 23, 190, 248, 195, 166, 61, 128, 33, 160, 61, 70, 56, 2, 62, 26, 115, 31, 190, 133, 126, 49, 61, 134, 73, 145, 62, 215, 154, 68, 190, 47, 194, 96, 62, 233, 20, 68, 190, 153, 32, 173, 190, 134, 55, 103, 190, 250, 205, 130, 190, 99, 127, 98, 62, 1, 205, 50, 61, 1, 146, 118, 62, 166, 75, 57, 60, 117, 216, 201, 190, 106, 59, 55, 62, 225, 183, 86, 190, 36, 245, 181, 61, 75, 100, 45, 61, 128, 248, 14, 62, 242, 178, 29, 190, 208, 79, 9, 62, 37, 29, 225, 61, 124, 111, 225, 61, 41, 52, 166, 62, 175, 146, 58, 190, 72, 30, 156, 62, 62, 0, 218, 190, 227, 203, 43, 190, 36, 24, 0, 191, 121, 34, 172, 62, 65, 157, 2, 190, 120, 156, 181, 190, 184, 160, 5, 190, 43, 233, 99, 62, 47, 219, 144, 189, 252, 41, 19, 61, 88, 63, 251, 189, 151, 189, 19, 190, 102, 123, 238, 61, 15, 204, 73, 61, 130, 170, 12, 191, 188, 183, 0, 190, 9, 5, 75, 61, 222, 166, 136, 189, 217, 49, 176, 61, 197, 244, 32, 60, 191, 236, 116, 190, 211, 24, 145, 190, 156, 159, 211, 61, 217, 99, 158, 188, 94, 227, 57, 190, 14, 16, 130, 190, 7, 8, 14, 187, 20, 66, 95, 191, 233, 244, 25, 190, 117, 222, 249, 190, 77, 100, 33, 61, 210, 138, 206, 190, 152, 230, 146, 60, 18, 162, 38, 62, 178, 21, 4, 188, 32, 164, 232, 61, 226, 175, 69, 190, 62, 84, 78, 62, 160, 68, 52, 62, 227, 254, 151, 62, 4, 36, 247, 61, 99, 147, 151, 190, 237, 76, 14, 190, 195, 221, 132, 61, 84, 137, 152, 190, 151, 204, 150, 190, 228, 112, 122, 189, 84, 188, 40, 189, 9, 112, 168, 189, 46, 127, 139, 190, 140, 181, 23, 190, 86, 12, 57, 190, 177, 86, 157, 61, 202, 136, 5, 190, 62, 23, 160, 188, 95, 107, 155, 62, 242, 151, 51, 62, 232, 128, 66, 190, 25, 116, 152, 61, 173, 56, 3, 190, 63, 28, 180, 189, 108, 156, 210, 61, 198, 215, 32, 189, 7, 107, 23, 188, 0, 15, 145, 189, 200, 43, 39, 190, 143, 149, 226, 60, 142, 45, 101, 189, 2, 31, 178, 61, 105, 43, 232, 61, 198, 58, 8, 190, 43, 7, 190, 189, 114, 195, 179, 189, 174, 202, 123, 189, 158, 64, 159, 189, 207, 38, 85, 60, 24, 105, 112, 61, 219, 9, 211, 188, 224, 139, 197, 61, 64, 199, 204, 61, 1, 16, 141, 59, 207, 19, 131, 61, 163, 180, 169, 61, 149, 67, 134, 189, 193, 198, 238, 61, 96, 64, 151, 188, 39, 209, 81, 189, 152, 65, 5, 60, 186, 117, 172, 189, 48, 171, 105, 187, 245, 180, 42, 190, 197, 220, 93, 190, 91, 141, 206, 189, 45, 248, 96, 189, 186, 9, 26, 190, 221, 160, 30, 61, 163, 240, 133, 61, 98, 228, 243, 187, 192, 15, 131, 190, 36, 5, 28, 62, 74, 165, 103, 59, 10, 3, 116, 187, 41, 225, 143, 61, 130, 37, 211, 61, 176, 243, 138, 187, 239, 72, 115, 189, 151, 8, 48, 189, 176, 255, 232, 61, 106, 167, 3, 190, 31, 236, 206, 187, 179, 205, 116, 190, 21, 110, 94, 60, 210, 159, 171, 61, 155, 234, 83, 62, 171, 240, 206, 189, 121, 250, 20, 62, 219, 103, 239, 189, 150, 211, 7, 190, 223, 50, 128, 189, 143, 38, 103, 62, 57, 44, 130, 61, 133, 168, 219, 59, 186, 247, 201, 61, 111, 207, 62, 190, 147, 248, 180, 188, 252, 119, 101, 62, 45, 186, 149, 189, 162, 3, 104, 62, 153, 91, 139, 189, 212, 122, 200, 61, 196, 51, 224, 189, 127, 251, 97, 62, 100, 94, 254, 186, 174, 26, 158, 61, 57, 21, 148, 62, 244, 138, 167, 60, 22, 228, 39, 188, 4, 58, 166, 61, 76, 3, 109, 189, 162, 202, 73, 62, 121, 55, 15, 62, 173, 179, 136, 189, 101, 131, 59, 190, 93, 41, 12, 190, 166, 151, 62, 61, 88, 35, 151, 62, 162, 4, 38, 189, 64, 181, 55, 190, 139, 143, 252, 61, 209, 56, 179, 189, 230, 158, 138, 59, 139, 85, 167, 61, 192, 125, 189, 61, 235, 141, 255, 61, 240, 204, 80, 189, 175, 63, 6, 191, 187, 175, 86, 61, 77, 191, 213, 190, 86, 0, 155, 62, 229, 60, 19, 191, 7, 40, 34, 62, 251, 189, 163, 62, 95, 187, 188, 190, 53, 233, 29, 62, 143, 153, 251, 61, 182, 176, 65, 62, 194, 126, 203, 189, 188, 167, 3, 190, 200, 12, 19, 62, 6, 238, 140, 190, 114, 224, 57, 58, 47, 33, 200, 61, 24, 84, 83, 189, 13, 97, 191, 189, 15, 128, 201, 189, 100, 212, 28, 189, 52, 155, 237, 61, 64, 14, 53, 62, 171, 136, 163, 189, 192, 168, 98, 190, 116, 196, 47, 62, 217, 14, 188, 60, 197, 174, 191, 61, 137, 186, 7, 61, 223, 69, 202, 189, 93, 93, 35, 190, 183, 4, 29, 61, 31, 18, 109, 189, 152, 93, 9, 190, 52, 157, 36, 61, 112, 56, 25, 190, 80, 18, 218, 61, 143, 6, 232, 189, 46, 1, 21, 62, 153, 226, 41, 190, 31, 241, 86, 190, 208, 124, 11, 62, 183, 58, 29, 190, 93, 54, 52, 61, 152, 254, 56, 190, 158, 133, 16, 190, 101, 44, 30, 190, 79, 86, 189, 188, 6, 163, 252, 188, 105, 124, 138, 61, 80, 230, 192, 188, 118, 136, 28, 190, 173, 75, 102, 61, 138, 254, 66, 61, 249, 42, 2, 61, 28, 183, 58, 190, 57, 131, 22, 189, 215, 36, 191, 61, 208, 25, 232, 189, 227, 113, 63, 190, 236, 82, 85, 189, 187, 178, 53, 190, 126, 172, 251, 61, 199, 23, 188, 189, 114, 228, 196, 61, 104, 177, 15, 190, 39, 8, 144, 61, 205, 205, 93, 61, 107, 37, 154, 61, 126, 241, 31, 189, 153, 234, 28, 190, 248, 234, 23, 62, 143, 186, 92, 61, 37, 145, 224, 60, 69, 133, 231, 61, 138, 93, 103, 188, 197, 128, 55, 190, 128, 48, 185, 61, 100, 92, 181, 189, 18, 250, 232, 61, 83, 116, 168, 189, 209, 77, 141, 189, 254, 159, 192, 189, 192, 151, 139, 189, 61, 207, 235, 60, 171, 78, 47, 190, 191, 71, 2, 190, 58, 58, 12, 190, 176, 139, 9, 61, 77, 211, 42, 62, 27, 73, 160, 61, 147, 79, 20, 190, 68, 63, 160, 189, 70, 8, 204, 189, 187, 207, 137, 187, 142, 251, 236, 189, 226, 140, 8, 60, 242, 80, 140, 61, 83, 213, 74, 188, 4, 217, 44, 62, 170, 146, 36, 190, 235, 255, 183, 186, 35, 105, 146, 61, 198, 64, 209, 60, 219, 141, 198, 61, 114, 234, 71, 61, 65, 252, 103, 61, 10, 90, 27, 62, 23, 183, 52, 190, 132, 65, 16, 190, 28, 64, 133, 61, 219, 243, 36, 189, 115, 193, 236, 189, 251, 9, 220, 187, 181, 183, 174, 189, 24, 181, 186, 61, 110, 122, 175, 189, 253, 234, 43, 190, 132, 186, 207, 189, 175, 4, 23, 190, 39, 149, 246, 189, 162, 3, 15, 62, 152, 121, 45, 190, 154, 176, 194, 189, 123, 7, 182, 188, 32, 217, 123, 60, 83, 184, 170, 61, 242, 121, 241, 189, 187, 116, 44, 60, 25, 221, 52, 60, 57, 85, 213, 59, 165, 213, 218, 61, 26, 215, 136, 190, 249, 21, 119, 62, 234, 189, 44, 61, 27, 9, 72, 61, 147, 103, 249, 189, 101, 164, 131, 62, 170, 242, 40, 61, 119, 66, 120, 190, 207, 171, 234, 189, 48, 135, 63, 189, 179, 118, 224, 60, 17, 20, 17, 62, 109, 77, 196, 189, 3, 229, 28, 62, 195, 110, 238, 189, 204, 199, 79, 62, 66, 173, 18, 62, 9, 171, 24, 190, 69, 176, 187, 62, 159, 34, 218, 60, 248, 41, 37, 190, 16, 14, 193, 60, 38, 41, 18, 189, 59, 186, 143, 60, 26, 91, 46, 190, 41, 44, 88, 62, 130, 141, 46, 189, 210, 18, 3, 191, 156, 202, 243, 189, 167, 39, 38, 61, 11, 122, 114, 190, 248, 174, 85, 61, 118, 27, 70, 191, 68, 211, 142, 62, 71, 48, 50, 62, 33, 46, 30, 62, 148, 189, 248, 61, 78, 219, 239, 61, 163, 68, 56, 61, 237, 97, 133, 190, 180, 107, 226, 189, 61, 52, 48, 62, 246, 246, 195, 59, 221, 143, 248, 60, 104, 91, 21, 189, 56, 94, 54, 190, 26, 110, 31, 189, 3, 140, 106, 61, 43, 25, 56, 189, 0, 255, 195, 60, 243, 241, 80, 62, 149, 77, 216, 189, 66, 174, 177, 61, 248, 165, 123, 61, 24, 158, 142, 62, 48, 16, 128, 61, 32, 178, 17, 189, 64, 139, 69, 62, 252, 134, 81, 62, 64, 194, 82, 190, 40, 35, 216, 61, 142, 66, 182, 61, 6, 42, 46, 62, 128, 37, 225, 189, 154, 198, 66, 62, 247, 166, 195, 61, 225, 170, 193, 61, 137, 30, 5, 62, 250, 61, 132, 61, 254, 241, 200, 188, 127, 54, 48, 62, 139, 92, 159, 62, 8, 29, 109, 59, 171, 219, 155, 190, 100, 250, 89, 62, 246, 216, 59, 190, 92, 33, 31, 62, 164, 34, 35, 62, 93, 52, 109, 62, 30, 188, 182, 61, 190, 96, 7, 189, 25, 145, 71, 62, 115, 30, 49, 188, 116, 220, 71, 189, 204, 62, 16, 61, 60, 195, 176, 189, 74, 216, 133, 189, 186, 155, 135, 189, 209, 111, 164, 61, 169, 128, 146, 189, 13, 82, 207, 61, 4, 134, 147, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 233, 190, 187, 195, 76, 241, 189, 245, 223, 149, 62, 117, 184, 39, 62, 217, 246, 207, 61, 183, 151, 124, 188, 92, 100, 74, 62, 138, 164, 44, 62, 109, 135, 47, 61, 11, 81, 42, 62, 87, 199, 125, 62, 26, 156, 109, 61, 229, 6, 169, 189, 115, 181, 35, 190, 237, 67, 224, 189, 4, 64, 204, 59, 199, 107, 119, 189, 95, 78, 117, 189, 117, 213, 65, 62, 46, 182, 191, 61, 205, 165, 117, 62, 2, 142, 1, 190, 27, 191, 4, 190, 177, 41, 131, 62, 242, 210, 154, 62, 179, 254, 29, 61, 209, 229, 210, 61, 214, 139, 73, 190, 110, 38, 236, 61, 136, 12, 7, 189, 136, 6, 170, 187, 149, 146, 73, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 108, 139, 190, 183, 78, 44, 190, 156, 91, 251, 59, 240, 136, 29, 191, 158, 175, 3, 191, 254, 2, 157, 60, 79, 46, 199, 62, 166, 193, 213, 189, 207, 251, 179, 60, 153, 235, 24, 191, 241, 136, 53, 62, 224, 79, 56, 190, 170, 42, 119, 62, 206, 93, 146, 58, 12, 197, 178, 62, 128, 120, 100, 190, 150, 56, 152, 62, 132, 182, 94, 189, 162, 211, 40, 63, 37, 17, 40, 63, 36, 69, 216, 190, 237, 126, 21, 63, 159, 236, 4, 189, 125, 56, 221, 60, 118, 254, 74, 61, 139, 109, 197, 62, 158, 8, 198, 189, 5, 145, 132, 61, 75, 167, 9, 188, 197, 225, 165, 62, 45, 197, 49, 62, 34, 218, 208, 61, 226, 162, 165, 62, 19, 50, 44, 189, 206, 41, 110, 190, 1, 94, 171, 62, 210, 226, 4, 190, 207, 205, 112, 189, 80, 117, 8, 62, 127, 17, 32, 190, 47, 75, 233, 189, 142, 108, 74, 189, 215, 203, 76, 190, 87, 233, 124, 190, 35, 242, 41, 62, 95, 166, 105, 189, 38, 221, 73, 61, 137, 34, 188, 61, 233, 128, 195, 61, 255, 173, 150, 61, 223, 15, 191, 189, 234, 106, 224, 61, 37, 190, 1, 60, 71, 63, 77, 61, 180, 91, 119, 60, 206, 142, 220, 189, 42, 129, 16, 190, 206, 65, 95, 62, 5, 211, 112, 189, 114, 221, 60, 61, 186, 19, 50, 62, 157, 215, 146, 61, 245, 30, 120, 62, 217, 57, 201, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 235, 7, 190, 141, 188, 48, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {221, 102, 113, 191, 194, 109, 150, 189, 176, 56, 72, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {249, 71, 113, 63, 178, 144, 23, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0098/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}