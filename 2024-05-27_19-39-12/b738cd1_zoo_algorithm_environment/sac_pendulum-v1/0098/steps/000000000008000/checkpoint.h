// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 0, 64, 191, 152, 217, 19, 190, 252, 112, 3, 191, 145, 127, 183, 61, 138, 1, 195, 190, 116, 36, 98, 190, 92, 30, 119, 190, 129, 243, 49, 63, 142, 101, 191, 190, 121, 150, 231, 61, 202, 249, 83, 191, 144, 139, 165, 61, 205, 251, 8, 63, 131, 184, 131, 63, 76, 133, 156, 62, 143, 1, 53, 63, 253, 190, 22, 191, 94, 57, 247, 190, 187, 126, 131, 190, 26, 232, 46, 191, 53, 193, 237, 62, 8, 69, 150, 62, 240, 29, 100, 191, 202, 224, 59, 190, 249, 23, 100, 62, 218, 23, 22, 63, 46, 52, 25, 190, 24, 198, 33, 63, 226, 158, 253, 190, 145, 213, 221, 190, 244, 235, 174, 190, 200, 59, 24, 63, 195, 202, 99, 62, 108, 91, 29, 191, 165, 12, 33, 63, 209, 30, 35, 62, 61, 86, 161, 190, 196, 103, 219, 62, 113, 168, 167, 190, 143, 16, 64, 191, 114, 151, 198, 190, 194, 60, 236, 188, 118, 50, 18, 62, 117, 5, 50, 191, 99, 2, 33, 63, 234, 31, 28, 63, 24, 66, 60, 191, 198, 164, 152, 61, 205, 49, 162, 61, 144, 201, 205, 62, 73, 116, 25, 63, 175, 185, 156, 190, 175, 99, 66, 191, 160, 208, 5, 191, 130, 186, 29, 63, 103, 237, 248, 62, 36, 200, 232, 62, 94, 206, 61, 63, 121, 95, 82, 191, 128, 42, 163, 190, 118, 46, 223, 190, 109, 158, 62, 191, 232, 58, 80, 190, 91, 215, 7, 189, 40, 75, 182, 63, 87, 128, 160, 62, 153, 178, 103, 63, 199, 3, 102, 191, 137, 77, 27, 190, 225, 69, 21, 63, 127, 15, 247, 61, 66, 35, 180, 62, 230, 220, 209, 190, 73, 41, 66, 191, 26, 68, 149, 190, 26, 121, 5, 191, 187, 8, 19, 63, 143, 86, 139, 62, 160, 238, 203, 62, 60, 248, 110, 191, 181, 188, 93, 190, 5, 30, 173, 190, 19, 18, 231, 188, 23, 209, 150, 189, 130, 2, 80, 191, 106, 213, 68, 189, 239, 179, 64, 189, 169, 117, 14, 191, 109, 194, 15, 63, 225, 218, 18, 63, 203, 209, 100, 190, 70, 224, 178, 190, 28, 235, 254, 190, 101, 48, 194, 190, 180, 77, 119, 63, 235, 189, 104, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 29, 39, 191, 96, 89, 7, 62, 49, 19, 121, 188, 202, 130, 86, 190, 76, 41, 162, 189, 245, 205, 72, 190, 208, 111, 140, 62, 194, 189, 230, 190, 127, 182, 243, 62, 221, 157, 102, 188, 105, 214, 25, 190, 6, 7, 178, 61, 108, 47, 23, 63, 118, 204, 105, 62, 12, 11, 162, 190, 196, 9, 86, 62, 236, 174, 211, 62, 232, 62, 205, 62, 194, 162, 144, 190, 237, 223, 9, 191, 117, 206, 49, 63, 178, 137, 216, 62, 70, 24, 222, 62, 211, 40, 193, 62, 60, 114, 145, 60, 251, 126, 178, 190, 19, 243, 15, 191, 185, 68, 253, 62, 216, 100, 217, 62, 193, 241, 109, 62, 114, 184, 53, 191, 59, 158, 221, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 84, 118, 190, 229, 153, 46, 62, 123, 139, 166, 62, 64, 179, 168, 62, 157, 148, 172, 62, 172, 213, 203, 187, 197, 193, 69, 189, 98, 211, 33, 62, 250, 196, 221, 61, 207, 58, 141, 189, 186, 183, 215, 189, 185, 182, 217, 190, 130, 147, 155, 59, 146, 188, 55, 191, 173, 118, 110, 62, 27, 145, 95, 187, 52, 217, 161, 61, 255, 45, 78, 190, 157, 211, 170, 62, 104, 133, 133, 62, 180, 105, 13, 191, 119, 94, 19, 62, 186, 172, 88, 190, 55, 209, 23, 62, 46, 67, 227, 61, 193, 90, 17, 189, 129, 118, 249, 61, 248, 114, 5, 190, 240, 57, 159, 190, 129, 16, 126, 189, 8, 81, 38, 62, 114, 144, 77, 189, 179, 226, 115, 60, 219, 237, 8, 190, 233, 215, 223, 61, 28, 171, 169, 189, 144, 100, 200, 189, 107, 68, 31, 190, 242, 21, 218, 61, 134, 54, 47, 61, 175, 141, 48, 62, 26, 191, 129, 61, 41, 178, 7, 190, 57, 37, 32, 190, 239, 61, 40, 190, 67, 252, 239, 189, 143, 242, 33, 190, 48, 210, 51, 189, 219, 79, 58, 60, 199, 182, 25, 190, 71, 0, 21, 61, 162, 22, 201, 61, 87, 15, 22, 190, 124, 83, 191, 189, 127, 35, 150, 59, 29, 223, 137, 189, 243, 141, 159, 189, 18, 246, 46, 62, 187, 5, 190, 61, 26, 8, 199, 189, 218, 107, 96, 61, 184, 145, 20, 190, 133, 187, 176, 188, 15, 201, 30, 62, 170, 220, 113, 61, 206, 123, 153, 189, 4, 117, 57, 61, 107, 77, 105, 188, 209, 87, 222, 61, 92, 29, 241, 188, 121, 58, 177, 61, 232, 9, 132, 189, 40, 155, 4, 62, 127, 41, 35, 61, 57, 42, 167, 61, 22, 37, 174, 188, 128, 95, 52, 62, 178, 193, 116, 61, 46, 8, 159, 61, 83, 180, 251, 188, 80, 215, 9, 62, 97, 148, 10, 60, 211, 197, 168, 189, 116, 205, 154, 190, 233, 73, 74, 62, 167, 125, 152, 60, 32, 93, 162, 62, 242, 162, 220, 61, 205, 215, 240, 61, 10, 21, 169, 61, 157, 89, 42, 62, 31, 95, 38, 62, 67, 220, 63, 61, 19, 233, 248, 61, 209, 211, 49, 187, 96, 55, 16, 190, 10, 217, 148, 62, 144, 9, 203, 61, 238, 226, 153, 188, 68, 189, 2, 191, 38, 1, 202, 190, 136, 138, 68, 190, 155, 243, 202, 62, 229, 43, 135, 190, 12, 112, 136, 189, 20, 60, 187, 190, 107, 163, 129, 191, 111, 164, 75, 190, 97, 44, 158, 60, 58, 24, 142, 62, 54, 107, 192, 62, 150, 230, 1, 191, 127, 215, 85, 191, 51, 30, 142, 62, 247, 57, 156, 190, 84, 90, 40, 191, 186, 205, 67, 62, 130, 194, 69, 191, 90, 230, 221, 190, 234, 178, 206, 190, 223, 197, 1, 62, 143, 29, 160, 191, 38, 170, 255, 190, 234, 129, 212, 60, 224, 183, 26, 62, 136, 157, 51, 190, 143, 120, 115, 190, 194, 141, 166, 189, 64, 186, 157, 189, 225, 112, 85, 60, 252, 120, 138, 61, 45, 214, 140, 190, 151, 236, 52, 62, 9, 60, 156, 190, 196, 7, 90, 59, 99, 233, 9, 191, 73, 58, 102, 62, 74, 144, 87, 190, 39, 34, 41, 191, 237, 23, 203, 190, 137, 191, 85, 62, 40, 214, 20, 62, 61, 17, 36, 190, 1, 244, 244, 61, 105, 50, 13, 190, 217, 127, 47, 62, 70, 173, 162, 62, 77, 18, 52, 191, 226, 116, 128, 60, 97, 208, 189, 61, 215, 110, 136, 188, 126, 141, 23, 62, 191, 158, 108, 189, 30, 136, 93, 191, 218, 147, 237, 190, 225, 54, 189, 61, 46, 31, 26, 62, 94, 113, 246, 190, 248, 119, 207, 189, 50, 57, 116, 60, 93, 73, 7, 190, 93, 137, 30, 190, 155, 126, 160, 61, 177, 184, 242, 61, 202, 4, 18, 62, 104, 239, 131, 61, 88, 181, 23, 62, 228, 20, 110, 60, 141, 116, 157, 189, 250, 188, 151, 61, 90, 13, 243, 60, 155, 112, 200, 189, 248, 248, 23, 188, 168, 215, 167, 60, 66, 34, 163, 189, 102, 148, 51, 61, 27, 74, 171, 187, 93, 207, 21, 190, 112, 80, 239, 61, 57, 84, 209, 189, 133, 111, 69, 61, 145, 227, 2, 61, 54, 29, 245, 189, 5, 251, 51, 190, 18, 239, 35, 190, 15, 171, 247, 189, 220, 37, 154, 59, 55, 34, 7, 190, 239, 200, 245, 189, 11, 175, 163, 189, 61, 223, 19, 189, 108, 97, 127, 189, 135, 238, 99, 191, 105, 197, 99, 190, 133, 162, 154, 190, 213, 176, 136, 62, 237, 132, 19, 191, 249, 88, 154, 62, 5, 143, 148, 61, 110, 111, 28, 191, 34, 109, 157, 60, 35, 18, 87, 62, 124, 138, 107, 62, 174, 99, 101, 62, 47, 134, 210, 189, 199, 212, 90, 61, 127, 176, 28, 61, 159, 40, 106, 62, 99, 97, 27, 190, 234, 62, 99, 190, 225, 66, 54, 190, 234, 24, 117, 188, 32, 228, 97, 189, 151, 252, 136, 61, 129, 68, 80, 62, 211, 41, 24, 190, 185, 5, 67, 190, 185, 6, 130, 62, 46, 69, 186, 190, 175, 227, 117, 61, 143, 225, 86, 62, 229, 41, 73, 61, 7, 73, 49, 190, 142, 59, 23, 61, 20, 83, 222, 187, 88, 169, 31, 188, 21, 144, 36, 60, 152, 79, 202, 190, 185, 241, 220, 189, 102, 253, 10, 61, 129, 156, 49, 190, 236, 199, 181, 190, 35, 219, 145, 61, 215, 60, 135, 189, 75, 188, 221, 189, 43, 70, 138, 190, 133, 144, 51, 62, 167, 90, 163, 189, 242, 114, 152, 59, 133, 162, 46, 62, 25, 141, 148, 190, 67, 243, 200, 189, 107, 225, 229, 188, 6, 165, 41, 190, 67, 147, 2, 190, 90, 101, 106, 61, 120, 131, 77, 61, 204, 84, 185, 61, 94, 23, 22, 62, 237, 212, 59, 190, 76, 196, 88, 190, 81, 55, 27, 62, 118, 97, 158, 189, 34, 158, 20, 190, 232, 108, 29, 189, 107, 50, 140, 61, 215, 123, 61, 189, 9, 136, 19, 62, 33, 105, 4, 190, 136, 142, 128, 61, 76, 54, 211, 61, 150, 222, 170, 61, 17, 109, 49, 61, 52, 71, 85, 190, 54, 168, 180, 189, 17, 98, 8, 60, 183, 171, 31, 189, 153, 90, 135, 61, 202, 8, 149, 61, 102, 190, 98, 62, 141, 179, 188, 59, 232, 234, 65, 62, 103, 203, 185, 61, 94, 73, 224, 61, 161, 49, 182, 189, 211, 76, 239, 189, 139, 133, 23, 62, 208, 245, 89, 62, 18, 198, 172, 61, 223, 127, 107, 62, 61, 53, 185, 61, 187, 165, 183, 61, 94, 158, 79, 189, 75, 53, 61, 190, 198, 34, 74, 189, 236, 200, 90, 188, 244, 165, 49, 58, 242, 123, 241, 189, 85, 162, 227, 190, 206, 85, 23, 62, 86, 198, 229, 62, 214, 240, 183, 62, 255, 14, 143, 62, 166, 161, 111, 62, 25, 136, 76, 61, 103, 144, 203, 62, 197, 107, 159, 62, 224, 82, 142, 188, 165, 136, 251, 189, 132, 157, 204, 190, 82, 211, 131, 61, 1, 69, 0, 191, 17, 103, 129, 190, 139, 76, 0, 62, 217, 235, 148, 60, 144, 158, 130, 190, 144, 9, 243, 61, 90, 91, 197, 61, 202, 26, 181, 190, 159, 241, 14, 62, 245, 20, 168, 62, 40, 76, 164, 62, 246, 68, 96, 190, 220, 203, 123, 190, 199, 36, 247, 62, 5, 164, 135, 189, 103, 145, 140, 190, 194, 240, 8, 61, 161, 42, 45, 62, 177, 190, 26, 61, 152, 23, 200, 190, 179, 70, 4, 61, 78, 153, 69, 189, 44, 140, 182, 60, 63, 59, 79, 190, 107, 147, 59, 62, 168, 73, 72, 62, 160, 99, 113, 190, 149, 228, 8, 62, 40, 200, 19, 62, 172, 162, 66, 62, 141, 169, 185, 61, 14, 175, 67, 190, 30, 174, 72, 62, 216, 75, 7, 190, 212, 146, 170, 188, 73, 144, 204, 61, 104, 115, 247, 189, 80, 81, 73, 190, 207, 173, 100, 190, 187, 33, 50, 62, 149, 183, 69, 189, 35, 30, 182, 61, 81, 188, 26, 62, 146, 236, 45, 62, 59, 206, 106, 62, 229, 223, 41, 190, 242, 192, 193, 188, 9, 143, 183, 61, 243, 164, 201, 61, 46, 115, 44, 190, 102, 119, 57, 189, 241, 230, 188, 61, 176, 13, 212, 60, 150, 238, 50, 62, 192, 233, 214, 186, 54, 12, 59, 62, 94, 183, 22, 62, 251, 9, 4, 62, 69, 90, 9, 189, 222, 18, 130, 189, 44, 125, 229, 61, 31, 10, 219, 190, 48, 162, 25, 191, 250, 57, 169, 61, 86, 163, 29, 62, 76, 84, 243, 60, 141, 128, 190, 62, 208, 39, 201, 60, 68, 113, 37, 61, 59, 149, 112, 189, 251, 238, 32, 61, 243, 224, 140, 62, 74, 177, 1, 190, 197, 97, 93, 62, 53, 84, 153, 62, 240, 33, 205, 61, 170, 196, 158, 190, 98, 41, 202, 188, 78, 59, 54, 188, 83, 28, 6, 62, 52, 164, 73, 190, 69, 6, 60, 188, 105, 4, 114, 190, 28, 99, 174, 61, 36, 71, 33, 190, 116, 76, 16, 190, 7, 35, 5, 191, 207, 90, 221, 62, 108, 240, 119, 189, 69, 90, 236, 188, 195, 83, 9, 62, 28, 141, 184, 190, 180, 168, 92, 59, 176, 139, 19, 190, 138, 227, 117, 62, 184, 49, 251, 190, 24, 17, 16, 190, 162, 163, 219, 61, 69, 147, 230, 190, 116, 58, 69, 189, 49, 158, 194, 189, 249, 192, 162, 61, 164, 103, 40, 62, 139, 64, 103, 190, 40, 51, 233, 61, 202, 32, 50, 191, 8, 237, 142, 189, 114, 105, 64, 190, 220, 175, 228, 61, 62, 202, 159, 189, 39, 118, 6, 190, 142, 165, 122, 190, 117, 165, 25, 62, 149, 187, 250, 61, 247, 251, 148, 61, 43, 148, 190, 61, 41, 102, 212, 61, 130, 182, 198, 189, 191, 228, 168, 61, 92, 83, 192, 61, 157, 253, 126, 61, 234, 122, 28, 189, 218, 63, 225, 188, 147, 24, 20, 189, 19, 243, 212, 189, 153, 167, 207, 189, 137, 126, 106, 57, 32, 171, 8, 190, 121, 217, 174, 188, 6, 221, 15, 190, 142, 146, 16, 62, 90, 241, 45, 190, 244, 172, 62, 185, 199, 135, 33, 190, 92, 5, 170, 61, 32, 193, 59, 61, 125, 150, 130, 189, 241, 69, 106, 189, 158, 66, 220, 61, 168, 207, 23, 190, 64, 153, 201, 186, 12, 101, 47, 189, 194, 104, 177, 189, 245, 130, 203, 61, 0, 104, 101, 61, 126, 170, 27, 62, 194, 228, 50, 62, 153, 12, 20, 190, 180, 221, 62, 62, 146, 12, 242, 189, 175, 16, 208, 62, 107, 135, 213, 190, 193, 130, 152, 62, 108, 67, 91, 62, 47, 20, 206, 189, 47, 57, 28, 189, 219, 245, 22, 62, 53, 160, 165, 190, 1, 213, 39, 191, 138, 140, 221, 61, 187, 204, 188, 189, 234, 150, 11, 61, 243, 75, 142, 62, 202, 13, 122, 58, 174, 91, 155, 189, 59, 16, 124, 61, 206, 85, 101, 189, 165, 77, 87, 62, 255, 223, 6, 190, 171, 24, 187, 62, 107, 29, 218, 60, 64, 113, 38, 189, 221, 134, 209, 189, 128, 254, 104, 190, 167, 82, 158, 189, 80, 137, 193, 189, 115, 117, 45, 190, 115, 173, 156, 61, 192, 27, 136, 191, 192, 228, 2, 189, 71, 137, 48, 190, 100, 163, 219, 62, 122, 122, 154, 62, 121, 34, 150, 62, 130, 193, 102, 188, 74, 249, 39, 62, 89, 181, 185, 61, 181, 76, 121, 62, 23, 60, 248, 61, 45, 236, 12, 62, 73, 10, 32, 61, 53, 92, 2, 189, 121, 212, 41, 188, 26, 235, 234, 61, 43, 205, 129, 62, 143, 18, 17, 62, 229, 208, 241, 189, 113, 191, 158, 189, 255, 135, 237, 61, 168, 53, 3, 190, 181, 154, 82, 62, 241, 169, 58, 62, 158, 157, 201, 61, 216, 171, 223, 60, 216, 116, 160, 61, 1, 214, 120, 62, 38, 84, 156, 61, 0, 12, 1, 190, 116, 144, 12, 190, 155, 9, 122, 62, 48, 253, 98, 62, 52, 178, 34, 189, 22, 252, 202, 61, 94, 201, 159, 62, 246, 7, 27, 188, 216, 187, 141, 61, 153, 183, 66, 62, 164, 214, 104, 189, 85, 145, 62, 190, 1, 12, 196, 189, 47, 0, 70, 59, 49, 74, 72, 62, 111, 34, 99, 62, 253, 81, 81, 62, 160, 149, 26, 190, 36, 182, 250, 61, 51, 36, 202, 62, 41, 215, 1, 191, 147, 191, 172, 61, 216, 216, 235, 190, 115, 19, 27, 188, 122, 157, 144, 188, 16, 254, 46, 190, 199, 95, 37, 62, 250, 127, 130, 190, 93, 30, 222, 61, 214, 216, 1, 62, 26, 156, 160, 189, 88, 229, 239, 189, 53, 65, 54, 189, 130, 143, 245, 190, 65, 65, 50, 188, 122, 9, 32, 190, 16, 157, 3, 61, 21, 137, 24, 62, 212, 35, 68, 61, 99, 96, 251, 61, 173, 55, 35, 190, 234, 137, 149, 60, 171, 212, 12, 190, 223, 207, 38, 190, 88, 123, 191, 60, 6, 48, 173, 189, 202, 112, 187, 188, 113, 104, 16, 190, 159, 28, 65, 190, 226, 195, 200, 60, 165, 247, 176, 189, 41, 230, 35, 61, 22, 240, 22, 62, 160, 195, 119, 61, 211, 57, 60, 189, 166, 124, 19, 190, 184, 106, 32, 190, 115, 147, 85, 61, 98, 140, 92, 61, 200, 238, 11, 189, 60, 132, 209, 189, 217, 12, 246, 60, 63, 32, 10, 62, 39, 46, 228, 60, 232, 145, 24, 190, 130, 66, 76, 188, 151, 184, 35, 60, 61, 115, 11, 189, 170, 23, 24, 60, 60, 196, 191, 61, 66, 107, 230, 61, 30, 142, 63, 190, 158, 24, 54, 191, 211, 73, 172, 62, 208, 132, 62, 189, 39, 190, 86, 191, 130, 130, 126, 62, 218, 230, 228, 62, 26, 14, 116, 189, 216, 225, 28, 61, 81, 233, 10, 189, 191, 187, 51, 191, 156, 154, 157, 62, 55, 220, 180, 62, 128, 20, 68, 61, 80, 241, 137, 189, 251, 30, 74, 190, 119, 35, 214, 189, 63, 247, 77, 190, 136, 135, 247, 190, 95, 206, 175, 62, 1, 107, 19, 62, 61, 126, 85, 190, 185, 176, 178, 186, 160, 234, 32, 191, 158, 47, 78, 189, 66, 141, 219, 190, 129, 209, 50, 190, 175, 237, 49, 190, 32, 222, 132, 191, 74, 24, 145, 191, 220, 221, 197, 190, 15, 105, 166, 191, 52, 45, 142, 62, 102, 141, 61, 191, 219, 94, 61, 62, 38, 123, 194, 62, 150, 30, 10, 189, 174, 56, 37, 59, 28, 26, 25, 61, 6, 217, 95, 62, 180, 79, 192, 61, 115, 75, 248, 189, 102, 205, 152, 62, 18, 30, 75, 190, 204, 5, 47, 62, 192, 124, 61, 190, 109, 91, 207, 190, 196, 162, 143, 190, 247, 55, 92, 190, 59, 227, 110, 62, 122, 142, 160, 61, 191, 5, 94, 62, 125, 113, 162, 188, 170, 178, 208, 190, 113, 253, 134, 62, 209, 25, 46, 190, 125, 128, 179, 61, 147, 126, 232, 61, 18, 80, 74, 62, 5, 89, 30, 190, 121, 242, 128, 62, 94, 235, 166, 61, 160, 168, 243, 60, 168, 75, 192, 62, 157, 78, 232, 189, 63, 106, 157, 62, 209, 135, 3, 191, 59, 54, 154, 190, 149, 232, 207, 190, 18, 170, 172, 62, 23, 105, 89, 190, 88, 25, 74, 190, 4, 34, 195, 189, 39, 191, 135, 62, 168, 72, 16, 189, 181, 14, 147, 189, 16, 233, 86, 190, 204, 147, 100, 190, 65, 23, 148, 61, 68, 19, 79, 188, 222, 156, 121, 191, 166, 159, 20, 190, 192, 42, 35, 62, 240, 243, 40, 190, 115, 116, 144, 60, 51, 238, 10, 189, 211, 10, 79, 189, 163, 40, 154, 190, 33, 122, 246, 61, 181, 184, 150, 61, 108, 184, 30, 190, 254, 136, 151, 190, 108, 35, 40, 62, 232, 117, 117, 191, 214, 31, 189, 190, 39, 251, 194, 190, 205, 212, 100, 61, 16, 81, 228, 190, 167, 153, 240, 189, 14, 157, 70, 62, 8, 255, 124, 189, 94, 145, 53, 61, 226, 160, 138, 190, 70, 6, 83, 62, 50, 153, 152, 62, 250, 31, 137, 62, 117, 117, 137, 61, 11, 22, 46, 190, 157, 107, 66, 190, 14, 215, 173, 61, 231, 166, 190, 190, 47, 224, 119, 190, 228, 112, 122, 189, 137, 18, 35, 190, 162, 176, 84, 189, 72, 35, 183, 190, 221, 161, 2, 190, 79, 200, 57, 190, 239, 193, 222, 61, 202, 136, 5, 190, 83, 190, 162, 189, 126, 129, 175, 62, 115, 132, 115, 62, 96, 130, 161, 190, 75, 33, 11, 62, 39, 123, 9, 190, 174, 31, 170, 189, 29, 125, 145, 61, 113, 113, 73, 190, 145, 73, 173, 189, 177, 21, 165, 188, 108, 141, 136, 190, 161, 91, 185, 61, 248, 239, 219, 189, 152, 157, 253, 61, 105, 43, 232, 61, 198, 58, 8, 190, 168, 246, 28, 190, 93, 200, 69, 190, 46, 48, 150, 189, 27, 222, 70, 189, 93, 64, 217, 188, 107, 202, 121, 61, 132, 151, 112, 189, 165, 56, 108, 62, 143, 37, 153, 61, 199, 175, 203, 189, 56, 103, 216, 61, 249, 181, 143, 61, 217, 127, 162, 189, 193, 198, 238, 61, 117, 255, 149, 61, 55, 217, 2, 190, 201, 160, 199, 189, 119, 189, 169, 189, 19, 63, 33, 60, 43, 185, 132, 190, 34, 31, 69, 190, 159, 214, 190, 189, 78, 252, 114, 189, 94, 143, 18, 190, 69, 19, 25, 61, 52, 221, 227, 61, 68, 190, 29, 189, 24, 207, 21, 191, 30, 193, 113, 62, 25, 181, 93, 61, 70, 105, 217, 59, 102, 253, 182, 61, 118, 136, 203, 61, 218, 112, 36, 187, 234, 157, 122, 189, 74, 20, 166, 189, 204, 15, 222, 61, 164, 193, 37, 190, 7, 111, 31, 188, 251, 199, 9, 191, 230, 243, 218, 60, 80, 40, 186, 61, 73, 98, 50, 62, 147, 248, 157, 189, 170, 241, 192, 61, 233, 154, 224, 189, 27, 179, 193, 190, 35, 59, 100, 189, 44, 92, 41, 62, 10, 58, 112, 61, 203, 99, 243, 187, 53, 214, 149, 61, 196, 45, 27, 190, 6, 19, 50, 189, 46, 245, 85, 62, 180, 141, 226, 189, 15, 74, 72, 62, 132, 115, 140, 189, 156, 111, 74, 61, 134, 49, 184, 190, 94, 166, 122, 62, 93, 76, 187, 58, 44, 112, 142, 61, 53, 246, 153, 62, 32, 3, 124, 188, 154, 48, 0, 187, 142, 228, 129, 61, 166, 207, 20, 190, 10, 176, 55, 62, 80, 87, 193, 61, 32, 127, 178, 189, 197, 233, 164, 190, 218, 146, 25, 190, 47, 170, 188, 60, 130, 186, 99, 62, 235, 155, 20, 189, 185, 220, 111, 190, 194, 151, 236, 61, 222, 215, 143, 190, 240, 213, 101, 188, 147, 244, 207, 60, 102, 43, 153, 61, 132, 70, 243, 61, 12, 52, 212, 189, 39, 210, 217, 190, 66, 227, 129, 61, 1, 85, 66, 189, 40, 164, 177, 62, 236, 141, 48, 191, 173, 93, 85, 62, 143, 117, 176, 62, 249, 36, 214, 190, 200, 215, 15, 62, 221, 231, 32, 62, 147, 12, 27, 62, 17, 1, 13, 190, 185, 223, 85, 190, 2, 122, 116, 61, 159, 92, 96, 190, 48, 27, 180, 60, 215, 74, 209, 61, 120, 14, 109, 189, 105, 173, 8, 190, 94, 42, 30, 60, 201, 207, 62, 189, 118, 97, 98, 61, 87, 111, 79, 62, 225, 240, 145, 189, 196, 186, 158, 190, 84, 0, 17, 62, 197, 46, 35, 190, 156, 200, 127, 61, 9, 255, 186, 189, 26, 105, 252, 189, 117, 40, 189, 59, 239, 30, 126, 189, 31, 18, 109, 189, 152, 93, 9, 190, 52, 157, 36, 61, 112, 56, 25, 190, 80, 18, 218, 61, 143, 6, 232, 189, 46, 1, 21, 62, 153, 226, 41, 190, 31, 241, 86, 190, 208, 124, 11, 62, 183, 58, 29, 190, 93, 54, 52, 61, 152, 254, 56, 190, 158, 133, 16, 190, 101, 44, 30, 190, 79, 86, 189, 188, 6, 163, 252, 188, 105, 124, 138, 61, 80, 230, 192, 188, 118, 136, 28, 190, 173, 75, 102, 61, 138, 254, 66, 61, 249, 42, 2, 61, 28, 183, 58, 190, 57, 131, 22, 189, 215, 36, 191, 61, 208, 25, 232, 189, 227, 113, 63, 190, 236, 82, 85, 189, 187, 178, 53, 190, 126, 172, 251, 61, 199, 23, 188, 189, 114, 228, 196, 61, 104, 177, 15, 190, 39, 8, 144, 61, 205, 205, 93, 61, 107, 37, 154, 61, 126, 241, 31, 189, 153, 234, 28, 190, 248, 234, 23, 62, 143, 186, 92, 61, 37, 145, 224, 60, 69, 133, 231, 61, 138, 93, 103, 188, 197, 128, 55, 190, 128, 48, 185, 61, 100, 92, 181, 189, 18, 250, 232, 61, 83, 116, 168, 189, 209, 77, 141, 189, 254, 159, 192, 189, 192, 151, 139, 189, 61, 207, 235, 60, 171, 78, 47, 190, 191, 71, 2, 190, 58, 58, 12, 190, 176, 139, 9, 61, 77, 211, 42, 62, 27, 73, 160, 61, 147, 79, 20, 190, 68, 63, 160, 189, 70, 8, 204, 189, 187, 207, 137, 187, 142, 251, 236, 189, 226, 140, 8, 60, 242, 80, 140, 61, 83, 213, 74, 188, 4, 217, 44, 62, 170, 146, 36, 190, 235, 255, 183, 186, 35, 105, 146, 61, 198, 64, 209, 60, 219, 141, 198, 61, 114, 234, 71, 61, 65, 252, 103, 61, 10, 90, 27, 62, 23, 183, 52, 190, 132, 65, 16, 190, 28, 64, 133, 61, 219, 243, 36, 189, 115, 193, 236, 189, 251, 9, 220, 187, 181, 183, 174, 189, 24, 181, 186, 61, 110, 122, 175, 189, 253, 234, 43, 190, 132, 186, 207, 189, 175, 4, 23, 190, 39, 149, 246, 189, 162, 3, 15, 62, 152, 121, 45, 190, 154, 176, 194, 189, 123, 7, 182, 188, 32, 217, 123, 60, 83, 184, 170, 61, 242, 121, 241, 189, 84, 50, 101, 189, 186, 138, 84, 60, 71, 150, 227, 60, 49, 30, 132, 62, 190, 10, 232, 190, 92, 198, 147, 62, 136, 62, 223, 61, 220, 40, 203, 189, 5, 59, 199, 189, 59, 214, 151, 62, 178, 54, 240, 61, 215, 15, 5, 190, 94, 123, 17, 190, 241, 25, 239, 189, 122, 87, 137, 61, 72, 182, 70, 62, 72, 153, 195, 189, 87, 187, 238, 61, 149, 127, 88, 190, 90, 230, 72, 62, 156, 36, 254, 61, 12, 33, 124, 190, 44, 238, 207, 62, 208, 37, 218, 60, 76, 189, 96, 190, 88, 237, 199, 61, 92, 5, 90, 190, 125, 54, 115, 59, 77, 13, 142, 190, 167, 45, 104, 62, 251, 145, 178, 189, 206, 72, 53, 191, 85, 13, 36, 190, 108, 46, 169, 61, 198, 104, 46, 190, 112, 15, 129, 62, 239, 174, 108, 191, 122, 149, 187, 62, 88, 209, 100, 62, 204, 224, 127, 60, 35, 77, 65, 62, 187, 241, 75, 62, 7, 175, 198, 188, 124, 23, 241, 190, 219, 32, 175, 189, 240, 235, 8, 61, 56, 23, 56, 61, 255, 168, 44, 62, 195, 169, 92, 189, 127, 247, 42, 190, 43, 90, 208, 189, 180, 177, 215, 61, 45, 7, 118, 189, 1, 33, 23, 190, 253, 12, 164, 62, 216, 141, 185, 189, 219, 45, 135, 61, 127, 142, 106, 187, 68, 230, 123, 61, 248, 228, 140, 61, 29, 210, 24, 190, 253, 37, 230, 61, 101, 211, 54, 62, 170, 19, 0, 191, 161, 146, 110, 61, 209, 130, 39, 61, 226, 91, 38, 62, 137, 226, 48, 190, 166, 127, 215, 61, 71, 161, 75, 61, 7, 140, 139, 60, 224, 16, 196, 188, 189, 196, 125, 61, 170, 16, 136, 189, 87, 141, 209, 61, 227, 33, 168, 62, 92, 162, 76, 188, 242, 101, 177, 190, 178, 219, 38, 62, 76, 235, 53, 190, 27, 251, 180, 61, 73, 152, 240, 61, 181, 101, 27, 62, 40, 132, 185, 61, 139, 22, 170, 189, 198, 225, 8, 62, 151, 137, 116, 188, 147, 231, 224, 189, 161, 14, 39, 59, 111, 193, 34, 190, 106, 130, 57, 190, 83, 22, 170, 189, 237, 50, 108, 61, 121, 17, 4, 190, 201, 56, 105, 61, 61, 120, 46, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 34, 189, 188, 195, 76, 241, 189, 196, 98, 161, 62, 129, 35, 10, 62, 36, 36, 187, 61, 183, 151, 124, 188, 170, 226, 54, 62, 192, 224, 2, 62, 10, 225, 0, 61, 49, 197, 45, 62, 85, 39, 120, 62, 241, 151, 44, 61, 204, 197, 206, 189, 115, 181, 35, 190, 10, 48, 156, 189, 63, 182, 227, 60, 166, 186, 35, 189, 95, 78, 117, 189, 190, 53, 53, 62, 234, 192, 162, 61, 136, 169, 99, 62, 180, 161, 51, 190, 5, 191, 61, 190, 39, 232, 134, 62, 153, 170, 139, 62, 90, 103, 165, 60, 209, 229, 210, 61, 214, 139, 73, 190, 110, 38, 236, 61, 148, 106, 31, 189, 23, 146, 34, 60, 98, 0, 112, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 24, 246, 190, 183, 78, 44, 190, 139, 59, 46, 188, 134, 212, 68, 191, 91, 76, 6, 191, 254, 2, 157, 60, 38, 68, 229, 62, 211, 210, 211, 188, 67, 134, 26, 60, 134, 171, 33, 191, 44, 25, 37, 62, 151, 117, 50, 190, 13, 225, 135, 62, 206, 93, 146, 58, 145, 230, 254, 62, 90, 244, 93, 190, 247, 128, 142, 62, 132, 182, 94, 189, 193, 217, 78, 63, 173, 149, 64, 63, 158, 41, 35, 191, 174, 129, 19, 63, 253, 108, 200, 189, 58, 83, 210, 188, 185, 134, 10, 60, 214, 37, 218, 62, 158, 8, 198, 189, 5, 145, 132, 61, 75, 167, 9, 188, 250, 238, 236, 62, 242, 110, 181, 62, 43, 211, 209, 60, 50, 36, 177, 62, 19, 50, 44, 189, 148, 118, 116, 190, 188, 20, 155, 62, 110, 190, 27, 190, 207, 205, 112, 189, 198, 245, 187, 61, 120, 118, 40, 190, 195, 142, 234, 189, 69, 192, 214, 189, 62, 117, 99, 190, 73, 3, 138, 190, 150, 101, 225, 60, 95, 166, 105, 189, 186, 163, 8, 189, 230, 211, 54, 61, 201, 17, 5, 62, 255, 173, 150, 61, 83, 125, 240, 189, 195, 238, 180, 61, 117, 155, 180, 61, 98, 160, 143, 62, 57, 99, 191, 61, 62, 159, 11, 190, 231, 170, 20, 190, 122, 218, 70, 62, 5, 211, 112, 189, 114, 221, 60, 61, 186, 19, 50, 62, 10, 0, 142, 61, 213, 105, 137, 62, 98, 253, 155, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 99, 30, 190, 170, 174, 105, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {26, 177, 135, 191, 77, 79, 140, 190, 168, 93, 16, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {255, 221, 164, 191, 184, 44, 27, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0098/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}