// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 89, 84, 191, 66, 25, 15, 190, 196, 114, 7, 191, 124, 79, 46, 61, 67, 28, 205, 190, 11, 198, 126, 190, 204, 147, 77, 190, 241, 192, 22, 63, 250, 178, 230, 190, 236, 113, 122, 62, 183, 195, 87, 191, 240, 55, 239, 61, 24, 193, 8, 63, 7, 123, 135, 63, 69, 79, 157, 62, 185, 184, 47, 63, 100, 96, 27, 191, 119, 201, 253, 190, 224, 79, 156, 190, 126, 172, 30, 191, 178, 19, 229, 62, 75, 229, 84, 62, 96, 122, 126, 191, 103, 128, 73, 190, 90, 193, 138, 62, 2, 25, 9, 63, 112, 100, 67, 190, 98, 52, 29, 63, 109, 127, 247, 190, 99, 210, 226, 190, 139, 211, 150, 190, 35, 231, 49, 63, 237, 89, 92, 62, 33, 213, 17, 191, 231, 93, 64, 63, 161, 137, 61, 62, 51, 88, 154, 190, 29, 91, 210, 62, 60, 242, 177, 190, 48, 20, 82, 191, 193, 126, 202, 190, 172, 36, 21, 189, 19, 138, 230, 188, 58, 16, 53, 191, 77, 167, 39, 63, 42, 5, 33, 63, 65, 222, 42, 191, 89, 200, 25, 62, 17, 125, 129, 61, 10, 1, 226, 62, 239, 185, 35, 63, 81, 64, 148, 190, 1, 68, 108, 191, 130, 232, 232, 190, 160, 232, 33, 63, 62, 207, 6, 63, 147, 50, 224, 62, 79, 93, 85, 63, 14, 21, 80, 191, 145, 80, 156, 190, 71, 19, 234, 190, 231, 102, 79, 191, 108, 103, 97, 190, 12, 65, 97, 189, 127, 122, 188, 63, 252, 14, 166, 62, 59, 198, 109, 63, 81, 58, 90, 191, 124, 69, 51, 190, 75, 105, 13, 63, 78, 95, 128, 61, 106, 61, 189, 62, 131, 237, 197, 190, 68, 120, 108, 191, 213, 101, 127, 190, 64, 213, 234, 190, 122, 98, 20, 63, 186, 57, 147, 62, 68, 98, 197, 62, 215, 179, 116, 191, 4, 72, 101, 190, 176, 124, 192, 190, 143, 106, 18, 189, 97, 34, 145, 189, 63, 201, 80, 191, 133, 134, 47, 61, 202, 32, 129, 189, 101, 12, 235, 190, 193, 30, 50, 63, 25, 2, 11, 63, 126, 234, 179, 190, 226, 176, 151, 190, 184, 112, 2, 191, 168, 18, 186, 190, 251, 167, 130, 63, 231, 234, 126, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 192, 27, 191, 176, 167, 49, 62, 206, 38, 2, 190, 183, 75, 122, 190, 137, 88, 249, 189, 122, 142, 95, 190, 237, 194, 187, 62, 91, 208, 203, 190, 188, 248, 208, 62, 254, 145, 21, 189, 41, 53, 153, 189, 184, 22, 58, 62, 147, 198, 19, 63, 0, 82, 164, 62, 125, 69, 204, 190, 12, 139, 51, 62, 81, 23, 132, 62, 38, 68, 241, 62, 113, 71, 158, 190, 42, 35, 19, 191, 159, 27, 51, 63, 163, 91, 208, 62, 16, 78, 198, 62, 18, 173, 163, 62, 216, 54, 127, 61, 136, 209, 182, 190, 190, 89, 13, 191, 241, 182, 10, 63, 75, 168, 16, 63, 169, 217, 104, 62, 214, 245, 51, 191, 119, 111, 234, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 218, 115, 190, 74, 172, 46, 62, 237, 158, 156, 62, 246, 61, 118, 62, 43, 195, 163, 62, 109, 50, 227, 59, 173, 191, 169, 189, 117, 32, 21, 62, 51, 241, 206, 61, 139, 27, 96, 189, 80, 127, 229, 189, 229, 195, 241, 190, 73, 210, 159, 186, 199, 20, 62, 191, 163, 139, 112, 62, 212, 240, 45, 189, 76, 138, 62, 61, 179, 84, 83, 190, 245, 219, 165, 62, 173, 237, 124, 62, 70, 252, 57, 191, 38, 76, 206, 61, 55, 21, 126, 190, 142, 207, 223, 61, 24, 12, 225, 61, 109, 30, 0, 60, 130, 141, 249, 61, 200, 235, 132, 190, 151, 177, 224, 190, 87, 60, 152, 189, 123, 217, 32, 62, 177, 66, 221, 189, 179, 226, 115, 60, 219, 237, 8, 190, 233, 215, 223, 61, 28, 171, 169, 189, 144, 100, 200, 189, 107, 68, 31, 190, 242, 21, 218, 61, 134, 54, 47, 61, 175, 141, 48, 62, 26, 191, 129, 61, 41, 178, 7, 190, 57, 37, 32, 190, 239, 61, 40, 190, 67, 252, 239, 189, 143, 242, 33, 190, 48, 210, 51, 189, 219, 79, 58, 60, 199, 182, 25, 190, 71, 0, 21, 61, 162, 22, 201, 61, 87, 15, 22, 190, 124, 83, 191, 189, 127, 35, 150, 59, 29, 223, 137, 189, 243, 141, 159, 189, 18, 246, 46, 62, 187, 5, 190, 61, 26, 8, 199, 189, 218, 107, 96, 61, 184, 145, 20, 190, 133, 187, 176, 188, 15, 201, 30, 62, 242, 52, 55, 61, 240, 223, 167, 189, 7, 86, 151, 61, 112, 102, 78, 61, 52, 213, 18, 61, 233, 180, 169, 188, 138, 195, 186, 61, 60, 113, 211, 189, 60, 114, 5, 62, 232, 155, 6, 61, 246, 18, 119, 61, 88, 67, 84, 60, 157, 160, 115, 62, 67, 77, 175, 61, 178, 189, 170, 61, 31, 148, 129, 189, 198, 23, 246, 61, 158, 237, 2, 61, 240, 167, 219, 189, 109, 106, 159, 190, 2, 96, 103, 62, 129, 55, 229, 59, 86, 23, 138, 62, 155, 237, 125, 61, 225, 118, 180, 61, 130, 173, 50, 61, 88, 78, 20, 62, 252, 211, 79, 62, 25, 92, 174, 61, 248, 33, 25, 62, 178, 50, 234, 188, 126, 17, 230, 189, 27, 88, 144, 62, 112, 254, 5, 62, 245, 226, 68, 189, 172, 184, 244, 190, 38, 1, 202, 190, 35, 155, 49, 190, 15, 94, 203, 62, 161, 252, 38, 190, 24, 130, 152, 189, 149, 40, 179, 190, 235, 0, 104, 191, 89, 204, 53, 190, 41, 147, 251, 60, 154, 17, 180, 62, 21, 240, 231, 62, 193, 11, 254, 190, 101, 44, 90, 191, 91, 227, 159, 62, 95, 160, 155, 190, 144, 89, 42, 191, 109, 24, 133, 62, 128, 101, 16, 191, 117, 81, 171, 190, 205, 245, 164, 190, 177, 170, 48, 62, 54, 173, 170, 191, 173, 200, 209, 190, 126, 18, 170, 61, 197, 76, 82, 62, 240, 98, 5, 190, 106, 88, 128, 190, 35, 251, 1, 188, 151, 141, 184, 189, 106, 156, 36, 60, 59, 54, 113, 61, 204, 155, 211, 190, 121, 22, 77, 62, 133, 228, 144, 190, 73, 185, 27, 188, 51, 108, 29, 191, 205, 239, 125, 62, 213, 130, 67, 190, 92, 135, 41, 191, 164, 237, 193, 190, 228, 221, 92, 62, 31, 206, 46, 62, 170, 230, 4, 190, 213, 101, 21, 62, 100, 28, 232, 189, 145, 120, 47, 62, 244, 57, 187, 62, 80, 23, 69, 191, 76, 11, 188, 60, 23, 244, 26, 62, 0, 78, 167, 56, 4, 197, 54, 62, 96, 121, 203, 189, 161, 249, 73, 191, 22, 168, 7, 191, 19, 104, 227, 61, 158, 114, 54, 62, 108, 134, 156, 190, 69, 36, 12, 190, 76, 24, 198, 61, 93, 73, 7, 190, 93, 137, 30, 190, 155, 126, 160, 61, 177, 184, 242, 61, 202, 4, 18, 62, 104, 239, 131, 61, 88, 181, 23, 62, 228, 20, 110, 60, 141, 116, 157, 189, 250, 188, 151, 61, 90, 13, 243, 60, 155, 112, 200, 189, 248, 248, 23, 188, 168, 215, 167, 60, 66, 34, 163, 189, 102, 148, 51, 61, 27, 74, 171, 187, 93, 207, 21, 190, 112, 80, 239, 61, 57, 84, 209, 189, 133, 111, 69, 61, 145, 227, 2, 61, 54, 29, 245, 189, 5, 251, 51, 190, 18, 239, 35, 190, 15, 171, 247, 189, 220, 37, 154, 59, 55, 34, 7, 190, 239, 200, 245, 189, 11, 175, 163, 189, 61, 223, 19, 189, 108, 97, 127, 189, 21, 127, 136, 191, 47, 127, 128, 190, 80, 130, 129, 190, 125, 216, 160, 62, 157, 232, 22, 191, 105, 232, 147, 62, 119, 118, 130, 61, 158, 148, 62, 191, 79, 37, 70, 61, 55, 61, 76, 62, 23, 248, 13, 62, 58, 147, 75, 62, 226, 81, 13, 189, 140, 99, 242, 60, 11, 9, 60, 59, 188, 24, 125, 62, 171, 205, 33, 190, 143, 31, 138, 190, 230, 216, 62, 190, 40, 27, 80, 189, 175, 42, 206, 188, 146, 219, 89, 61, 106, 101, 87, 62, 40, 16, 18, 190, 225, 72, 133, 190, 243, 137, 11, 62, 67, 46, 250, 190, 107, 105, 178, 61, 226, 91, 91, 62, 220, 16, 59, 60, 12, 201, 22, 190, 228, 109, 47, 61, 99, 10, 42, 189, 197, 49, 153, 60, 34, 193, 190, 60, 33, 139, 193, 190, 219, 42, 74, 190, 159, 195, 189, 61, 95, 120, 100, 190, 182, 27, 191, 190, 91, 214, 164, 61, 80, 51, 165, 188, 47, 130, 41, 190, 131, 189, 195, 190, 172, 25, 65, 62, 45, 25, 6, 190, 105, 58, 27, 60, 2, 82, 235, 61, 228, 3, 215, 190, 107, 45, 162, 189, 101, 188, 41, 190, 165, 114, 2, 190, 48, 189, 14, 190, 187, 177, 137, 187, 149, 110, 52, 61, 44, 112, 171, 60, 249, 4, 221, 61, 190, 89, 56, 190, 177, 170, 123, 190, 104, 149, 8, 62, 124, 69, 2, 190, 129, 20, 28, 190, 189, 95, 126, 189, 59, 152, 147, 188, 140, 118, 124, 189, 195, 79, 2, 62, 41, 59, 205, 189, 3, 204, 254, 61, 81, 208, 194, 60, 18, 205, 164, 61, 48, 222, 28, 61, 236, 59, 128, 190, 86, 156, 199, 189, 156, 225, 45, 188, 107, 5, 137, 189, 53, 147, 181, 61, 188, 236, 0, 62, 120, 209, 104, 62, 3, 77, 139, 187, 236, 7, 17, 62, 148, 4, 134, 61, 235, 63, 252, 61, 227, 144, 0, 190, 255, 181, 2, 190, 214, 255, 36, 62, 228, 197, 66, 62, 230, 219, 131, 60, 12, 74, 44, 62, 54, 127, 113, 61, 76, 149, 49, 61, 120, 167, 155, 189, 241, 150, 34, 190, 30, 11, 213, 188, 238, 197, 192, 185, 95, 13, 176, 188, 41, 41, 208, 189, 54, 45, 219, 190, 169, 47, 38, 62, 118, 146, 238, 62, 191, 192, 188, 62, 10, 75, 129, 62, 235, 219, 128, 62, 186, 145, 146, 61, 16, 135, 193, 62, 241, 196, 164, 62, 183, 147, 158, 59, 116, 61, 69, 190, 79, 1, 1, 191, 254, 27, 148, 61, 179, 166, 4, 191, 36, 131, 81, 190, 39, 227, 29, 62, 8, 243, 193, 60, 203, 157, 124, 190, 109, 171, 252, 61, 188, 169, 26, 61, 91, 34, 195, 190, 140, 249, 219, 61, 131, 221, 169, 62, 231, 43, 169, 62, 250, 164, 132, 190, 140, 166, 123, 190, 18, 126, 237, 62, 155, 169, 195, 189, 229, 237, 171, 190, 58, 200, 18, 61, 223, 82, 41, 62, 121, 189, 94, 188, 183, 22, 7, 191, 112, 85, 117, 60, 117, 251, 13, 189, 81, 138, 14, 62, 125, 87, 108, 190, 147, 31, 56, 62, 75, 181, 70, 62, 65, 233, 116, 190, 31, 200, 19, 62, 163, 71, 5, 62, 81, 70, 34, 62, 119, 236, 196, 61, 145, 83, 6, 190, 33, 140, 6, 62, 112, 234, 40, 190, 22, 214, 159, 188, 159, 170, 191, 61, 170, 103, 8, 190, 192, 91, 93, 190, 235, 86, 79, 190, 90, 145, 57, 62, 48, 130, 65, 189, 217, 61, 122, 61, 212, 14, 251, 61, 181, 2, 245, 61, 186, 115, 36, 62, 6, 98, 26, 190, 77, 135, 60, 188, 16, 36, 122, 61, 69, 214, 197, 61, 176, 241, 94, 190, 186, 124, 173, 188, 207, 199, 140, 61, 199, 241, 240, 60, 197, 231, 55, 62, 224, 222, 255, 187, 53, 145, 36, 62, 27, 79, 31, 62, 80, 3, 243, 61, 29, 107, 5, 189, 138, 163, 83, 189, 154, 77, 237, 61, 24, 9, 240, 190, 16, 168, 30, 191, 57, 237, 218, 61, 165, 16, 28, 62, 135, 3, 68, 61, 24, 188, 178, 62, 114, 25, 75, 59, 139, 124, 97, 61, 137, 203, 141, 189, 222, 24, 84, 188, 23, 43, 138, 62, 50, 47, 208, 189, 170, 141, 86, 62, 205, 251, 142, 62, 192, 105, 176, 61, 200, 199, 182, 190, 43, 188, 200, 188, 226, 220, 202, 186, 220, 94, 10, 62, 179, 182, 49, 190, 57, 91, 49, 189, 181, 12, 77, 190, 28, 99, 174, 61, 151, 79, 31, 190, 240, 103, 38, 190, 105, 224, 28, 191, 25, 81, 247, 62, 108, 240, 119, 189, 64, 45, 94, 190, 195, 83, 9, 62, 51, 74, 164, 189, 1, 138, 85, 60, 139, 32, 41, 190, 108, 91, 125, 62, 247, 140, 145, 190, 34, 231, 200, 190, 84, 212, 6, 190, 127, 14, 39, 191, 246, 59, 0, 190, 105, 180, 187, 189, 4, 226, 40, 60, 164, 103, 40, 62, 22, 201, 185, 190, 250, 220, 50, 62, 236, 249, 44, 191, 142, 113, 5, 190, 114, 105, 64, 190, 51, 85, 19, 61, 62, 202, 159, 189, 179, 100, 30, 59, 7, 193, 105, 190, 59, 159, 170, 61, 149, 187, 250, 61, 97, 184, 238, 61, 43, 148, 190, 61, 41, 102, 212, 61, 130, 182, 198, 189, 191, 228, 168, 61, 92, 83, 192, 61, 157, 253, 126, 61, 234, 122, 28, 189, 218, 63, 225, 188, 147, 24, 20, 189, 19, 243, 212, 189, 153, 167, 207, 189, 137, 126, 106, 57, 32, 171, 8, 190, 121, 217, 174, 188, 6, 221, 15, 190, 142, 146, 16, 62, 90, 241, 45, 190, 244, 172, 62, 185, 199, 135, 33, 190, 92, 5, 170, 61, 32, 193, 59, 61, 125, 150, 130, 189, 241, 69, 106, 189, 158, 66, 220, 61, 168, 207, 23, 190, 64, 153, 201, 186, 12, 101, 47, 189, 194, 104, 177, 189, 245, 130, 203, 61, 0, 104, 101, 61, 126, 170, 27, 62, 194, 228, 50, 62, 164, 181, 12, 190, 71, 30, 55, 62, 56, 85, 97, 189, 252, 165, 248, 62, 241, 34, 240, 190, 49, 211, 168, 62, 32, 157, 117, 62, 230, 148, 14, 190, 133, 89, 65, 188, 77, 40, 47, 62, 44, 37, 201, 190, 158, 62, 59, 191, 27, 154, 250, 61, 175, 252, 88, 190, 173, 62, 242, 60, 127, 225, 145, 62, 38, 142, 191, 187, 167, 140, 194, 189, 101, 95, 75, 61, 28, 197, 26, 59, 252, 100, 30, 62, 160, 135, 70, 190, 39, 102, 186, 62, 237, 129, 144, 60, 114, 231, 207, 189, 234, 56, 247, 189, 30, 96, 121, 190, 176, 231, 1, 190, 152, 204, 72, 190, 157, 192, 74, 190, 178, 241, 212, 61, 93, 250, 147, 191, 212, 3, 23, 189, 138, 181, 41, 190, 105, 185, 202, 62, 219, 130, 62, 62, 82, 24, 139, 62, 138, 220, 146, 188, 17, 235, 31, 62, 123, 153, 239, 61, 251, 112, 94, 62, 86, 159, 249, 61, 60, 134, 27, 62, 45, 203, 0, 61, 186, 105, 99, 189, 118, 82, 137, 61, 208, 25, 23, 62, 174, 45, 107, 62, 123, 43, 5, 62, 4, 199, 216, 189, 8, 1, 167, 189, 25, 142, 104, 61, 200, 12, 229, 189, 125, 35, 75, 62, 100, 139, 71, 62, 163, 109, 191, 61, 231, 111, 50, 61, 180, 244, 6, 62, 247, 164, 129, 62, 41, 11, 167, 61, 146, 217, 178, 189, 138, 132, 1, 190, 179, 32, 92, 62, 105, 179, 84, 62, 91, 195, 20, 188, 48, 176, 224, 61, 108, 209, 175, 62, 150, 187, 230, 61, 95, 87, 87, 61, 238, 165, 79, 62, 48, 79, 15, 61, 102, 220, 91, 190, 108, 141, 163, 189, 202, 181, 99, 60, 162, 99, 136, 62, 37, 146, 177, 62, 153, 170, 100, 62, 82, 110, 25, 190, 28, 60, 134, 60, 136, 215, 225, 62, 112, 248, 42, 191, 183, 191, 208, 61, 75, 14, 20, 191, 150, 226, 204, 61, 165, 211, 138, 188, 80, 161, 129, 190, 6, 205, 27, 62, 70, 49, 148, 190, 182, 49, 253, 61, 167, 113, 33, 61, 225, 0, 191, 189, 58, 21, 224, 189, 147, 2, 11, 189, 53, 198, 18, 191, 238, 20, 138, 60, 149, 96, 82, 190, 16, 157, 3, 61, 21, 137, 24, 62, 212, 35, 68, 61, 99, 96, 251, 61, 173, 55, 35, 190, 234, 137, 149, 60, 171, 212, 12, 190, 223, 207, 38, 190, 88, 123, 191, 60, 6, 48, 173, 189, 202, 112, 187, 188, 113, 104, 16, 190, 159, 28, 65, 190, 226, 195, 200, 60, 165, 247, 176, 189, 41, 230, 35, 61, 22, 240, 22, 62, 160, 195, 119, 61, 211, 57, 60, 189, 166, 124, 19, 190, 184, 106, 32, 190, 115, 147, 85, 61, 98, 140, 92, 61, 200, 238, 11, 189, 60, 132, 209, 189, 217, 12, 246, 60, 63, 32, 10, 62, 39, 46, 228, 60, 232, 145, 24, 190, 130, 66, 76, 188, 151, 184, 35, 60, 61, 115, 11, 189, 102, 197, 37, 61, 188, 221, 162, 61, 67, 194, 248, 61, 208, 177, 5, 190, 115, 129, 64, 191, 221, 120, 167, 62, 136, 191, 117, 188, 253, 183, 122, 191, 50, 155, 108, 62, 180, 145, 221, 62, 181, 50, 53, 190, 122, 85, 91, 190, 113, 225, 34, 189, 91, 147, 56, 191, 223, 203, 164, 62, 90, 152, 174, 62, 246, 43, 70, 61, 16, 106, 151, 189, 159, 253, 78, 190, 121, 51, 190, 189, 241, 106, 80, 190, 63, 5, 18, 191, 71, 55, 173, 62, 181, 198, 14, 62, 33, 246, 101, 190, 106, 131, 199, 189, 179, 206, 66, 191, 144, 151, 138, 189, 102, 124, 244, 190, 105, 106, 71, 190, 230, 131, 3, 190, 146, 198, 153, 191, 46, 254, 177, 191, 120, 126, 251, 190, 102, 242, 178, 191, 239, 196, 144, 62, 148, 69, 59, 191, 194, 255, 0, 62, 141, 138, 173, 62, 211, 200, 148, 189, 253, 137, 135, 61, 11, 207, 148, 188, 174, 168, 109, 62, 205, 98, 49, 62, 136, 197, 95, 189, 129, 131, 133, 62, 28, 157, 142, 190, 175, 107, 27, 62, 101, 240, 62, 190, 244, 9, 0, 191, 217, 193, 157, 190, 165, 0, 135, 190, 107, 156, 135, 62, 6, 115, 10, 62, 249, 9, 77, 62, 205, 100, 6, 189, 212, 140, 0, 191, 116, 199, 110, 62, 116, 222, 60, 190, 224, 103, 23, 62, 200, 203, 28, 62, 32, 124, 73, 62, 96, 211, 28, 190, 89, 52, 173, 62, 175, 114, 132, 61, 249, 57, 241, 187, 11, 84, 199, 62, 159, 41, 67, 189, 215, 219, 134, 62, 175, 168, 4, 191, 242, 156, 242, 190, 233, 157, 222, 190, 65, 156, 179, 62, 184, 222, 90, 190, 251, 1, 199, 190, 205, 28, 125, 190, 250, 104, 131, 62, 24, 57, 231, 189, 222, 243, 131, 189, 153, 157, 41, 190, 83, 251, 165, 190, 119, 101, 89, 61, 47, 64, 188, 61, 176, 151, 161, 191, 73, 145, 50, 190, 151, 86, 240, 61, 183, 169, 40, 190, 3, 49, 37, 61, 83, 74, 8, 190, 10, 160, 132, 190, 105, 166, 159, 190, 105, 205, 145, 61, 229, 75, 12, 59, 182, 181, 146, 190, 39, 123, 177, 190, 13, 185, 229, 61, 226, 63, 163, 191, 211, 252, 242, 190, 130, 91, 229, 190, 114, 220, 81, 62, 40, 202, 207, 190, 157, 78, 233, 189, 245, 25, 86, 62, 186, 128, 126, 189, 65, 165, 62, 62, 30, 23, 105, 190, 201, 186, 52, 62, 35, 149, 151, 62, 112, 79, 151, 62, 47, 183, 73, 61, 7, 67, 105, 190, 149, 248, 211, 189, 73, 144, 210, 61, 162, 252, 217, 190, 72, 52, 131, 190, 228, 112, 122, 189, 35, 31, 0, 190, 172, 38, 191, 188, 227, 175, 180, 190, 72, 240, 205, 189, 171, 13, 13, 190, 90, 65, 92, 61, 202, 136, 5, 190, 8, 168, 211, 188, 75, 47, 183, 62, 39, 241, 117, 62, 217, 128, 161, 190, 178, 39, 42, 62, 202, 133, 196, 189, 115, 22, 169, 189, 133, 188, 75, 62, 84, 178, 148, 190, 107, 89, 4, 190, 105, 119, 69, 59, 22, 206, 105, 190, 221, 116, 135, 61, 253, 195, 63, 189, 121, 85, 18, 62, 105, 43, 232, 61, 198, 58, 8, 190, 62, 108, 243, 189, 232, 184, 136, 190, 134, 239, 145, 189, 157, 246, 243, 189, 251, 167, 235, 188, 176, 59, 95, 61, 107, 81, 128, 189, 126, 201, 125, 62, 252, 121, 32, 61, 231, 184, 43, 190, 248, 75, 173, 61, 154, 6, 16, 60, 87, 247, 218, 189, 193, 198, 238, 61, 241, 146, 125, 61, 3, 140, 37, 190, 225, 105, 29, 190, 119, 189, 169, 189, 221, 187, 107, 61, 168, 169, 139, 190, 98, 120, 87, 190, 207, 171, 204, 189, 66, 114, 151, 188, 91, 64, 47, 189, 26, 50, 51, 189, 165, 177, 1, 62, 103, 225, 5, 188, 40, 242, 62, 191, 13, 182, 110, 62, 65, 176, 73, 61, 128, 95, 162, 188, 132, 26, 236, 61, 133, 168, 38, 62, 95, 225, 217, 60, 46, 166, 22, 189, 14, 234, 184, 189, 151, 156, 196, 61, 94, 178, 251, 189, 97, 239, 13, 189, 34, 58, 10, 191, 240, 145, 147, 61, 218, 233, 139, 61, 10, 5, 18, 62, 223, 61, 227, 189, 108, 210, 39, 61, 33, 34, 25, 190, 225, 245, 238, 190, 245, 192, 87, 188, 102, 240, 78, 62, 90, 243, 179, 61, 77, 130, 87, 189, 134, 191, 187, 61, 130, 180, 40, 190, 174, 162, 114, 189, 218, 186, 127, 62, 119, 70, 118, 188, 150, 122, 228, 61, 83, 50, 140, 189, 83, 85, 124, 61, 101, 48, 9, 191, 182, 185, 121, 62, 137, 233, 163, 188, 235, 19, 23, 61, 133, 63, 167, 62, 7, 164, 113, 61, 143, 211, 109, 60, 19, 47, 127, 61, 136, 238, 49, 190, 182, 165, 36, 62, 94, 227, 2, 62, 86, 136, 247, 189, 136, 192, 158, 190, 81, 241, 213, 189, 144, 214, 61, 58, 250, 159, 40, 62, 238, 130, 164, 189, 36, 248, 145, 190, 34, 217, 114, 61, 210, 58, 199, 190, 213, 24, 12, 61, 12, 107, 123, 61, 8, 175, 187, 61, 198, 67, 173, 61, 108, 12, 169, 189, 85, 248, 201, 190, 166, 119, 188, 61, 138, 11, 209, 189, 82, 228, 213, 62, 219, 205, 59, 191, 55, 44, 86, 62, 14, 211, 188, 62, 232, 36, 114, 190, 180, 202, 3, 62, 196, 231, 36, 62, 220, 34, 131, 61, 22, 190, 34, 190, 116, 233, 89, 190, 242, 87, 72, 62, 163, 94, 98, 190, 247, 255, 64, 61, 30, 53, 219, 61, 251, 66, 136, 187, 82, 58, 14, 190, 52, 188, 189, 60, 215, 102, 147, 61, 220, 207, 90, 58, 212, 25, 108, 62, 98, 245, 127, 189, 179, 4, 62, 190, 41, 59, 195, 61, 142, 56, 13, 188, 84, 7, 238, 61, 191, 195, 219, 187, 194, 177, 28, 190, 120, 159, 178, 60, 140, 86, 224, 189, 31, 18, 109, 189, 152, 93, 9, 190, 52, 157, 36, 61, 112, 56, 25, 190, 80, 18, 218, 61, 143, 6, 232, 189, 46, 1, 21, 62, 153, 226, 41, 190, 31, 241, 86, 190, 208, 124, 11, 62, 183, 58, 29, 190, 93, 54, 52, 61, 152, 254, 56, 190, 158, 133, 16, 190, 101, 44, 30, 190, 79, 86, 189, 188, 6, 163, 252, 188, 105, 124, 138, 61, 80, 230, 192, 188, 118, 136, 28, 190, 173, 75, 102, 61, 138, 254, 66, 61, 249, 42, 2, 61, 28, 183, 58, 190, 57, 131, 22, 189, 215, 36, 191, 61, 208, 25, 232, 189, 227, 113, 63, 190, 236, 82, 85, 189, 187, 178, 53, 190, 126, 172, 251, 61, 199, 23, 188, 189, 114, 228, 196, 61, 104, 177, 15, 190, 39, 8, 144, 61, 205, 205, 93, 61, 107, 37, 154, 61, 126, 241, 31, 189, 153, 234, 28, 190, 248, 234, 23, 62, 143, 186, 92, 61, 37, 145, 224, 60, 69, 133, 231, 61, 138, 93, 103, 188, 197, 128, 55, 190, 128, 48, 185, 61, 100, 92, 181, 189, 18, 250, 232, 61, 83, 116, 168, 189, 209, 77, 141, 189, 254, 159, 192, 189, 192, 151, 139, 189, 61, 207, 235, 60, 171, 78, 47, 190, 191, 71, 2, 190, 58, 58, 12, 190, 176, 139, 9, 61, 77, 211, 42, 62, 27, 73, 160, 61, 147, 79, 20, 190, 68, 63, 160, 189, 70, 8, 204, 189, 187, 207, 137, 187, 142, 251, 236, 189, 226, 140, 8, 60, 242, 80, 140, 61, 83, 213, 74, 188, 4, 217, 44, 62, 170, 146, 36, 190, 235, 255, 183, 186, 35, 105, 146, 61, 198, 64, 209, 60, 219, 141, 198, 61, 114, 234, 71, 61, 65, 252, 103, 61, 10, 90, 27, 62, 23, 183, 52, 190, 132, 65, 16, 190, 28, 64, 133, 61, 219, 243, 36, 189, 115, 193, 236, 189, 251, 9, 220, 187, 181, 183, 174, 189, 24, 181, 186, 61, 110, 122, 175, 189, 253, 234, 43, 190, 132, 186, 207, 189, 175, 4, 23, 190, 39, 149, 246, 189, 162, 3, 15, 62, 152, 121, 45, 190, 154, 176, 194, 189, 123, 7, 182, 188, 32, 217, 123, 60, 83, 184, 170, 61, 242, 121, 241, 189, 85, 129, 58, 189, 224, 37, 86, 60, 146, 190, 141, 61, 220, 96, 160, 62, 107, 101, 255, 190, 250, 118, 161, 62, 146, 29, 4, 62, 100, 91, 252, 189, 177, 58, 158, 189, 37, 113, 162, 62, 163, 194, 98, 61, 104, 56, 30, 190, 30, 84, 8, 190, 136, 150, 49, 190, 172, 148, 52, 61, 40, 164, 81, 62, 112, 192, 223, 189, 19, 129, 220, 61, 128, 149, 113, 190, 136, 122, 131, 62, 78, 185, 217, 61, 141, 252, 157, 190, 125, 31, 213, 62, 34, 94, 166, 60, 111, 107, 127, 190, 38, 79, 113, 61, 12, 122, 99, 190, 51, 192, 122, 188, 225, 70, 167, 190, 5, 171, 67, 62, 135, 204, 117, 189, 207, 30, 74, 191, 87, 161, 22, 190, 240, 197, 155, 61, 217, 169, 16, 190, 104, 190, 157, 62, 130, 252, 115, 191, 226, 8, 197, 62, 153, 180, 129, 62, 236, 91, 112, 188, 134, 144, 85, 62, 218, 83, 91, 62, 54, 129, 185, 189, 2, 216, 228, 190, 229, 222, 181, 189, 241, 19, 50, 188, 158, 221, 145, 60, 92, 242, 73, 62, 171, 127, 80, 189, 58, 69, 64, 190, 54, 25, 241, 189, 2, 137, 36, 62, 225, 54, 153, 189, 197, 46, 75, 190, 159, 129, 173, 62, 17, 104, 161, 189, 189, 64, 20, 61, 178, 48, 0, 189, 110, 81, 53, 61, 30, 218, 88, 61, 189, 155, 63, 190, 73, 26, 146, 61, 132, 48, 83, 62, 166, 54, 17, 191, 52, 6, 252, 61, 232, 122, 117, 61, 107, 55, 70, 62, 199, 161, 14, 190, 12, 97, 61, 62, 186, 232, 151, 61, 26, 27, 36, 188, 55, 157, 170, 60, 229, 41, 168, 61, 178, 163, 69, 189, 110, 226, 5, 62, 188, 242, 183, 62, 250, 28, 109, 59, 198, 60, 198, 190, 12, 7, 1, 62, 111, 216, 34, 190, 138, 115, 200, 61, 23, 202, 16, 62, 94, 73, 52, 62, 102, 42, 152, 62, 11, 209, 189, 189, 131, 30, 40, 62, 66, 86, 60, 189, 176, 62, 180, 189, 207, 44, 76, 61, 254, 118, 52, 190, 252, 28, 217, 189, 250, 125, 156, 189, 97, 62, 131, 61, 114, 1, 9, 190, 9, 186, 11, 62, 121, 59, 113, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 21, 184, 189, 195, 76, 241, 189, 242, 67, 167, 62, 46, 180, 95, 62, 155, 120, 255, 61, 183, 151, 124, 188, 83, 191, 80, 62, 13, 236, 215, 61, 209, 233, 179, 60, 165, 158, 43, 62, 80, 189, 127, 62, 244, 20, 83, 61, 73, 69, 168, 188, 115, 181, 35, 190, 196, 27, 209, 189, 225, 22, 209, 60, 68, 247, 100, 189, 95, 78, 117, 189, 167, 190, 35, 62, 70, 130, 0, 62, 60, 85, 87, 62, 0, 148, 167, 189, 103, 146, 103, 190, 154, 85, 142, 62, 116, 145, 146, 62, 52, 35, 56, 61, 209, 229, 210, 61, 214, 139, 73, 190, 110, 38, 236, 61, 230, 53, 64, 189, 7, 30, 67, 60, 187, 213, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 47, 11, 191, 183, 78, 44, 190, 192, 241, 189, 188, 58, 242, 73, 191, 151, 134, 16, 191, 254, 2, 157, 60, 203, 101, 226, 62, 110, 103, 2, 189, 121, 76, 71, 187, 81, 1, 35, 191, 35, 55, 24, 62, 232, 32, 43, 190, 58, 246, 169, 62, 206, 93, 146, 58, 89, 76, 14, 63, 13, 86, 52, 190, 208, 15, 171, 62, 132, 182, 94, 189, 79, 59, 89, 63, 29, 187, 87, 63, 141, 4, 77, 191, 67, 101, 30, 63, 107, 108, 23, 190, 239, 236, 147, 188, 238, 30, 199, 59, 169, 21, 254, 62, 158, 8, 198, 189, 5, 145, 132, 61, 75, 167, 9, 188, 165, 30, 7, 63, 56, 209, 225, 62, 152, 27, 198, 61, 100, 28, 159, 62, 19, 50, 44, 189, 160, 150, 122, 190, 118, 182, 150, 62, 161, 215, 209, 188, 207, 205, 112, 189, 60, 205, 105, 61, 86, 215, 113, 190, 147, 36, 187, 189, 26, 107, 169, 189, 208, 204, 82, 190, 103, 35, 120, 190, 215, 55, 172, 188, 95, 166, 105, 189, 4, 215, 136, 189, 109, 104, 72, 61, 242, 117, 171, 61, 255, 173, 150, 61, 124, 200, 62, 190, 177, 102, 190, 61, 6, 250, 208, 61, 229, 210, 132, 62, 158, 218, 10, 62, 88, 143, 33, 190, 133, 93, 29, 190, 158, 80, 8, 62, 5, 211, 112, 189, 114, 221, 60, 61, 186, 19, 50, 62, 79, 196, 14, 59, 47, 54, 92, 62, 101, 141, 188, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 164, 38, 190, 249, 183, 130, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {195, 4, 192, 62, 251, 143, 43, 191, 87, 82, 255, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {135, 54, 212, 63, 50, 80, 64, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0098/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}