// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 140, 78, 191, 66, 196, 49, 190, 57, 102, 29, 191, 158, 148, 225, 61, 255, 134, 54, 190, 31, 55, 162, 190, 193, 86, 137, 190, 80, 36, 38, 63, 157, 75, 5, 191, 104, 131, 231, 61, 110, 142, 132, 191, 35, 43, 37, 62, 117, 97, 10, 63, 41, 73, 146, 63, 34, 98, 133, 62, 71, 47, 41, 63, 198, 45, 20, 191, 190, 93, 252, 190, 209, 52, 194, 190, 246, 133, 75, 191, 223, 244, 239, 62, 10, 10, 225, 188, 4, 61, 148, 191, 58, 122, 112, 190, 196, 32, 157, 62, 9, 109, 1, 63, 252, 148, 64, 190, 133, 4, 35, 63, 138, 163, 204, 190, 55, 64, 223, 190, 86, 101, 192, 190, 135, 107, 106, 63, 233, 43, 117, 62, 147, 86, 30, 191, 141, 183, 112, 63, 171, 194, 87, 62, 84, 196, 63, 190, 75, 155, 191, 62, 198, 119, 166, 190, 201, 7, 149, 191, 5, 141, 203, 190, 229, 233, 102, 188, 252, 173, 137, 62, 201, 59, 86, 191, 230, 155, 29, 63, 224, 191, 27, 63, 160, 247, 24, 191, 251, 78, 136, 61, 251, 200, 150, 189, 155, 213, 46, 62, 210, 23, 67, 63, 240, 182, 158, 190, 76, 116, 135, 191, 73, 250, 216, 190, 216, 17, 31, 63, 150, 246, 146, 62, 167, 217, 12, 63, 75, 152, 90, 63, 113, 131, 60, 191, 170, 153, 178, 190, 137, 253, 237, 190, 42, 192, 126, 191, 27, 241, 129, 190, 171, 117, 141, 189, 158, 9, 196, 63, 82, 135, 149, 62, 1, 85, 102, 63, 197, 95, 105, 191, 250, 215, 25, 190, 44, 69, 187, 62, 114, 237, 185, 190, 97, 157, 14, 63, 40, 155, 227, 190, 93, 165, 145, 191, 93, 153, 143, 190, 217, 240, 175, 190, 193, 91, 254, 62, 200, 243, 179, 62, 29, 232, 21, 63, 245, 64, 150, 191, 97, 123, 57, 190, 155, 226, 8, 191, 162, 220, 71, 190, 116, 198, 238, 187, 116, 57, 94, 191, 41, 38, 45, 62, 141, 93, 193, 189, 184, 184, 217, 190, 25, 164, 118, 63, 159, 107, 225, 62, 91, 214, 199, 190, 254, 229, 187, 190, 216, 28, 1, 191, 150, 108, 193, 190, 253, 26, 134, 63, 54, 245, 132, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 71, 36, 191, 242, 213, 30, 61, 90, 2, 156, 189, 33, 39, 69, 190, 13, 25, 6, 190, 60, 220, 162, 190, 163, 86, 161, 62, 212, 66, 185, 190, 13, 17, 133, 62, 197, 178, 205, 189, 30, 95, 206, 188, 21, 41, 69, 62, 243, 239, 32, 63, 107, 88, 176, 62, 112, 231, 245, 190, 42, 147, 22, 62, 175, 69, 145, 62, 9, 43, 186, 62, 185, 134, 190, 190, 49, 123, 46, 191, 81, 111, 40, 63, 77, 133, 192, 62, 115, 136, 141, 62, 104, 141, 9, 62, 151, 152, 4, 62, 139, 10, 197, 190, 165, 87, 251, 190, 187, 74, 9, 63, 34, 52, 66, 63, 40, 133, 168, 62, 230, 167, 86, 191, 206, 220, 223, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 67, 165, 190, 143, 223, 145, 62, 226, 182, 3, 63, 234, 153, 151, 62, 172, 214, 150, 62, 243, 196, 244, 61, 97, 160, 103, 189, 107, 116, 248, 59, 178, 192, 95, 62, 82, 58, 130, 61, 228, 196, 160, 190, 254, 29, 28, 191, 160, 254, 95, 62, 6, 66, 59, 191, 104, 27, 137, 62, 75, 112, 128, 189, 250, 55, 29, 61, 244, 136, 3, 190, 176, 212, 165, 62, 174, 11, 203, 61, 154, 245, 137, 191, 203, 92, 230, 61, 64, 161, 161, 190, 59, 241, 197, 61, 227, 45, 108, 189, 248, 53, 141, 61, 131, 123, 214, 61, 140, 49, 185, 190, 253, 2, 11, 191, 190, 116, 164, 189, 144, 116, 131, 61, 245, 125, 249, 189, 179, 226, 115, 60, 219, 237, 8, 190, 233, 215, 223, 61, 28, 171, 169, 189, 144, 100, 200, 189, 107, 68, 31, 190, 242, 21, 218, 61, 134, 54, 47, 61, 175, 141, 48, 62, 26, 191, 129, 61, 41, 178, 7, 190, 57, 37, 32, 190, 239, 61, 40, 190, 67, 252, 239, 189, 143, 242, 33, 190, 48, 210, 51, 189, 219, 79, 58, 60, 199, 182, 25, 190, 71, 0, 21, 61, 162, 22, 201, 61, 87, 15, 22, 190, 124, 83, 191, 189, 127, 35, 150, 59, 29, 223, 137, 189, 243, 141, 159, 189, 18, 246, 46, 62, 187, 5, 190, 61, 26, 8, 199, 189, 218, 107, 96, 61, 184, 145, 20, 190, 133, 187, 176, 188, 15, 201, 30, 62, 26, 163, 83, 189, 134, 132, 8, 189, 45, 152, 102, 61, 68, 20, 214, 61, 143, 8, 142, 189, 135, 15, 2, 61, 71, 96, 216, 61, 115, 112, 171, 189, 237, 129, 165, 61, 138, 254, 77, 61, 200, 205, 36, 61, 152, 77, 8, 60, 59, 22, 136, 62, 162, 203, 110, 61, 87, 2, 173, 61, 248, 49, 188, 189, 157, 252, 210, 61, 124, 31, 218, 61, 247, 28, 241, 189, 254, 86, 122, 190, 118, 52, 147, 62, 206, 198, 181, 189, 69, 12, 130, 62, 75, 64, 122, 59, 96, 136, 194, 61, 194, 67, 121, 188, 105, 77, 228, 62, 184, 75, 116, 62, 58, 54, 68, 61, 179, 250, 9, 62, 108, 94, 200, 189, 248, 219, 47, 190, 130, 39, 134, 62, 6, 245, 22, 62, 218, 42, 246, 189, 87, 91, 44, 190, 154, 50, 13, 191, 41, 4, 80, 190, 57, 189, 50, 62, 41, 172, 157, 61, 208, 130, 40, 190, 223, 57, 193, 190, 98, 90, 59, 191, 173, 186, 110, 190, 23, 104, 125, 60, 203, 233, 206, 62, 40, 115, 157, 62, 40, 63, 51, 190, 134, 76, 173, 191, 255, 37, 183, 62, 5, 78, 150, 190, 174, 30, 83, 191, 85, 235, 174, 62, 10, 190, 137, 190, 164, 214, 16, 190, 114, 186, 18, 191, 243, 209, 136, 62, 145, 164, 191, 191, 198, 165, 101, 190, 255, 80, 219, 61, 140, 86, 81, 62, 57, 136, 178, 190, 205, 37, 153, 190, 80, 217, 96, 56, 168, 0, 66, 189, 171, 1, 72, 61, 168, 129, 62, 62, 63, 229, 36, 191, 111, 41, 7, 61, 77, 28, 109, 190, 24, 241, 170, 190, 168, 45, 251, 190, 7, 114, 98, 62, 182, 143, 23, 190, 180, 223, 102, 191, 101, 152, 20, 191, 94, 57, 89, 62, 54, 80, 166, 61, 103, 151, 102, 190, 142, 252, 92, 62, 5, 216, 195, 60, 52, 168, 43, 62, 207, 92, 8, 63, 158, 66, 74, 191, 106, 194, 144, 61, 255, 118, 155, 61, 21, 106, 0, 61, 15, 127, 144, 62, 222, 8, 106, 190, 36, 128, 125, 191, 193, 129, 184, 189, 100, 179, 163, 61, 161, 207, 123, 62, 133, 186, 215, 190, 129, 244, 0, 190, 111, 56, 52, 189, 93, 73, 7, 190, 93, 137, 30, 190, 155, 126, 160, 61, 177, 184, 242, 61, 202, 4, 18, 62, 104, 239, 131, 61, 88, 181, 23, 62, 228, 20, 110, 60, 141, 116, 157, 189, 250, 188, 151, 61, 90, 13, 243, 60, 155, 112, 200, 189, 248, 248, 23, 188, 168, 215, 167, 60, 66, 34, 163, 189, 102, 148, 51, 61, 27, 74, 171, 187, 93, 207, 21, 190, 112, 80, 239, 61, 57, 84, 209, 189, 133, 111, 69, 61, 145, 227, 2, 61, 54, 29, 245, 189, 5, 251, 51, 190, 18, 239, 35, 190, 15, 171, 247, 189, 220, 37, 154, 59, 55, 34, 7, 190, 239, 200, 245, 189, 11, 175, 163, 189, 61, 223, 19, 189, 108, 97, 127, 189, 91, 101, 158, 191, 144, 153, 128, 190, 25, 102, 17, 191, 183, 233, 208, 62, 249, 138, 13, 191, 81, 184, 98, 62, 31, 171, 1, 62, 192, 154, 88, 191, 215, 8, 236, 61, 16, 116, 31, 62, 197, 52, 20, 190, 189, 137, 149, 61, 138, 57, 160, 61, 96, 147, 99, 62, 95, 139, 158, 60, 134, 14, 79, 62, 65, 208, 128, 190, 127, 171, 48, 190, 30, 160, 149, 190, 28, 20, 79, 190, 135, 24, 95, 61, 50, 54, 168, 61, 249, 251, 63, 62, 44, 230, 97, 190, 173, 132, 23, 61, 193, 207, 33, 189, 96, 124, 143, 191, 226, 166, 90, 62, 61, 232, 104, 62, 175, 157, 61, 189, 129, 46, 157, 190, 147, 110, 217, 61, 155, 1, 94, 190, 74, 102, 203, 61, 251, 212, 149, 189, 179, 175, 132, 191, 26, 223, 121, 189, 167, 235, 58, 62, 166, 112, 129, 190, 228, 69, 72, 191, 7, 83, 125, 62, 63, 154, 157, 61, 149, 112, 207, 190, 78, 127, 27, 191, 132, 74, 164, 62, 70, 107, 210, 190, 136, 126, 71, 60, 245, 28, 60, 188, 29, 42, 93, 191, 5, 184, 21, 190, 87, 244, 10, 191, 135, 18, 38, 190, 108, 170, 163, 190, 83, 174, 112, 62, 57, 236, 102, 61, 142, 198, 105, 190, 8, 179, 245, 188, 203, 95, 54, 190, 97, 186, 146, 191, 182, 5, 134, 61, 232, 49, 207, 190, 223, 29, 88, 190, 17, 236, 52, 190, 224, 49, 100, 62, 240, 143, 135, 190, 254, 47, 166, 61, 58, 13, 97, 190, 253, 171, 62, 62, 73, 238, 78, 190, 246, 254, 206, 61, 191, 230, 156, 188, 13, 223, 165, 190, 157, 40, 82, 190, 156, 10, 84, 188, 178, 29, 34, 190, 229, 201, 150, 60, 80, 54, 82, 61, 216, 248, 0, 62, 231, 175, 173, 189, 131, 131, 55, 62, 74, 206, 110, 188, 196, 96, 20, 62, 106, 110, 61, 190, 51, 178, 61, 188, 65, 198, 83, 62, 115, 95, 27, 190, 187, 46, 125, 61, 63, 91, 9, 62, 242, 228, 38, 188, 182, 168, 222, 189, 21, 97, 150, 62, 182, 124, 66, 190, 125, 219, 233, 189, 117, 121, 32, 190, 200, 206, 59, 190, 121, 221, 196, 190, 236, 245, 0, 191, 238, 132, 228, 61, 185, 53, 19, 63, 27, 130, 173, 62, 109, 28, 137, 61, 247, 120, 117, 62, 28, 103, 67, 61, 129, 176, 236, 61, 179, 244, 135, 62, 41, 16, 121, 187, 51, 253, 173, 190, 246, 15, 28, 191, 143, 41, 220, 59, 17, 69, 30, 191, 193, 137, 93, 190, 3, 228, 67, 62, 83, 115, 130, 61, 25, 67, 167, 190, 113, 201, 43, 62, 166, 28, 6, 187, 25, 111, 229, 190, 194, 94, 173, 188, 219, 13, 164, 62, 205, 143, 188, 62, 140, 174, 50, 191, 109, 102, 57, 190, 89, 24, 17, 63, 199, 198, 34, 190, 80, 98, 169, 190, 71, 87, 0, 59, 14, 146, 69, 61, 194, 0, 33, 190, 235, 160, 71, 191, 66, 2, 164, 61, 2, 12, 66, 190, 203, 56, 68, 62, 206, 227, 4, 190, 226, 117, 30, 62, 158, 132, 130, 62, 37, 113, 232, 190, 58, 36, 93, 62, 145, 91, 218, 61, 46, 195, 23, 62, 213, 135, 227, 61, 7, 222, 192, 60, 245, 66, 9, 62, 152, 25, 211, 189, 148, 253, 195, 189, 191, 108, 120, 61, 241, 64, 218, 189, 29, 255, 114, 190, 157, 49, 121, 190, 147, 214, 21, 62, 72, 120, 63, 61, 223, 155, 9, 60, 178, 107, 83, 61, 135, 242, 26, 61, 50, 6, 146, 61, 117, 71, 124, 190, 114, 196, 173, 186, 114, 113, 178, 188, 138, 191, 239, 61, 24, 86, 176, 190, 34, 137, 186, 61, 235, 132, 237, 60, 51, 136, 98, 61, 142, 70, 131, 62, 67, 93, 32, 61, 238, 167, 146, 61, 228, 21, 45, 62, 181, 152, 2, 62, 4, 144, 48, 60, 163, 59, 139, 189, 205, 235, 254, 61, 177, 113, 197, 190, 222, 3, 23, 191, 89, 43, 249, 61, 255, 196, 25, 62, 140, 202, 145, 61, 42, 64, 201, 62, 126, 173, 124, 61, 252, 102, 157, 61, 121, 97, 47, 60, 114, 51, 233, 189, 76, 139, 153, 62, 87, 38, 151, 189, 189, 168, 90, 62, 218, 53, 162, 62, 140, 233, 55, 61, 112, 160, 142, 190, 95, 18, 38, 62, 24, 120, 156, 59, 227, 142, 34, 62, 219, 224, 10, 190, 44, 190, 207, 189, 3, 252, 80, 190, 9, 210, 119, 190, 57, 114, 118, 190, 11, 104, 201, 188, 124, 126, 90, 191, 54, 145, 59, 63, 88, 11, 40, 190, 90, 218, 196, 190, 195, 83, 9, 62, 206, 71, 118, 62, 59, 173, 44, 190, 209, 77, 172, 189, 219, 12, 151, 62, 235, 72, 26, 190, 228, 47, 58, 191, 47, 237, 87, 190, 21, 115, 47, 191, 13, 143, 4, 190, 167, 105, 163, 190, 214, 88, 139, 61, 195, 102, 40, 62, 180, 75, 38, 191, 128, 35, 176, 62, 187, 132, 126, 191, 75, 75, 11, 190, 114, 105, 64, 190, 88, 243, 61, 190, 62, 202, 159, 189, 165, 61, 83, 190, 115, 182, 199, 190, 113, 214, 245, 61, 145, 0, 242, 61, 255, 177, 110, 62, 43, 148, 190, 61, 41, 102, 212, 61, 130, 182, 198, 189, 191, 228, 168, 61, 92, 83, 192, 61, 157, 253, 126, 61, 234, 122, 28, 189, 218, 63, 225, 188, 147, 24, 20, 189, 19, 243, 212, 189, 153, 167, 207, 189, 137, 126, 106, 57, 32, 171, 8, 190, 121, 217, 174, 188, 6, 221, 15, 190, 142, 146, 16, 62, 90, 241, 45, 190, 244, 172, 62, 185, 199, 135, 33, 190, 92, 5, 170, 61, 32, 193, 59, 61, 125, 150, 130, 189, 241, 69, 106, 189, 158, 66, 220, 61, 168, 207, 23, 190, 64, 153, 201, 186, 12, 101, 47, 189, 194, 104, 177, 189, 245, 130, 203, 61, 0, 104, 101, 61, 126, 170, 27, 62, 194, 228, 50, 62, 97, 212, 181, 189, 254, 209, 99, 62, 31, 170, 190, 189, 64, 52, 23, 63, 175, 176, 184, 190, 21, 74, 204, 62, 59, 194, 157, 62, 250, 219, 74, 190, 209, 47, 174, 61, 13, 32, 109, 62, 61, 242, 33, 191, 154, 192, 80, 191, 167, 2, 63, 62, 252, 34, 245, 190, 210, 143, 235, 61, 25, 22, 146, 62, 8, 17, 245, 188, 56, 173, 213, 189, 51, 43, 80, 60, 245, 197, 21, 62, 180, 226, 129, 61, 26, 127, 33, 190, 251, 160, 200, 62, 64, 44, 182, 58, 10, 237, 18, 190, 158, 182, 251, 189, 57, 75, 118, 190, 45, 192, 92, 190, 117, 137, 186, 190, 63, 69, 50, 190, 223, 231, 67, 62, 0, 225, 138, 191, 90, 123, 58, 189, 19, 146, 62, 190, 236, 116, 230, 62, 228, 136, 232, 61, 95, 211, 142, 61, 14, 31, 105, 189, 253, 165, 162, 61, 103, 172, 29, 62, 213, 214, 2, 62, 28, 86, 176, 61, 184, 47, 19, 62, 104, 211, 82, 60, 237, 158, 221, 189, 29, 139, 5, 62, 127, 159, 107, 61, 59, 81, 95, 62, 239, 109, 220, 61, 40, 21, 250, 189, 101, 250, 249, 189, 11, 13, 217, 189, 183, 137, 198, 189, 171, 28, 204, 61, 66, 126, 39, 62, 200, 50, 160, 61, 51, 229, 229, 59, 212, 177, 41, 62, 99, 163, 133, 62, 77, 27, 231, 61, 63, 244, 24, 60, 105, 62, 51, 190, 235, 159, 43, 62, 112, 24, 219, 61, 242, 55, 134, 187, 5, 84, 164, 61, 199, 27, 110, 62, 206, 162, 126, 187, 221, 59, 134, 62, 246, 84, 104, 62, 82, 4, 172, 190, 114, 194, 119, 190, 205, 150, 134, 189, 118, 148, 204, 60, 85, 250, 246, 62, 28, 16, 219, 62, 254, 155, 72, 62, 208, 150, 183, 190, 223, 113, 230, 61, 21, 129, 18, 63, 145, 234, 165, 191, 4, 190, 152, 61, 94, 223, 83, 191, 2, 188, 206, 62, 250, 106, 229, 189, 16, 135, 158, 190, 77, 46, 101, 62, 111, 197, 166, 190, 153, 190, 2, 62, 91, 133, 9, 61, 92, 195, 66, 189, 44, 37, 120, 190, 203, 33, 79, 190, 81, 94, 93, 191, 217, 165, 59, 61, 161, 249, 162, 190, 16, 157, 3, 61, 21, 137, 24, 62, 212, 35, 68, 61, 99, 96, 251, 61, 173, 55, 35, 190, 234, 137, 149, 60, 171, 212, 12, 190, 223, 207, 38, 190, 88, 123, 191, 60, 6, 48, 173, 189, 202, 112, 187, 188, 113, 104, 16, 190, 159, 28, 65, 190, 226, 195, 200, 60, 165, 247, 176, 189, 41, 230, 35, 61, 22, 240, 22, 62, 160, 195, 119, 61, 211, 57, 60, 189, 166, 124, 19, 190, 184, 106, 32, 190, 115, 147, 85, 61, 98, 140, 92, 61, 200, 238, 11, 189, 60, 132, 209, 189, 217, 12, 246, 60, 63, 32, 10, 62, 39, 46, 228, 60, 232, 145, 24, 190, 130, 66, 76, 188, 151, 184, 35, 60, 61, 115, 11, 189, 217, 171, 235, 61, 241, 72, 236, 61, 229, 146, 104, 61, 106, 251, 108, 61, 42, 198, 34, 191, 160, 38, 171, 62, 32, 8, 15, 62, 172, 50, 152, 191, 235, 3, 149, 62, 228, 138, 227, 62, 179, 217, 238, 190, 199, 105, 176, 190, 24, 214, 153, 60, 228, 228, 46, 191, 225, 108, 226, 62, 165, 189, 177, 62, 223, 177, 37, 61, 153, 62, 54, 189, 67, 204, 115, 190, 107, 171, 237, 189, 183, 228, 90, 190, 105, 180, 14, 191, 41, 37, 183, 62, 34, 153, 12, 62, 194, 51, 238, 189, 183, 242, 171, 189, 145, 201, 147, 191, 212, 16, 82, 189, 125, 157, 16, 191, 102, 44, 34, 190, 99, 252, 18, 189, 157, 190, 149, 191, 93, 250, 209, 191, 90, 83, 44, 191, 193, 125, 189, 191, 87, 183, 153, 62, 119, 209, 106, 191, 136, 142, 109, 186, 21, 116, 210, 62, 8, 188, 162, 190, 184, 183, 189, 189, 94, 40, 189, 189, 216, 161, 43, 61, 130, 17, 123, 61, 162, 0, 169, 190, 181, 139, 178, 62, 158, 203, 102, 190, 157, 102, 29, 62, 215, 151, 32, 190, 119, 81, 222, 190, 78, 13, 153, 190, 102, 104, 94, 190, 41, 66, 12, 63, 205, 213, 254, 189, 193, 26, 138, 62, 249, 59, 248, 187, 99, 135, 213, 190, 21, 148, 83, 62, 11, 39, 149, 190, 107, 223, 68, 62, 34, 61, 107, 62, 22, 188, 41, 62, 213, 197, 28, 190, 23, 121, 92, 62, 1, 146, 57, 189, 248, 61, 12, 60, 20, 89, 229, 62, 180, 226, 138, 62, 131, 134, 48, 62, 95, 114, 229, 190, 224, 189, 208, 190, 71, 130, 211, 190, 226, 143, 205, 62, 11, 45, 244, 189, 198, 88, 88, 191, 178, 229, 23, 191, 241, 247, 133, 62, 14, 14, 129, 190, 208, 42, 10, 189, 63, 174, 187, 189, 42, 235, 213, 189, 242, 213, 95, 59, 7, 208, 208, 62, 232, 194, 183, 191, 140, 91, 14, 190, 34, 45, 43, 62, 126, 82, 128, 60, 227, 56, 111, 62, 179, 229, 212, 190, 233, 26, 220, 190, 241, 2, 9, 190, 36, 235, 52, 61, 175, 208, 54, 189, 119, 240, 40, 191, 207, 25, 245, 190, 83, 201, 146, 61, 41, 220, 204, 191, 225, 237, 43, 191, 94, 181, 220, 190, 164, 69, 224, 61, 228, 41, 116, 190, 14, 238, 126, 190, 227, 170, 93, 62, 22, 170, 160, 60, 31, 86, 230, 62, 249, 76, 171, 61, 92, 28, 85, 62, 153, 229, 168, 62, 17, 134, 189, 62, 254, 90, 38, 62, 229, 165, 114, 190, 161, 111, 121, 190, 210, 94, 177, 61, 38, 27, 114, 190, 18, 211, 138, 190, 83, 22, 128, 189, 216, 76, 94, 61, 40, 207, 133, 61, 23, 255, 216, 190, 172, 67, 28, 190, 20, 120, 14, 62, 131, 22, 6, 61, 129, 100, 207, 189, 2, 58, 166, 59, 140, 123, 217, 62, 99, 181, 119, 62, 84, 63, 162, 190, 187, 154, 101, 62, 241, 95, 209, 189, 245, 20, 181, 189, 84, 205, 75, 62, 151, 153, 252, 190, 24, 111, 84, 190, 62, 234, 229, 60, 222, 21, 61, 190, 208, 252, 28, 61, 156, 63, 14, 189, 241, 203, 38, 62, 105, 43, 232, 61, 217, 66, 8, 190, 234, 201, 22, 190, 88, 186, 156, 190, 207, 64, 145, 189, 70, 166, 48, 190, 19, 165, 242, 188, 116, 0, 5, 61, 122, 174, 129, 189, 244, 61, 161, 62, 152, 112, 144, 58, 16, 196, 221, 190, 60, 35, 230, 61, 170, 145, 252, 61, 176, 168, 13, 190, 193, 198, 238, 61, 190, 118, 157, 61, 80, 87, 122, 190, 179, 52, 136, 190, 119, 189, 169, 189, 184, 237, 151, 61, 223, 97, 231, 190, 184, 65, 200, 190, 123, 93, 217, 189, 207, 248, 53, 190, 88, 215, 150, 188, 171, 22, 122, 189, 19, 251, 189, 61, 141, 1, 238, 187, 24, 3, 102, 191, 189, 107, 112, 62, 64, 247, 62, 185, 240, 173, 200, 189, 3, 4, 180, 61, 148, 228, 113, 62, 210, 167, 149, 61, 223, 227, 183, 189, 14, 102, 67, 190, 190, 78, 146, 189, 88, 25, 185, 189, 118, 135, 47, 190, 107, 59, 37, 191, 155, 195, 157, 60, 189, 211, 121, 61, 64, 51, 73, 61, 202, 3, 157, 190, 194, 229, 179, 61, 244, 122, 174, 190, 7, 3, 109, 191, 25, 249, 252, 60, 59, 89, 246, 61, 185, 255, 61, 61, 137, 26, 88, 190, 221, 139, 207, 61, 184, 196, 144, 190, 206, 200, 232, 188, 159, 252, 69, 62, 91, 242, 207, 61, 60, 204, 247, 61, 137, 165, 98, 189, 100, 151, 1, 62, 70, 245, 133, 191, 160, 220, 136, 62, 77, 53, 240, 188, 53, 127, 251, 188, 254, 202, 150, 62, 168, 186, 46, 62, 250, 66, 28, 60, 80, 151, 228, 61, 135, 56, 68, 190, 136, 27, 251, 61, 144, 210, 99, 62, 142, 102, 11, 190, 205, 90, 153, 190, 119, 248, 157, 189, 180, 68, 153, 188, 89, 39, 23, 62, 13, 58, 25, 190, 250, 110, 139, 190, 27, 126, 190, 189, 101, 211, 40, 191, 99, 101, 176, 61, 2, 166, 56, 60, 125, 29, 154, 61, 126, 141, 231, 187, 36, 160, 162, 189, 198, 0, 25, 191, 29, 26, 26, 190, 25, 190, 183, 190, 214, 143, 234, 62, 192, 118, 89, 191, 41, 243, 158, 60, 202, 125, 210, 62, 137, 141, 5, 191, 154, 142, 20, 61, 161, 220, 244, 59, 31, 56, 167, 190, 253, 250, 149, 190, 106, 135, 171, 190, 20, 186, 136, 62, 138, 244, 104, 190, 151, 218, 212, 60, 131, 251, 141, 61, 147, 116, 19, 190, 115, 47, 84, 190, 173, 76, 170, 189, 184, 158, 230, 61, 29, 17, 92, 190, 1, 101, 76, 62, 236, 102, 145, 189, 142, 53, 149, 190, 54, 159, 203, 189, 68, 188, 223, 189, 150, 143, 44, 62, 130, 131, 195, 61, 223, 208, 86, 190, 188, 122, 60, 190, 99, 238, 46, 190, 31, 18, 109, 189, 152, 93, 9, 190, 52, 157, 36, 61, 112, 56, 25, 190, 80, 18, 218, 61, 143, 6, 232, 189, 46, 1, 21, 62, 153, 226, 41, 190, 31, 241, 86, 190, 208, 124, 11, 62, 183, 58, 29, 190, 93, 54, 52, 61, 152, 254, 56, 190, 158, 133, 16, 190, 101, 44, 30, 190, 79, 86, 189, 188, 6, 163, 252, 188, 105, 124, 138, 61, 80, 230, 192, 188, 118, 136, 28, 190, 173, 75, 102, 61, 138, 254, 66, 61, 249, 42, 2, 61, 28, 183, 58, 190, 57, 131, 22, 189, 215, 36, 191, 61, 208, 25, 232, 189, 227, 113, 63, 190, 236, 82, 85, 189, 187, 178, 53, 190, 126, 172, 251, 61, 199, 23, 188, 189, 114, 228, 196, 61, 104, 177, 15, 190, 39, 8, 144, 61, 205, 205, 93, 61, 107, 37, 154, 61, 126, 241, 31, 189, 153, 234, 28, 190, 248, 234, 23, 62, 143, 186, 92, 61, 37, 145, 224, 60, 69, 133, 231, 61, 138, 93, 103, 188, 197, 128, 55, 190, 128, 48, 185, 61, 100, 92, 181, 189, 18, 250, 232, 61, 83, 116, 168, 189, 209, 77, 141, 189, 254, 159, 192, 189, 192, 151, 139, 189, 61, 207, 235, 60, 171, 78, 47, 190, 191, 71, 2, 190, 58, 58, 12, 190, 176, 139, 9, 61, 77, 211, 42, 62, 27, 73, 160, 61, 147, 79, 20, 190, 68, 63, 160, 189, 70, 8, 204, 189, 187, 207, 137, 187, 142, 251, 236, 189, 226, 140, 8, 60, 242, 80, 140, 61, 83, 213, 74, 188, 4, 217, 44, 62, 170, 146, 36, 190, 235, 255, 183, 186, 35, 105, 146, 61, 198, 64, 209, 60, 219, 141, 198, 61, 114, 234, 71, 61, 65, 252, 103, 61, 10, 90, 27, 62, 23, 183, 52, 190, 132, 65, 16, 190, 28, 64, 133, 61, 219, 243, 36, 189, 115, 193, 236, 189, 251, 9, 220, 187, 181, 183, 174, 189, 24, 181, 186, 61, 110, 122, 175, 189, 253, 234, 43, 190, 132, 186, 207, 189, 175, 4, 23, 190, 39, 149, 246, 189, 162, 3, 15, 62, 152, 121, 45, 190, 154, 176, 194, 189, 123, 7, 182, 188, 32, 217, 123, 60, 83, 184, 170, 61, 242, 121, 241, 189, 236, 178, 175, 59, 114, 134, 94, 61, 74, 142, 9, 61, 202, 94, 209, 62, 139, 100, 205, 190, 204, 232, 193, 62, 229, 122, 70, 62, 91, 72, 69, 190, 101, 41, 148, 60, 47, 58, 191, 62, 11, 21, 46, 190, 207, 187, 125, 190, 179, 228, 139, 189, 69, 143, 217, 190, 55, 130, 0, 62, 21, 115, 78, 62, 67, 65, 12, 190, 210, 79, 189, 61, 34, 251, 142, 190, 89, 166, 199, 62, 236, 53, 144, 60, 128, 218, 141, 190, 160, 4, 224, 62, 106, 71, 50, 59, 8, 103, 151, 190, 237, 181, 7, 61, 22, 166, 105, 190, 160, 227, 194, 189, 191, 191, 245, 190, 42, 147, 91, 62, 201, 30, 204, 60, 179, 118, 54, 191, 46, 29, 153, 189, 6, 239, 66, 61, 188, 95, 30, 190, 32, 173, 230, 62, 20, 160, 138, 191, 72, 248, 182, 62, 111, 194, 183, 62, 223, 183, 18, 189, 99, 123, 23, 62, 118, 43, 21, 62, 35, 254, 133, 190, 202, 30, 234, 190, 250, 225, 6, 190, 39, 116, 54, 190, 182, 236, 3, 62, 112, 24, 74, 61, 5, 61, 148, 189, 33, 13, 78, 190, 138, 105, 93, 190, 38, 118, 86, 62, 188, 234, 60, 190, 25, 98, 179, 190, 192, 129, 49, 62, 118, 50, 20, 190, 94, 67, 38, 61, 151, 95, 209, 187, 98, 204, 33, 60, 53, 174, 19, 189, 159, 203, 160, 190, 153, 229, 1, 62, 223, 110, 160, 62, 255, 25, 17, 191, 189, 111, 71, 62, 242, 220, 149, 59, 106, 66, 41, 62, 193, 170, 144, 190, 145, 61, 196, 62, 246, 174, 17, 61, 95, 237, 220, 189, 35, 196, 108, 62, 55, 162, 94, 188, 255, 149, 248, 189, 97, 173, 181, 62, 36, 50, 6, 63, 27, 95, 107, 189, 184, 191, 187, 190, 62, 231, 214, 61, 235, 12, 116, 190, 191, 119, 210, 61, 190, 178, 77, 62, 213, 145, 135, 62, 47, 70, 27, 63, 65, 248, 66, 189, 140, 201, 56, 62, 218, 14, 29, 190, 242, 34, 170, 189, 146, 139, 116, 62, 50, 40, 68, 190, 69, 241, 120, 62, 178, 79, 212, 189, 103, 0, 119, 61, 71, 102, 188, 189, 4, 125, 91, 62, 121, 80, 198, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 85, 211, 189, 195, 76, 241, 189, 219, 81, 165, 62, 128, 152, 134, 62, 84, 135, 2, 62, 183, 151, 124, 188, 55, 169, 113, 62, 37, 25, 30, 62, 23, 56, 141, 60, 66, 41, 9, 62, 232, 126, 134, 62, 93, 183, 171, 61, 255, 129, 43, 62, 115, 181, 35, 190, 61, 26, 193, 189, 5, 122, 132, 188, 51, 17, 198, 189, 95, 78, 117, 189, 243, 14, 67, 62, 100, 67, 247, 61, 110, 52, 169, 62, 46, 110, 133, 188, 82, 142, 136, 190, 74, 181, 130, 62, 113, 133, 161, 62, 209, 54, 39, 61, 209, 229, 210, 61, 214, 139, 73, 190, 110, 38, 236, 61, 127, 12, 40, 189, 242, 146, 36, 190, 4, 228, 208, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 230, 73, 191, 183, 78, 44, 190, 55, 16, 93, 188, 215, 136, 95, 191, 116, 193, 17, 191, 254, 2, 157, 60, 144, 156, 4, 63, 78, 57, 59, 62, 232, 244, 82, 188, 167, 247, 35, 191, 187, 3, 215, 61, 115, 28, 21, 190, 42, 38, 29, 63, 206, 93, 146, 58, 238, 6, 17, 63, 165, 100, 197, 189, 32, 90, 230, 62, 132, 182, 94, 189, 158, 29, 78, 63, 242, 221, 104, 63, 74, 248, 130, 191, 28, 34, 55, 63, 97, 180, 138, 190, 51, 227, 191, 61, 37, 155, 1, 61, 114, 118, 56, 63, 158, 8, 198, 189, 5, 145, 132, 61, 75, 167, 9, 188, 94, 44, 1, 63, 32, 222, 1, 63, 5, 38, 153, 62, 219, 215, 21, 62, 19, 50, 44, 189, 43, 166, 161, 190, 175, 216, 197, 62, 235, 5, 13, 61, 207, 205, 112, 189, 72, 197, 93, 62, 123, 2, 16, 191, 158, 204, 132, 190, 147, 2, 57, 190, 100, 182, 51, 190, 202, 171, 159, 190, 151, 146, 11, 190, 95, 166, 105, 189, 115, 86, 74, 190, 146, 64, 10, 189, 209, 52, 163, 61, 255, 173, 150, 61, 154, 80, 171, 190, 95, 182, 146, 62, 44, 69, 1, 62, 144, 84, 135, 62, 95, 96, 201, 62, 10, 235, 9, 190, 22, 32, 193, 189, 47, 163, 149, 62, 5, 211, 112, 189, 114, 221, 60, 61, 186, 19, 50, 62, 223, 66, 22, 190, 183, 254, 152, 62, 234, 42, 165, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 119, 51, 190, 137, 219, 167, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {91, 182, 95, 191, 213, 58, 38, 191, 113, 60, 169, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {127, 74, 101, 192, 194, 238, 113, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0098/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}