// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 198, 116, 191, 237, 235, 62, 190, 152, 101, 10, 191, 241, 111, 151, 60, 58, 51, 151, 190, 156, 99, 143, 190, 50, 132, 141, 190, 177, 229, 15, 63, 43, 43, 237, 190, 33, 48, 71, 62, 103, 5, 132, 191, 27, 78, 22, 62, 187, 24, 9, 63, 245, 234, 141, 63, 82, 242, 149, 62, 155, 41, 47, 63, 109, 133, 34, 191, 253, 170, 249, 190, 120, 61, 181, 190, 6, 40, 65, 191, 211, 72, 230, 62, 84, 224, 116, 60, 103, 48, 149, 191, 141, 189, 84, 190, 203, 5, 141, 62, 60, 34, 19, 63, 108, 22, 113, 190, 121, 233, 34, 63, 107, 21, 240, 190, 199, 111, 227, 190, 59, 153, 158, 190, 239, 104, 81, 63, 230, 127, 58, 62, 35, 238, 12, 191, 78, 214, 84, 63, 91, 242, 81, 62, 139, 66, 134, 190, 159, 122, 212, 62, 5, 184, 172, 190, 161, 17, 138, 191, 67, 40, 175, 190, 100, 55, 81, 188, 4, 237, 162, 62, 173, 34, 77, 191, 254, 156, 32, 63, 106, 70, 33, 63, 229, 78, 45, 191, 253, 74, 254, 61, 58, 78, 65, 188, 47, 66, 175, 62, 174, 143, 51, 63, 51, 213, 153, 190, 166, 116, 129, 191, 243, 70, 210, 190, 252, 26, 27, 63, 141, 99, 246, 62, 57, 182, 246, 62, 13, 132, 100, 63, 17, 145, 82, 191, 125, 76, 164, 190, 234, 86, 237, 190, 119, 66, 106, 191, 53, 86, 120, 190, 244, 65, 144, 189, 186, 201, 195, 63, 21, 184, 154, 62, 207, 50, 109, 63, 129, 243, 96, 191, 152, 96, 57, 190, 80, 237, 225, 62, 44, 150, 92, 189, 95, 26, 234, 62, 211, 153, 197, 190, 167, 218, 127, 191, 96, 145, 111, 190, 109, 82, 205, 190, 99, 67, 253, 62, 89, 98, 178, 62, 145, 254, 239, 62, 129, 231, 118, 191, 58, 119, 93, 190, 167, 144, 10, 191, 165, 88, 201, 189, 117, 243, 107, 189, 74, 160, 103, 191, 207, 37, 238, 61, 209, 67, 205, 189, 169, 228, 245, 190, 197, 212, 69, 63, 121, 126, 249, 62, 18, 88, 196, 190, 67, 224, 194, 190, 9, 227, 248, 190, 6, 226, 182, 190, 140, 112, 135, 63, 178, 87, 128, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 52, 10, 191, 70, 232, 31, 62, 146, 206, 204, 189, 7, 171, 29, 190, 171, 129, 18, 190, 213, 15, 133, 190, 232, 188, 174, 62, 177, 15, 139, 190, 243, 3, 143, 62, 83, 207, 96, 189, 77, 56, 11, 189, 49, 235, 1, 62, 44, 37, 25, 63, 58, 42, 155, 62, 140, 55, 217, 190, 223, 196, 92, 62, 76, 1, 134, 62, 174, 134, 233, 62, 136, 38, 191, 190, 92, 128, 32, 191, 11, 64, 47, 63, 243, 222, 189, 62, 63, 228, 179, 62, 152, 23, 93, 62, 59, 221, 92, 61, 235, 113, 189, 190, 145, 111, 15, 191, 183, 27, 0, 63, 200, 13, 26, 63, 215, 76, 81, 62, 74, 142, 78, 191, 97, 85, 231, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 52, 174, 190, 148, 2, 132, 62, 203, 18, 222, 62, 151, 144, 154, 62, 60, 77, 153, 62, 222, 16, 162, 61, 232, 192, 52, 189, 15, 185, 50, 61, 90, 175, 54, 62, 33, 250, 110, 60, 125, 115, 88, 190, 113, 203, 8, 191, 64, 251, 51, 62, 187, 196, 67, 191, 128, 24, 144, 62, 25, 81, 69, 189, 25, 230, 85, 61, 234, 237, 37, 190, 216, 199, 166, 62, 12, 229, 2, 62, 150, 252, 131, 191, 55, 239, 170, 61, 95, 253, 165, 190, 68, 214, 199, 61, 32, 247, 185, 61, 108, 212, 88, 61, 235, 62, 5, 62, 66, 223, 165, 190, 130, 163, 33, 191, 193, 122, 69, 189, 226, 173, 151, 61, 244, 107, 252, 189, 179, 226, 115, 60, 219, 237, 8, 190, 233, 215, 223, 61, 28, 171, 169, 189, 144, 100, 200, 189, 107, 68, 31, 190, 242, 21, 218, 61, 134, 54, 47, 61, 175, 141, 48, 62, 26, 191, 129, 61, 41, 178, 7, 190, 57, 37, 32, 190, 239, 61, 40, 190, 67, 252, 239, 189, 143, 242, 33, 190, 48, 210, 51, 189, 219, 79, 58, 60, 199, 182, 25, 190, 71, 0, 21, 61, 162, 22, 201, 61, 87, 15, 22, 190, 124, 83, 191, 189, 127, 35, 150, 59, 29, 223, 137, 189, 243, 141, 159, 189, 18, 246, 46, 62, 187, 5, 190, 61, 26, 8, 199, 189, 218, 107, 96, 61, 184, 145, 20, 190, 133, 187, 176, 188, 15, 201, 30, 62, 67, 239, 97, 60, 245, 210, 113, 189, 27, 92, 189, 61, 110, 175, 242, 61, 243, 59, 137, 188, 141, 217, 0, 189, 190, 21, 245, 61, 208, 24, 23, 190, 239, 185, 212, 61, 233, 81, 84, 60, 58, 56, 49, 61, 22, 49, 201, 60, 18, 25, 146, 62, 116, 184, 224, 61, 217, 244, 221, 61, 167, 153, 223, 189, 175, 148, 238, 61, 178, 249, 124, 61, 14, 25, 209, 189, 169, 227, 201, 190, 19, 122, 104, 62, 97, 62, 218, 187, 72, 95, 90, 62, 146, 174, 165, 60, 130, 196, 158, 61, 152, 74, 29, 61, 129, 97, 196, 61, 237, 81, 117, 62, 193, 95, 239, 61, 116, 252, 51, 62, 239, 57, 143, 189, 201, 218, 211, 189, 0, 158, 133, 62, 115, 4, 230, 61, 14, 212, 183, 189, 196, 127, 6, 191, 151, 181, 2, 191, 100, 225, 105, 190, 195, 57, 55, 62, 13, 226, 186, 189, 105, 220, 246, 189, 244, 211, 206, 190, 254, 162, 40, 191, 10, 115, 163, 189, 218, 216, 237, 60, 62, 62, 205, 62, 57, 160, 180, 62, 137, 187, 8, 191, 189, 98, 143, 191, 243, 65, 154, 62, 5, 78, 150, 190, 142, 197, 83, 191, 235, 36, 140, 62, 147, 129, 38, 190, 189, 163, 170, 190, 8, 78, 230, 190, 125, 93, 43, 62, 112, 232, 187, 191, 150, 172, 196, 190, 89, 226, 212, 61, 129, 105, 109, 62, 156, 81, 45, 190, 4, 150, 151, 190, 189, 175, 48, 62, 161, 62, 136, 189, 165, 105, 20, 61, 214, 78, 215, 61, 236, 58, 13, 191, 203, 42, 4, 62, 247, 111, 136, 190, 228, 131, 228, 189, 154, 121, 225, 190, 49, 21, 107, 62, 115, 205, 49, 190, 148, 52, 94, 191, 55, 169, 255, 190, 195, 137, 89, 62, 233, 19, 117, 62, 47, 238, 39, 190, 144, 173, 67, 62, 169, 9, 87, 189, 123, 46, 71, 62, 147, 139, 230, 62, 178, 72, 89, 191, 202, 181, 148, 61, 22, 233, 0, 62, 187, 134, 132, 60, 122, 48, 80, 62, 220, 97, 235, 189, 69, 223, 126, 191, 108, 61, 178, 190, 93, 161, 20, 62, 5, 130, 114, 62, 30, 211, 164, 190, 6, 50, 16, 190, 49, 134, 86, 61, 93, 73, 7, 190, 93, 137, 30, 190, 155, 126, 160, 61, 177, 184, 242, 61, 202, 4, 18, 62, 104, 239, 131, 61, 88, 181, 23, 62, 228, 20, 110, 60, 141, 116, 157, 189, 250, 188, 151, 61, 90, 13, 243, 60, 155, 112, 200, 189, 248, 248, 23, 188, 168, 215, 167, 60, 66, 34, 163, 189, 102, 148, 51, 61, 27, 74, 171, 187, 93, 207, 21, 190, 112, 80, 239, 61, 57, 84, 209, 189, 133, 111, 69, 61, 145, 227, 2, 61, 54, 29, 245, 189, 5, 251, 51, 190, 18, 239, 35, 190, 15, 171, 247, 189, 220, 37, 154, 59, 55, 34, 7, 190, 239, 200, 245, 189, 11, 175, 163, 189, 61, 223, 19, 189, 108, 97, 127, 189, 140, 129, 165, 191, 239, 59, 139, 190, 91, 243, 196, 190, 117, 241, 206, 62, 97, 119, 26, 191, 155, 10, 129, 62, 57, 245, 233, 61, 179, 221, 135, 191, 149, 126, 175, 61, 178, 177, 48, 62, 155, 127, 3, 188, 85, 102, 12, 62, 67, 115, 46, 61, 130, 165, 185, 61, 123, 22, 8, 61, 2, 193, 113, 62, 238, 5, 69, 190, 46, 196, 147, 190, 210, 43, 113, 190, 36, 254, 226, 189, 8, 181, 45, 61, 222, 165, 14, 61, 57, 164, 81, 62, 129, 5, 28, 190, 62, 22, 124, 190, 83, 144, 61, 60, 67, 85, 37, 191, 188, 248, 6, 62, 223, 50, 91, 62, 58, 170, 190, 188, 65, 241, 156, 190, 121, 42, 124, 61, 97, 44, 155, 189, 45, 96, 169, 61, 80, 138, 187, 61, 68, 116, 160, 190, 87, 249, 79, 190, 224, 21, 28, 62, 167, 128, 89, 190, 108, 207, 61, 191, 134, 161, 46, 62, 224, 104, 40, 61, 214, 187, 212, 190, 192, 133, 17, 191, 112, 29, 144, 62, 26, 30, 135, 190, 172, 131, 83, 60, 65, 217, 186, 60, 232, 96, 32, 191, 36, 13, 146, 189, 146, 231, 180, 190, 106, 123, 76, 190, 81, 213, 64, 190, 222, 105, 210, 61, 126, 11, 211, 60, 200, 231, 179, 189, 101, 175, 250, 188, 190, 89, 56, 190, 113, 24, 73, 191, 20, 14, 23, 62, 38, 150, 28, 190, 135, 24, 41, 190, 241, 186, 191, 189, 244, 191, 171, 61, 216, 113, 206, 189, 87, 205, 7, 62, 114, 36, 213, 189, 61, 253, 36, 62, 58, 74, 40, 189, 205, 139, 106, 61, 248, 13, 32, 61, 229, 215, 150, 190, 153, 243, 18, 190, 38, 62, 59, 189, 24, 190, 202, 189, 99, 170, 161, 61, 40, 232, 29, 62, 183, 80, 107, 62, 185, 213, 216, 187, 60, 140, 121, 61, 207, 114, 196, 60, 188, 21, 14, 62, 156, 244, 31, 190, 73, 183, 64, 190, 41, 16, 18, 62, 27, 15, 25, 62, 161, 198, 118, 189, 165, 219, 183, 61, 175, 32, 60, 61, 118, 50, 51, 60, 60, 28, 228, 189, 155, 217, 29, 190, 82, 248, 214, 188, 180, 102, 147, 187, 40, 30, 121, 189, 33, 23, 246, 189, 124, 96, 252, 190, 208, 42, 20, 62, 137, 113, 255, 62, 80, 85, 190, 62, 183, 250, 125, 62, 80, 30, 116, 62, 177, 13, 135, 61, 31, 110, 229, 62, 125, 105, 163, 62, 133, 238, 206, 186, 64, 20, 68, 190, 231, 55, 255, 190, 149, 228, 77, 61, 215, 60, 42, 191, 41, 141, 78, 190, 57, 193, 69, 62, 106, 140, 137, 61, 147, 76, 138, 190, 32, 184, 53, 62, 201, 170, 41, 188, 89, 203, 224, 190, 180, 27, 32, 62, 71, 132, 172, 62, 57, 186, 181, 62, 243, 115, 188, 190, 180, 50, 85, 190, 167, 35, 0, 63, 141, 39, 230, 189, 92, 97, 181, 190, 89, 223, 128, 61, 118, 96, 176, 61, 192, 242, 177, 60, 23, 227, 25, 191, 111, 131, 117, 61, 0, 30, 218, 189, 8, 137, 92, 62, 19, 186, 114, 190, 12, 87, 43, 62, 99, 56, 128, 62, 184, 70, 128, 190, 152, 247, 10, 62, 86, 69, 232, 61, 69, 31, 255, 61, 195, 118, 170, 61, 231, 45, 100, 189, 250, 90, 70, 62, 23, 57, 233, 189, 42, 148, 135, 189, 156, 142, 154, 61, 207, 146, 134, 189, 90, 87, 104, 190, 20, 86, 102, 190, 61, 162, 101, 62, 77, 25, 133, 189, 242, 15, 179, 60, 147, 205, 183, 61, 191, 214, 55, 62, 164, 101, 15, 62, 249, 61, 10, 190, 113, 238, 108, 60, 40, 237, 130, 61, 178, 115, 204, 61, 221, 4, 121, 190, 117, 67, 135, 188, 202, 199, 96, 61, 250, 92, 85, 61, 117, 93, 100, 62, 89, 119, 23, 61, 204, 164, 8, 62, 101, 53, 27, 62, 50, 114, 29, 62, 198, 177, 123, 188, 173, 98, 77, 189, 212, 32, 229, 61, 254, 85, 205, 190, 39, 236, 16, 191, 73, 11, 7, 62, 83, 45, 56, 62, 243, 6, 215, 61, 207, 47, 187, 62, 79, 245, 128, 61, 203, 5, 151, 61, 74, 93, 226, 59, 226, 139, 3, 190, 68, 212, 134, 62, 24, 129, 183, 188, 110, 38, 70, 62, 195, 131, 156, 62, 25, 118, 137, 61, 54, 157, 135, 190, 27, 109, 75, 189, 205, 221, 206, 60, 106, 235, 44, 62, 51, 250, 205, 189, 199, 135, 151, 189, 51, 105, 248, 189, 137, 131, 60, 61, 70, 110, 55, 190, 174, 177, 246, 60, 87, 33, 55, 191, 141, 194, 3, 63, 29, 222, 131, 189, 145, 217, 56, 190, 195, 83, 9, 62, 83, 229, 8, 189, 160, 93, 95, 61, 175, 49, 64, 190, 1, 252, 95, 62, 42, 114, 146, 190, 35, 231, 172, 190, 102, 136, 74, 189, 250, 20, 223, 190, 44, 121, 219, 189, 240, 82, 224, 189, 247, 75, 87, 61, 164, 103, 40, 62, 86, 73, 188, 190, 207, 156, 56, 62, 94, 176, 30, 191, 232, 21, 166, 189, 114, 105, 64, 190, 45, 158, 24, 60, 62, 202, 159, 189, 9, 97, 102, 189, 8, 237, 144, 190, 88, 87, 155, 61, 145, 0, 242, 61, 161, 26, 230, 61, 43, 148, 190, 61, 41, 102, 212, 61, 130, 182, 198, 189, 191, 228, 168, 61, 92, 83, 192, 61, 157, 253, 126, 61, 234, 122, 28, 189, 218, 63, 225, 188, 147, 24, 20, 189, 19, 243, 212, 189, 153, 167, 207, 189, 137, 126, 106, 57, 32, 171, 8, 190, 121, 217, 174, 188, 6, 221, 15, 190, 142, 146, 16, 62, 90, 241, 45, 190, 244, 172, 62, 185, 199, 135, 33, 190, 92, 5, 170, 61, 32, 193, 59, 61, 125, 150, 130, 189, 241, 69, 106, 189, 158, 66, 220, 61, 168, 207, 23, 190, 64, 153, 201, 186, 12, 101, 47, 189, 194, 104, 177, 189, 245, 130, 203, 61, 0, 104, 101, 61, 126, 170, 27, 62, 194, 228, 50, 62, 246, 201, 234, 189, 52, 51, 70, 62, 165, 81, 138, 189, 203, 183, 27, 63, 208, 116, 228, 190, 144, 155, 189, 62, 206, 8, 164, 62, 248, 245, 52, 190, 138, 88, 30, 61, 158, 199, 83, 62, 97, 126, 245, 190, 63, 61, 53, 191, 216, 99, 36, 62, 215, 192, 137, 190, 161, 84, 176, 61, 99, 48, 147, 62, 223, 167, 44, 188, 18, 103, 201, 189, 26, 4, 221, 60, 186, 58, 165, 61, 220, 0, 7, 62, 117, 196, 84, 190, 199, 33, 193, 62, 87, 208, 234, 60, 174, 4, 245, 189, 92, 103, 157, 189, 174, 166, 105, 190, 184, 244, 24, 190, 170, 32, 138, 190, 240, 228, 53, 190, 103, 87, 12, 62, 203, 117, 145, 191, 95, 52, 28, 189, 150, 186, 36, 190, 109, 181, 210, 62, 194, 137, 236, 61, 166, 79, 100, 62, 240, 72, 0, 189, 234, 74, 187, 61, 125, 165, 49, 62, 238, 242, 68, 62, 11, 52, 230, 61, 233, 67, 42, 62, 99, 142, 25, 61, 168, 217, 139, 189, 128, 87, 183, 61, 26, 106, 174, 61, 163, 158, 104, 62, 131, 119, 243, 61, 239, 236, 208, 189, 166, 51, 202, 189, 63, 15, 249, 188, 252, 16, 210, 189, 205, 160, 99, 62, 2, 132, 70, 62, 155, 6, 160, 61, 129, 212, 38, 61, 157, 10, 4, 62, 140, 232, 132, 62, 82, 54, 238, 61, 231, 113, 250, 188, 135, 139, 12, 190, 72, 52, 70, 62, 198, 97, 95, 62, 209, 243, 101, 58, 166, 142, 197, 61, 72, 82, 155, 62, 219, 24, 118, 62, 228, 77, 97, 62, 250, 179, 100, 62, 36, 56, 0, 61, 73, 99, 135, 190, 152, 23, 74, 189, 153, 119, 6, 61, 50, 160, 5, 63, 225, 169, 253, 62, 250, 109, 104, 62, 42, 233, 98, 190, 1, 246, 69, 188, 19, 123, 21, 63, 130, 205, 123, 191, 225, 208, 182, 61, 114, 94, 42, 191, 91, 27, 149, 62, 16, 215, 125, 189, 131, 220, 137, 190, 22, 46, 96, 62, 225, 239, 75, 190, 83, 50, 232, 61, 91, 133, 9, 61, 217, 69, 200, 189, 141, 210, 37, 190, 103, 22, 193, 189, 147, 87, 26, 191, 12, 76, 217, 60, 159, 95, 100, 190, 16, 157, 3, 61, 21, 137, 24, 62, 212, 35, 68, 61, 99, 96, 251, 61, 173, 55, 35, 190, 234, 137, 149, 60, 171, 212, 12, 190, 223, 207, 38, 190, 88, 123, 191, 60, 6, 48, 173, 189, 202, 112, 187, 188, 113, 104, 16, 190, 159, 28, 65, 190, 226, 195, 200, 60, 165, 247, 176, 189, 41, 230, 35, 61, 22, 240, 22, 62, 160, 195, 119, 61, 211, 57, 60, 189, 166, 124, 19, 190, 184, 106, 32, 190, 115, 147, 85, 61, 98, 140, 92, 61, 200, 238, 11, 189, 60, 132, 209, 189, 217, 12, 246, 60, 63, 32, 10, 62, 39, 46, 228, 60, 232, 145, 24, 190, 130, 66, 76, 188, 151, 184, 35, 60, 61, 115, 11, 189, 21, 172, 223, 61, 242, 251, 213, 61, 192, 206, 227, 61, 35, 215, 163, 60, 107, 33, 58, 191, 251, 240, 177, 62, 207, 166, 218, 61, 235, 19, 147, 191, 217, 133, 134, 62, 182, 97, 230, 62, 7, 6, 157, 190, 203, 248, 100, 190, 0, 48, 226, 58, 160, 217, 23, 191, 106, 213, 209, 62, 72, 247, 173, 62, 244, 100, 114, 61, 8, 109, 70, 189, 72, 89, 98, 190, 116, 33, 133, 189, 220, 46, 50, 190, 185, 71, 26, 191, 133, 185, 176, 62, 47, 251, 37, 62, 5, 135, 26, 190, 100, 119, 8, 189, 166, 110, 111, 191, 231, 125, 53, 189, 133, 183, 0, 191, 227, 202, 35, 190, 161, 183, 87, 189, 188, 62, 155, 191, 216, 211, 210, 191, 182, 163, 26, 191, 79, 188, 169, 191, 20, 101, 137, 62, 57, 19, 80, 191, 200, 38, 159, 61, 54, 142, 194, 62, 135, 75, 161, 190, 118, 219, 150, 187, 134, 158, 14, 189, 74, 151, 86, 62, 222, 202, 53, 62, 104, 149, 96, 190, 95, 23, 159, 62, 23, 195, 124, 190, 219, 138, 26, 62, 160, 35, 41, 190, 129, 25, 17, 191, 212, 137, 155, 190, 112, 0, 105, 190, 20, 89, 197, 62, 219, 234, 60, 61, 54, 202, 136, 62, 71, 135, 168, 188, 142, 156, 12, 191, 60, 74, 130, 62, 97, 198, 143, 190, 196, 82, 9, 62, 192, 250, 26, 62, 163, 155, 65, 62, 96, 211, 28, 190, 10, 126, 155, 62, 86, 14, 66, 60, 2, 237, 14, 61, 210, 247, 216, 62, 23, 197, 61, 189, 161, 49, 99, 62, 73, 215, 239, 190, 223, 115, 222, 190, 63, 3, 185, 190, 253, 208, 210, 62, 147, 141, 23, 190, 68, 0, 46, 191, 122, 160, 243, 190, 233, 193, 146, 62, 100, 30, 103, 190, 242, 33, 7, 189, 152, 89, 163, 190, 82, 146, 216, 190, 198, 3, 64, 61, 24, 73, 188, 61, 31, 215, 195, 191, 195, 176, 74, 190, 29, 28, 80, 62, 135, 179, 247, 189, 81, 45, 236, 189, 240, 22, 149, 190, 18, 52, 181, 190, 81, 181, 174, 190, 173, 154, 62, 61, 120, 228, 128, 189, 14, 98, 236, 190, 199, 219, 207, 190, 190, 217, 31, 62, 212, 117, 196, 191, 50, 184, 33, 191, 53, 40, 189, 190, 73, 133, 9, 62, 217, 212, 233, 190, 11, 196, 174, 189, 178, 158, 106, 62, 205, 146, 143, 190, 107, 51, 50, 62, 211, 173, 92, 188, 83, 221, 16, 62, 156, 71, 141, 62, 129, 118, 105, 62, 191, 87, 174, 61, 131, 20, 83, 190, 196, 144, 63, 190, 207, 21, 182, 61, 209, 29, 220, 190, 135, 152, 147, 190, 228, 112, 122, 189, 116, 8, 161, 189, 149, 128, 157, 189, 182, 2, 170, 190, 211, 84, 16, 190, 148, 112, 136, 189, 225, 75, 134, 61, 202, 136, 5, 190, 56, 223, 73, 189, 128, 111, 180, 62, 97, 111, 101, 62, 236, 97, 162, 190, 166, 39, 6, 62, 6, 101, 211, 189, 190, 130, 166, 189, 179, 145, 72, 62, 171, 0, 239, 190, 93, 53, 82, 190, 189, 83, 22, 61, 142, 200, 60, 190, 239, 174, 79, 61, 153, 160, 5, 189, 136, 198, 47, 62, 105, 43, 232, 61, 217, 66, 8, 190, 72, 171, 19, 190, 254, 236, 156, 190, 207, 64, 145, 189, 61, 26, 21, 190, 19, 165, 242, 188, 84, 151, 40, 61, 122, 174, 129, 189, 36, 62, 167, 62, 149, 111, 69, 60, 188, 202, 219, 190, 225, 57, 3, 62, 247, 75, 3, 62, 114, 103, 3, 190, 193, 198, 238, 61, 169, 213, 191, 61, 45, 245, 115, 190, 17, 137, 136, 190, 119, 189, 169, 189, 233, 202, 153, 61, 134, 147, 230, 190, 138, 220, 131, 190, 83, 20, 163, 189, 198, 104, 93, 60, 244, 24, 149, 61, 207, 38, 8, 190, 65, 78, 245, 61, 100, 198, 16, 61, 67, 13, 122, 191, 17, 135, 77, 62, 12, 74, 233, 60, 180, 93, 110, 189, 159, 117, 223, 61, 211, 141, 78, 62, 70, 130, 39, 60, 104, 39, 214, 187, 50, 192, 224, 189, 7, 229, 174, 61, 70, 74, 204, 189, 125, 169, 70, 189, 143, 27, 30, 191, 100, 75, 50, 61, 99, 148, 213, 60, 159, 135, 188, 61, 15, 191, 28, 190, 99, 61, 17, 189, 29, 239, 42, 190, 171, 236, 47, 191, 252, 171, 139, 59, 171, 179, 84, 62, 84, 236, 213, 61, 248, 186, 237, 189, 21, 89, 161, 61, 80, 49, 97, 190, 55, 94, 76, 189, 109, 77, 141, 62, 102, 39, 213, 61, 42, 35, 90, 61, 131, 254, 147, 189, 102, 174, 238, 61, 191, 140, 142, 191, 117, 254, 99, 62, 23, 96, 36, 189, 129, 88, 174, 59, 135, 217, 166, 62, 33, 240, 223, 61, 240, 42, 198, 187, 76, 13, 227, 61, 162, 13, 77, 190, 103, 236, 27, 62, 67, 72, 22, 62, 46, 235, 2, 190, 231, 78, 172, 190, 18, 183, 15, 190, 217, 77, 19, 189, 248, 69, 240, 61, 215, 33, 236, 189, 211, 111, 191, 190, 190, 74, 39, 61, 218, 106, 59, 191, 3, 255, 34, 61, 237, 104, 61, 61, 213, 16, 225, 61, 61, 242, 198, 60, 74, 115, 183, 189, 145, 212, 249, 190, 255, 160, 120, 61, 216, 52, 149, 190, 255, 179, 238, 62, 92, 203, 73, 191, 215, 253, 54, 62, 68, 149, 208, 62, 133, 94, 108, 190, 219, 159, 236, 61, 231, 77, 10, 62, 127, 195, 1, 190, 8, 51, 69, 190, 89, 216, 93, 190, 25, 56, 159, 62, 202, 199, 106, 190, 107, 52, 161, 60, 46, 202, 130, 61, 68, 227, 29, 187, 197, 147, 95, 190, 236, 99, 121, 187, 213, 147, 30, 62, 37, 43, 151, 189, 115, 121, 100, 62, 30, 138, 190, 189, 75, 179, 9, 190, 85, 73, 28, 188, 4, 228, 67, 61, 69, 21, 69, 62, 234, 100, 6, 61, 225, 182, 63, 190, 19, 157, 118, 189, 71, 194, 218, 189, 31, 18, 109, 189, 152, 93, 9, 190, 52, 157, 36, 61, 112, 56, 25, 190, 80, 18, 218, 61, 143, 6, 232, 189, 46, 1, 21, 62, 153, 226, 41, 190, 31, 241, 86, 190, 208, 124, 11, 62, 183, 58, 29, 190, 93, 54, 52, 61, 152, 254, 56, 190, 158, 133, 16, 190, 101, 44, 30, 190, 79, 86, 189, 188, 6, 163, 252, 188, 105, 124, 138, 61, 80, 230, 192, 188, 118, 136, 28, 190, 173, 75, 102, 61, 138, 254, 66, 61, 249, 42, 2, 61, 28, 183, 58, 190, 57, 131, 22, 189, 215, 36, 191, 61, 208, 25, 232, 189, 227, 113, 63, 190, 236, 82, 85, 189, 187, 178, 53, 190, 126, 172, 251, 61, 199, 23, 188, 189, 114, 228, 196, 61, 104, 177, 15, 190, 39, 8, 144, 61, 205, 205, 93, 61, 107, 37, 154, 61, 126, 241, 31, 189, 153, 234, 28, 190, 248, 234, 23, 62, 143, 186, 92, 61, 37, 145, 224, 60, 69, 133, 231, 61, 138, 93, 103, 188, 197, 128, 55, 190, 128, 48, 185, 61, 100, 92, 181, 189, 18, 250, 232, 61, 83, 116, 168, 189, 209, 77, 141, 189, 254, 159, 192, 189, 192, 151, 139, 189, 61, 207, 235, 60, 171, 78, 47, 190, 191, 71, 2, 190, 58, 58, 12, 190, 176, 139, 9, 61, 77, 211, 42, 62, 27, 73, 160, 61, 147, 79, 20, 190, 68, 63, 160, 189, 70, 8, 204, 189, 187, 207, 137, 187, 142, 251, 236, 189, 226, 140, 8, 60, 242, 80, 140, 61, 83, 213, 74, 188, 4, 217, 44, 62, 170, 146, 36, 190, 235, 255, 183, 186, 35, 105, 146, 61, 198, 64, 209, 60, 219, 141, 198, 61, 114, 234, 71, 61, 65, 252, 103, 61, 10, 90, 27, 62, 23, 183, 52, 190, 132, 65, 16, 190, 28, 64, 133, 61, 219, 243, 36, 189, 115, 193, 236, 189, 251, 9, 220, 187, 181, 183, 174, 189, 24, 181, 186, 61, 110, 122, 175, 189, 253, 234, 43, 190, 132, 186, 207, 189, 175, 4, 23, 190, 39, 149, 246, 189, 162, 3, 15, 62, 152, 121, 45, 190, 154, 176, 194, 189, 123, 7, 182, 188, 32, 217, 123, 60, 83, 184, 170, 61, 242, 121, 241, 189, 91, 225, 143, 188, 88, 17, 246, 60, 76, 90, 118, 61, 99, 243, 210, 62, 220, 230, 251, 190, 85, 159, 181, 62, 205, 89, 66, 62, 39, 43, 35, 190, 218, 40, 220, 188, 206, 54, 180, 62, 7, 247, 74, 189, 135, 75, 45, 190, 233, 107, 189, 189, 109, 221, 92, 190, 181, 55, 158, 61, 2, 173, 78, 62, 38, 114, 9, 190, 83, 79, 220, 61, 154, 241, 143, 190, 244, 69, 170, 62, 238, 240, 193, 61, 42, 98, 172, 190, 212, 187, 218, 62, 240, 37, 150, 60, 85, 93, 134, 190, 124, 155, 84, 61, 228, 97, 88, 190, 210, 10, 227, 188, 6, 225, 195, 190, 202, 206, 62, 62, 168, 207, 188, 188, 36, 14, 74, 191, 83, 25, 242, 189, 111, 3, 149, 61, 137, 118, 31, 190, 106, 239, 204, 62, 244, 9, 119, 191, 54, 74, 211, 62, 192, 18, 162, 62, 162, 80, 137, 189, 183, 15, 122, 62, 98, 65, 113, 62, 62, 134, 50, 190, 232, 102, 213, 190, 214, 120, 138, 189, 172, 31, 52, 189, 177, 212, 89, 61, 77, 16, 70, 62, 247, 101, 142, 189, 90, 9, 82, 190, 81, 116, 52, 190, 253, 209, 112, 62, 93, 84, 191, 189, 230, 190, 129, 190, 141, 191, 171, 62, 208, 241, 164, 189, 209, 210, 131, 60, 193, 129, 252, 188, 174, 1, 80, 61, 131, 189, 14, 61, 178, 224, 121, 190, 195, 16, 154, 61, 190, 119, 123, 62, 198, 9, 19, 191, 32, 2, 42, 62, 117, 158, 31, 59, 90, 77, 77, 62, 179, 49, 127, 190, 156, 157, 148, 62, 223, 44, 174, 60, 97, 208, 255, 188, 23, 245, 164, 188, 34, 62, 213, 60, 78, 79, 236, 189, 219, 228, 96, 62, 77, 64, 217, 62, 36, 8, 13, 189, 87, 170, 206, 190, 50, 201, 22, 62, 170, 174, 70, 190, 67, 127, 234, 61, 254, 92, 240, 61, 155, 94, 132, 62, 198, 155, 217, 62, 46, 145, 18, 190, 193, 12, 37, 62, 75, 246, 53, 190, 189, 48, 119, 189, 5, 77, 142, 61, 186, 38, 42, 190, 170, 247, 236, 189, 133, 65, 5, 190, 230, 155, 113, 61, 106, 62, 246, 189, 51, 48, 54, 62, 206, 85, 112, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 125, 245, 189, 195, 76, 241, 189, 190, 62, 165, 62, 121, 134, 121, 62, 219, 40, 13, 62, 183, 151, 124, 188, 157, 133, 104, 62, 168, 123, 251, 61, 125, 3, 166, 188, 18, 84, 59, 62, 62, 190, 112, 62, 9, 171, 159, 61, 152, 47, 148, 60, 115, 181, 35, 190, 33, 131, 196, 189, 31, 82, 6, 61, 51, 15, 75, 189, 95, 78, 117, 189, 27, 128, 51, 62, 179, 250, 2, 62, 68, 136, 130, 62, 99, 17, 21, 190, 66, 72, 129, 190, 58, 30, 134, 62, 37, 86, 138, 62, 49, 135, 93, 61, 209, 229, 210, 61, 214, 139, 73, 190, 110, 38, 236, 61, 136, 93, 42, 189, 185, 210, 51, 59, 160, 4, 198, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 171, 63, 191, 183, 78, 44, 190, 26, 151, 226, 188, 223, 235, 92, 191, 239, 213, 24, 191, 254, 2, 157, 60, 27, 225, 244, 62, 121, 100, 211, 60, 150, 48, 228, 59, 30, 196, 40, 191, 161, 205, 234, 61, 84, 62, 35, 190, 1, 95, 119, 62, 206, 93, 146, 58, 170, 200, 21, 63, 138, 81, 13, 190, 181, 134, 193, 62, 132, 182, 94, 189, 162, 246, 87, 63, 215, 218, 100, 63, 68, 180, 147, 191, 254, 20, 30, 63, 238, 135, 134, 190, 57, 178, 56, 188, 76, 162, 220, 186, 117, 36, 21, 63, 158, 8, 198, 189, 5, 145, 132, 61, 75, 167, 9, 188, 39, 31, 12, 63, 252, 198, 247, 62, 163, 161, 59, 62, 153, 182, 98, 62, 19, 50, 44, 189, 48, 127, 134, 190, 235, 119, 131, 62, 71, 248, 126, 187, 207, 205, 112, 189, 166, 98, 177, 61, 88, 109, 1, 191, 81, 18, 119, 189, 98, 8, 218, 189, 153, 171, 54, 190, 217, 2, 123, 190, 166, 99, 151, 189, 95, 166, 105, 189, 150, 211, 146, 189, 150, 16, 235, 60, 61, 57, 193, 61, 255, 173, 150, 61, 245, 211, 134, 190, 129, 203, 10, 62, 221, 72, 181, 61, 153, 50, 139, 62, 70, 211, 207, 62, 87, 156, 69, 190, 170, 140, 80, 190, 139, 74, 94, 62, 5, 211, 112, 189, 114, 221, 60, 61, 186, 19, 50, 62, 60, 137, 53, 60, 246, 99, 131, 62, 29, 64, 221, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 246, 75, 190, 242, 93, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {197, 248, 47, 190, 83, 140, 134, 190, 214, 219, 183, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {245, 122, 206, 63, 203, 180, 75, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0098/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}