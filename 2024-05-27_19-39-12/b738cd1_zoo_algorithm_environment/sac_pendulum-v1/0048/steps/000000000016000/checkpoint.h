// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 226, 62, 187, 149, 192, 9, 191, 24, 203, 250, 59, 170, 196, 33, 63, 245, 202, 125, 191, 44, 105, 172, 190, 191, 244, 226, 62, 190, 96, 12, 63, 114, 223, 211, 189, 230, 155, 147, 62, 63, 48, 44, 63, 132, 116, 127, 62, 233, 11, 124, 190, 21, 210, 212, 62, 127, 83, 178, 190, 164, 141, 232, 62, 210, 72, 92, 63, 113, 60, 62, 62, 45, 152, 29, 63, 202, 178, 210, 190, 14, 129, 39, 191, 35, 225, 95, 190, 128, 234, 171, 190, 239, 250, 19, 191, 9, 33, 58, 191, 205, 132, 159, 191, 27, 252, 225, 189, 140, 52, 124, 191, 236, 196, 150, 62, 29, 178, 133, 62, 114, 242, 115, 191, 141, 65, 37, 63, 95, 60, 212, 62, 25, 105, 104, 188, 49, 84, 115, 63, 248, 188, 101, 190, 37, 114, 181, 190, 3, 187, 188, 62, 163, 42, 103, 190, 209, 168, 101, 189, 99, 229, 149, 191, 118, 192, 10, 191, 213, 52, 14, 63, 53, 98, 91, 63, 46, 239, 8, 63, 241, 97, 253, 190, 35, 162, 56, 191, 246, 203, 23, 62, 234, 220, 146, 189, 114, 43, 114, 191, 202, 148, 187, 61, 104, 92, 201, 189, 68, 244, 69, 63, 161, 174, 169, 62, 93, 138, 251, 62, 236, 21, 184, 63, 228, 210, 92, 62, 55, 183, 125, 190, 104, 219, 11, 62, 8, 3, 130, 62, 68, 28, 84, 191, 142, 249, 47, 63, 207, 251, 47, 62, 247, 8, 67, 63, 131, 199, 105, 191, 120, 85, 73, 190, 207, 141, 222, 61, 246, 132, 231, 191, 134, 225, 16, 191, 192, 26, 175, 190, 180, 152, 186, 62, 96, 160, 235, 190, 155, 155, 39, 63, 187, 137, 208, 190, 85, 205, 145, 190, 39, 80, 35, 190, 102, 22, 149, 191, 210, 168, 195, 61, 116, 191, 74, 191, 214, 114, 184, 190, 126, 210, 215, 60, 63, 202, 7, 62, 116, 247, 79, 63, 152, 249, 169, 62, 145, 249, 5, 63, 92, 25, 88, 190, 103, 196, 166, 190, 100, 38, 133, 189, 58, 86, 101, 191, 8, 110, 73, 61, 209, 232, 111, 62, 110, 204, 78, 191, 55, 36, 243, 60, 66, 132, 250, 62, 230, 155, 171, 63, 252, 231, 139, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 210, 28, 191, 193, 38, 17, 191, 180, 113, 71, 190, 2, 8, 151, 190, 239, 214, 252, 62, 228, 2, 54, 190, 214, 107, 195, 189, 144, 59, 66, 190, 88, 221, 138, 62, 211, 171, 76, 63, 229, 246, 24, 191, 238, 244, 217, 62, 203, 152, 222, 190, 25, 224, 46, 190, 201, 122, 118, 62, 123, 75, 53, 61, 5, 159, 246, 61, 243, 116, 141, 189, 130, 46, 79, 62, 203, 218, 40, 191, 208, 208, 60, 62, 250, 90, 41, 62, 142, 211, 65, 62, 66, 188, 89, 190, 225, 162, 101, 191, 233, 53, 83, 62, 27, 124, 18, 62, 217, 127, 194, 190, 123, 162, 58, 191, 165, 254, 163, 62, 88, 179, 92, 189, 128, 117, 166, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 179, 162, 60, 112, 102, 159, 62, 9, 192, 153, 62, 223, 114, 106, 189, 223, 67, 56, 190, 82, 222, 176, 60, 136, 8, 99, 62, 217, 17, 153, 190, 12, 84, 123, 190, 132, 86, 82, 61, 81, 90, 213, 61, 67, 183, 39, 62, 244, 80, 176, 189, 98, 0, 173, 190, 63, 247, 143, 188, 141, 93, 195, 190, 86, 119, 192, 190, 150, 205, 193, 61, 158, 227, 4, 61, 228, 220, 212, 190, 133, 78, 71, 62, 242, 34, 213, 62, 26, 234, 100, 190, 154, 164, 181, 190, 20, 65, 58, 62, 231, 86, 234, 188, 75, 67, 115, 188, 34, 221, 71, 190, 117, 3, 44, 62, 209, 118, 55, 60, 106, 172, 50, 190, 175, 180, 137, 190, 115, 35, 19, 190, 51, 44, 160, 62, 173, 51, 82, 61, 22, 78, 195, 190, 83, 0, 85, 61, 95, 94, 192, 190, 252, 117, 239, 188, 17, 10, 84, 190, 188, 143, 230, 189, 33, 153, 184, 61, 206, 209, 211, 190, 66, 57, 217, 61, 54, 10, 87, 189, 236, 7, 107, 61, 221, 109, 78, 189, 31, 184, 32, 62, 149, 128, 33, 62, 77, 1, 8, 191, 176, 200, 21, 191, 219, 163, 180, 190, 141, 234, 147, 189, 155, 47, 2, 63, 243, 30, 127, 62, 185, 210, 198, 60, 159, 255, 158, 189, 247, 52, 182, 62, 147, 34, 0, 190, 210, 255, 55, 191, 215, 26, 248, 189, 168, 65, 213, 62, 27, 237, 135, 62, 92, 49, 36, 191, 250, 167, 100, 61, 3, 120, 146, 63, 232, 33, 192, 189, 134, 192, 177, 189, 178, 224, 58, 190, 24, 237, 61, 191, 215, 97, 201, 61, 245, 168, 25, 191, 75, 77, 151, 190, 189, 137, 90, 62, 37, 116, 49, 62, 199, 176, 128, 61, 234, 175, 249, 62, 128, 181, 153, 191, 25, 15, 19, 190, 88, 13, 227, 190, 104, 253, 29, 62, 219, 165, 26, 190, 242, 136, 6, 191, 203, 79, 143, 189, 8, 246, 53, 62, 132, 132, 17, 63, 224, 173, 220, 190, 232, 126, 86, 61, 46, 173, 39, 63, 221, 155, 84, 190, 228, 152, 249, 61, 199, 127, 86, 189, 230, 186, 238, 62, 74, 170, 82, 62, 72, 54, 146, 62, 168, 22, 32, 191, 107, 254, 175, 61, 219, 199, 214, 190, 197, 56, 218, 61, 18, 208, 196, 61, 114, 185, 129, 62, 109, 81, 73, 62, 138, 243, 136, 190, 241, 136, 102, 62, 55, 181, 36, 62, 61, 120, 164, 189, 215, 208, 69, 190, 211, 102, 17, 62, 243, 178, 134, 190, 163, 199, 50, 62, 250, 54, 73, 62, 200, 224, 60, 190, 44, 254, 123, 189, 106, 194, 219, 188, 67, 101, 189, 62, 140, 165, 39, 62, 200, 113, 131, 61, 205, 128, 131, 190, 49, 17, 146, 189, 239, 99, 102, 62, 62, 1, 77, 191, 223, 143, 215, 189, 54, 54, 199, 61, 252, 98, 24, 188, 196, 220, 169, 190, 3, 183, 222, 60, 43, 144, 237, 189, 91, 201, 131, 62, 225, 60, 192, 60, 225, 62, 146, 190, 142, 113, 15, 190, 31, 77, 4, 189, 203, 254, 198, 61, 188, 3, 66, 188, 97, 227, 196, 189, 174, 200, 89, 62, 8, 43, 7, 189, 16, 230, 14, 190, 251, 128, 203, 190, 162, 217, 66, 190, 189, 46, 194, 190, 69, 84, 113, 62, 78, 27, 54, 62, 149, 161, 186, 190, 35, 154, 182, 190, 134, 208, 226, 60, 154, 39, 74, 62, 158, 159, 89, 190, 135, 190, 240, 187, 107, 189, 16, 61, 32, 204, 208, 187, 35, 132, 117, 62, 163, 69, 201, 190, 227, 71, 193, 189, 222, 248, 139, 188, 212, 62, 135, 189, 171, 33, 4, 190, 139, 253, 50, 62, 239, 4, 134, 62, 230, 201, 152, 189, 79, 91, 155, 188, 197, 220, 45, 62, 220, 212, 181, 61, 193, 101, 16, 190, 220, 60, 15, 190, 227, 164, 32, 62, 83, 15, 11, 190, 26, 172, 14, 62, 33, 240, 221, 61, 249, 60, 39, 190, 58, 79, 192, 61, 92, 174, 135, 189, 2, 90, 8, 190, 92, 242, 45, 61, 130, 176, 150, 189, 96, 54, 184, 61, 86, 26, 66, 189, 98, 197, 202, 61, 2, 188, 1, 190, 206, 132, 225, 61, 49, 200, 250, 189, 209, 1, 155, 188, 161, 174, 49, 190, 109, 8, 25, 62, 236, 106, 203, 61, 4, 169, 252, 189, 6, 113, 253, 61, 221, 181, 155, 189, 240, 96, 209, 189, 188, 50, 181, 187, 151, 28, 62, 61, 147, 103, 16, 62, 67, 125, 221, 61, 125, 248, 250, 189, 26, 225, 18, 62, 166, 94, 66, 188, 89, 58, 38, 190, 40, 14, 157, 190, 247, 113, 133, 62, 195, 39, 244, 190, 155, 11, 80, 190, 200, 213, 55, 62, 92, 18, 82, 62, 4, 113, 12, 61, 109, 155, 140, 62, 147, 88, 48, 191, 130, 163, 180, 189, 74, 146, 159, 190, 200, 84, 143, 60, 101, 65, 135, 190, 54, 74, 57, 190, 145, 44, 249, 189, 128, 46, 77, 61, 160, 234, 213, 62, 160, 233, 47, 190, 36, 109, 201, 190, 31, 15, 56, 190, 142, 134, 157, 189, 146, 250, 133, 62, 228, 215, 145, 190, 213, 7, 135, 190, 172, 197, 103, 62, 189, 3, 245, 61, 242, 244, 66, 190, 77, 42, 64, 61, 221, 200, 107, 189, 77, 76, 249, 62, 200, 177, 241, 60, 165, 108, 226, 62, 196, 76, 162, 62, 49, 113, 211, 190, 135, 139, 48, 62, 233, 86, 168, 190, 135, 171, 106, 190, 219, 144, 57, 190, 125, 235, 247, 188, 59, 165, 192, 188, 160, 230, 238, 190, 76, 251, 13, 62, 122, 139, 19, 62, 121, 245, 246, 61, 41, 229, 231, 188, 32, 251, 16, 62, 99, 146, 126, 189, 187, 189, 100, 190, 176, 157, 141, 191, 110, 36, 41, 191, 83, 3, 123, 62, 26, 21, 150, 189, 164, 11, 235, 188, 15, 204, 14, 191, 117, 33, 70, 62, 225, 109, 171, 190, 206, 110, 160, 190, 214, 194, 39, 190, 18, 111, 70, 62, 128, 40, 139, 189, 170, 123, 8, 62, 126, 200, 52, 61, 120, 63, 209, 188, 28, 92, 87, 188, 96, 241, 125, 190, 216, 108, 23, 62, 21, 238, 21, 189, 205, 254, 152, 190, 11, 244, 154, 190, 196, 178, 7, 61, 173, 103, 59, 189, 208, 163, 84, 62, 115, 223, 179, 61, 247, 30, 85, 61, 136, 33, 126, 61, 187, 32, 215, 61, 184, 121, 185, 190, 29, 117, 17, 190, 149, 114, 174, 190, 156, 118, 61, 191, 47, 75, 238, 62, 209, 140, 54, 61, 209, 161, 16, 190, 196, 86, 221, 62, 243, 217, 90, 189, 184, 228, 100, 191, 40, 181, 141, 191, 181, 145, 28, 62, 252, 10, 173, 60, 234, 53, 117, 189, 193, 140, 51, 190, 242, 84, 50, 190, 5, 236, 0, 62, 99, 185, 22, 190, 88, 213, 136, 189, 75, 29, 147, 189, 35, 66, 197, 189, 189, 106, 192, 61, 211, 194, 149, 189, 209, 89, 9, 60, 124, 120, 23, 190, 135, 41, 36, 62, 185, 117, 97, 189, 167, 12, 160, 188, 252, 62, 29, 62, 110, 181, 193, 189, 2, 185, 210, 189, 217, 118, 156, 189, 215, 106, 161, 189, 227, 24, 174, 61, 240, 253, 51, 190, 161, 199, 140, 61, 237, 168, 198, 189, 170, 141, 247, 189, 111, 98, 75, 190, 39, 72, 191, 61, 207, 110, 238, 189, 89, 182, 39, 190, 81, 34, 179, 61, 254, 166, 60, 188, 118, 161, 49, 190, 67, 210, 140, 61, 99, 205, 138, 61, 42, 163, 211, 61, 231, 75, 246, 189, 118, 161, 145, 189, 154, 126, 99, 62, 160, 226, 10, 60, 158, 226, 203, 190, 49, 243, 57, 189, 245, 195, 230, 190, 207, 207, 57, 190, 50, 205, 148, 62, 241, 101, 167, 61, 35, 157, 217, 62, 90, 69, 7, 63, 122, 140, 206, 191, 164, 130, 70, 61, 134, 194, 140, 190, 33, 17, 144, 61, 197, 140, 133, 190, 30, 78, 220, 189, 231, 124, 238, 190, 224, 96, 207, 62, 127, 232, 13, 190, 112, 16, 239, 191, 139, 16, 72, 62, 103, 188, 162, 60, 253, 128, 151, 190, 213, 221, 105, 62, 45, 151, 0, 189, 73, 239, 177, 190, 188, 235, 227, 61, 13, 120, 79, 61, 251, 47, 23, 190, 158, 189, 31, 62, 152, 168, 114, 189, 237, 198, 130, 190, 249, 160, 1, 62, 108, 99, 161, 186, 25, 123, 118, 190, 60, 119, 96, 61, 181, 251, 112, 62, 228, 130, 55, 189, 75, 123, 15, 59, 134, 26, 143, 190, 149, 247, 163, 61, 93, 144, 131, 62, 78, 2, 68, 189, 178, 137, 17, 62, 251, 208, 139, 62, 112, 126, 141, 189, 195, 238, 191, 190, 47, 255, 156, 190, 111, 237, 187, 189, 123, 206, 147, 62, 172, 229, 187, 62, 152, 82, 92, 62, 193, 242, 131, 62, 1, 10, 85, 60, 50, 250, 160, 61, 28, 239, 76, 190, 128, 100, 95, 191, 126, 207, 159, 61, 135, 251, 18, 62, 55, 195, 230, 61, 122, 219, 9, 191, 190, 60, 10, 62, 107, 119, 26, 62, 21, 23, 34, 190, 27, 52, 134, 61, 14, 243, 49, 189, 80, 195, 107, 190, 248, 255, 147, 189, 0, 130, 178, 189, 44, 50, 84, 190, 136, 34, 10, 190, 80, 240, 128, 188, 56, 235, 107, 189, 232, 47, 28, 190, 53, 161, 181, 61, 56, 148, 110, 61, 103, 184, 0, 190, 255, 61, 58, 190, 95, 29, 20, 190, 136, 61, 96, 190, 172, 208, 169, 61, 236, 217, 55, 190, 57, 163, 166, 61, 40, 130, 202, 189, 108, 251, 160, 61, 252, 127, 250, 189, 53, 160, 207, 61, 8, 169, 172, 189, 54, 50, 40, 190, 6, 168, 236, 61, 93, 99, 227, 187, 164, 5, 99, 60, 113, 145, 145, 189, 207, 97, 124, 61, 41, 26, 34, 61, 38, 26, 61, 60, 55, 47, 72, 61, 195, 9, 63, 62, 218, 79, 23, 62, 140, 54, 97, 190, 147, 231, 52, 62, 167, 198, 75, 59, 85, 123, 171, 189, 60, 145, 189, 189, 194, 47, 71, 62, 218, 186, 39, 61, 39, 233, 98, 62, 205, 235, 199, 61, 82, 176, 239, 61, 93, 20, 87, 62, 167, 102, 49, 60, 119, 64, 109, 62, 146, 60, 11, 63, 243, 65, 202, 190, 50, 120, 157, 190, 84, 222, 209, 189, 195, 174, 156, 62, 224, 133, 132, 190, 148, 118, 235, 60, 49, 11, 45, 189, 76, 52, 180, 61, 146, 168, 36, 61, 18, 35, 46, 190, 179, 133, 32, 190, 153, 174, 171, 62, 39, 72, 42, 190, 68, 114, 222, 189, 113, 234, 68, 61, 202, 209, 162, 61, 99, 192, 27, 62, 14, 45, 34, 190, 75, 41, 101, 189, 95, 37, 130, 190, 2, 233, 196, 62, 250, 2, 109, 190, 72, 146, 156, 189, 244, 224, 162, 60, 98, 212, 96, 190, 208, 155, 246, 189, 138, 251, 56, 62, 176, 52, 164, 62, 182, 56, 157, 62, 90, 12, 148, 190, 16, 166, 0, 190, 158, 211, 181, 189, 142, 145, 115, 190, 251, 247, 169, 62, 7, 240, 114, 62, 100, 44, 40, 190, 29, 21, 92, 189, 1, 142, 223, 62, 253, 184, 152, 190, 224, 19, 130, 191, 27, 54, 127, 190, 237, 25, 47, 61, 237, 130, 56, 62, 215, 95, 78, 190, 250, 117, 124, 61, 96, 71, 1, 63, 137, 182, 1, 63, 252, 85, 21, 59, 47, 227, 114, 189, 5, 182, 7, 191, 138, 127, 248, 62, 79, 187, 125, 191, 123, 5, 29, 61, 227, 66, 189, 61, 150, 119, 133, 190, 110, 252, 230, 187, 107, 140, 55, 62, 174, 67, 187, 190, 54, 39, 115, 190, 100, 129, 215, 189, 196, 239, 221, 62, 85, 24, 240, 190, 134, 169, 23, 190, 233, 79, 119, 190, 234, 211, 191, 61, 4, 90, 224, 62, 35, 239, 139, 189, 193, 167, 133, 191, 92, 51, 131, 62, 243, 26, 108, 189, 67, 208, 0, 190, 39, 220, 211, 190, 248, 240, 170, 62, 30, 149, 154, 62, 42, 202, 94, 62, 188, 29, 145, 190, 47, 213, 15, 190, 122, 16, 222, 62, 206, 9, 207, 62, 120, 122, 78, 190, 136, 104, 68, 190, 34, 53, 189, 190, 190, 12, 88, 62, 130, 38, 82, 191, 168, 217, 148, 62, 45, 182, 162, 62, 230, 115, 126, 62, 46, 199, 54, 189, 220, 173, 19, 190, 206, 125, 155, 190, 19, 22, 113, 61, 167, 201, 78, 58, 54, 82, 99, 62, 36, 183, 131, 190, 207, 161, 103, 190, 62, 28, 175, 189, 109, 156, 34, 62, 245, 133, 234, 62, 221, 190, 29, 62, 143, 154, 23, 191, 147, 182, 104, 62, 214, 82, 185, 186, 99, 183, 220, 61, 229, 124, 34, 189, 90, 239, 134, 62, 29, 42, 246, 59, 26, 164, 119, 62, 56, 247, 62, 190, 10, 29, 37, 190, 28, 125, 206, 190, 31, 22, 3, 62, 89, 68, 166, 189, 95, 13, 4, 62, 67, 216, 156, 189, 28, 239, 153, 190, 117, 36, 142, 62, 237, 110, 199, 62, 231, 74, 245, 188, 195, 201, 52, 188, 2, 130, 134, 62, 54, 53, 142, 190, 86, 79, 175, 188, 37, 129, 27, 62, 57, 106, 82, 188, 23, 176, 0, 190, 184, 66, 181, 61, 32, 155, 164, 62, 178, 87, 96, 62, 225, 33, 179, 189, 122, 84, 87, 190, 183, 24, 54, 62, 99, 99, 199, 62, 58, 99, 142, 191, 108, 28, 1, 190, 253, 167, 105, 62, 209, 45, 12, 190, 89, 121, 213, 190, 82, 236, 108, 62, 185, 176, 44, 62, 73, 231, 95, 62, 52, 255, 246, 61, 238, 209, 4, 63, 231, 31, 62, 188, 167, 162, 254, 189, 232, 5, 73, 61, 174, 180, 30, 191, 48, 56, 134, 62, 21, 162, 191, 189, 40, 112, 18, 61, 2, 176, 175, 190, 104, 89, 162, 59, 157, 155, 105, 190, 16, 130, 19, 61, 130, 166, 140, 62, 46, 126, 51, 60, 144, 223, 169, 190, 176, 171, 94, 190, 242, 229, 71, 190, 145, 65, 197, 191, 4, 192, 149, 189, 231, 5, 19, 191, 94, 226, 225, 62, 75, 140, 141, 61, 58, 241, 223, 190, 63, 122, 120, 62, 139, 14, 185, 61, 186, 158, 50, 62, 119, 58, 50, 190, 87, 234, 142, 62, 81, 244, 126, 61, 18, 11, 185, 61, 8, 18, 103, 191, 82, 157, 240, 61, 183, 212, 13, 189, 27, 8, 32, 62, 228, 52, 130, 188, 33, 199, 139, 190, 247, 28, 178, 189, 91, 247, 17, 62, 158, 237, 176, 60, 146, 199, 191, 61, 23, 61, 26, 188, 199, 34, 248, 189, 94, 27, 248, 190, 133, 86, 90, 191, 17, 117, 140, 189, 194, 99, 219, 61, 178, 99, 162, 190, 74, 247, 147, 189, 184, 138, 211, 61, 251, 179, 102, 61, 192, 133, 100, 62, 126, 35, 25, 190, 195, 248, 41, 62, 142, 63, 191, 188, 241, 25, 164, 190, 21, 27, 45, 63, 163, 115, 215, 187, 87, 245, 45, 61, 216, 214, 250, 189, 197, 196, 198, 61, 152, 191, 137, 62, 50, 136, 137, 62, 60, 111, 162, 61, 254, 18, 17, 62, 10, 231, 157, 191, 71, 185, 143, 62, 22, 130, 50, 62, 234, 64, 3, 63, 140, 62, 171, 60, 117, 242, 1, 191, 76, 25, 14, 62, 238, 116, 207, 61, 146, 123, 181, 190, 0, 64, 40, 191, 198, 238, 138, 62, 6, 37, 156, 190, 133, 250, 61, 190, 58, 26, 168, 61, 101, 91, 242, 61, 120, 101, 144, 189, 35, 71, 74, 190, 75, 63, 198, 62, 234, 83, 227, 189, 202, 62, 240, 190, 255, 253, 137, 190, 29, 12, 177, 189, 250, 249, 220, 62, 242, 168, 197, 191, 148, 20, 132, 61, 209, 78, 136, 61, 114, 18, 161, 189, 198, 86, 28, 191, 201, 253, 109, 58, 138, 3, 139, 61, 152, 144, 151, 62, 10, 169, 175, 60, 5, 245, 233, 190, 118, 23, 189, 62, 20, 3, 209, 60, 134, 169, 42, 62, 98, 154, 26, 189, 186, 182, 223, 189, 103, 230, 121, 62, 130, 159, 44, 188, 57, 138, 162, 190, 251, 48, 31, 191, 17, 201, 100, 62, 10, 121, 245, 190, 49, 52, 105, 62, 72, 48, 144, 61, 208, 26, 219, 189, 110, 115, 219, 188, 17, 127, 254, 59, 145, 13, 186, 62, 227, 106, 45, 62, 22, 74, 14, 191, 99, 8, 38, 190, 1, 159, 50, 62, 189, 178, 57, 62, 124, 85, 35, 191, 235, 238, 17, 62, 70, 252, 220, 61, 62, 187, 63, 189, 150, 44, 131, 190, 42, 157, 25, 62, 85, 133, 174, 189, 205, 196, 144, 62, 231, 226, 70, 61, 199, 94, 48, 62, 189, 1, 62, 189, 252, 103, 169, 190, 76, 155, 247, 60, 5, 20, 104, 191, 142, 85, 21, 62, 227, 97, 45, 62, 150, 91, 87, 189, 64, 51, 127, 62, 106, 51, 240, 189, 172, 246, 175, 61, 90, 151, 107, 189, 2, 6, 57, 62, 117, 117, 136, 190, 154, 68, 213, 62, 174, 76, 32, 62, 215, 251, 155, 190, 180, 61, 35, 191, 225, 133, 203, 189, 181, 68, 87, 190, 234, 66, 192, 62, 203, 118, 93, 62, 77, 149, 254, 61, 156, 234, 52, 62, 199, 46, 228, 62, 122, 35, 142, 190, 228, 70, 52, 191, 193, 221, 218, 61, 224, 96, 129, 62, 52, 182, 21, 62, 91, 73, 95, 191, 104, 28, 188, 60, 107, 40, 15, 191, 209, 95, 159, 62, 145, 69, 198, 60, 129, 35, 226, 61, 143, 49, 173, 61, 168, 201, 189, 189, 213, 237, 123, 62, 195, 120, 139, 62, 187, 10, 132, 190, 44, 123, 36, 190, 186, 224, 18, 62, 55, 253, 185, 190, 73, 198, 10, 62, 236, 145, 138, 62, 81, 60, 137, 190, 66, 170, 63, 190, 200, 68, 208, 61, 48, 38, 161, 62, 6, 105, 213, 61, 153, 158, 38, 190, 54, 173, 61, 61, 66, 178, 212, 61, 201, 77, 126, 61, 245, 252, 144, 190, 122, 156, 191, 189, 163, 225, 129, 62, 50, 149, 59, 62, 66, 103, 163, 190, 234, 228, 184, 62, 112, 58, 6, 62, 152, 187, 135, 189, 38, 122, 161, 188, 117, 123, 198, 190, 179, 0, 213, 62, 153, 204, 139, 60, 253, 61, 2, 190, 88, 218, 160, 62, 192, 69, 125, 62, 34, 75, 251, 189, 198, 107, 250, 190, 223, 89, 155, 61, 98, 58, 157, 62, 76, 200, 121, 190, 60, 167, 18, 188, 78, 165, 177, 185, 74, 241, 174, 61, 50, 201, 253, 61, 114, 254, 113, 189, 2, 233, 38, 62, 237, 15, 171, 62, 36, 220, 108, 189, 221, 1, 126, 62, 235, 120, 14, 191, 107, 89, 156, 190, 62, 8, 53, 191, 45, 249, 58, 62, 50, 222, 74, 61, 148, 215, 3, 62, 51, 48, 191, 62, 226, 227, 73, 61, 26, 24, 10, 191, 71, 13, 101, 191, 40, 65, 223, 62, 125, 60, 11, 62, 211, 87, 154, 62, 228, 223, 255, 62, 233, 2, 70, 190, 241, 14, 130, 189, 143, 184, 121, 190, 86, 61, 206, 61, 82, 225, 115, 190, 191, 122, 35, 190, 69, 80, 130, 190, 137, 213, 20, 62, 18, 148, 85, 190, 203, 31, 150, 190, 213, 103, 176, 61, 147, 112, 90, 61, 56, 36, 179, 61, 23, 97, 109, 189, 181, 88, 65, 62, 170, 43, 155, 190, 193, 133, 152, 189, 178, 171, 112, 189, 93, 114, 182, 61, 91, 14, 35, 62, 138, 40, 227, 190, 21, 23, 158, 62, 195, 111, 7, 63, 143, 43, 168, 190, 250, 63, 78, 189, 180, 30, 219, 61, 1, 245, 150, 62, 76, 22, 168, 62, 144, 111, 32, 190, 129, 225, 70, 60, 179, 254, 56, 190, 223, 243, 103, 188, 127, 75, 76, 62, 179, 164, 216, 61, 3, 72, 217, 189, 192, 179, 77, 189, 166, 175, 10, 62, 120, 194, 127, 60, 54, 252, 30, 191, 229, 131, 31, 189, 193, 46, 230, 189, 118, 148, 112, 61, 135, 78, 14, 189, 255, 187, 106, 62, 80, 61, 202, 190, 132, 135, 25, 191, 106, 236, 103, 58, 12, 173, 51, 62, 175, 200, 68, 61, 16, 80, 231, 189, 136, 211, 134, 62, 104, 187, 65, 62, 97, 155, 200, 189, 198, 186, 176, 60, 246, 20, 64, 189, 88, 11, 164, 190, 235, 120, 107, 61, 164, 211, 56, 60, 19, 106, 68, 62, 216, 211, 193, 62, 142, 133, 122, 61, 253, 140, 252, 189, 160, 115, 154, 190, 197, 29, 135, 189, 195, 117, 89, 187, 153, 164, 132, 61, 4, 75, 187, 61, 47, 56, 126, 190, 10, 186, 111, 62, 213, 95, 153, 62, 24, 226, 236, 189, 210, 183, 6, 190, 29, 187, 38, 62, 200, 33, 131, 190, 109, 43, 135, 62, 127, 253, 200, 189, 105, 173, 62, 190, 22, 117, 177, 60, 221, 203, 62, 62, 128, 177, 24, 63, 137, 50, 215, 62, 116, 92, 102, 189, 143, 127, 217, 190, 72, 127, 132, 62, 17, 191, 60, 62, 50, 147, 70, 191, 226, 150, 44, 188, 131, 31, 203, 60, 230, 184, 66, 62, 73, 108, 80, 190, 21, 66, 33, 190, 58, 124, 30, 190, 104, 137, 140, 61, 152, 175, 93, 61, 249, 203, 98, 189, 231, 54, 141, 189, 121, 35, 248, 188, 183, 149, 89, 190, 41, 173, 185, 187, 253, 10, 18, 190, 249, 138, 157, 61, 147, 53, 10, 190, 233, 156, 197, 189, 61, 252, 163, 60, 56, 210, 159, 190, 19, 139, 179, 61, 139, 132, 214, 61, 2, 153, 157, 61, 71, 128, 159, 189, 3, 84, 199, 188, 202, 120, 253, 60, 250, 29, 30, 62, 103, 67, 97, 189, 141, 246, 242, 60, 57, 198, 51, 189, 7, 193, 91, 190, 204, 62, 254, 188, 108, 35, 185, 61, 129, 218, 235, 61, 38, 202, 12, 189, 117, 59, 219, 189, 147, 23, 237, 189, 197, 241, 171, 190, 108, 53, 172, 61, 180, 179, 137, 189, 35, 15, 93, 61, 90, 251, 179, 191, 34, 234, 78, 61, 217, 33, 111, 62, 130, 187, 225, 60, 235, 104, 251, 187, 101, 58, 61, 62, 37, 166, 236, 189, 38, 39, 14, 191, 70, 131, 50, 190, 195, 241, 62, 190, 243, 227, 164, 62, 150, 75, 142, 62, 52, 58, 222, 190, 106, 14, 141, 62, 135, 149, 252, 61, 81, 43, 6, 190, 109, 197, 16, 62, 80, 105, 182, 62, 171, 231, 183, 62, 176, 155, 154, 190, 56, 112, 240, 61, 215, 183, 43, 190, 250, 99, 72, 62, 40, 24, 214, 191, 161, 70, 7, 60, 13, 91, 157, 189, 240, 79, 63, 62, 178, 59, 104, 190, 179, 69, 149, 189, 156, 23, 77, 62, 32, 48, 173, 61, 87, 159, 35, 190, 194, 102, 188, 190, 65, 122, 171, 62, 240, 145, 172, 61, 78, 17, 169, 61, 39, 252, 165, 62, 255, 234, 192, 61, 176, 76, 34, 190, 167, 179, 130, 190, 218, 215, 39, 189, 64, 82, 187, 189, 33, 179, 174, 189, 144, 243, 19, 190, 74, 18, 75, 190, 104, 91, 219, 61, 150, 85, 167, 190, 82, 180, 153, 190, 93, 193, 208, 188, 187, 232, 174, 62, 1, 123, 35, 191, 108, 210, 52, 61, 25, 88, 141, 190, 249, 221, 42, 191, 28, 165, 167, 190, 246, 29, 153, 62, 223, 124, 225, 190, 194, 207, 109, 190, 111, 205, 101, 62, 6, 171, 107, 190, 168, 188, 13, 191, 123, 177, 51, 191, 77, 205, 172, 62, 109, 105, 43, 190, 223, 173, 220, 62, 170, 233, 0, 63, 247, 56, 185, 189, 120, 20, 77, 61, 167, 157, 0, 191, 72, 117, 254, 62, 99, 39, 238, 190, 6, 217, 227, 190, 155, 199, 138, 61, 144, 184, 47, 61, 157, 187, 149, 189, 128, 86, 165, 62, 215, 33, 64, 190, 66, 147, 145, 188, 16, 114, 240, 189, 179, 153, 168, 62, 33, 73, 0, 191, 25, 197, 104, 190, 80, 163, 151, 189, 16, 37, 68, 61, 92, 156, 204, 62, 23, 216, 14, 190, 121, 114, 168, 189, 214, 101, 19, 63, 35, 142, 151, 60, 136, 30, 111, 189, 227, 106, 48, 191, 130, 73, 180, 62, 65, 0, 240, 61, 34, 58, 185, 61, 4, 184, 40, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 129, 74, 62, 78, 140, 39, 61, 122, 209, 217, 188, 233, 181, 61, 62, 254, 45, 97, 62, 103, 165, 18, 61, 15, 21, 37, 62, 13, 150, 15, 190, 137, 130, 4, 189, 234, 92, 170, 189, 160, 16, 55, 62, 202, 177, 94, 62, 240, 225, 133, 59, 50, 102, 78, 189, 14, 49, 178, 189, 115, 95, 28, 62, 128, 40, 19, 62, 190, 187, 55, 62, 32, 90, 139, 190, 241, 3, 36, 62, 218, 134, 56, 62, 88, 147, 11, 189, 31, 250, 60, 190, 21, 210, 189, 62, 242, 243, 146, 189, 16, 222, 210, 189, 111, 161, 140, 62, 49, 140, 98, 58, 120, 26, 177, 190, 188, 172, 164, 188, 188, 118, 59, 190, 103, 167, 22, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 203, 116, 62, 12, 136, 41, 62, 235, 157, 85, 63, 240, 153, 80, 190, 223, 103, 129, 189, 253, 40, 129, 61, 116, 132, 40, 62, 103, 188, 70, 63, 182, 86, 79, 62, 225, 158, 242, 59, 30, 168, 160, 63, 80, 173, 117, 62, 177, 51, 62, 189, 150, 226, 162, 189, 242, 248, 171, 62, 177, 142, 212, 62, 171, 152, 174, 62, 76, 75, 133, 190, 212, 2, 62, 191, 189, 192, 23, 190, 56, 30, 81, 191, 142, 31, 192, 190, 246, 209, 174, 62, 188, 73, 99, 190, 115, 154, 251, 62, 169, 162, 18, 191, 72, 255, 127, 189, 34, 12, 107, 190, 164, 238, 205, 61, 180, 185, 161, 190, 84, 206, 8, 63, 184, 156, 42, 63, 100, 169, 145, 190, 248, 233, 133, 62, 112, 94, 47, 63, 138, 214, 134, 189, 40, 173, 101, 190, 123, 87, 32, 62, 42, 107, 5, 191, 35, 141, 61, 62, 65, 48, 99, 190, 176, 202, 198, 189, 148, 37, 56, 189, 253, 14, 213, 190, 86, 251, 0, 61, 69, 241, 2, 62, 242, 26, 138, 190, 70, 252, 178, 60, 25, 221, 102, 190, 181, 90, 99, 189, 61, 232, 11, 62, 49, 54, 158, 190, 186, 141, 58, 62, 123, 245, 250, 60, 17, 48, 9, 62, 100, 152, 146, 190, 28, 84, 214, 60, 147, 184, 188, 62, 250, 108, 227, 190, 66, 0, 141, 62, 48, 133, 1, 62, 29, 46, 133, 190, 250, 166, 71, 62, 216, 175, 172, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 112, 88, 187, 168, 155, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 236, 70, 191, 255, 74, 54, 64, 25, 151, 81, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {140, 107, 85, 64, 112, 180, 192, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0048/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}