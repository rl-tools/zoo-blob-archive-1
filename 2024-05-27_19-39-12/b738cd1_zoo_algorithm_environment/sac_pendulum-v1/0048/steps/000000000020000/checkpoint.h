// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 226, 62, 187, 149, 192, 9, 191, 24, 203, 250, 59, 54, 51, 43, 63, 124, 248, 132, 191, 100, 166, 174, 190, 197, 184, 200, 62, 243, 251, 2, 63, 39, 216, 142, 60, 50, 55, 161, 62, 198, 254, 68, 63, 46, 176, 153, 62, 100, 115, 146, 190, 155, 109, 3, 63, 96, 59, 190, 190, 162, 49, 232, 62, 251, 55, 110, 63, 190, 119, 78, 62, 107, 43, 34, 63, 131, 205, 250, 190, 142, 81, 29, 191, 202, 207, 132, 190, 126, 176, 199, 190, 67, 119, 15, 191, 163, 165, 89, 191, 245, 193, 166, 191, 120, 196, 1, 190, 95, 5, 148, 191, 224, 202, 208, 62, 224, 29, 77, 62, 96, 98, 128, 191, 229, 55, 62, 63, 78, 249, 214, 62, 17, 190, 129, 189, 5, 199, 136, 63, 40, 111, 143, 190, 90, 15, 161, 190, 2, 163, 224, 62, 8, 224, 97, 190, 25, 208, 253, 61, 243, 229, 142, 191, 188, 192, 15, 191, 20, 52, 4, 63, 192, 125, 109, 63, 59, 175, 15, 63, 88, 218, 239, 190, 27, 170, 9, 191, 118, 236, 86, 62, 150, 136, 73, 188, 69, 94, 115, 191, 109, 96, 231, 61, 14, 227, 55, 189, 83, 158, 81, 63, 110, 166, 177, 62, 71, 2, 250, 62, 60, 136, 190, 63, 171, 165, 112, 62, 82, 108, 175, 190, 171, 152, 41, 62, 222, 98, 137, 62, 59, 208, 83, 191, 193, 10, 85, 63, 31, 86, 61, 62, 176, 197, 68, 63, 17, 115, 118, 191, 48, 81, 82, 190, 170, 13, 164, 61, 187, 83, 227, 191, 149, 86, 12, 191, 40, 182, 5, 191, 131, 177, 118, 62, 112, 210, 229, 190, 169, 32, 27, 63, 159, 14, 194, 190, 219, 115, 156, 190, 169, 104, 188, 189, 101, 210, 172, 191, 157, 39, 142, 61, 188, 83, 121, 191, 54, 212, 171, 190, 80, 218, 252, 60, 232, 175, 48, 62, 38, 253, 105, 63, 169, 68, 163, 62, 219, 250, 16, 63, 218, 37, 11, 190, 251, 251, 180, 190, 198, 207, 5, 190, 2, 93, 160, 191, 45, 27, 59, 61, 22, 93, 97, 62, 244, 129, 140, 191, 38, 241, 244, 188, 226, 44, 247, 62, 43, 240, 177, 63, 130, 236, 146, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 210, 28, 191, 224, 225, 6, 191, 78, 144, 123, 190, 23, 214, 140, 190, 12, 138, 232, 62, 187, 105, 64, 190, 84, 225, 179, 189, 215, 159, 167, 190, 23, 237, 67, 62, 200, 36, 76, 63, 240, 241, 7, 191, 62, 195, 194, 62, 163, 240, 239, 190, 224, 146, 97, 190, 211, 143, 69, 62, 14, 78, 9, 190, 211, 39, 50, 62, 135, 39, 160, 189, 78, 227, 63, 62, 182, 104, 55, 191, 22, 3, 159, 62, 84, 138, 67, 62, 201, 156, 51, 62, 57, 157, 199, 190, 219, 20, 107, 191, 72, 140, 90, 62, 54, 207, 120, 62, 49, 231, 190, 190, 124, 104, 55, 191, 154, 135, 95, 62, 4, 91, 32, 190, 5, 251, 175, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 179, 162, 60, 53, 250, 104, 62, 208, 66, 149, 62, 4, 234, 164, 189, 181, 217, 3, 190, 159, 228, 242, 60, 35, 222, 80, 62, 192, 177, 136, 190, 178, 137, 248, 190, 69, 255, 23, 62, 153, 254, 8, 62, 134, 161, 77, 62, 90, 203, 32, 59, 244, 144, 194, 190, 118, 188, 24, 189, 169, 222, 173, 190, 113, 210, 250, 190, 35, 21, 237, 61, 190, 145, 18, 61, 237, 215, 198, 190, 152, 71, 161, 62, 26, 98, 199, 62, 23, 117, 125, 190, 235, 65, 148, 190, 242, 202, 230, 61, 60, 245, 4, 190, 129, 62, 42, 61, 20, 254, 38, 190, 204, 117, 20, 62, 198, 129, 248, 188, 70, 33, 94, 190, 96, 143, 134, 190, 115, 35, 19, 190, 92, 201, 123, 62, 189, 18, 61, 61, 29, 62, 240, 190, 27, 32, 101, 61, 136, 50, 203, 190, 30, 142, 69, 189, 115, 221, 76, 190, 19, 14, 207, 189, 122, 207, 9, 62, 66, 86, 2, 191, 150, 60, 240, 61, 233, 224, 187, 187, 49, 14, 89, 61, 206, 1, 162, 189, 131, 11, 133, 62, 42, 198, 227, 61, 106, 141, 15, 191, 146, 92, 31, 191, 68, 135, 238, 190, 102, 15, 26, 190, 37, 238, 240, 62, 93, 85, 95, 62, 210, 21, 58, 61, 141, 145, 205, 188, 74, 109, 156, 62, 109, 111, 221, 189, 237, 27, 69, 191, 183, 168, 137, 189, 36, 19, 190, 62, 152, 183, 76, 62, 43, 91, 43, 191, 250, 167, 100, 61, 126, 220, 175, 63, 154, 108, 12, 190, 41, 185, 26, 190, 31, 243, 129, 189, 24, 86, 118, 191, 8, 203, 142, 62, 116, 103, 226, 190, 233, 9, 153, 189, 110, 210, 144, 62, 126, 47, 170, 61, 95, 89, 254, 61, 51, 155, 2, 63, 124, 234, 99, 191, 110, 104, 56, 190, 72, 205, 165, 190, 162, 24, 105, 62, 96, 21, 7, 190, 121, 194, 73, 191, 118, 105, 176, 189, 31, 251, 21, 62, 32, 16, 18, 63, 178, 118, 151, 190, 247, 23, 101, 61, 209, 185, 71, 63, 225, 40, 234, 189, 9, 28, 69, 62, 147, 186, 16, 190, 199, 45, 18, 63, 227, 40, 145, 62, 245, 21, 185, 62, 207, 204, 103, 191, 107, 254, 175, 61, 137, 210, 239, 190, 100, 90, 2, 62, 12, 199, 91, 62, 56, 221, 136, 62, 105, 90, 87, 62, 10, 15, 128, 190, 232, 113, 89, 62, 168, 35, 254, 60, 195, 244, 98, 189, 58, 170, 163, 189, 207, 30, 39, 62, 211, 212, 129, 190, 121, 239, 17, 62, 221, 91, 96, 62, 173, 54, 31, 190, 16, 245, 160, 188, 138, 223, 103, 61, 115, 208, 197, 62, 177, 178, 150, 62, 167, 14, 244, 61, 154, 233, 134, 190, 34, 210, 11, 190, 98, 240, 98, 62, 217, 241, 87, 191, 247, 160, 188, 189, 131, 62, 133, 61, 175, 225, 113, 61, 170, 136, 171, 190, 10, 211, 77, 60, 27, 87, 201, 189, 133, 164, 139, 62, 225, 60, 192, 60, 69, 242, 161, 190, 114, 51, 199, 189, 59, 129, 74, 188, 108, 24, 15, 62, 169, 90, 236, 188, 246, 232, 140, 189, 187, 53, 93, 62, 50, 153, 149, 188, 151, 120, 18, 190, 250, 195, 238, 190, 6, 255, 28, 190, 28, 217, 206, 190, 163, 75, 133, 62, 233, 199, 17, 62, 0, 63, 170, 190, 192, 34, 171, 190, 242, 14, 138, 60, 238, 120, 70, 62, 64, 76, 173, 190, 249, 87, 1, 189, 150, 247, 150, 60, 75, 33, 44, 189, 204, 21, 101, 62, 200, 10, 197, 190, 15, 32, 97, 189, 150, 49, 105, 188, 177, 3, 13, 190, 54, 170, 203, 189, 117, 112, 39, 62, 40, 45, 117, 62, 150, 223, 177, 189, 79, 91, 155, 188, 197, 220, 45, 62, 220, 212, 181, 61, 193, 101, 16, 190, 220, 60, 15, 190, 227, 164, 32, 62, 83, 15, 11, 190, 26, 172, 14, 62, 33, 240, 221, 61, 249, 60, 39, 190, 58, 79, 192, 61, 92, 174, 135, 189, 2, 90, 8, 190, 92, 242, 45, 61, 130, 176, 150, 189, 96, 54, 184, 61, 86, 26, 66, 189, 98, 197, 202, 61, 2, 188, 1, 190, 206, 132, 225, 61, 49, 200, 250, 189, 209, 1, 155, 188, 161, 174, 49, 190, 109, 8, 25, 62, 236, 106, 203, 61, 4, 169, 252, 189, 6, 113, 253, 61, 221, 181, 155, 189, 240, 96, 209, 189, 188, 50, 181, 187, 151, 28, 62, 61, 147, 103, 16, 62, 67, 125, 221, 61, 197, 250, 138, 190, 253, 209, 20, 62, 225, 132, 196, 61, 3, 188, 9, 190, 147, 112, 153, 190, 131, 245, 117, 62, 143, 188, 106, 190, 52, 237, 100, 190, 220, 144, 38, 62, 102, 222, 132, 61, 15, 225, 103, 61, 216, 7, 140, 62, 181, 81, 56, 191, 47, 76, 138, 189, 186, 96, 102, 190, 105, 223, 69, 61, 47, 27, 76, 190, 149, 235, 65, 190, 193, 208, 11, 190, 229, 4, 35, 190, 127, 47, 201, 62, 210, 234, 130, 190, 249, 182, 167, 190, 23, 63, 52, 190, 177, 89, 216, 188, 163, 87, 31, 62, 215, 239, 125, 190, 36, 110, 44, 190, 199, 62, 121, 62, 198, 15, 19, 62, 234, 103, 63, 190, 77, 42, 64, 61, 84, 79, 111, 189, 142, 197, 2, 63, 77, 180, 212, 61, 231, 88, 6, 63, 114, 180, 198, 62, 235, 144, 45, 191, 109, 12, 65, 62, 162, 15, 162, 190, 197, 48, 53, 190, 121, 36, 146, 190, 26, 174, 4, 61, 196, 78, 139, 61, 122, 168, 16, 191, 109, 242, 68, 62, 167, 106, 40, 62, 76, 13, 55, 62, 183, 184, 0, 61, 205, 189, 82, 62, 7, 225, 161, 189, 6, 57, 63, 190, 77, 79, 215, 191, 138, 74, 59, 191, 63, 179, 177, 62, 69, 114, 151, 189, 16, 190, 235, 56, 252, 169, 37, 191, 0, 18, 130, 62, 22, 63, 91, 191, 6, 224, 153, 190, 4, 212, 117, 190, 190, 153, 135, 62, 128, 40, 139, 189, 7, 4, 14, 62, 6, 17, 93, 61, 165, 255, 111, 60, 217, 193, 168, 60, 237, 177, 94, 190, 84, 158, 46, 62, 21, 147, 251, 186, 179, 9, 191, 190, 113, 172, 187, 190, 196, 178, 7, 61, 255, 122, 2, 188, 118, 25, 118, 62, 168, 97, 248, 61, 88, 151, 90, 61, 117, 227, 6, 189, 84, 27, 21, 61, 179, 192, 221, 190, 131, 62, 14, 190, 149, 114, 174, 190, 255, 189, 61, 191, 58, 56, 238, 62, 129, 249, 129, 61, 183, 120, 220, 189, 219, 166, 250, 62, 161, 144, 223, 189, 28, 120, 136, 191, 195, 205, 142, 191, 170, 35, 77, 62, 28, 21, 38, 59, 173, 71, 144, 189, 86, 20, 29, 190, 242, 84, 50, 190, 5, 236, 0, 62, 99, 185, 22, 190, 88, 213, 136, 189, 75, 29, 147, 189, 35, 66, 197, 189, 189, 106, 192, 61, 211, 194, 149, 189, 209, 89, 9, 60, 124, 120, 23, 190, 135, 41, 36, 62, 185, 117, 97, 189, 167, 12, 160, 188, 252, 62, 29, 62, 110, 181, 193, 189, 2, 185, 210, 189, 217, 118, 156, 189, 215, 106, 161, 189, 227, 24, 174, 61, 240, 253, 51, 190, 161, 199, 140, 61, 237, 168, 198, 189, 170, 141, 247, 189, 111, 98, 75, 190, 39, 72, 191, 61, 207, 110, 238, 189, 89, 182, 39, 190, 81, 34, 179, 61, 254, 166, 60, 188, 118, 161, 49, 190, 67, 210, 140, 61, 99, 205, 138, 61, 42, 163, 211, 61, 231, 75, 246, 189, 143, 13, 76, 189, 85, 64, 27, 62, 53, 241, 9, 62, 25, 113, 9, 191, 115, 18, 141, 190, 227, 52, 210, 190, 230, 96, 162, 189, 12, 35, 184, 62, 228, 86, 163, 61, 92, 59, 9, 63, 123, 195, 37, 63, 114, 107, 214, 191, 123, 231, 140, 60, 127, 131, 97, 190, 240, 147, 183, 61, 253, 154, 133, 190, 202, 3, 21, 190, 118, 64, 239, 190, 173, 153, 237, 62, 78, 219, 178, 190, 142, 124, 244, 191, 128, 81, 167, 62, 103, 188, 162, 60, 129, 84, 128, 190, 85, 249, 157, 62, 161, 28, 169, 189, 103, 196, 129, 191, 189, 213, 26, 62, 204, 94, 214, 188, 143, 220, 81, 190, 158, 189, 31, 62, 147, 69, 199, 189, 228, 223, 99, 190, 143, 78, 31, 62, 68, 224, 112, 187, 248, 69, 81, 190, 227, 41, 60, 61, 86, 208, 81, 62, 212, 87, 136, 189, 83, 69, 63, 61, 169, 50, 217, 190, 243, 236, 205, 61, 85, 131, 112, 62, 215, 146, 134, 189, 209, 147, 42, 62, 161, 158, 200, 62, 12, 170, 131, 188, 40, 118, 190, 190, 199, 56, 149, 190, 182, 74, 56, 190, 83, 224, 28, 62, 98, 164, 193, 62, 154, 218, 67, 62, 14, 248, 95, 62, 148, 82, 145, 61, 124, 214, 16, 62, 45, 255, 141, 190, 221, 89, 108, 191, 209, 191, 224, 61, 111, 16, 59, 62, 39, 235, 26, 62, 109, 19, 2, 191, 190, 60, 10, 62, 83, 234, 142, 61, 124, 105, 81, 190, 63, 56, 197, 61, 63, 73, 38, 190, 191, 244, 91, 190, 197, 0, 43, 190, 153, 23, 51, 190, 216, 33, 196, 190, 111, 33, 78, 190, 31, 165, 218, 188, 109, 131, 215, 189, 232, 47, 28, 190, 251, 221, 170, 188, 244, 45, 220, 61, 62, 246, 71, 190, 209, 227, 25, 190, 107, 83, 244, 189, 81, 140, 50, 190, 196, 98, 149, 61, 202, 73, 62, 190, 66, 251, 226, 61, 213, 5, 14, 190, 92, 174, 130, 61, 240, 54, 44, 190, 122, 158, 249, 61, 211, 7, 244, 189, 11, 173, 208, 189, 242, 30, 125, 61, 199, 89, 8, 60, 248, 137, 192, 60, 21, 153, 59, 189, 207, 97, 124, 61, 214, 157, 57, 190, 169, 61, 211, 188, 166, 15, 67, 62, 81, 50, 32, 62, 126, 51, 96, 62, 32, 108, 144, 190, 225, 235, 25, 62, 32, 211, 3, 188, 171, 246, 152, 189, 98, 221, 185, 188, 91, 131, 32, 62, 250, 229, 194, 60, 157, 167, 63, 62, 8, 148, 1, 62, 119, 222, 12, 62, 92, 29, 61, 62, 150, 110, 137, 61, 108, 247, 132, 62, 16, 91, 42, 63, 181, 173, 201, 190, 174, 65, 204, 190, 107, 246, 101, 190, 248, 240, 143, 62, 158, 99, 170, 190, 92, 84, 81, 186, 130, 254, 196, 59, 137, 71, 38, 62, 219, 247, 151, 188, 150, 250, 102, 190, 213, 127, 72, 190, 53, 222, 199, 62, 39, 72, 42, 190, 135, 58, 118, 190, 196, 104, 42, 61, 175, 126, 232, 188, 202, 233, 239, 61, 129, 253, 37, 190, 151, 151, 212, 189, 96, 124, 236, 190, 36, 217, 211, 62, 178, 118, 46, 190, 0, 29, 131, 190, 28, 181, 136, 60, 228, 101, 237, 190, 84, 123, 119, 190, 207, 19, 38, 62, 229, 127, 182, 62, 105, 112, 151, 62, 138, 152, 218, 190, 136, 101, 10, 190, 158, 68, 130, 190, 206, 249, 147, 190, 210, 198, 166, 62, 210, 76, 79, 62, 129, 238, 246, 190, 189, 219, 246, 189, 6, 81, 230, 62, 225, 124, 141, 190, 127, 61, 154, 191, 135, 197, 206, 190, 178, 188, 89, 61, 24, 240, 60, 62, 90, 1, 92, 190, 250, 117, 124, 61, 157, 133, 231, 62, 214, 87, 1, 63, 4, 65, 148, 189, 42, 206, 142, 189, 89, 208, 3, 191, 221, 178, 242, 62, 84, 205, 139, 191, 73, 25, 26, 62, 137, 139, 78, 62, 109, 243, 216, 190, 147, 81, 109, 59, 52, 15, 55, 62, 46, 250, 217, 190, 142, 229, 101, 190, 106, 141, 8, 188, 87, 18, 253, 62, 103, 81, 0, 191, 238, 54, 15, 190, 168, 141, 176, 190, 211, 221, 103, 61, 19, 154, 231, 62, 70, 42, 123, 189, 204, 192, 164, 191, 210, 75, 90, 62, 168, 249, 248, 60, 64, 122, 8, 189, 60, 120, 255, 190, 0, 51, 145, 62, 149, 129, 180, 62, 216, 205, 135, 62, 29, 242, 141, 190, 47, 213, 15, 190, 98, 77, 176, 62, 208, 92, 213, 62, 219, 107, 176, 190, 233, 21, 27, 190, 77, 120, 195, 190, 44, 70, 81, 62, 162, 47, 93, 191, 247, 224, 234, 62, 72, 135, 214, 62, 212, 149, 97, 62, 219, 29, 215, 187, 97, 122, 153, 190, 110, 84, 159, 190, 61, 229, 27, 61, 139, 143, 117, 61, 233, 77, 94, 62, 146, 149, 171, 190, 227, 114, 103, 190, 102, 12, 37, 190, 190, 130, 94, 62, 225, 155, 237, 62, 168, 163, 46, 62, 189, 61, 57, 191, 242, 82, 68, 62, 67, 62, 13, 61, 252, 116, 134, 62, 3, 251, 15, 190, 159, 73, 119, 62, 246, 135, 19, 61, 36, 48, 96, 62, 108, 8, 75, 190, 10, 29, 37, 190, 155, 230, 179, 190, 251, 158, 22, 62, 216, 160, 30, 61, 212, 116, 30, 62, 248, 26, 116, 189, 196, 130, 132, 190, 172, 84, 154, 62, 206, 86, 198, 62, 200, 238, 181, 188, 112, 13, 193, 61, 47, 109, 141, 62, 61, 99, 143, 190, 189, 216, 138, 60, 2, 186, 49, 62, 67, 107, 165, 187, 6, 243, 127, 189, 158, 127, 44, 62, 122, 44, 174, 62, 93, 126, 176, 62, 59, 244, 47, 189, 14, 213, 76, 190, 201, 77, 65, 62, 165, 65, 203, 62, 178, 118, 147, 191, 39, 252, 149, 189, 252, 191, 108, 62, 60, 151, 130, 189, 160, 243, 215, 190, 212, 153, 127, 62, 149, 108, 97, 62, 13, 169, 114, 62, 52, 255, 246, 61, 39, 208, 8, 63, 43, 3, 157, 188, 148, 114, 13, 190, 8, 114, 194, 59, 126, 16, 23, 191, 237, 149, 114, 62, 88, 182, 238, 189, 37, 148, 137, 61, 53, 83, 237, 190, 166, 123, 166, 59, 147, 128, 165, 190, 59, 149, 163, 189, 9, 231, 135, 62, 247, 126, 133, 61, 214, 188, 194, 190, 92, 129, 0, 190, 45, 164, 124, 190, 69, 60, 195, 191, 128, 154, 233, 189, 191, 196, 37, 191, 197, 239, 238, 62, 0, 191, 151, 61, 175, 38, 249, 190, 18, 255, 13, 62, 101, 5, 110, 62, 226, 193, 62, 62, 16, 190, 82, 190, 176, 50, 55, 62, 118, 69, 60, 62, 120, 206, 47, 62, 219, 243, 84, 191, 82, 157, 240, 61, 33, 120, 173, 188, 133, 253, 53, 62, 40, 82, 167, 61, 197, 83, 101, 190, 104, 202, 180, 189, 61, 21, 42, 62, 130, 46, 167, 61, 125, 93, 18, 61, 164, 101, 232, 60, 49, 61, 114, 189, 152, 106, 234, 190, 173, 78, 111, 191, 71, 55, 56, 59, 217, 140, 239, 61, 216, 101, 139, 190, 237, 226, 226, 188, 44, 45, 53, 62, 175, 164, 94, 61, 3, 18, 143, 62, 243, 49, 232, 189, 118, 159, 25, 62, 203, 158, 141, 189, 106, 115, 147, 190, 3, 16, 52, 63, 190, 65, 129, 60, 176, 193, 162, 60, 89, 102, 195, 189, 191, 34, 85, 62, 143, 215, 133, 62, 111, 38, 141, 62, 60, 119, 174, 61, 254, 18, 17, 62, 180, 94, 160, 191, 116, 28, 145, 62, 101, 140, 45, 62, 9, 55, 254, 62, 76, 252, 167, 59, 48, 232, 0, 191, 127, 2, 1, 62, 252, 79, 235, 61, 35, 246, 239, 190, 73, 11, 90, 191, 53, 182, 126, 62, 40, 63, 155, 190, 71, 213, 78, 190, 13, 51, 171, 61, 228, 40, 132, 61, 247, 168, 84, 189, 13, 109, 131, 190, 142, 19, 194, 62, 181, 121, 71, 190, 118, 118, 45, 191, 79, 218, 133, 190, 98, 251, 210, 189, 115, 183, 216, 62, 128, 252, 205, 191, 67, 164, 92, 61, 24, 202, 15, 62, 250, 199, 45, 190, 234, 5, 42, 191, 1, 247, 78, 188, 23, 90, 107, 61, 213, 217, 143, 62, 10, 169, 175, 60, 11, 51, 212, 190, 14, 246, 196, 62, 162, 115, 109, 60, 144, 35, 74, 62, 20, 89, 94, 189, 135, 5, 143, 189, 55, 218, 139, 62, 64, 82, 12, 61, 5, 201, 228, 190, 75, 248, 82, 191, 54, 29, 113, 62, 137, 215, 244, 190, 26, 165, 136, 62, 29, 23, 126, 61, 125, 24, 98, 190, 186, 244, 232, 59, 93, 69, 81, 189, 4, 242, 187, 62, 43, 138, 58, 61, 237, 150, 58, 191, 239, 70, 24, 190, 108, 45, 67, 62, 189, 216, 75, 62, 5, 8, 45, 191, 183, 118, 52, 62, 131, 28, 26, 62, 28, 225, 30, 190, 66, 180, 134, 190, 121, 240, 29, 62, 223, 86, 160, 189, 65, 47, 138, 62, 231, 226, 70, 61, 153, 70, 229, 61, 189, 152, 141, 189, 91, 219, 169, 190, 48, 61, 53, 188, 95, 209, 131, 191, 11, 108, 193, 61, 203, 28, 10, 62, 251, 250, 62, 189, 73, 44, 144, 62, 70, 87, 143, 190, 56, 229, 58, 61, 157, 1, 139, 189, 159, 89, 27, 62, 232, 210, 120, 190, 18, 248, 8, 63, 58, 110, 105, 62, 247, 93, 159, 190, 151, 139, 77, 191, 63, 63, 128, 190, 201, 65, 215, 190, 241, 158, 179, 62, 53, 2, 63, 62, 89, 58, 195, 61, 84, 241, 92, 62, 178, 157, 0, 63, 109, 236, 153, 190, 47, 220, 64, 191, 68, 58, 244, 61, 208, 121, 159, 62, 94, 199, 67, 62, 178, 151, 120, 191, 104, 28, 188, 60, 98, 22, 12, 191, 112, 8, 179, 62, 209, 64, 12, 62, 3, 106, 25, 62, 109, 243, 201, 61, 74, 15, 71, 189, 33, 233, 135, 62, 86, 48, 130, 62, 192, 172, 96, 190, 106, 174, 113, 189, 109, 130, 53, 62, 255, 106, 189, 190, 232, 158, 40, 62, 232, 88, 149, 62, 24, 87, 108, 190, 64, 219, 254, 189, 203, 27, 59, 62, 137, 185, 171, 62, 17, 247, 81, 62, 171, 230, 197, 189, 186, 46, 72, 61, 215, 233, 173, 61, 172, 64, 139, 61, 146, 226, 155, 190, 39, 81, 33, 189, 223, 205, 135, 62, 141, 89, 113, 62, 33, 225, 156, 190, 119, 108, 192, 62, 183, 239, 42, 62, 34, 212, 68, 189, 38, 122, 161, 188, 248, 22, 151, 190, 227, 36, 225, 62, 5, 121, 243, 188, 241, 72, 49, 60, 43, 162, 138, 62, 112, 99, 110, 62, 80, 252, 230, 60, 151, 190, 139, 190, 46, 226, 13, 62, 63, 39, 149, 62, 253, 10, 22, 190, 149, 112, 148, 61, 18, 104, 61, 62, 152, 112, 68, 61, 80, 139, 26, 62, 121, 216, 144, 189, 92, 129, 47, 62, 40, 47, 171, 62, 128, 112, 112, 189, 157, 40, 155, 62, 111, 202, 36, 191, 104, 45, 102, 190, 152, 65, 12, 191, 136, 27, 80, 62, 131, 14, 118, 61, 16, 28, 106, 62, 49, 83, 184, 62, 108, 154, 12, 62, 146, 218, 10, 191, 16, 121, 141, 191, 151, 188, 215, 62, 125, 60, 11, 62, 153, 66, 176, 62, 149, 216, 217, 62, 135, 162, 152, 189, 90, 135, 43, 190, 39, 8, 123, 190, 212, 35, 124, 61, 29, 166, 88, 190, 231, 130, 79, 190, 165, 253, 170, 190, 31, 89, 173, 61, 63, 157, 166, 190, 99, 12, 202, 190, 220, 45, 162, 61, 70, 238, 213, 61, 203, 189, 119, 61, 16, 101, 133, 61, 143, 226, 92, 62, 167, 212, 161, 190, 87, 185, 127, 189, 192, 75, 83, 190, 224, 127, 200, 61, 190, 86, 33, 62, 22, 210, 207, 190, 106, 208, 96, 62, 205, 20, 29, 63, 170, 89, 208, 190, 176, 106, 142, 188, 8, 246, 45, 61, 114, 66, 191, 62, 215, 179, 228, 62, 176, 52, 46, 190, 129, 225, 70, 60, 245, 206, 84, 190, 191, 40, 144, 61, 15, 94, 48, 62, 128, 50, 19, 62, 62, 191, 253, 189, 74, 75, 152, 188, 34, 77, 188, 61, 169, 33, 155, 188, 79, 248, 43, 191, 191, 45, 145, 189, 189, 31, 102, 189, 205, 167, 150, 188, 53, 77, 19, 189, 225, 40, 34, 62, 171, 138, 163, 190, 101, 255, 21, 191, 195, 112, 105, 189, 162, 158, 52, 62, 173, 11, 134, 189, 216, 186, 44, 190, 52, 142, 126, 62, 8, 236, 0, 62, 100, 211, 50, 190, 71, 150, 86, 61, 97, 224, 179, 188, 73, 73, 229, 190, 55, 136, 251, 188, 76, 10, 118, 61, 254, 44, 42, 62, 183, 108, 171, 62, 253, 42, 65, 61, 253, 140, 252, 189, 173, 101, 161, 190, 93, 74, 16, 190, 244, 105, 58, 62, 97, 46, 82, 61, 119, 145, 6, 62, 5, 232, 135, 190, 220, 54, 138, 62, 212, 175, 189, 62, 247, 242, 198, 189, 171, 183, 37, 189, 99, 70, 236, 61, 124, 50, 128, 190, 8, 208, 161, 62, 31, 101, 172, 188, 190, 160, 245, 189, 157, 5, 233, 61, 223, 238, 153, 62, 92, 189, 22, 63, 200, 21, 24, 63, 136, 89, 80, 189, 123, 49, 243, 190, 67, 9, 123, 62, 0, 119, 80, 62, 40, 61, 81, 191, 178, 26, 209, 61, 235, 47, 101, 61, 202, 248, 151, 62, 133, 4, 113, 190, 55, 131, 171, 189, 169, 18, 112, 187, 158, 95, 209, 61, 152, 175, 93, 61, 249, 203, 98, 189, 231, 54, 141, 189, 121, 35, 248, 188, 183, 149, 89, 190, 41, 173, 185, 187, 253, 10, 18, 190, 249, 138, 157, 61, 147, 53, 10, 190, 233, 156, 197, 189, 61, 252, 163, 60, 56, 210, 159, 190, 19, 139, 179, 61, 139, 132, 214, 61, 2, 153, 157, 61, 71, 128, 159, 189, 3, 84, 199, 188, 202, 120, 253, 60, 250, 29, 30, 62, 103, 67, 97, 189, 141, 246, 242, 60, 57, 198, 51, 189, 7, 193, 91, 190, 204, 62, 254, 188, 108, 35, 185, 61, 129, 218, 235, 61, 38, 202, 12, 189, 117, 59, 219, 189, 147, 23, 237, 189, 197, 241, 171, 190, 108, 53, 172, 61, 180, 179, 137, 189, 35, 15, 93, 61, 249, 216, 181, 191, 76, 155, 183, 61, 158, 111, 179, 62, 217, 174, 71, 61, 54, 108, 15, 60, 176, 206, 88, 62, 14, 86, 241, 189, 160, 253, 51, 191, 240, 188, 60, 190, 172, 225, 1, 190, 218, 71, 174, 62, 159, 89, 143, 62, 203, 237, 203, 190, 79, 246, 151, 62, 196, 111, 31, 62, 113, 145, 165, 189, 33, 52, 73, 62, 74, 219, 190, 62, 173, 108, 214, 62, 171, 202, 163, 190, 246, 200, 238, 61, 14, 60, 90, 190, 163, 29, 53, 62, 124, 10, 205, 191, 236, 40, 230, 60, 35, 210, 243, 189, 222, 36, 115, 62, 241, 157, 19, 190, 62, 152, 145, 189, 238, 177, 95, 62, 219, 73, 216, 61, 87, 159, 35, 190, 253, 155, 220, 190, 10, 187, 107, 62, 162, 228, 39, 62, 117, 142, 183, 61, 100, 208, 165, 62, 58, 210, 57, 190, 115, 66, 43, 189, 111, 170, 129, 190, 34, 251, 83, 61, 37, 24, 250, 189, 71, 247, 247, 189, 134, 228, 165, 61, 211, 119, 116, 190, 65, 201, 237, 61, 164, 172, 133, 190, 122, 75, 95, 190, 39, 175, 155, 61, 1, 202, 162, 62, 133, 56, 25, 191, 151, 178, 226, 61, 238, 69, 53, 191, 205, 232, 51, 191, 52, 116, 206, 189, 76, 21, 153, 62, 140, 40, 214, 190, 109, 175, 124, 190, 233, 13, 169, 62, 230, 243, 223, 190, 45, 20, 13, 191, 1, 83, 87, 191, 227, 233, 177, 62, 109, 105, 43, 190, 249, 188, 199, 62, 180, 31, 0, 63, 186, 93, 181, 189, 241, 135, 110, 61, 58, 173, 245, 190, 144, 234, 255, 62, 117, 66, 236, 190, 60, 16, 12, 191, 27, 205, 24, 62, 175, 224, 89, 189, 48, 46, 72, 189, 65, 139, 178, 62, 218, 126, 86, 190, 205, 46, 134, 60, 53, 119, 31, 188, 93, 123, 206, 62, 83, 181, 207, 190, 154, 232, 105, 190, 134, 73, 145, 189, 201, 76, 232, 188, 160, 187, 211, 62, 56, 102, 23, 190, 124, 244, 131, 189, 187, 90, 24, 63, 216, 1, 224, 61, 80, 176, 88, 190, 27, 230, 42, 191, 126, 83, 187, 62, 8, 157, 44, 62, 195, 137, 30, 62, 30, 53, 37, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 194, 61, 62, 0, 233, 197, 60, 126, 40, 248, 188, 103, 90, 56, 62, 252, 69, 81, 62, 103, 165, 18, 61, 176, 73, 20, 62, 241, 171, 4, 190, 194, 64, 219, 188, 234, 92, 170, 189, 201, 52, 104, 62, 183, 185, 114, 62, 48, 80, 35, 61, 69, 247, 235, 189, 163, 62, 172, 189, 232, 64, 50, 62, 107, 211, 42, 62, 160, 52, 59, 62, 236, 53, 152, 190, 190, 240, 19, 62, 111, 153, 57, 62, 96, 77, 245, 188, 180, 33, 72, 190, 103, 16, 191, 62, 248, 194, 80, 189, 189, 153, 202, 189, 45, 244, 130, 62, 23, 221, 94, 189, 120, 26, 177, 190, 94, 237, 189, 188, 217, 83, 158, 190, 13, 184, 44, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 96, 82, 62, 96, 65, 41, 62, 133, 45, 108, 63, 153, 255, 70, 190, 110, 112, 99, 189, 253, 40, 129, 61, 151, 126, 19, 62, 244, 208, 137, 63, 11, 239, 68, 62, 225, 158, 242, 59, 116, 194, 195, 63, 255, 167, 110, 62, 195, 168, 168, 189, 110, 110, 35, 190, 110, 8, 192, 62, 15, 252, 226, 62, 140, 39, 193, 62, 45, 106, 129, 190, 72, 151, 72, 191, 154, 90, 240, 189, 218, 101, 73, 191, 193, 179, 200, 190, 31, 33, 191, 62, 96, 101, 106, 190, 72, 211, 246, 62, 8, 136, 51, 191, 85, 205, 84, 189, 136, 168, 146, 190, 164, 238, 205, 61, 215, 237, 170, 190, 248, 99, 32, 63, 28, 183, 40, 63, 253, 175, 154, 190, 6, 180, 84, 62, 138, 12, 63, 63, 148, 136, 234, 189, 31, 61, 214, 189, 123, 87, 32, 62, 232, 113, 167, 190, 196, 142, 97, 62, 154, 136, 133, 190, 176, 202, 198, 189, 208, 233, 217, 189, 44, 43, 198, 190, 164, 221, 205, 61, 238, 182, 25, 62, 12, 38, 161, 190, 192, 226, 46, 61, 132, 150, 123, 190, 22, 215, 126, 189, 191, 115, 154, 61, 34, 47, 118, 190, 136, 193, 190, 61, 9, 35, 162, 59, 227, 54, 204, 61, 115, 117, 152, 190, 231, 96, 131, 60, 147, 47, 121, 62, 86, 69, 213, 190, 106, 203, 167, 62, 48, 133, 1, 62, 4, 111, 136, 190, 249, 16, 85, 62, 84, 247, 14, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 43, 42, 188, 22, 254, 153, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {97, 165, 6, 191, 104, 74, 14, 63, 247, 83, 194, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {142, 17, 77, 64, 231, 197, 111, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0048/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}