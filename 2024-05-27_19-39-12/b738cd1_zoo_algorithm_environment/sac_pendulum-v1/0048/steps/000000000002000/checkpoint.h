// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 115, 88, 189, 178, 102, 8, 191, 254, 173, 32, 188, 229, 164, 139, 62, 161, 206, 184, 190, 100, 23, 155, 190, 40, 67, 3, 63, 133, 166, 123, 62, 20, 173, 171, 189, 133, 222, 17, 63, 104, 124, 62, 62, 5, 0, 213, 62, 70, 150, 251, 189, 56, 195, 13, 63, 52, 166, 167, 190, 64, 119, 131, 62, 193, 3, 141, 62, 114, 55, 35, 62, 181, 244, 250, 62, 59, 54, 36, 189, 30, 21, 33, 191, 80, 110, 135, 190, 245, 40, 224, 62, 169, 87, 155, 190, 210, 51, 150, 190, 173, 158, 78, 191, 191, 100, 128, 190, 61, 227, 52, 191, 55, 239, 110, 62, 126, 179, 207, 62, 135, 179, 41, 191, 129, 44, 207, 61, 84, 193, 240, 62, 184, 97, 73, 60, 92, 14, 86, 63, 247, 59, 77, 190, 62, 181, 248, 187, 186, 58, 5, 62, 36, 239, 75, 190, 47, 108, 246, 189, 39, 155, 218, 61, 64, 82, 205, 190, 163, 180, 77, 63, 173, 161, 201, 62, 32, 172, 250, 62, 61, 53, 6, 62, 229, 105, 81, 190, 176, 216, 72, 62, 251, 0, 229, 190, 47, 101, 85, 191, 13, 93, 212, 61, 237, 136, 134, 62, 64, 50, 151, 62, 43, 209, 171, 62, 24, 240, 247, 62, 14, 223, 63, 63, 190, 27, 136, 62, 248, 38, 53, 190, 173, 1, 183, 189, 1, 216, 131, 62, 18, 119, 18, 191, 38, 171, 228, 62, 200, 81, 54, 62, 217, 229, 164, 62, 16, 205, 51, 191, 184, 166, 180, 188, 22, 90, 30, 62, 82, 200, 185, 190, 135, 200, 241, 190, 77, 37, 8, 191, 245, 155, 80, 63, 61, 194, 31, 190, 125, 188, 61, 190, 15, 9, 249, 190, 65, 31, 73, 190, 139, 173, 181, 62, 133, 255, 16, 191, 194, 221, 140, 62, 233, 192, 32, 191, 88, 21, 101, 190, 157, 202, 13, 62, 234, 138, 214, 186, 186, 204, 225, 62, 250, 84, 138, 62, 190, 91, 6, 62, 112, 251, 229, 60, 14, 60, 177, 190, 90, 170, 6, 59, 191, 41, 76, 191, 168, 136, 163, 59, 179, 82, 45, 190, 186, 68, 39, 191, 19, 240, 234, 189, 87, 143, 148, 62, 251, 108, 51, 63, 187, 128, 146, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 1, 24, 191, 217, 180, 248, 190, 172, 170, 37, 190, 117, 223, 204, 61, 75, 176, 11, 63, 117, 152, 68, 190, 157, 179, 238, 189, 3, 231, 114, 60, 94, 162, 192, 62, 143, 194, 86, 63, 195, 101, 178, 190, 44, 33, 23, 63, 237, 9, 119, 190, 50, 109, 13, 62, 245, 255, 225, 62, 221, 184, 148, 190, 18, 5, 221, 187, 255, 41, 31, 190, 120, 155, 133, 62, 198, 185, 22, 191, 92, 38, 219, 61, 2, 19, 163, 62, 180, 184, 2, 63, 116, 148, 131, 190, 115, 60, 193, 190, 136, 25, 129, 189, 128, 52, 57, 62, 32, 18, 206, 190, 65, 219, 193, 190, 170, 147, 251, 62, 23, 5, 242, 61, 18, 86, 254, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 179, 162, 60, 199, 126, 241, 189, 144, 49, 112, 62, 145, 141, 151, 189, 251, 145, 32, 189, 167, 91, 220, 61, 232, 54, 101, 62, 27, 202, 21, 189, 165, 8, 168, 189, 35, 1, 93, 61, 192, 211, 13, 189, 92, 250, 19, 62, 160, 190, 233, 61, 132, 34, 140, 189, 141, 205, 179, 189, 202, 97, 15, 190, 163, 141, 23, 190, 252, 109, 235, 61, 205, 13, 66, 61, 64, 52, 207, 189, 62, 76, 185, 61, 227, 20, 132, 62, 226, 206, 234, 189, 226, 33, 16, 190, 159, 227, 152, 61, 208, 125, 79, 61, 168, 164, 119, 61, 218, 107, 43, 190, 22, 176, 6, 62, 173, 217, 106, 61, 128, 110, 116, 189, 83, 139, 37, 190, 132, 191, 21, 190, 169, 74, 154, 62, 203, 112, 146, 190, 201, 58, 229, 189, 227, 0, 255, 61, 18, 41, 180, 61, 89, 104, 30, 189, 91, 51, 16, 190, 178, 150, 151, 188, 163, 28, 17, 62, 32, 107, 107, 61, 150, 228, 5, 62, 63, 196, 182, 60, 89, 34, 246, 61, 38, 11, 33, 190, 195, 70, 188, 61, 145, 204, 112, 187, 243, 166, 14, 189, 5, 4, 170, 190, 251, 162, 190, 189, 91, 176, 128, 62, 46, 80, 129, 61, 198, 47, 11, 62, 65, 165, 70, 61, 255, 251, 211, 189, 90, 145, 15, 61, 151, 242, 245, 188, 147, 121, 20, 190, 42, 61, 170, 189, 76, 207, 6, 62, 115, 20, 12, 59, 153, 163, 131, 190, 156, 58, 89, 61, 218, 200, 209, 61, 22, 158, 54, 190, 15, 202, 187, 189, 87, 92, 182, 189, 240, 203, 249, 189, 172, 144, 13, 190, 23, 68, 184, 190, 75, 204, 192, 61, 197, 249, 129, 62, 246, 140, 128, 189, 20, 106, 181, 189, 92, 116, 90, 190, 68, 152, 177, 190, 156, 90, 15, 190, 108, 102, 69, 190, 143, 86, 180, 62, 27, 251, 162, 189, 100, 139, 74, 189, 109, 224, 88, 189, 52, 215, 44, 187, 83, 68, 47, 60, 210, 66, 91, 189, 230, 76, 99, 190, 10, 255, 64, 60, 204, 133, 147, 189, 202, 78, 132, 62, 75, 33, 27, 189, 185, 23, 186, 189, 240, 212, 151, 62, 118, 9, 89, 62, 75, 5, 149, 189, 253, 108, 201, 61, 185, 197, 56, 189, 203, 237, 111, 60, 76, 123, 167, 61, 92, 187, 124, 62, 173, 23, 9, 62, 89, 136, 103, 190, 240, 35, 47, 62, 25, 141, 118, 188, 90, 204, 51, 62, 184, 19, 234, 188, 179, 198, 49, 62, 62, 73, 96, 190, 29, 41, 248, 61, 231, 83, 65, 62, 186, 119, 157, 188, 112, 158, 183, 188, 46, 221, 131, 188, 95, 4, 115, 62, 114, 216, 4, 189, 150, 156, 77, 62, 49, 240, 119, 189, 53, 248, 178, 189, 2, 132, 120, 62, 99, 69, 103, 188, 105, 81, 5, 61, 21, 21, 158, 61, 231, 94, 126, 60, 39, 236, 115, 190, 16, 175, 5, 190, 122, 173, 154, 190, 81, 92, 76, 62, 88, 61, 6, 61, 208, 150, 5, 190, 18, 29, 203, 189, 206, 153, 157, 188, 203, 135, 11, 62, 119, 179, 26, 188, 132, 54, 109, 189, 230, 133, 45, 62, 31, 57, 112, 190, 91, 11, 56, 61, 118, 73, 134, 189, 252, 102, 160, 189, 86, 208, 131, 190, 134, 211, 24, 62, 69, 75, 47, 62, 32, 167, 55, 190, 101, 204, 19, 190, 50, 208, 106, 61, 198, 101, 24, 62, 78, 145, 92, 189, 144, 136, 11, 60, 177, 47, 22, 62, 200, 137, 239, 189, 75, 224, 149, 62, 40, 48, 6, 190, 46, 165, 134, 61, 135, 89, 23, 189, 83, 37, 39, 189, 48, 82, 165, 189, 46, 131, 222, 59, 183, 119, 36, 189, 242, 217, 10, 189, 79, 91, 155, 188, 197, 220, 45, 62, 220, 212, 181, 61, 193, 101, 16, 190, 220, 60, 15, 190, 227, 164, 32, 62, 83, 15, 11, 190, 26, 172, 14, 62, 33, 240, 221, 61, 249, 60, 39, 190, 58, 79, 192, 61, 92, 174, 135, 189, 2, 90, 8, 190, 92, 242, 45, 61, 130, 176, 150, 189, 96, 54, 184, 61, 86, 26, 66, 189, 98, 197, 202, 61, 2, 188, 1, 190, 206, 132, 225, 61, 49, 200, 250, 189, 209, 1, 155, 188, 161, 174, 49, 190, 109, 8, 25, 62, 236, 106, 203, 61, 4, 169, 252, 189, 6, 113, 253, 61, 221, 181, 155, 189, 240, 96, 209, 189, 188, 50, 181, 187, 151, 28, 62, 61, 147, 103, 16, 62, 237, 114, 219, 61, 212, 88, 66, 190, 172, 65, 243, 189, 127, 94, 157, 61, 164, 182, 77, 190, 207, 44, 230, 189, 12, 163, 197, 61, 238, 199, 136, 190, 236, 128, 41, 190, 148, 226, 61, 62, 9, 141, 47, 62, 246, 142, 83, 190, 106, 138, 240, 189, 248, 136, 95, 61, 138, 197, 154, 189, 221, 234, 19, 190, 138, 95, 101, 62, 158, 220, 149, 189, 238, 202, 147, 189, 241, 175, 181, 188, 239, 219, 158, 189, 174, 70, 142, 62, 94, 13, 215, 188, 193, 239, 189, 190, 214, 119, 20, 189, 186, 113, 149, 61, 115, 87, 99, 62, 217, 9, 170, 189, 144, 152, 38, 190, 137, 75, 131, 62, 232, 54, 52, 62, 243, 158, 19, 188, 77, 42, 64, 61, 132, 103, 168, 61, 185, 129, 131, 188, 210, 211, 234, 59, 53, 16, 244, 59, 92, 202, 58, 62, 57, 178, 20, 190, 88, 180, 119, 59, 95, 198, 48, 190, 48, 83, 140, 189, 162, 211, 10, 190, 35, 107, 42, 190, 237, 12, 44, 190, 31, 38, 42, 190, 220, 86, 10, 62, 128, 183, 234, 61, 10, 197, 184, 61, 151, 66, 11, 188, 3, 40, 158, 60, 223, 39, 65, 62, 145, 246, 11, 61, 117, 159, 85, 190, 82, 99, 58, 61, 121, 60, 58, 61, 176, 135, 34, 189, 61, 52, 165, 189, 83, 111, 197, 189, 247, 174, 78, 62, 13, 92, 47, 62, 70, 172, 120, 190, 142, 167, 231, 188, 50, 62, 160, 61, 244, 228, 148, 189, 172, 133, 198, 187, 56, 38, 156, 61, 120, 45, 61, 189, 231, 112, 59, 61, 209, 34, 31, 190, 90, 46, 208, 61, 5, 49, 135, 61, 80, 124, 233, 61, 49, 174, 171, 188, 157, 89, 32, 62, 225, 240, 104, 189, 110, 26, 212, 61, 108, 158, 54, 62, 30, 70, 49, 188, 130, 182, 59, 189, 154, 70, 61, 61, 136, 49, 150, 189, 91, 86, 11, 190, 183, 38, 104, 190, 143, 95, 152, 190, 2, 173, 195, 62, 45, 202, 202, 61, 183, 146, 250, 189, 213, 193, 19, 62, 167, 58, 109, 60, 206, 4, 191, 61, 221, 143, 145, 190, 132, 51, 62, 188, 110, 47, 238, 61, 221, 106, 85, 61, 153, 144, 192, 188, 242, 84, 50, 190, 5, 236, 0, 62, 99, 185, 22, 190, 88, 213, 136, 189, 75, 29, 147, 189, 35, 66, 197, 189, 189, 106, 192, 61, 211, 194, 149, 189, 209, 89, 9, 60, 124, 120, 23, 190, 135, 41, 36, 62, 185, 117, 97, 189, 167, 12, 160, 188, 252, 62, 29, 62, 110, 181, 193, 189, 2, 185, 210, 189, 217, 118, 156, 189, 215, 106, 161, 189, 227, 24, 174, 61, 240, 253, 51, 190, 161, 199, 140, 61, 237, 168, 198, 189, 170, 141, 247, 189, 111, 98, 75, 190, 39, 72, 191, 61, 207, 110, 238, 189, 89, 182, 39, 190, 81, 34, 179, 61, 254, 166, 60, 188, 118, 161, 49, 190, 67, 210, 140, 61, 99, 205, 138, 61, 42, 163, 211, 61, 11, 187, 137, 188, 207, 27, 69, 62, 214, 139, 214, 61, 11, 136, 58, 190, 127, 164, 134, 190, 164, 166, 129, 190, 0, 195, 71, 190, 56, 60, 158, 61, 115, 146, 37, 62, 40, 188, 143, 189, 171, 41, 211, 189, 75, 121, 102, 188, 185, 196, 153, 190, 138, 190, 105, 59, 109, 137, 4, 190, 172, 14, 56, 62, 187, 253, 121, 190, 28, 210, 157, 188, 126, 240, 5, 190, 86, 130, 77, 62, 109, 50, 144, 189, 169, 10, 182, 189, 152, 211, 167, 190, 142, 12, 21, 62, 239, 37, 16, 190, 159, 213, 76, 62, 82, 112, 46, 189, 18, 231, 46, 190, 158, 146, 128, 62, 92, 23, 71, 62, 110, 195, 191, 189, 229, 193, 24, 62, 82, 206, 225, 189, 40, 142, 84, 188, 42, 103, 7, 62, 47, 152, 51, 189, 154, 23, 231, 61, 79, 72, 222, 61, 239, 116, 66, 62, 32, 81, 120, 189, 114, 65, 95, 190, 226, 239, 119, 190, 127, 196, 130, 60, 161, 223, 94, 62, 159, 3, 151, 189, 16, 120, 97, 61, 255, 70, 13, 62, 43, 68, 218, 188, 241, 88, 81, 189, 43, 78, 9, 190, 244, 99, 168, 189, 243, 175, 26, 190, 14, 188, 107, 62, 115, 241, 44, 62, 175, 242, 243, 61, 67, 197, 53, 190, 83, 141, 129, 61, 17, 60, 84, 190, 156, 157, 144, 189, 84, 242, 169, 61, 70, 139, 223, 61, 205, 85, 24, 62, 166, 163, 27, 190, 190, 60, 10, 62, 38, 148, 22, 62, 219, 147, 34, 190, 164, 66, 170, 61, 145, 114, 53, 189, 80, 182, 90, 190, 52, 138, 157, 189, 0, 130, 178, 189, 136, 157, 82, 190, 61, 17, 227, 189, 203, 238, 128, 188, 230, 67, 110, 189, 232, 47, 28, 190, 185, 206, 175, 61, 53, 164, 142, 61, 201, 103, 200, 189, 97, 25, 38, 190, 93, 200, 3, 190, 11, 188, 73, 190, 172, 208, 169, 61, 236, 217, 55, 190, 248, 3, 173, 61, 159, 26, 239, 189, 108, 251, 160, 61, 252, 127, 250, 189, 97, 79, 241, 61, 37, 150, 172, 189, 49, 181, 34, 190, 6, 168, 236, 61, 112, 13, 49, 60, 20, 106, 3, 61, 156, 160, 84, 189, 37, 114, 132, 61, 121, 215, 83, 62, 11, 181, 57, 190, 240, 68, 192, 61, 239, 16, 76, 62, 10, 228, 89, 189, 90, 148, 38, 190, 30, 150, 62, 62, 92, 122, 170, 189, 40, 142, 70, 62, 27, 234, 70, 61, 175, 103, 136, 62, 139, 12, 39, 62, 170, 18, 94, 62, 141, 77, 44, 62, 70, 162, 10, 62, 141, 242, 7, 62, 94, 167, 89, 61, 238, 76, 172, 60, 32, 86, 51, 62, 33, 8, 169, 189, 118, 187, 49, 190, 48, 76, 7, 190, 127, 44, 208, 62, 39, 238, 149, 61, 67, 204, 168, 189, 183, 60, 218, 188, 103, 164, 128, 61, 124, 112, 38, 62, 226, 8, 184, 189, 14, 147, 30, 190, 94, 59, 214, 61, 7, 165, 42, 190, 252, 119, 239, 189, 52, 155, 135, 62, 224, 236, 0, 61, 14, 90, 219, 61, 243, 202, 164, 60, 39, 18, 85, 189, 134, 56, 247, 189, 124, 214, 54, 62, 42, 71, 11, 190, 171, 12, 49, 190, 96, 147, 46, 189, 107, 102, 102, 61, 135, 108, 25, 190, 88, 185, 128, 61, 224, 160, 236, 60, 38, 29, 92, 62, 209, 115, 80, 190, 218, 24, 68, 189, 95, 24, 113, 190, 222, 56, 92, 190, 246, 47, 113, 62, 45, 217, 18, 62, 227, 74, 55, 61, 19, 99, 89, 60, 223, 28, 115, 62, 184, 233, 37, 189, 30, 65, 162, 190, 133, 140, 20, 190, 245, 230, 171, 60, 53, 163, 45, 62, 23, 17, 136, 188, 3, 23, 111, 61, 86, 236, 196, 60, 135, 44, 15, 62, 232, 36, 228, 61, 108, 109, 0, 190, 84, 107, 66, 190, 108, 38, 156, 189, 116, 220, 211, 190, 100, 78, 16, 189, 42, 187, 55, 62, 153, 255, 44, 188, 38, 189, 3, 190, 191, 63, 88, 189, 31, 111, 7, 190, 199, 175, 2, 190, 3, 123, 27, 190, 29, 157, 197, 62, 177, 90, 231, 189, 156, 22, 212, 61, 73, 176, 191, 60, 111, 215, 63, 62, 236, 9, 14, 62, 60, 25, 58, 189, 175, 141, 229, 190, 230, 255, 138, 61, 31, 156, 10, 190, 142, 223, 60, 61, 243, 32, 31, 187, 111, 253, 77, 190, 123, 109, 143, 62, 146, 53, 35, 62, 234, 54, 112, 61, 80, 152, 17, 190, 218, 152, 109, 186, 182, 230, 86, 62, 36, 102, 195, 189, 217, 150, 86, 190, 198, 246, 50, 190, 33, 163, 168, 189, 40, 85, 217, 190, 251, 125, 155, 61, 69, 61, 114, 62, 42, 163, 79, 62, 60, 119, 27, 190, 70, 41, 158, 59, 124, 127, 72, 190, 16, 178, 230, 61, 2, 157, 128, 188, 33, 221, 137, 62, 65, 220, 16, 190, 109, 129, 199, 189, 19, 244, 205, 61, 243, 153, 239, 60, 30, 98, 121, 62, 153, 115, 0, 62, 148, 177, 30, 190, 85, 132, 247, 189, 93, 92, 17, 189, 183, 195, 55, 60, 206, 17, 175, 61, 219, 53, 6, 61, 145, 225, 40, 59, 42, 247, 70, 62, 88, 6, 122, 188, 92, 197, 34, 190, 215, 183, 56, 189, 217, 22, 233, 61, 44, 200, 156, 189, 62, 107, 159, 61, 124, 63, 18, 190, 151, 115, 138, 190, 200, 81, 43, 62, 203, 164, 224, 60, 175, 249, 68, 62, 55, 47, 6, 62, 95, 55, 143, 62, 74, 109, 101, 190, 100, 26, 43, 190, 113, 49, 44, 62, 156, 254, 240, 60, 214, 186, 81, 190, 182, 159, 172, 61, 15, 206, 70, 62, 194, 174, 80, 188, 82, 13, 182, 61, 93, 164, 193, 188, 202, 203, 125, 61, 160, 192, 199, 62, 36, 79, 167, 190, 100, 216, 194, 189, 191, 154, 6, 62, 224, 48, 243, 189, 148, 239, 164, 190, 212, 129, 43, 61, 141, 172, 10, 189, 141, 30, 24, 62, 222, 108, 0, 62, 155, 174, 41, 62, 140, 239, 231, 189, 109, 110, 15, 62, 73, 106, 183, 61, 252, 250, 99, 188, 191, 7, 228, 61, 30, 69, 255, 189, 235, 88, 55, 60, 112, 2, 179, 60, 246, 70, 82, 61, 7, 40, 135, 189, 149, 64, 44, 62, 46, 240, 26, 62, 19, 255, 136, 188, 251, 231, 248, 189, 103, 217, 59, 189, 235, 70, 151, 189, 76, 124, 40, 190, 145, 15, 143, 189, 124, 133, 248, 189, 60, 39, 60, 61, 40, 73, 188, 189, 27, 97, 137, 190, 69, 173, 124, 189, 183, 209, 195, 189, 157, 153, 225, 61, 224, 131, 227, 189, 183, 20, 11, 62, 129, 50, 16, 188, 202, 148, 231, 189, 104, 251, 50, 61, 236, 142, 242, 61, 120, 222, 162, 190, 192, 230, 181, 60, 9, 100, 36, 189, 157, 116, 80, 188, 247, 53, 222, 189, 188, 187, 138, 61, 83, 111, 250, 61, 29, 92, 211, 60, 235, 144, 254, 61, 249, 78, 176, 188, 82, 192, 144, 189, 222, 152, 132, 188, 69, 29, 165, 189, 180, 194, 183, 61, 23, 115, 70, 190, 209, 141, 118, 61, 83, 76, 245, 61, 68, 169, 81, 61, 246, 47, 137, 60, 92, 150, 145, 189, 107, 9, 22, 61, 161, 20, 22, 190, 116, 34, 191, 61, 192, 189, 113, 62, 178, 222, 182, 61, 241, 99, 173, 61, 151, 123, 228, 189, 135, 201, 101, 61, 1, 226, 184, 61, 115, 252, 167, 189, 210, 190, 169, 61, 249, 173, 21, 62, 157, 26, 170, 190, 192, 109, 97, 62, 249, 162, 89, 62, 166, 237, 0, 63, 111, 18, 99, 189, 198, 13, 179, 190, 141, 109, 50, 62, 184, 56, 240, 189, 205, 174, 122, 189, 149, 21, 167, 189, 167, 172, 149, 62, 245, 193, 72, 190, 196, 70, 194, 189, 247, 221, 234, 61, 4, 37, 153, 61, 111, 237, 59, 190, 81, 171, 235, 189, 35, 216, 104, 62, 248, 18, 222, 60, 110, 68, 134, 189, 23, 40, 37, 62, 214, 96, 124, 60, 249, 216, 248, 62, 132, 23, 167, 190, 185, 38, 204, 61, 154, 16, 162, 189, 198, 176, 61, 188, 185, 3, 190, 190, 43, 126, 176, 189, 69, 87, 0, 61, 242, 201, 63, 62, 44, 37, 16, 61, 242, 80, 80, 190, 173, 145, 105, 62, 85, 228, 214, 186, 13, 182, 30, 62, 64, 44, 17, 190, 114, 151, 165, 189, 100, 212, 54, 62, 251, 51, 87, 190, 219, 7, 183, 61, 51, 53, 70, 190, 37, 113, 142, 62, 10, 209, 168, 190, 100, 243, 9, 62, 57, 24, 93, 61, 246, 169, 230, 188, 20, 138, 169, 188, 20, 222, 155, 61, 33, 214, 103, 62, 77, 182, 216, 60, 193, 10, 19, 190, 208, 217, 97, 61, 246, 93, 181, 61, 63, 229, 109, 62, 135, 170, 66, 190, 111, 111, 236, 61, 45, 133, 235, 61, 89, 214, 105, 189, 161, 130, 50, 190, 46, 247, 78, 61, 219, 75, 117, 190, 239, 43, 36, 62, 26, 255, 16, 61, 181, 101, 182, 61, 52, 86, 240, 61, 148, 28, 54, 190, 219, 112, 14, 61, 79, 178, 178, 189, 2, 70, 76, 62, 224, 227, 241, 61, 116, 129, 142, 189, 65, 23, 39, 190, 235, 110, 235, 61, 126, 28, 153, 61, 159, 74, 149, 189, 70, 69, 9, 62, 27, 65, 4, 190, 23, 52, 210, 61, 9, 68, 246, 60, 115, 157, 210, 189, 154, 214, 58, 60, 5, 193, 237, 60, 174, 150, 210, 190, 128, 98, 22, 62, 6, 29, 33, 62, 199, 207, 114, 188, 18, 227, 41, 190, 39, 157, 230, 61, 79, 179, 47, 190, 93, 116, 45, 190, 189, 104, 185, 61, 111, 14, 30, 62, 132, 119, 11, 62, 192, 232, 233, 189, 10, 21, 31, 61, 197, 224, 178, 190, 163, 44, 136, 62, 83, 23, 54, 188, 17, 139, 243, 61, 190, 74, 161, 60, 52, 55, 149, 189, 161, 30, 62, 62, 106, 152, 114, 59, 18, 227, 159, 189, 226, 199, 136, 188, 49, 130, 98, 62, 142, 1, 121, 190, 7, 61, 37, 61, 163, 36, 113, 62, 193, 162, 24, 190, 102, 106, 51, 190, 253, 231, 181, 61, 250, 81, 83, 62, 12, 20, 144, 189, 28, 189, 223, 189, 203, 231, 21, 62, 66, 56, 119, 188, 81, 8, 221, 61, 146, 137, 213, 61, 248, 114, 41, 189, 76, 249, 47, 62, 106, 64, 53, 62, 111, 47, 131, 190, 18, 12, 213, 61, 228, 132, 103, 190, 152, 23, 231, 189, 38, 122, 161, 188, 142, 107, 9, 189, 246, 243, 120, 189, 19, 127, 33, 190, 164, 168, 197, 189, 127, 199, 52, 61, 245, 189, 14, 62, 178, 189, 215, 188, 67, 127, 20, 190, 151, 185, 144, 188, 214, 143, 43, 62, 186, 157, 79, 190, 238, 215, 213, 189, 56, 241, 213, 189, 89, 240, 124, 189, 230, 150, 235, 61, 159, 94, 51, 189, 48, 131, 146, 60, 211, 67, 106, 61, 123, 250, 125, 62, 39, 11, 46, 62, 67, 46, 119, 190, 150, 196, 90, 61, 27, 62, 104, 190, 228, 47, 81, 189, 67, 139, 164, 61, 5, 200, 188, 61, 126, 106, 86, 62, 40, 61, 233, 61, 108, 239, 189, 190, 62, 151, 244, 188, 7, 140, 37, 62, 112, 33, 15, 62, 50, 165, 88, 61, 49, 83, 84, 61, 173, 53, 252, 189, 242, 182, 169, 60, 85, 107, 187, 189, 57, 234, 156, 188, 133, 172, 7, 190, 100, 70, 207, 60, 40, 189, 180, 60, 2, 254, 175, 188, 62, 230, 16, 190, 50, 141, 227, 189, 97, 152, 11, 62, 104, 214, 32, 190, 188, 113, 99, 60, 135, 55, 104, 188, 53, 199, 21, 61, 111, 249, 231, 60, 60, 148, 166, 189, 204, 77, 235, 61, 24, 248, 110, 190, 184, 72, 0, 62, 113, 245, 21, 190, 82, 78, 49, 62, 194, 50, 84, 188, 188, 253, 60, 190, 60, 31, 225, 189, 23, 98, 45, 61, 45, 180, 230, 61, 208, 177, 117, 61, 138, 53, 83, 61, 106, 64, 164, 60, 212, 87, 111, 189, 92, 186, 98, 62, 125, 57, 127, 189, 123, 132, 125, 62, 4, 55, 19, 190, 45, 2, 222, 187, 246, 192, 24, 62, 121, 90, 143, 189, 59, 181, 73, 190, 134, 127, 40, 61, 204, 241, 192, 61, 58, 25, 35, 62, 187, 127, 133, 189, 210, 173, 182, 189, 148, 28, 28, 190, 102, 16, 151, 190, 78, 129, 39, 189, 236, 165, 168, 61, 218, 14, 24, 62, 115, 90, 21, 62, 77, 110, 122, 61, 103, 211, 157, 61, 33, 177, 101, 189, 159, 228, 3, 62, 202, 226, 66, 190, 0, 29, 14, 61, 68, 203, 172, 61, 230, 206, 62, 61, 38, 181, 106, 190, 191, 76, 60, 190, 206, 163, 247, 61, 18, 106, 252, 189, 61, 144, 197, 60, 130, 179, 222, 189, 163, 173, 58, 62, 95, 135, 141, 189, 151, 235, 41, 58, 170, 148, 104, 190, 231, 255, 49, 62, 124, 206, 237, 188, 20, 142, 10, 62, 233, 226, 172, 60, 99, 179, 14, 62, 234, 102, 207, 189, 9, 48, 8, 62, 219, 251, 143, 61, 49, 58, 204, 189, 245, 244, 155, 188, 112, 226, 46, 62, 61, 46, 57, 62, 117, 90, 17, 62, 21, 254, 73, 62, 169, 111, 4, 190, 239, 91, 115, 61, 48, 4, 148, 62, 172, 39, 170, 189, 84, 213, 127, 188, 155, 17, 247, 60, 85, 142, 81, 62, 135, 215, 138, 188, 11, 11, 199, 189, 219, 37, 11, 190, 129, 168, 215, 189, 152, 175, 93, 61, 249, 203, 98, 189, 219, 134, 84, 60, 217, 1, 202, 187, 57, 95, 90, 190, 126, 27, 21, 59, 253, 10, 18, 190, 249, 138, 157, 61, 244, 137, 48, 60, 11, 80, 70, 189, 178, 155, 36, 61, 119, 212, 57, 190, 238, 125, 179, 61, 139, 132, 214, 61, 118, 60, 233, 61, 148, 99, 148, 189, 73, 236, 152, 60, 220, 164, 91, 61, 107, 81, 63, 62, 106, 2, 149, 189, 101, 77, 164, 61, 177, 143, 116, 61, 253, 14, 93, 190, 45, 212, 172, 188, 108, 35, 185, 61, 180, 53, 10, 62, 170, 9, 213, 58, 207, 25, 213, 189, 147, 23, 237, 189, 25, 151, 127, 190, 240, 195, 53, 62, 187, 63, 78, 189, 35, 15, 93, 61, 124, 123, 150, 189, 61, 84, 25, 190, 80, 128, 7, 62, 25, 191, 10, 190, 66, 144, 100, 189, 219, 89, 136, 61, 145, 25, 110, 61, 130, 193, 183, 188, 87, 79, 116, 60, 209, 156, 135, 188, 180, 183, 161, 61, 5, 246, 244, 189, 188, 185, 51, 190, 20, 125, 66, 62, 12, 79, 4, 62, 194, 93, 213, 189, 179, 242, 43, 62, 61, 12, 116, 62, 141, 194, 163, 189, 61, 38, 181, 189, 67, 143, 180, 61, 225, 94, 60, 61, 217, 41, 27, 62, 248, 204, 7, 62, 102, 130, 231, 189, 228, 207, 188, 61, 83, 23, 49, 62, 47, 59, 188, 189, 241, 33, 63, 190, 38, 231, 157, 189, 174, 224, 42, 61, 87, 159, 35, 190, 213, 86, 46, 61, 44, 104, 233, 61, 62, 96, 52, 61, 61, 184, 252, 189, 199, 95, 252, 61, 62, 61, 39, 61, 252, 73, 216, 189, 10, 57, 198, 59, 42, 113, 36, 189, 90, 223, 171, 189, 139, 154, 111, 190, 171, 139, 101, 188, 122, 16, 123, 188, 136, 100, 142, 61, 47, 226, 118, 61, 106, 90, 86, 61, 197, 102, 166, 189, 169, 216, 24, 62, 15, 206, 235, 61, 1, 229, 21, 61, 38, 148, 217, 60, 206, 21, 107, 190, 83, 63, 163, 60, 99, 128, 172, 61, 210, 190, 223, 60, 160, 11, 231, 189, 223, 149, 39, 62, 225, 37, 220, 61, 205, 4, 19, 190, 245, 221, 2, 188, 84, 100, 8, 62, 175, 24, 48, 190, 36, 178, 215, 189, 52, 171, 39, 62, 171, 157, 132, 189, 226, 217, 161, 61, 65, 39, 112, 190, 223, 199, 120, 62, 100, 124, 132, 190, 199, 175, 219, 189, 213, 182, 181, 61, 156, 191, 213, 61, 0, 70, 69, 190, 188, 35, 10, 61, 238, 127, 78, 189, 194, 62, 58, 59, 0, 113, 43, 190, 167, 23, 177, 62, 18, 98, 61, 190, 163, 155, 132, 188, 115, 108, 254, 189, 239, 6, 150, 61, 199, 81, 204, 61, 86, 68, 187, 188, 31, 160, 131, 61, 218, 112, 13, 62, 84, 176, 15, 61, 249, 171, 142, 62, 69, 1, 196, 190, 19, 6, 21, 189, 112, 131, 78, 62, 68, 8, 72, 62, 71, 38, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 160, 45, 62, 112, 154, 156, 189, 90, 11, 93, 189, 170, 202, 223, 61, 109, 105, 39, 62, 103, 165, 18, 61, 156, 72, 156, 61, 238, 216, 131, 189, 20, 46, 180, 61, 234, 92, 170, 189, 45, 194, 25, 61, 66, 87, 38, 62, 236, 161, 31, 60, 172, 118, 58, 61, 245, 129, 125, 189, 244, 164, 14, 62, 87, 1, 181, 61, 26, 158, 159, 61, 186, 30, 73, 190, 118, 105, 18, 62, 147, 120, 12, 62, 110, 250, 90, 189, 56, 53, 19, 190, 126, 189, 128, 62, 254, 206, 57, 190, 155, 111, 23, 190, 51, 8, 109, 62, 110, 41, 243, 188, 19, 115, 122, 190, 43, 106, 202, 189, 200, 244, 76, 190, 207, 63, 109, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 124, 132, 61, 38, 212, 153, 59, 16, 66, 138, 62, 73, 155, 73, 190, 98, 31, 191, 189, 253, 40, 129, 61, 232, 43, 59, 62, 0, 128, 90, 62, 2, 106, 60, 62, 225, 158, 242, 59, 2, 89, 174, 62, 147, 109, 112, 62, 116, 252, 85, 189, 87, 40, 34, 190, 0, 63, 68, 62, 180, 152, 62, 62, 128, 229, 133, 62, 15, 95, 60, 190, 6, 173, 174, 189, 81, 93, 17, 58, 96, 122, 210, 190, 218, 100, 129, 190, 176, 2, 84, 62, 59, 233, 30, 190, 130, 31, 122, 62, 181, 200, 204, 189, 96, 244, 130, 60, 74, 89, 11, 190, 82, 135, 164, 61, 196, 205, 150, 189, 11, 176, 12, 62, 72, 132, 184, 62, 8, 56, 35, 190, 121, 209, 58, 62, 170, 159, 150, 62, 37, 102, 212, 189, 127, 225, 54, 190, 123, 87, 32, 62, 126, 93, 135, 190, 176, 91, 55, 61, 129, 182, 6, 190, 176, 202, 198, 189, 242, 198, 16, 189, 52, 121, 133, 190, 201, 172, 230, 60, 235, 213, 10, 62, 76, 135, 11, 190, 120, 128, 240, 188, 23, 94, 46, 190, 57, 182, 116, 188, 89, 76, 216, 61, 55, 187, 176, 189, 242, 38, 158, 185, 5, 70, 5, 190, 7, 45, 21, 61, 245, 97, 69, 190, 250, 180, 172, 59, 178, 17, 35, 62, 229, 218, 182, 190, 5, 96, 201, 61, 55, 68, 196, 61, 143, 5, 67, 60, 174, 231, 222, 61, 20, 59, 50, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 29, 171, 61, 170, 64, 89, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {235, 216, 85, 190, 206, 226, 89, 62, 120, 125, 2, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 188, 54, 191, 30, 75, 223, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0048/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}