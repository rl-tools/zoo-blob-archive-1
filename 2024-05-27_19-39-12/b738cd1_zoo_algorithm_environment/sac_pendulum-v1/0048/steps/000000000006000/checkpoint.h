// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 226, 62, 187, 149, 192, 9, 191, 24, 203, 250, 59, 4, 24, 5, 63, 23, 164, 84, 191, 255, 246, 185, 190, 2, 147, 26, 63, 114, 86, 201, 62, 234, 190, 39, 190, 199, 79, 255, 62, 199, 81, 231, 62, 172, 27, 157, 62, 242, 242, 56, 190, 1, 115, 147, 62, 216, 81, 207, 190, 163, 185, 220, 62, 98, 200, 31, 63, 6, 42, 38, 62, 35, 223, 26, 63, 253, 253, 157, 190, 144, 215, 46, 191, 73, 95, 185, 190, 46, 153, 185, 190, 8, 167, 24, 191, 149, 253, 19, 191, 67, 53, 154, 191, 19, 193, 123, 189, 138, 23, 86, 191, 105, 128, 134, 62, 217, 4, 145, 62, 165, 42, 11, 191, 93, 231, 22, 63, 8, 180, 0, 63, 117, 16, 128, 61, 217, 118, 106, 63, 134, 242, 134, 190, 167, 5, 149, 190, 152, 60, 33, 63, 174, 39, 102, 190, 178, 196, 22, 190, 163, 135, 74, 191, 112, 211, 31, 191, 247, 226, 56, 63, 124, 228, 40, 63, 19, 70, 221, 62, 181, 204, 141, 190, 189, 95, 253, 190, 8, 202, 59, 62, 238, 49, 71, 190, 161, 22, 8, 191, 15, 129, 133, 62, 108, 165, 146, 61, 160, 122, 41, 63, 160, 239, 139, 62, 202, 188, 17, 63, 38, 154, 137, 63, 166, 230, 69, 62, 219, 21, 140, 190, 239, 127, 201, 188, 62, 55, 47, 62, 84, 135, 71, 191, 54, 97, 29, 63, 14, 122, 47, 62, 156, 16, 64, 63, 146, 153, 54, 191, 54, 190, 26, 190, 132, 71, 186, 60, 240, 180, 193, 191, 57, 217, 21, 191, 70, 237, 219, 190, 39, 187, 86, 62, 20, 51, 230, 190, 79, 82, 7, 63, 218, 47, 28, 191, 195, 213, 148, 190, 126, 206, 222, 189, 115, 7, 68, 191, 231, 174, 118, 62, 48, 236, 55, 191, 11, 222, 92, 190, 226, 179, 32, 62, 60, 77, 130, 62, 73, 234, 69, 63, 169, 97, 133, 62, 244, 0, 161, 62, 122, 201, 10, 190, 49, 2, 212, 190, 4, 175, 235, 61, 23, 154, 31, 191, 244, 69, 14, 62, 215, 200, 123, 62, 31, 202, 37, 191, 95, 210, 148, 60, 115, 72, 3, 63, 254, 33, 117, 63, 65, 105, 125, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 210, 28, 191, 71, 97, 11, 191, 179, 9, 204, 189, 96, 54, 112, 60, 91, 224, 4, 63, 114, 251, 21, 190, 214, 136, 103, 189, 235, 73, 175, 189, 51, 149, 167, 62, 218, 13, 106, 63, 144, 108, 0, 191, 90, 130, 238, 62, 65, 195, 252, 188, 103, 27, 4, 62, 160, 69, 197, 62, 201, 157, 180, 189, 182, 87, 184, 188, 195, 78, 35, 190, 143, 254, 7, 62, 167, 41, 23, 191, 14, 80, 228, 61, 111, 69, 77, 62, 109, 149, 232, 62, 95, 74, 215, 190, 217, 69, 10, 191, 162, 84, 17, 62, 203, 227, 70, 62, 144, 175, 152, 190, 152, 246, 220, 190, 111, 70, 2, 63, 209, 129, 65, 189, 175, 198, 237, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 179, 162, 60, 164, 36, 166, 188, 77, 129, 194, 62, 221, 193, 185, 60, 246, 181, 173, 189, 160, 80, 109, 61, 36, 117, 143, 62, 241, 111, 77, 190, 242, 47, 61, 190, 26, 202, 21, 62, 105, 67, 228, 61, 59, 80, 124, 62, 203, 184, 228, 61, 237, 44, 109, 190, 87, 127, 252, 59, 220, 210, 14, 190, 143, 159, 97, 190, 189, 253, 16, 62, 170, 209, 184, 61, 169, 203, 163, 189, 138, 16, 90, 62, 178, 110, 210, 62, 142, 211, 152, 190, 106, 34, 112, 190, 127, 161, 134, 189, 184, 89, 135, 61, 21, 231, 196, 61, 62, 135, 78, 190, 40, 163, 68, 62, 171, 198, 60, 61, 37, 166, 225, 189, 104, 243, 77, 190, 115, 35, 19, 190, 164, 25, 193, 62, 218, 243, 3, 190, 78, 4, 63, 190, 18, 36, 142, 61, 118, 60, 144, 189, 21, 184, 58, 189, 96, 209, 40, 190, 26, 51, 244, 58, 2, 158, 8, 62, 88, 21, 164, 189, 104, 248, 143, 61, 13, 11, 224, 188, 92, 11, 195, 61, 139, 83, 34, 190, 105, 184, 39, 62, 32, 158, 56, 61, 80, 126, 16, 190, 164, 206, 235, 190, 10, 177, 27, 190, 61, 104, 90, 62, 159, 243, 133, 62, 148, 79, 48, 62, 236, 137, 2, 61, 19, 77, 24, 190, 54, 135, 50, 62, 40, 97, 119, 189, 116, 199, 143, 190, 192, 41, 223, 189, 42, 129, 102, 62, 196, 51, 115, 61, 121, 224, 159, 190, 250, 167, 100, 61, 240, 222, 242, 62, 122, 78, 225, 61, 134, 47, 114, 189, 113, 85, 165, 189, 225, 163, 174, 190, 12, 138, 236, 188, 138, 221, 75, 191, 247, 206, 65, 190, 144, 8, 162, 62, 191, 136, 86, 61, 87, 19, 46, 62, 91, 174, 12, 63, 24, 113, 133, 191, 155, 58, 197, 189, 30, 140, 158, 190, 77, 235, 123, 62, 132, 211, 210, 189, 24, 78, 82, 190, 121, 188, 0, 190, 48, 36, 33, 62, 238, 52, 202, 62, 237, 118, 42, 191, 209, 119, 254, 189, 111, 224, 21, 62, 109, 252, 10, 190, 123, 14, 102, 62, 50, 248, 231, 189, 54, 61, 224, 61, 71, 129, 134, 62, 54, 159, 127, 62, 30, 214, 133, 190, 107, 254, 175, 61, 87, 39, 179, 190, 38, 207, 13, 62, 96, 91, 132, 61, 199, 147, 120, 62, 213, 208, 65, 62, 72, 36, 148, 190, 125, 193, 67, 62, 179, 103, 54, 62, 191, 203, 1, 62, 31, 49, 171, 189, 104, 85, 15, 62, 234, 146, 179, 190, 173, 121, 49, 62, 190, 129, 61, 62, 57, 75, 190, 59, 144, 12, 254, 61, 47, 210, 48, 189, 150, 124, 154, 62, 115, 153, 60, 189, 17, 235, 230, 61, 176, 247, 105, 190, 153, 31, 142, 60, 225, 200, 79, 62, 96, 232, 154, 190, 153, 175, 108, 61, 136, 122, 48, 62, 108, 0, 199, 59, 177, 156, 175, 190, 175, 182, 73, 61, 207, 199, 27, 190, 241, 44, 124, 62, 225, 60, 192, 60, 110, 125, 165, 190, 6, 189, 99, 188, 29, 219, 93, 188, 158, 206, 12, 62, 199, 247, 4, 61, 228, 3, 173, 189, 255, 50, 65, 62, 105, 160, 60, 189, 181, 213, 3, 188, 67, 176, 201, 189, 113, 189, 217, 189, 249, 187, 211, 190, 242, 2, 98, 62, 170, 38, 64, 62, 89, 122, 54, 190, 5, 221, 132, 189, 174, 66, 183, 60, 218, 245, 100, 62, 173, 54, 149, 189, 59, 183, 82, 189, 253, 102, 64, 61, 144, 220, 2, 60, 206, 241, 116, 62, 89, 42, 67, 190, 53, 75, 68, 61, 222, 193, 51, 61, 244, 52, 161, 189, 186, 90, 11, 190, 168, 232, 47, 62, 119, 224, 2, 62, 242, 150, 14, 185, 79, 91, 155, 188, 197, 220, 45, 62, 220, 212, 181, 61, 193, 101, 16, 190, 220, 60, 15, 190, 227, 164, 32, 62, 83, 15, 11, 190, 26, 172, 14, 62, 33, 240, 221, 61, 249, 60, 39, 190, 58, 79, 192, 61, 92, 174, 135, 189, 2, 90, 8, 190, 92, 242, 45, 61, 130, 176, 150, 189, 96, 54, 184, 61, 86, 26, 66, 189, 98, 197, 202, 61, 2, 188, 1, 190, 206, 132, 225, 61, 49, 200, 250, 189, 209, 1, 155, 188, 161, 174, 49, 190, 109, 8, 25, 62, 236, 106, 203, 61, 4, 169, 252, 189, 6, 113, 253, 61, 221, 181, 155, 189, 240, 96, 209, 189, 188, 50, 181, 187, 151, 28, 62, 61, 147, 103, 16, 62, 67, 125, 221, 61, 70, 9, 111, 189, 106, 74, 47, 62, 176, 82, 145, 61, 218, 228, 88, 190, 180, 46, 142, 190, 37, 77, 125, 62, 218, 83, 42, 191, 17, 212, 152, 190, 31, 208, 75, 62, 95, 184, 92, 62, 189, 215, 109, 60, 1, 169, 191, 62, 5, 202, 137, 190, 230, 24, 140, 189, 99, 166, 133, 190, 221, 62, 213, 61, 162, 162, 19, 190, 163, 120, 18, 190, 246, 56, 197, 189, 51, 139, 76, 59, 49, 50, 201, 62, 201, 75, 142, 190, 240, 93, 11, 191, 200, 60, 130, 61, 101, 221, 250, 188, 228, 255, 50, 62, 142, 254, 114, 190, 188, 239, 36, 189, 145, 50, 97, 62, 111, 216, 11, 62, 173, 252, 15, 190, 77, 42, 64, 61, 132, 103, 168, 61, 209, 200, 40, 62, 243, 129, 136, 61, 5, 6, 24, 61, 17, 37, 150, 62, 4, 142, 218, 190, 199, 97, 79, 189, 96, 159, 135, 190, 53, 121, 8, 190, 148, 242, 84, 190, 226, 73, 250, 189, 66, 217, 143, 190, 101, 179, 128, 190, 206, 141, 71, 62, 138, 108, 196, 61, 133, 120, 89, 59, 104, 248, 139, 60, 229, 178, 208, 61, 117, 64, 9, 62, 210, 76, 184, 189, 163, 184, 181, 190, 132, 62, 141, 189, 247, 31, 135, 189, 176, 135, 34, 189, 129, 86, 160, 189, 20, 123, 119, 190, 90, 74, 123, 62, 9, 202, 36, 62, 217, 25, 146, 190, 105, 110, 196, 189, 24, 169, 35, 62, 128, 40, 139, 189, 13, 108, 130, 61, 68, 69, 90, 60, 242, 47, 128, 61, 38, 94, 150, 188, 158, 34, 51, 190, 186, 48, 3, 62, 1, 169, 89, 189, 94, 128, 150, 187, 178, 114, 70, 190, 226, 193, 66, 62, 254, 79, 189, 189, 69, 82, 156, 61, 204, 216, 222, 61, 163, 116, 179, 61, 5, 8, 16, 188, 252, 49, 135, 188, 130, 206, 84, 188, 124, 59, 36, 189, 86, 57, 167, 190, 115, 18, 242, 190, 253, 158, 247, 62, 121, 144, 14, 61, 166, 210, 123, 190, 188, 77, 116, 62, 182, 230, 45, 61, 201, 84, 144, 190, 64, 89, 8, 191, 177, 45, 19, 61, 173, 207, 108, 61, 41, 0, 77, 60, 9, 69, 95, 189, 242, 84, 50, 190, 5, 236, 0, 62, 99, 185, 22, 190, 88, 213, 136, 189, 75, 29, 147, 189, 35, 66, 197, 189, 189, 106, 192, 61, 211, 194, 149, 189, 209, 89, 9, 60, 124, 120, 23, 190, 135, 41, 36, 62, 185, 117, 97, 189, 167, 12, 160, 188, 252, 62, 29, 62, 110, 181, 193, 189, 2, 185, 210, 189, 217, 118, 156, 189, 215, 106, 161, 189, 227, 24, 174, 61, 240, 253, 51, 190, 161, 199, 140, 61, 237, 168, 198, 189, 170, 141, 247, 189, 111, 98, 75, 190, 39, 72, 191, 61, 207, 110, 238, 189, 89, 182, 39, 190, 81, 34, 179, 61, 254, 166, 60, 188, 118, 161, 49, 190, 67, 210, 140, 61, 99, 205, 138, 61, 42, 163, 211, 61, 231, 75, 246, 189, 238, 196, 76, 190, 172, 190, 250, 61, 109, 58, 232, 59, 227, 124, 254, 190, 150, 56, 228, 190, 92, 50, 40, 191, 245, 249, 35, 190, 21, 143, 155, 62, 103, 29, 151, 61, 170, 44, 135, 62, 33, 37, 19, 63, 32, 174, 154, 191, 196, 12, 179, 188, 1, 216, 94, 190, 124, 134, 244, 61, 79, 117, 148, 190, 24, 176, 97, 190, 90, 110, 13, 190, 10, 168, 211, 62, 114, 119, 200, 189, 225, 175, 150, 191, 85, 244, 155, 189, 103, 188, 162, 60, 115, 3, 131, 190, 27, 189, 160, 62, 102, 36, 9, 190, 59, 227, 47, 190, 132, 5, 36, 62, 245, 191, 59, 61, 234, 155, 152, 190, 158, 189, 31, 62, 60, 104, 167, 189, 119, 135, 108, 190, 243, 77, 101, 62, 71, 102, 162, 187, 109, 156, 46, 190, 229, 77, 165, 61, 50, 5, 118, 62, 205, 231, 133, 189, 186, 217, 20, 190, 207, 76, 54, 190, 192, 234, 157, 61, 213, 90, 95, 62, 176, 29, 76, 189, 157, 53, 50, 62, 17, 234, 95, 62, 217, 117, 222, 189, 186, 121, 8, 189, 16, 153, 73, 190, 58, 243, 138, 61, 57, 89, 184, 61, 112, 89, 184, 62, 253, 179, 25, 62, 85, 237, 101, 62, 179, 71, 223, 189, 186, 181, 227, 61, 44, 22, 112, 190, 174, 214, 3, 191, 142, 83, 150, 61, 65, 174, 1, 62, 28, 229, 6, 62, 46, 51, 211, 190, 190, 60, 10, 62, 38, 148, 22, 62, 185, 59, 34, 190, 119, 219, 165, 61, 145, 114, 53, 189, 189, 229, 91, 190, 52, 138, 157, 189, 0, 130, 178, 189, 96, 37, 85, 190, 99, 35, 230, 189, 80, 240, 128, 188, 193, 48, 109, 189, 232, 47, 28, 190, 185, 206, 175, 61, 6, 34, 137, 61, 46, 221, 204, 189, 221, 26, 42, 190, 134, 111, 5, 190, 164, 139, 76, 190, 172, 208, 169, 61, 236, 217, 55, 190, 79, 178, 165, 61, 102, 88, 238, 189, 108, 251, 160, 61, 252, 127, 250, 189, 207, 65, 235, 61, 8, 169, 172, 189, 49, 181, 34, 190, 6, 168, 236, 61, 82, 21, 198, 59, 177, 81, 246, 60, 6, 44, 88, 189, 207, 97, 124, 61, 100, 76, 146, 61, 100, 63, 89, 60, 100, 195, 177, 61, 17, 225, 50, 62, 203, 19, 178, 61, 224, 108, 110, 190, 243, 194, 89, 62, 181, 0, 164, 189, 57, 36, 240, 61, 237, 187, 61, 189, 32, 55, 70, 62, 144, 104, 196, 61, 29, 170, 127, 62, 62, 105, 41, 62, 238, 28, 250, 61, 144, 46, 30, 62, 232, 25, 132, 61, 186, 86, 85, 61, 114, 173, 51, 62, 217, 152, 62, 190, 60, 246, 193, 190, 82, 116, 171, 189, 173, 238, 193, 62, 5, 146, 241, 189, 191, 71, 152, 189, 162, 171, 146, 189, 210, 12, 241, 61, 11, 69, 184, 61, 23, 133, 215, 189, 142, 225, 53, 190, 211, 40, 102, 62, 39, 72, 42, 190, 224, 189, 188, 189, 224, 50, 7, 60, 213, 83, 46, 62, 23, 237, 89, 61, 118, 139, 31, 190, 52, 253, 159, 189, 161, 253, 14, 190, 142, 16, 206, 61, 171, 9, 187, 190, 208, 43, 206, 189, 44, 83, 190, 189, 154, 65, 68, 61, 184, 201, 51, 190, 3, 147, 71, 62, 36, 226, 17, 62, 51, 43, 35, 62, 160, 62, 184, 189, 125, 149, 16, 190, 153, 174, 81, 189, 206, 190, 2, 191, 107, 206, 147, 62, 138, 58, 183, 61, 45, 86, 107, 61, 172, 17, 168, 61, 5, 57, 164, 62, 69, 48, 222, 190, 218, 89, 15, 191, 200, 131, 247, 189, 226, 97, 72, 187, 182, 80, 57, 62, 120, 85, 65, 190, 250, 117, 124, 61, 244, 34, 14, 63, 108, 193, 1, 63, 114, 145, 165, 61, 210, 112, 233, 189, 60, 123, 235, 190, 53, 143, 253, 62, 183, 218, 82, 191, 163, 192, 78, 190, 171, 173, 205, 61, 24, 73, 114, 61, 60, 208, 112, 189, 236, 192, 172, 62, 88, 86, 180, 190, 181, 249, 49, 190, 242, 123, 72, 190, 76, 85, 159, 62, 91, 26, 49, 190, 159, 210, 233, 189, 145, 240, 193, 60, 45, 140, 35, 62, 229, 94, 218, 62, 115, 231, 57, 190, 54, 30, 72, 191, 77, 101, 164, 62, 222, 185, 36, 190, 97, 118, 197, 189, 193, 122, 32, 190, 205, 210, 213, 62, 139, 176, 147, 62, 213, 208, 114, 62, 43, 125, 75, 190, 47, 213, 15, 190, 255, 60, 219, 62, 26, 107, 209, 62, 100, 55, 230, 189, 55, 215, 123, 190, 106, 30, 171, 190, 181, 98, 84, 62, 202, 146, 79, 191, 219, 108, 28, 189, 13, 135, 70, 62, 17, 186, 123, 62, 162, 225, 196, 189, 208, 223, 168, 62, 186, 230, 198, 190, 168, 120, 198, 61, 104, 88, 223, 189, 11, 21, 26, 62, 133, 45, 75, 190, 238, 158, 95, 190, 247, 251, 108, 61, 27, 252, 87, 61, 26, 231, 223, 62, 121, 119, 60, 188, 247, 31, 226, 190, 69, 127, 133, 62, 124, 28, 210, 189, 175, 210, 205, 189, 64, 249, 4, 189, 135, 242, 184, 62, 160, 35, 84, 188, 138, 6, 139, 62, 122, 219, 33, 190, 10, 29, 37, 190, 132, 83, 202, 190, 119, 153, 55, 62, 175, 95, 229, 189, 109, 156, 248, 61, 7, 111, 174, 189, 101, 192, 162, 190, 147, 242, 115, 62, 71, 122, 130, 62, 85, 48, 22, 62, 177, 131, 124, 61, 163, 210, 144, 62, 120, 216, 158, 190, 204, 145, 148, 189, 195, 89, 18, 62, 137, 204, 135, 61, 50, 122, 192, 188, 253, 246, 120, 61, 245, 213, 126, 62, 159, 72, 197, 188, 45, 90, 137, 188, 193, 212, 57, 190, 187, 68, 93, 62, 129, 77, 206, 62, 63, 251, 39, 191, 251, 33, 80, 189, 109, 173, 108, 62, 80, 206, 229, 189, 111, 23, 212, 190, 59, 241, 117, 62, 90, 29, 1, 62, 84, 138, 74, 62, 52, 255, 246, 61, 118, 20, 159, 62, 180, 28, 88, 60, 19, 89, 4, 62, 214, 195, 227, 60, 104, 192, 40, 189, 147, 0, 36, 62, 183, 102, 29, 190, 120, 1, 128, 189, 56, 72, 61, 189, 149, 105, 83, 61, 71, 211, 11, 190, 18, 249, 20, 62, 209, 30, 19, 62, 244, 41, 39, 59, 228, 131, 233, 189, 81, 89, 132, 189, 65, 106, 150, 189, 244, 190, 182, 190, 145, 15, 143, 189, 51, 152, 13, 190, 140, 217, 51, 62, 231, 197, 201, 189, 151, 110, 207, 190, 80, 186, 227, 61, 96, 103, 146, 189, 78, 203, 102, 189, 224, 131, 227, 189, 95, 32, 84, 62, 46, 120, 164, 189, 208, 55, 213, 189, 136, 255, 92, 60, 82, 157, 240, 61, 189, 201, 148, 190, 8, 24, 134, 62, 145, 236, 98, 189, 43, 49, 191, 189, 68, 54, 181, 189, 23, 170, 57, 62, 201, 15, 63, 61, 231, 231, 102, 62, 248, 1, 168, 61, 64, 236, 88, 189, 39, 31, 134, 190, 17, 252, 10, 191, 57, 79, 98, 189, 244, 96, 180, 61, 151, 143, 112, 190, 16, 102, 191, 61, 146, 48, 111, 61, 146, 44, 255, 61, 125, 230, 29, 189, 120, 65, 22, 190, 253, 97, 20, 62, 66, 72, 131, 60, 103, 132, 55, 190, 68, 103, 254, 62, 187, 20, 2, 61, 28, 127, 73, 62, 249, 12, 37, 190, 213, 245, 167, 61, 152, 191, 108, 62, 142, 153, 225, 61, 30, 77, 218, 61, 254, 18, 17, 62, 188, 150, 71, 191, 44, 174, 148, 62, 25, 46, 32, 62, 210, 126, 11, 63, 221, 156, 43, 60, 82, 170, 244, 190, 186, 169, 83, 62, 64, 95, 39, 62, 254, 102, 20, 190, 142, 252, 138, 190, 158, 153, 137, 62, 85, 119, 169, 190, 36, 140, 238, 188, 139, 195, 138, 61, 152, 109, 12, 62, 246, 5, 219, 186, 185, 139, 45, 190, 142, 72, 143, 62, 32, 205, 8, 189, 58, 187, 119, 190, 156, 86, 92, 190, 79, 21, 14, 62, 38, 195, 241, 62, 239, 3, 62, 191, 19, 8, 231, 61, 91, 183, 53, 60, 207, 178, 130, 188, 246, 163, 8, 191, 133, 69, 248, 60, 68, 167, 138, 61, 62, 93, 124, 62, 10, 169, 175, 60, 112, 188, 226, 190, 72, 51, 203, 62, 34, 205, 149, 187, 155, 120, 66, 62, 94, 143, 100, 189, 141, 86, 246, 189, 91, 203, 117, 62, 10, 191, 143, 188, 144, 136, 181, 188, 162, 189, 173, 190, 206, 12, 137, 62, 200, 35, 232, 190, 112, 117, 109, 62, 96, 158, 127, 61, 200, 190, 37, 61, 174, 71, 2, 62, 244, 91, 117, 61, 165, 99, 157, 62, 29, 56, 197, 188, 236, 241, 171, 190, 157, 249, 32, 190, 11, 174, 111, 62, 144, 211, 98, 62, 50, 21, 209, 190, 153, 186, 40, 62, 179, 207, 30, 62, 33, 122, 19, 189, 45, 9, 122, 190, 135, 58, 21, 62, 16, 200, 35, 190, 114, 2, 117, 62, 231, 226, 70, 61, 8, 218, 118, 62, 238, 227, 213, 189, 138, 98, 71, 190, 114, 98, 135, 61, 215, 46, 237, 190, 151, 108, 69, 62, 184, 59, 66, 62, 192, 32, 76, 185, 250, 209, 58, 60, 206, 96, 77, 62, 142, 17, 194, 61, 9, 177, 129, 189, 43, 61, 69, 62, 206, 14, 231, 189, 208, 205, 155, 62, 57, 70, 222, 188, 39, 230, 14, 189, 192, 73, 82, 190, 219, 172, 17, 62, 209, 236, 37, 190, 99, 208, 154, 62, 151, 12, 60, 62, 71, 231, 219, 61, 135, 122, 76, 189, 184, 104, 145, 62, 128, 128, 111, 190, 41, 135, 188, 190, 0, 128, 226, 61, 36, 45, 17, 62, 184, 134, 0, 62, 41, 8, 176, 190, 104, 28, 188, 60, 122, 23, 25, 191, 243, 234, 193, 62, 44, 36, 114, 188, 60, 107, 11, 62, 184, 217, 155, 61, 122, 205, 213, 189, 105, 92, 106, 62, 213, 222, 127, 62, 201, 64, 242, 189, 38, 61, 111, 189, 46, 212, 75, 62, 96, 169, 193, 190, 133, 56, 1, 62, 76, 107, 123, 62, 50, 91, 7, 190, 155, 221, 24, 188, 106, 254, 111, 61, 222, 198, 145, 62, 53, 42, 180, 189, 225, 204, 56, 190, 190, 143, 18, 61, 39, 1, 7, 62, 26, 138, 161, 61, 204, 248, 151, 188, 163, 3, 10, 189, 49, 95, 151, 62, 132, 137, 30, 62, 196, 19, 164, 190, 34, 175, 167, 62, 121, 48, 90, 188, 190, 18, 131, 189, 38, 122, 161, 188, 142, 107, 9, 189, 80, 6, 30, 62, 119, 0, 12, 190, 225, 24, 170, 189, 56, 230, 243, 61, 67, 156, 47, 61, 246, 34, 81, 189, 238, 102, 17, 191, 205, 220, 71, 188, 152, 166, 18, 62, 219, 28, 139, 190, 104, 56, 159, 62, 8, 88, 234, 189, 160, 76, 14, 189, 41, 145, 126, 61, 172, 202, 238, 189, 77, 238, 18, 61, 114, 160, 4, 62, 10, 178, 70, 62, 40, 64, 48, 62, 65, 81, 157, 190, 150, 196, 90, 61, 219, 202, 208, 190, 228, 47, 81, 189, 5, 7, 30, 61, 148, 7, 137, 61, 104, 151, 116, 62, 157, 28, 224, 61, 233, 158, 214, 190, 144, 232, 177, 190, 133, 150, 96, 62, 125, 60, 11, 62, 79, 149, 113, 62, 159, 142, 152, 62, 196, 185, 39, 190, 78, 250, 34, 189, 234, 20, 205, 189, 20, 215, 152, 61, 55, 26, 73, 190, 77, 240, 129, 189, 208, 157, 154, 190, 40, 66, 26, 189, 198, 193, 44, 190, 138, 135, 16, 190, 216, 110, 219, 61, 100, 228, 93, 189, 198, 111, 80, 61, 28, 133, 22, 190, 227, 132, 46, 61, 38, 63, 42, 62, 61, 156, 229, 189, 134, 133, 58, 189, 229, 137, 200, 188, 86, 232, 2, 62, 105, 237, 180, 190, 102, 252, 149, 62, 218, 89, 77, 62, 82, 110, 208, 190, 161, 82, 21, 190, 186, 167, 224, 61, 130, 71, 253, 61, 213, 235, 234, 61, 86, 202, 41, 61, 129, 225, 70, 60, 159, 54, 96, 190, 133, 161, 40, 62, 170, 255, 35, 62, 156, 218, 98, 62, 206, 214, 163, 189, 255, 172, 61, 189, 57, 33, 5, 62, 215, 146, 189, 189, 43, 225, 208, 190, 33, 44, 108, 187, 203, 175, 112, 61, 155, 11, 150, 61, 21, 196, 161, 189, 141, 144, 14, 62, 128, 156, 167, 190, 193, 214, 224, 190, 84, 147, 169, 189, 30, 116, 78, 62, 136, 155, 5, 62, 158, 148, 249, 188, 159, 235, 13, 62, 114, 116, 170, 61, 237, 166, 166, 189, 135, 92, 217, 61, 87, 32, 114, 190, 246, 10, 78, 189, 140, 255, 5, 189, 129, 97, 75, 187, 21, 66, 188, 189, 161, 88, 73, 189, 110, 144, 19, 62, 253, 140, 252, 189, 84, 99, 148, 190, 138, 70, 24, 189, 74, 73, 11, 62, 84, 106, 196, 187, 40, 51, 230, 61, 240, 148, 155, 190, 161, 160, 113, 62, 182, 245, 76, 62, 198, 143, 160, 61, 104, 147, 209, 189, 38, 143, 227, 61, 170, 133, 79, 190, 125, 168, 115, 62, 156, 2, 192, 60, 176, 48, 154, 189, 35, 196, 129, 61, 70, 103, 46, 62, 254, 5, 135, 62, 70, 37, 244, 61, 181, 82, 119, 61, 8, 163, 193, 190, 63, 47, 121, 62, 54, 17, 140, 62, 150, 168, 224, 190, 240, 181, 6, 61, 159, 28, 90, 61, 204, 235, 125, 62, 204, 76, 27, 190, 188, 20, 183, 60, 201, 18, 34, 189, 150, 248, 2, 188, 152, 175, 93, 61, 249, 203, 98, 189, 231, 54, 141, 189, 164, 32, 129, 188, 183, 149, 89, 190, 192, 14, 80, 60, 253, 10, 18, 190, 249, 138, 157, 61, 147, 53, 10, 190, 108, 34, 172, 189, 157, 146, 13, 61, 56, 210, 159, 190, 19, 139, 179, 61, 139, 132, 214, 61, 34, 241, 189, 61, 43, 57, 137, 189, 120, 26, 7, 188, 108, 49, 67, 61, 167, 125, 48, 62, 51, 186, 76, 189, 13, 157, 57, 61, 57, 198, 51, 189, 7, 193, 91, 190, 204, 62, 254, 188, 108, 35, 185, 61, 91, 233, 248, 61, 104, 243, 249, 188, 89, 148, 174, 189, 147, 23, 237, 189, 168, 41, 168, 190, 108, 53, 172, 61, 208, 13, 71, 189, 35, 15, 93, 61, 37, 106, 3, 191, 111, 210, 193, 187, 31, 214, 42, 62, 224, 214, 25, 188, 92, 9, 143, 188, 172, 29, 60, 62, 147, 137, 224, 189, 130, 26, 47, 190, 255, 215, 202, 188, 99, 250, 219, 58, 144, 49, 122, 62, 216, 118, 168, 61, 172, 25, 134, 190, 121, 34, 112, 62, 167, 62, 8, 62, 114, 46, 238, 189, 207, 198, 33, 62, 181, 61, 148, 62, 86, 21, 58, 189, 221, 116, 244, 189, 9, 138, 18, 62, 200, 162, 83, 61, 243, 107, 241, 61, 95, 77, 183, 190, 216, 38, 204, 189, 4, 125, 110, 61, 177, 210, 38, 62, 250, 199, 39, 190, 30, 213, 35, 190, 136, 169, 209, 186, 44, 165, 160, 61, 87, 159, 35, 190, 237, 37, 214, 60, 128, 158, 93, 62, 149, 203, 152, 61, 168, 192, 134, 187, 136, 194, 108, 62, 46, 131, 196, 189, 153, 239, 160, 190, 189, 7, 71, 190, 33, 95, 197, 188, 42, 33, 222, 189, 63, 150, 18, 190, 219, 92, 66, 189, 41, 250, 132, 190, 164, 109, 203, 61, 52, 249, 129, 188, 233, 2, 50, 189, 32, 75, 67, 189, 66, 56, 105, 62, 192, 24, 107, 61, 255, 138, 73, 61, 19, 190, 214, 189, 132, 183, 157, 190, 150, 147, 59, 190, 99, 128, 172, 61, 158, 254, 86, 189, 191, 255, 17, 190, 54, 83, 109, 62, 107, 127, 175, 189, 19, 140, 130, 190, 165, 235, 89, 190, 169, 150, 101, 62, 109, 105, 43, 190, 140, 192, 145, 62, 177, 248, 2, 63, 214, 80, 92, 189, 0, 31, 58, 61, 51, 15, 226, 190, 140, 74, 255, 62, 53, 116, 249, 190, 84, 118, 189, 190, 73, 181, 214, 60, 90, 124, 85, 62, 233, 183, 166, 189, 74, 161, 143, 62, 58, 136, 62, 190, 127, 69, 73, 60, 200, 166, 55, 190, 223, 173, 107, 62, 130, 51, 81, 190, 145, 179, 240, 189, 166, 215, 183, 189, 22, 18, 134, 61, 254, 114, 203, 62, 159, 199, 50, 190, 227, 5, 36, 190, 187, 182, 128, 62, 144, 36, 70, 61, 224, 179, 222, 61, 30, 98, 4, 191, 109, 141, 117, 62, 193, 228, 3, 62, 195, 18, 43, 62, 221, 130, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 101, 128, 62, 146, 41, 156, 189, 49, 137, 24, 61, 206, 41, 47, 62, 31, 169, 124, 62, 103, 165, 18, 61, 122, 27, 18, 62, 142, 27, 163, 189, 189, 110, 247, 60, 234, 92, 170, 189, 95, 180, 26, 62, 250, 192, 109, 62, 30, 17, 221, 59, 96, 13, 69, 189, 21, 193, 20, 190, 53, 95, 21, 62, 187, 187, 227, 61, 178, 124, 44, 62, 141, 235, 183, 190, 174, 96, 79, 62, 131, 245, 51, 62, 185, 91, 11, 189, 180, 41, 34, 190, 194, 74, 182, 62, 69, 48, 10, 190, 221, 44, 85, 190, 69, 234, 143, 62, 170, 84, 73, 60, 227, 64, 171, 190, 39, 83, 144, 189, 43, 7, 79, 190, 16, 44, 72, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 231, 154, 62, 16, 112, 222, 187, 236, 127, 41, 63, 62, 163, 84, 190, 83, 16, 171, 189, 253, 40, 129, 61, 127, 141, 151, 62, 157, 249, 220, 62, 128, 26, 90, 62, 225, 158, 242, 59, 44, 87, 146, 63, 163, 203, 143, 62, 14, 76, 85, 189, 22, 220, 231, 189, 137, 228, 160, 62, 91, 171, 202, 62, 128, 173, 187, 62, 11, 222, 131, 190, 219, 228, 100, 190, 253, 62, 26, 190, 28, 163, 41, 191, 200, 203, 209, 190, 53, 108, 133, 62, 119, 157, 123, 190, 37, 250, 105, 62, 115, 173, 79, 190, 11, 9, 248, 188, 139, 162, 32, 190, 191, 185, 206, 61, 251, 138, 224, 189, 148, 147, 76, 62, 43, 20, 38, 63, 90, 159, 173, 190, 187, 27, 93, 62, 199, 56, 205, 62, 92, 195, 248, 189, 251, 255, 45, 190, 123, 87, 32, 62, 181, 78, 151, 190, 62, 255, 83, 62, 13, 33, 228, 189, 176, 202, 198, 189, 33, 188, 82, 60, 225, 80, 144, 190, 225, 179, 227, 60, 118, 113, 32, 62, 52, 83, 156, 189, 244, 1, 179, 188, 204, 10, 44, 190, 72, 39, 16, 189, 180, 36, 103, 62, 89, 102, 50, 190, 238, 139, 134, 61, 102, 227, 137, 189, 8, 233, 203, 61, 231, 74, 138, 190, 205, 116, 67, 61, 202, 34, 215, 62, 202, 242, 184, 190, 100, 86, 96, 62, 230, 95, 2, 62, 57, 8, 209, 189, 233, 57, 120, 62, 216, 106, 56, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 58, 208, 60, 26, 115, 45, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {42, 138, 137, 63, 247, 239, 223, 60, 24, 60, 77, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {64, 4, 197, 63, 208, 153, 3, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0048/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}