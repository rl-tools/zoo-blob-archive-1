// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 226, 62, 187, 149, 192, 9, 191, 24, 203, 250, 59, 234, 163, 25, 63, 130, 29, 98, 191, 116, 204, 168, 190, 119, 108, 247, 62, 105, 118, 39, 63, 33, 125, 231, 189, 152, 28, 167, 62, 244, 119, 10, 63, 115, 130, 132, 62, 187, 57, 110, 190, 237, 152, 174, 62, 74, 181, 184, 190, 108, 9, 237, 62, 116, 203, 56, 63, 172, 53, 68, 62, 30, 118, 30, 63, 132, 94, 170, 190, 117, 211, 40, 191, 211, 77, 187, 190, 139, 253, 191, 190, 67, 115, 11, 191, 205, 37, 54, 191, 6, 15, 156, 191, 189, 156, 207, 189, 32, 209, 102, 191, 101, 64, 63, 62, 174, 70, 144, 62, 200, 219, 74, 191, 219, 209, 39, 63, 125, 27, 234, 62, 157, 24, 182, 59, 184, 235, 103, 63, 184, 239, 114, 190, 87, 250, 177, 190, 182, 108, 205, 62, 222, 125, 103, 190, 109, 189, 20, 190, 160, 20, 155, 191, 44, 155, 253, 190, 2, 19, 21, 63, 140, 127, 75, 63, 220, 41, 241, 62, 8, 120, 66, 190, 227, 133, 65, 191, 221, 208, 38, 62, 241, 86, 145, 189, 100, 161, 106, 191, 59, 83, 112, 62, 133, 205, 151, 189, 129, 201, 87, 63, 150, 67, 143, 62, 180, 171, 253, 62, 219, 87, 175, 63, 32, 153, 71, 62, 190, 243, 192, 189, 95, 188, 60, 62, 184, 133, 111, 62, 3, 120, 95, 191, 87, 252, 30, 63, 223, 75, 60, 62, 90, 175, 70, 63, 126, 251, 85, 191, 159, 183, 53, 190, 38, 9, 4, 62, 253, 218, 234, 191, 167, 226, 9, 191, 168, 173, 240, 190, 130, 161, 176, 62, 102, 120, 220, 190, 60, 98, 64, 63, 123, 199, 215, 190, 100, 255, 140, 190, 101, 105, 255, 189, 129, 212, 129, 191, 211, 193, 26, 62, 12, 224, 105, 191, 43, 70, 171, 190, 232, 156, 233, 60, 124, 220, 60, 62, 76, 13, 85, 63, 58, 211, 164, 62, 128, 248, 23, 63, 146, 238, 79, 190, 95, 3, 176, 190, 227, 253, 140, 188, 25, 81, 69, 191, 101, 211, 138, 61, 190, 218, 136, 62, 169, 164, 40, 191, 162, 194, 215, 60, 96, 240, 252, 62, 166, 33, 155, 63, 202, 104, 135, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 210, 28, 191, 106, 3, 25, 191, 132, 8, 31, 190, 240, 123, 124, 190, 169, 18, 3, 63, 227, 87, 46, 190, 139, 10, 184, 189, 11, 188, 99, 190, 92, 43, 128, 62, 60, 123, 97, 63, 40, 247, 2, 191, 38, 113, 228, 62, 211, 99, 209, 190, 162, 95, 19, 190, 171, 211, 137, 62, 254, 177, 79, 61, 217, 246, 236, 61, 214, 11, 198, 189, 33, 172, 85, 62, 47, 135, 50, 191, 158, 243, 236, 61, 25, 142, 50, 62, 168, 105, 74, 62, 118, 73, 155, 190, 95, 111, 93, 191, 19, 23, 73, 62, 86, 105, 1, 62, 178, 115, 195, 190, 209, 205, 39, 191, 244, 213, 192, 62, 95, 111, 12, 189, 115, 73, 159, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 179, 162, 60, 110, 143, 63, 61, 40, 100, 168, 62, 33, 87, 40, 60, 35, 31, 53, 190, 127, 177, 68, 61, 165, 197, 99, 62, 229, 102, 123, 190, 233, 22, 81, 190, 251, 151, 145, 61, 88, 195, 202, 61, 33, 135, 52, 62, 51, 3, 117, 189, 32, 54, 148, 190, 40, 42, 224, 58, 144, 231, 130, 190, 227, 240, 154, 190, 237, 11, 169, 61, 138, 71, 100, 61, 225, 28, 197, 190, 87, 171, 58, 62, 141, 18, 214, 62, 225, 115, 144, 190, 222, 134, 147, 190, 23, 222, 66, 62, 88, 80, 111, 59, 140, 242, 122, 60, 13, 151, 74, 190, 167, 63, 108, 62, 98, 236, 99, 60, 5, 54, 55, 190, 24, 114, 113, 190, 115, 35, 19, 190, 242, 83, 150, 62, 191, 90, 254, 60, 159, 159, 174, 190, 33, 57, 100, 61, 18, 42, 232, 190, 14, 166, 10, 189, 159, 206, 59, 190, 75, 46, 218, 189, 110, 7, 228, 61, 173, 244, 159, 190, 255, 233, 224, 61, 60, 158, 90, 188, 184, 221, 134, 61, 36, 246, 207, 189, 23, 9, 52, 62, 110, 145, 60, 62, 246, 13, 237, 190, 63, 19, 35, 191, 205, 168, 130, 190, 179, 48, 149, 60, 134, 12, 223, 62, 198, 17, 87, 62, 3, 52, 115, 61, 211, 221, 217, 189, 190, 182, 184, 62, 245, 173, 227, 189, 17, 2, 48, 191, 117, 90, 4, 190, 130, 222, 187, 62, 136, 53, 82, 62, 220, 225, 52, 191, 250, 167, 100, 61, 39, 159, 141, 63, 6, 101, 210, 189, 234, 185, 163, 189, 127, 75, 75, 190, 231, 212, 56, 191, 63, 165, 140, 61, 46, 181, 26, 191, 18, 78, 131, 190, 3, 42, 123, 62, 122, 106, 86, 62, 184, 250, 76, 61, 147, 242, 248, 62, 203, 132, 154, 191, 46, 214, 241, 189, 49, 4, 207, 190, 236, 28, 64, 62, 66, 70, 5, 190, 73, 196, 2, 191, 27, 64, 48, 189, 21, 242, 76, 62, 87, 187, 18, 63, 96, 132, 226, 190, 29, 211, 58, 61, 111, 210, 38, 63, 12, 30, 50, 190, 249, 160, 25, 62, 200, 16, 32, 189, 142, 91, 232, 62, 20, 98, 106, 62, 48, 224, 154, 62, 255, 228, 25, 191, 107, 254, 175, 61, 167, 237, 178, 190, 85, 224, 204, 61, 25, 40, 69, 61, 142, 108, 136, 62, 102, 117, 56, 62, 59, 31, 136, 190, 179, 94, 85, 62, 149, 142, 131, 62, 28, 96, 30, 188, 13, 221, 34, 190, 148, 79, 18, 62, 65, 77, 147, 190, 156, 49, 55, 62, 98, 15, 57, 62, 56, 228, 150, 189, 48, 240, 223, 187, 132, 230, 56, 189, 9, 194, 180, 62, 8, 184, 105, 62, 19, 203, 192, 61, 192, 129, 128, 190, 50, 214, 1, 188, 104, 24, 76, 62, 218, 114, 77, 191, 44, 146, 185, 188, 247, 238, 91, 62, 129, 30, 232, 188, 40, 247, 176, 190, 159, 233, 86, 61, 60, 85, 210, 189, 75, 94, 113, 62, 225, 60, 192, 60, 98, 107, 131, 190, 210, 203, 254, 189, 57, 142, 26, 189, 212, 80, 229, 61, 103, 215, 113, 188, 120, 198, 178, 189, 182, 34, 76, 62, 206, 146, 22, 189, 204, 128, 27, 190, 97, 121, 127, 190, 199, 6, 51, 190, 241, 160, 207, 190, 42, 235, 106, 62, 182, 131, 40, 62, 6, 143, 185, 190, 198, 144, 195, 190, 3, 245, 203, 60, 238, 195, 75, 62, 105, 112, 219, 188, 240, 254, 174, 188, 184, 22, 37, 61, 28, 121, 28, 60, 255, 6, 100, 62, 76, 245, 184, 190, 22, 27, 202, 189, 138, 41, 7, 189, 12, 173, 165, 189, 240, 157, 230, 189, 95, 10, 49, 62, 35, 72, 130, 62, 68, 232, 151, 189, 79, 91, 155, 188, 197, 220, 45, 62, 220, 212, 181, 61, 193, 101, 16, 190, 220, 60, 15, 190, 227, 164, 32, 62, 83, 15, 11, 190, 26, 172, 14, 62, 33, 240, 221, 61, 249, 60, 39, 190, 58, 79, 192, 61, 92, 174, 135, 189, 2, 90, 8, 190, 92, 242, 45, 61, 130, 176, 150, 189, 96, 54, 184, 61, 86, 26, 66, 189, 98, 197, 202, 61, 2, 188, 1, 190, 206, 132, 225, 61, 49, 200, 250, 189, 209, 1, 155, 188, 161, 174, 49, 190, 109, 8, 25, 62, 236, 106, 203, 61, 4, 169, 252, 189, 6, 113, 253, 61, 221, 181, 155, 189, 240, 96, 209, 189, 188, 50, 181, 187, 151, 28, 62, 61, 147, 103, 16, 62, 67, 125, 221, 61, 60, 33, 18, 191, 230, 172, 31, 62, 140, 213, 143, 61, 7, 201, 61, 190, 144, 51, 146, 190, 83, 255, 111, 62, 185, 27, 226, 190, 146, 97, 62, 190, 30, 101, 72, 62, 202, 108, 95, 62, 123, 39, 7, 61, 208, 37, 140, 62, 176, 124, 24, 191, 18, 178, 136, 189, 157, 176, 128, 190, 152, 77, 152, 61, 179, 168, 130, 190, 225, 151, 42, 190, 232, 241, 233, 189, 217, 40, 3, 61, 181, 38, 211, 62, 225, 36, 121, 190, 28, 230, 173, 190, 52, 12, 25, 190, 192, 212, 15, 189, 88, 101, 115, 62, 210, 103, 145, 190, 92, 132, 29, 190, 86, 245, 106, 62, 52, 101, 243, 61, 70, 127, 38, 190, 77, 42, 64, 61, 1, 139, 110, 189, 115, 194, 232, 62, 4, 208, 143, 61, 80, 168, 181, 62, 4, 62, 175, 62, 224, 9, 226, 190, 32, 244, 54, 62, 37, 89, 140, 190, 209, 83, 81, 190, 56, 209, 97, 190, 82, 70, 171, 189, 227, 101, 237, 187, 174, 7, 224, 190, 183, 87, 65, 62, 141, 97, 1, 62, 227, 48, 236, 61, 113, 28, 10, 60, 41, 226, 17, 62, 105, 120, 93, 189, 93, 41, 113, 190, 46, 23, 136, 191, 225, 195, 35, 191, 146, 231, 113, 62, 26, 21, 150, 189, 249, 203, 62, 189, 68, 236, 250, 190, 206, 71, 115, 62, 43, 148, 181, 190, 134, 206, 157, 190, 155, 146, 26, 190, 131, 213, 81, 62, 128, 40, 139, 189, 14, 88, 189, 61, 20, 156, 130, 61, 164, 255, 91, 61, 9, 239, 142, 188, 109, 150, 96, 190, 241, 70, 18, 62, 54, 84, 31, 189, 100, 12, 73, 190, 172, 62, 62, 190, 178, 252, 21, 62, 232, 225, 42, 189, 173, 170, 64, 62, 192, 64, 201, 61, 45, 128, 157, 61, 207, 144, 132, 62, 82, 141, 129, 62, 126, 210, 182, 190, 19, 215, 228, 189, 230, 251, 166, 190, 211, 138, 75, 191, 52, 116, 243, 62, 108, 91, 195, 60, 130, 7, 27, 190, 140, 184, 215, 62, 177, 201, 90, 61, 255, 221, 72, 191, 115, 96, 144, 191, 233, 80, 29, 62, 166, 130, 57, 61, 77, 220, 48, 189, 216, 144, 12, 190, 242, 84, 50, 190, 5, 236, 0, 62, 99, 185, 22, 190, 88, 213, 136, 189, 75, 29, 147, 189, 35, 66, 197, 189, 189, 106, 192, 61, 211, 194, 149, 189, 209, 89, 9, 60, 124, 120, 23, 190, 135, 41, 36, 62, 185, 117, 97, 189, 167, 12, 160, 188, 252, 62, 29, 62, 110, 181, 193, 189, 2, 185, 210, 189, 217, 118, 156, 189, 215, 106, 161, 189, 227, 24, 174, 61, 240, 253, 51, 190, 161, 199, 140, 61, 237, 168, 198, 189, 170, 141, 247, 189, 111, 98, 75, 190, 39, 72, 191, 61, 207, 110, 238, 189, 89, 182, 39, 190, 81, 34, 179, 61, 254, 166, 60, 188, 118, 161, 49, 190, 67, 210, 140, 61, 99, 205, 138, 61, 42, 163, 211, 61, 231, 75, 246, 189, 169, 174, 92, 190, 243, 161, 79, 62, 88, 104, 155, 189, 218, 53, 248, 190, 157, 120, 216, 188, 168, 103, 226, 190, 48, 177, 39, 190, 252, 174, 158, 62, 166, 114, 252, 61, 162, 164, 155, 62, 65, 90, 9, 63, 169, 190, 199, 191, 228, 142, 19, 61, 107, 51, 109, 190, 16, 206, 189, 61, 234, 132, 141, 190, 166, 54, 76, 190, 158, 253, 212, 190, 227, 183, 217, 62, 102, 94, 145, 189, 105, 234, 235, 191, 31, 71, 62, 62, 103, 188, 162, 60, 48, 93, 142, 190, 201, 210, 146, 62, 76, 175, 50, 189, 158, 94, 138, 190, 123, 127, 247, 61, 8, 122, 95, 61, 42, 1, 109, 190, 158, 189, 31, 62, 70, 101, 197, 189, 66, 47, 116, 190, 228, 4, 105, 62, 211, 136, 47, 188, 155, 208, 93, 190, 76, 48, 75, 61, 179, 197, 116, 62, 31, 0, 193, 189, 161, 237, 39, 189, 48, 25, 42, 190, 227, 56, 179, 61, 108, 36, 132, 62, 253, 168, 113, 189, 92, 37, 46, 62, 70, 49, 157, 62, 130, 125, 244, 188, 44, 97, 141, 190, 76, 76, 144, 190, 90, 76, 140, 60, 70, 239, 92, 62, 183, 224, 186, 62, 208, 165, 29, 62, 94, 59, 136, 62, 65, 50, 1, 60, 128, 122, 173, 61, 185, 139, 157, 190, 183, 157, 79, 191, 207, 38, 183, 61, 122, 212, 6, 62, 95, 70, 222, 61, 86, 41, 1, 191, 190, 60, 10, 62, 38, 148, 22, 62, 185, 59, 34, 190, 119, 219, 165, 61, 145, 114, 53, 189, 189, 229, 91, 190, 52, 138, 157, 189, 0, 130, 178, 189, 96, 37, 85, 190, 99, 35, 230, 189, 80, 240, 128, 188, 193, 48, 109, 189, 232, 47, 28, 190, 185, 206, 175, 61, 6, 34, 137, 61, 46, 221, 204, 189, 221, 26, 42, 190, 134, 111, 5, 190, 164, 139, 76, 190, 172, 208, 169, 61, 236, 217, 55, 190, 79, 178, 165, 61, 102, 88, 238, 189, 108, 251, 160, 61, 252, 127, 250, 189, 207, 65, 235, 61, 8, 169, 172, 189, 49, 181, 34, 190, 6, 168, 236, 61, 82, 21, 198, 59, 177, 81, 246, 60, 6, 44, 88, 189, 207, 97, 124, 61, 44, 49, 170, 60, 85, 99, 156, 188, 153, 149, 244, 60, 10, 13, 42, 62, 233, 133, 223, 61, 100, 106, 127, 190, 226, 250, 38, 62, 46, 106, 200, 189, 164, 52, 200, 189, 205, 145, 197, 189, 220, 164, 54, 62, 235, 5, 43, 61, 201, 62, 80, 62, 6, 246, 151, 61, 117, 254, 187, 61, 131, 42, 66, 62, 22, 10, 165, 187, 211, 247, 41, 62, 90, 242, 3, 63, 215, 145, 198, 190, 20, 64, 207, 190, 130, 123, 254, 189, 74, 3, 151, 62, 209, 224, 131, 190, 106, 178, 234, 59, 161, 240, 2, 190, 189, 211, 142, 61, 10, 5, 236, 60, 254, 63, 81, 190, 228, 206, 56, 190, 141, 221, 150, 62, 39, 72, 42, 190, 117, 182, 68, 190, 44, 3, 116, 61, 83, 10, 30, 62, 221, 190, 244, 61, 32, 27, 18, 190, 226, 100, 139, 189, 31, 57, 127, 190, 184, 174, 147, 62, 238, 202, 171, 190, 87, 202, 141, 189, 131, 73, 132, 60, 101, 170, 145, 190, 217, 166, 22, 190, 221, 205, 80, 62, 130, 31, 159, 62, 216, 21, 165, 62, 241, 60, 154, 190, 98, 48, 231, 189, 209, 30, 13, 190, 12, 136, 220, 190, 59, 53, 170, 62, 22, 150, 41, 62, 232, 66, 10, 190, 76, 134, 12, 189, 193, 233, 219, 62, 2, 14, 3, 191, 206, 154, 135, 191, 224, 130, 66, 190, 238, 170, 17, 61, 140, 57, 62, 62, 108, 28, 56, 190, 250, 117, 124, 61, 147, 199, 210, 62, 181, 67, 7, 63, 37, 22, 72, 61, 55, 53, 130, 189, 83, 27, 3, 191, 35, 104, 249, 62, 18, 61, 106, 191, 115, 114, 43, 61, 54, 234, 66, 61, 248, 123, 163, 189, 156, 114, 181, 184, 17, 118, 77, 62, 180, 217, 166, 190, 139, 244, 93, 190, 221, 100, 88, 189, 247, 254, 249, 62, 101, 252, 229, 190, 128, 235, 4, 190, 110, 24, 163, 189, 237, 79, 144, 187, 126, 167, 227, 62, 132, 12, 212, 189, 219, 128, 113, 191, 92, 55, 119, 62, 74, 122, 1, 189, 230, 92, 75, 190, 28, 58, 220, 190, 49, 169, 191, 62, 106, 29, 158, 62, 253, 51, 104, 62, 237, 26, 132, 190, 47, 213, 15, 190, 225, 37, 199, 62, 131, 185, 214, 62, 217, 198, 16, 190, 106, 1, 92, 190, 133, 65, 179, 190, 15, 71, 85, 62, 71, 224, 72, 191, 203, 44, 77, 62, 113, 123, 104, 62, 246, 61, 114, 62, 73, 37, 53, 189, 14, 79, 20, 190, 85, 150, 151, 190, 159, 251, 165, 61, 102, 162, 52, 189, 55, 87, 96, 62, 28, 81, 133, 190, 213, 16, 85, 190, 189, 250, 41, 190, 2, 45, 176, 61, 234, 15, 237, 62, 112, 32, 200, 61, 244, 241, 7, 191, 230, 128, 132, 62, 88, 57, 190, 188, 146, 46, 151, 189, 4, 202, 144, 189, 220, 102, 165, 62, 211, 106, 169, 58, 218, 133, 129, 62, 119, 17, 35, 190, 10, 29, 37, 190, 231, 151, 198, 190, 212, 195, 245, 61, 213, 4, 16, 190, 29, 45, 13, 62, 255, 46, 194, 189, 182, 29, 157, 190, 159, 98, 131, 62, 90, 69, 209, 62, 88, 164, 69, 60, 4, 253, 15, 188, 98, 128, 135, 62, 89, 216, 148, 190, 54, 167, 40, 189, 43, 120, 4, 62, 55, 66, 159, 187, 152, 250, 28, 190, 123, 242, 103, 61, 73, 112, 155, 62, 137, 21, 132, 62, 25, 110, 110, 189, 67, 93, 92, 190, 20, 40, 85, 62, 184, 221, 190, 62, 250, 168, 143, 191, 114, 228, 4, 190, 81, 8, 166, 62, 191, 188, 38, 190, 214, 211, 221, 190, 202, 183, 110, 62, 43, 13, 33, 62, 193, 249, 71, 62, 52, 255, 246, 61, 125, 124, 251, 62, 25, 22, 25, 60, 167, 162, 254, 189, 17, 139, 28, 61, 224, 1, 25, 191, 8, 15, 124, 62, 233, 188, 227, 189, 6, 2, 44, 60, 106, 147, 94, 190, 104, 89, 162, 59, 12, 77, 110, 190, 9, 68, 119, 60, 174, 150, 130, 62, 110, 19, 238, 188, 114, 209, 170, 190, 186, 9, 117, 190, 242, 229, 71, 190, 210, 175, 190, 191, 4, 192, 149, 189, 90, 95, 216, 190, 107, 231, 213, 62, 243, 141, 64, 61, 147, 107, 232, 190, 247, 119, 132, 62, 244, 142, 161, 61, 149, 214, 45, 62, 119, 58, 50, 190, 153, 65, 143, 62, 110, 121, 66, 61, 82, 139, 117, 61, 13, 173, 93, 191, 82, 157, 240, 61, 159, 188, 194, 185, 135, 105, 27, 62, 236, 4, 77, 189, 44, 119, 107, 190, 175, 239, 198, 189, 177, 229, 33, 62, 175, 142, 85, 61, 76, 220, 26, 62, 169, 75, 179, 60, 143, 2, 239, 189, 251, 167, 239, 190, 112, 95, 79, 191, 217, 70, 11, 189, 148, 120, 180, 61, 247, 102, 174, 190, 115, 233, 220, 189, 210, 85, 100, 61, 189, 161, 71, 61, 79, 179, 95, 62, 149, 41, 137, 189, 189, 191, 41, 62, 44, 205, 168, 60, 181, 168, 148, 190, 126, 119, 48, 63, 174, 219, 223, 188, 235, 75, 10, 62, 143, 180, 34, 190, 104, 74, 219, 61, 203, 21, 135, 62, 4, 227, 129, 62, 223, 227, 134, 61, 254, 18, 17, 62, 43, 191, 132, 191, 124, 28, 138, 62, 200, 226, 6, 62, 176, 243, 8, 63, 83, 37, 223, 59, 207, 31, 251, 190, 117, 34, 28, 62, 189, 72, 142, 61, 208, 45, 167, 190, 141, 16, 252, 190, 199, 174, 143, 62, 243, 155, 147, 190, 126, 157, 40, 190, 17, 28, 149, 61, 53, 247, 193, 61, 114, 147, 189, 189, 16, 140, 25, 190, 90, 176, 190, 62, 39, 55, 203, 60, 85, 103, 193, 190, 231, 43, 135, 190, 72, 244, 174, 188, 167, 123, 226, 62, 45, 40, 195, 191, 213, 207, 128, 61, 31, 230, 69, 188, 233, 220, 64, 189, 194, 100, 26, 191, 131, 72, 191, 59, 125, 47, 163, 61, 19, 132, 142, 62, 10, 169, 175, 60, 198, 69, 209, 190, 236, 71, 184, 62, 210, 55, 225, 187, 182, 254, 55, 62, 37, 206, 68, 189, 227, 148, 214, 189, 25, 173, 112, 62, 244, 23, 244, 60, 102, 179, 76, 190, 140, 165, 237, 190, 164, 161, 103, 62, 130, 70, 251, 190, 99, 240, 108, 62, 66, 130, 129, 61, 238, 10, 44, 189, 71, 55, 134, 57, 38, 251, 109, 61, 251, 45, 180, 62, 198, 218, 157, 62, 12, 109, 230, 190, 211, 12, 33, 190, 26, 9, 103, 62, 195, 207, 43, 62, 195, 154, 30, 191, 74, 204, 66, 62, 250, 213, 63, 62, 136, 38, 153, 187, 201, 204, 132, 190, 237, 117, 44, 62, 19, 32, 145, 189, 154, 153, 137, 62, 231, 226, 70, 61, 184, 239, 63, 62, 9, 217, 54, 189, 201, 50, 164, 190, 160, 141, 44, 61, 93, 112, 93, 191, 69, 239, 41, 62, 21, 184, 57, 62, 73, 218, 160, 189, 170, 116, 44, 62, 12, 11, 144, 58, 173, 125, 219, 61, 133, 36, 32, 189, 254, 132, 54, 62, 17, 175, 26, 190, 163, 104, 210, 62, 47, 209, 49, 62, 207, 107, 130, 190, 247, 40, 15, 191, 1, 97, 145, 189, 90, 62, 127, 190, 2, 146, 218, 62, 14, 156, 88, 62, 197, 230, 17, 62, 193, 169, 29, 62, 71, 234, 228, 62, 128, 59, 176, 190, 240, 50, 54, 191, 11, 196, 209, 61, 149, 139, 120, 62, 170, 95, 75, 62, 183, 179, 85, 191, 104, 28, 188, 60, 110, 31, 6, 191, 64, 246, 157, 62, 89, 20, 22, 188, 232, 52, 253, 61, 71, 56, 144, 61, 4, 87, 186, 189, 205, 94, 112, 62, 209, 126, 153, 62, 55, 42, 111, 190, 174, 54, 239, 189, 246, 226, 22, 62, 53, 18, 197, 190, 129, 199, 11, 62, 242, 134, 128, 62, 9, 209, 110, 190, 155, 13, 68, 190, 122, 130, 157, 61, 67, 255, 153, 62, 225, 156, 43, 62, 3, 151, 29, 190, 99, 41, 61, 61, 13, 63, 12, 62, 62, 218, 53, 61, 57, 196, 129, 190, 248, 206, 157, 189, 235, 32, 153, 62, 83, 29, 33, 62, 2, 212, 159, 190, 13, 123, 187, 62, 42, 119, 0, 62, 189, 73, 170, 189, 38, 122, 161, 188, 254, 127, 174, 188, 7, 13, 213, 62, 4, 76, 141, 187, 210, 19, 26, 190, 127, 223, 163, 62, 18, 131, 160, 62, 179, 211, 226, 189, 21, 246, 9, 191, 101, 194, 166, 61, 220, 241, 137, 62, 95, 35, 137, 190, 73, 193, 247, 60, 239, 98, 19, 189, 231, 158, 226, 61, 100, 77, 135, 61, 119, 168, 170, 189, 245, 219, 61, 62, 244, 240, 176, 62, 198, 59, 2, 190, 249, 196, 125, 62, 246, 213, 242, 190, 37, 19, 157, 189, 185, 84, 42, 191, 244, 113, 253, 61, 160, 34, 214, 60, 130, 108, 241, 61, 8, 222, 203, 62, 195, 48, 6, 62, 195, 166, 241, 190, 83, 28, 66, 191, 225, 32, 223, 62, 125, 60, 11, 62, 204, 219, 141, 62, 69, 157, 6, 63, 106, 51, 142, 190, 52, 13, 112, 188, 1, 174, 115, 190, 31, 82, 228, 61, 93, 91, 62, 190, 42, 197, 21, 190, 36, 143, 150, 190, 14, 251, 109, 189, 63, 72, 23, 190, 148, 58, 91, 190, 37, 79, 0, 62, 1, 252, 226, 189, 217, 209, 177, 189, 157, 243, 145, 190, 170, 251, 213, 60, 59, 103, 137, 190, 61, 156, 229, 189, 112, 12, 192, 188, 42, 200, 232, 60, 49, 246, 27, 62, 180, 49, 190, 190, 46, 66, 175, 62, 146, 60, 179, 62, 155, 211, 115, 190, 84, 229, 31, 190, 65, 142, 20, 62, 158, 45, 62, 62, 145, 50, 62, 62, 180, 166, 14, 190, 129, 225, 70, 60, 122, 130, 56, 190, 58, 229, 73, 60, 205, 60, 125, 62, 179, 164, 238, 61, 250, 67, 176, 189, 74, 74, 78, 189, 239, 69, 0, 62, 219, 201, 60, 188, 196, 193, 35, 191, 52, 194, 194, 61, 204, 229, 191, 189, 109, 245, 36, 61, 206, 79, 65, 189, 117, 213, 102, 62, 35, 179, 195, 190, 113, 63, 34, 191, 167, 213, 99, 60, 239, 164, 71, 62, 249, 131, 81, 62, 222, 168, 213, 189, 90, 245, 128, 62, 172, 34, 43, 62, 219, 48, 211, 189, 250, 155, 49, 61, 23, 106, 176, 189, 191, 238, 189, 190, 97, 248, 133, 61, 242, 191, 0, 61, 239, 210, 29, 62, 199, 234, 170, 62, 95, 188, 181, 61, 253, 140, 252, 189, 2, 154, 186, 190, 75, 67, 164, 189, 189, 150, 11, 189, 218, 105, 108, 61, 92, 204, 129, 61, 37, 48, 145, 190, 159, 15, 98, 62, 38, 215, 194, 62, 46, 221, 47, 189, 3, 51, 44, 190, 160, 31, 30, 62, 159, 93, 131, 190, 50, 167, 132, 62, 6, 160, 250, 189, 142, 61, 240, 189, 20, 35, 149, 61, 186, 178, 19, 62, 101, 101, 11, 63, 243, 232, 188, 62, 183, 87, 43, 189, 157, 131, 249, 190, 248, 75, 136, 62, 226, 243, 50, 62, 182, 182, 74, 191, 211, 115, 133, 61, 187, 253, 13, 62, 145, 104, 20, 62, 237, 100, 101, 190, 146, 245, 140, 189, 192, 140, 6, 190, 66, 2, 20, 61, 152, 175, 93, 61, 249, 203, 98, 189, 231, 54, 141, 189, 121, 35, 248, 188, 183, 149, 89, 190, 41, 173, 185, 187, 253, 10, 18, 190, 249, 138, 157, 61, 147, 53, 10, 190, 233, 156, 197, 189, 61, 252, 163, 60, 56, 210, 159, 190, 19, 139, 179, 61, 139, 132, 214, 61, 2, 153, 157, 61, 71, 128, 159, 189, 3, 84, 199, 188, 202, 120, 253, 60, 250, 29, 30, 62, 103, 67, 97, 189, 141, 246, 242, 60, 57, 198, 51, 189, 7, 193, 91, 190, 204, 62, 254, 188, 108, 35, 185, 61, 129, 218, 235, 61, 38, 202, 12, 189, 117, 59, 219, 189, 147, 23, 237, 189, 197, 241, 171, 190, 108, 53, 172, 61, 180, 179, 137, 189, 35, 15, 93, 61, 122, 163, 155, 191, 82, 31, 70, 61, 17, 134, 69, 62, 123, 46, 141, 61, 193, 254, 214, 188, 183, 250, 88, 62, 54, 183, 160, 189, 163, 28, 253, 190, 10, 192, 61, 190, 50, 152, 249, 189, 90, 105, 176, 62, 69, 159, 158, 62, 10, 54, 198, 190, 189, 180, 132, 62, 31, 34, 45, 62, 229, 145, 1, 190, 96, 175, 247, 61, 146, 194, 172, 62, 87, 35, 212, 62, 10, 235, 156, 190, 217, 109, 241, 61, 197, 172, 212, 189, 138, 39, 107, 62, 70, 235, 210, 191, 240, 20, 175, 60, 95, 173, 168, 189, 177, 18, 37, 62, 214, 214, 78, 190, 31, 57, 153, 189, 216, 204, 75, 62, 98, 111, 126, 61, 87, 159, 35, 190, 252, 155, 140, 61, 211, 182, 159, 62, 206, 146, 167, 61, 70, 255, 44, 61, 72, 2, 158, 62, 85, 238, 20, 62, 102, 127, 229, 189, 167, 137, 129, 190, 178, 71, 232, 60, 95, 203, 16, 189, 199, 0, 1, 190, 183, 158, 153, 189, 179, 175, 51, 190, 1, 125, 4, 62, 203, 42, 2, 190, 187, 188, 248, 189, 80, 100, 206, 60, 156, 168, 165, 62, 213, 34, 241, 190, 34, 50, 180, 61, 118, 227, 98, 190, 82, 169, 215, 190, 127, 201, 133, 190, 75, 122, 116, 62, 160, 216, 95, 190, 243, 243, 230, 189, 196, 145, 149, 62, 194, 209, 15, 190, 49, 6, 219, 190, 233, 137, 10, 191, 127, 192, 162, 62, 109, 105, 43, 190, 174, 141, 197, 62, 157, 104, 5, 63, 79, 227, 35, 189, 104, 210, 58, 61, 242, 197, 247, 190, 200, 105, 252, 62, 117, 50, 238, 190, 102, 195, 194, 190, 6, 200, 217, 61, 208, 89, 11, 62, 146, 181, 144, 189, 125, 156, 158, 62, 143, 20, 57, 190, 103, 76, 10, 58, 112, 197, 128, 188, 109, 170, 214, 62, 117, 213, 250, 190, 117, 181, 81, 190, 59, 72, 29, 189, 36, 141, 166, 61, 136, 175, 207, 62, 167, 158, 39, 190, 67, 242, 182, 189, 224, 176, 13, 63, 48, 110, 168, 61, 87, 226, 133, 187, 69, 139, 52, 191, 182, 222, 177, 62, 33, 126, 5, 62, 245, 186, 205, 61, 116, 216, 33, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 161, 84, 62, 194, 251, 73, 188, 104, 65, 8, 188, 39, 154, 67, 62, 130, 93, 98, 62, 103, 165, 18, 61, 53, 168, 38, 62, 9, 108, 246, 189, 102, 250, 118, 188, 234, 92, 170, 189, 77, 4, 24, 62, 61, 72, 93, 62, 30, 17, 221, 59, 176, 230, 212, 189, 204, 108, 184, 189, 0, 28, 36, 62, 227, 201, 19, 62, 114, 98, 52, 62, 118, 202, 143, 190, 42, 126, 37, 62, 217, 103, 56, 62, 185, 32, 234, 188, 131, 198, 28, 190, 189, 175, 188, 62, 101, 148, 149, 188, 207, 205, 50, 190, 158, 242, 134, 62, 217, 47, 243, 60, 120, 26, 177, 190, 48, 32, 186, 188, 96, 122, 35, 190, 48, 1, 34, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 198, 130, 62, 156, 147, 213, 61, 197, 25, 89, 63, 185, 228, 76, 190, 18, 119, 144, 189, 253, 40, 129, 61, 134, 33, 70, 62, 202, 141, 77, 63, 211, 225, 94, 62, 225, 158, 242, 59, 202, 167, 166, 63, 96, 121, 127, 62, 14, 76, 85, 189, 61, 185, 148, 189, 62, 5, 189, 62, 254, 114, 213, 62, 55, 84, 174, 62, 115, 243, 140, 190, 231, 75, 57, 191, 27, 18, 38, 190, 190, 56, 74, 191, 177, 140, 192, 190, 236, 198, 174, 62, 8, 136, 100, 190, 216, 16, 237, 62, 130, 100, 245, 190, 162, 96, 137, 189, 219, 228, 142, 190, 164, 238, 205, 61, 159, 234, 153, 190, 15, 32, 217, 62, 252, 198, 44, 63, 153, 208, 125, 190, 45, 105, 159, 62, 176, 137, 28, 63, 186, 23, 179, 189, 173, 75, 72, 190, 123, 87, 32, 62, 86, 217, 228, 190, 97, 172, 56, 62, 200, 249, 61, 190, 176, 202, 198, 189, 191, 55, 69, 189, 186, 251, 183, 190, 225, 179, 227, 60, 193, 45, 8, 62, 225, 149, 126, 190, 133, 68, 217, 61, 151, 243, 16, 190, 52, 115, 231, 188, 208, 105, 193, 61, 146, 35, 135, 190, 102, 54, 196, 61, 184, 53, 134, 60, 82, 227, 10, 62, 114, 111, 137, 190, 209, 147, 43, 59, 188, 168, 157, 62, 121, 135, 218, 190, 155, 219, 154, 62, 48, 133, 1, 62, 110, 139, 154, 190, 121, 9, 32, 62, 77, 247, 246, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 62, 148, 58, 175, 62, 89, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {85, 113, 45, 62, 169, 185, 194, 191, 218, 7, 78, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {0, 245, 239, 63, 133, 114, 98, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0048/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}