// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 226, 62, 187, 149, 192, 9, 191, 24, 203, 250, 59, 197, 176, 20, 63, 0, 79, 93, 191, 68, 50, 170, 190, 31, 249, 2, 63, 152, 97, 32, 63, 59, 34, 150, 189, 86, 140, 189, 62, 5, 5, 244, 62, 11, 73, 167, 62, 10, 5, 116, 190, 42, 248, 175, 62, 5, 216, 189, 190, 76, 231, 235, 62, 140, 189, 53, 63, 79, 135, 38, 62, 162, 28, 34, 63, 211, 4, 167, 190, 92, 133, 39, 191, 175, 73, 169, 190, 190, 123, 190, 190, 118, 25, 15, 191, 253, 117, 45, 191, 235, 166, 149, 191, 102, 157, 207, 189, 90, 116, 92, 191, 160, 116, 63, 62, 97, 252, 133, 62, 64, 83, 67, 191, 139, 241, 44, 63, 108, 166, 221, 62, 35, 10, 86, 60, 119, 144, 102, 63, 160, 71, 118, 190, 9, 149, 155, 190, 0, 181, 208, 62, 53, 79, 125, 190, 238, 219, 11, 190, 206, 145, 151, 191, 67, 215, 3, 191, 3, 208, 27, 63, 55, 65, 62, 63, 124, 210, 249, 62, 26, 19, 90, 190, 67, 79, 52, 191, 254, 132, 20, 62, 86, 57, 114, 189, 163, 207, 62, 191, 141, 232, 145, 62, 108, 134, 121, 189, 239, 251, 89, 63, 65, 244, 147, 62, 76, 143, 253, 62, 233, 33, 168, 63, 206, 144, 83, 62, 132, 215, 151, 189, 45, 156, 25, 62, 48, 112, 59, 62, 108, 38, 83, 191, 3, 89, 22, 63, 10, 126, 62, 62, 9, 211, 73, 63, 111, 73, 79, 191, 43, 109, 42, 190, 153, 241, 9, 62, 60, 4, 232, 191, 199, 124, 15, 191, 151, 216, 223, 190, 9, 217, 155, 62, 78, 4, 223, 190, 80, 214, 66, 63, 0, 53, 224, 190, 217, 157, 141, 190, 185, 111, 155, 189, 42, 137, 125, 191, 191, 150, 19, 62, 135, 102, 101, 191, 135, 252, 137, 190, 20, 78, 224, 60, 247, 15, 108, 62, 176, 66, 82, 63, 40, 245, 174, 62, 160, 11, 12, 63, 218, 171, 100, 190, 155, 243, 177, 190, 101, 104, 162, 61, 99, 196, 45, 191, 113, 19, 154, 61, 215, 100, 160, 62, 34, 97, 15, 191, 82, 225, 244, 60, 123, 18, 253, 62, 249, 23, 151, 63, 127, 226, 121, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 210, 28, 191, 204, 245, 26, 191, 241, 227, 1, 190, 174, 140, 82, 190, 100, 183, 2, 63, 86, 97, 43, 190, 152, 91, 148, 189, 50, 30, 84, 190, 202, 16, 153, 62, 24, 8, 105, 63, 149, 248, 7, 191, 195, 120, 231, 62, 36, 136, 173, 190, 18, 117, 224, 189, 31, 189, 153, 62, 117, 18, 254, 188, 69, 253, 246, 61, 73, 213, 129, 189, 59, 243, 81, 62, 28, 214, 64, 191, 241, 216, 212, 61, 66, 136, 64, 62, 214, 52, 77, 62, 188, 75, 164, 190, 5, 193, 80, 191, 109, 7, 91, 62, 38, 245, 19, 62, 127, 75, 170, 190, 14, 64, 34, 191, 139, 161, 236, 62, 186, 234, 186, 59, 241, 191, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 179, 162, 60, 171, 99, 124, 60, 0, 60, 175, 62, 56, 235, 77, 61, 141, 186, 66, 190, 198, 148, 126, 61, 109, 155, 100, 62, 120, 214, 133, 190, 38, 47, 39, 190, 13, 83, 223, 61, 55, 181, 5, 62, 212, 242, 46, 62, 149, 153, 73, 189, 88, 222, 152, 190, 2, 145, 142, 60, 224, 182, 67, 190, 144, 88, 129, 190, 60, 103, 175, 61, 74, 27, 134, 61, 112, 84, 142, 190, 73, 168, 67, 62, 245, 79, 218, 62, 243, 175, 158, 190, 42, 24, 150, 190, 108, 157, 243, 61, 72, 241, 23, 60, 101, 141, 112, 61, 49, 68, 59, 190, 77, 204, 71, 62, 226, 241, 4, 61, 24, 29, 36, 190, 104, 4, 97, 190, 115, 35, 19, 190, 173, 220, 157, 62, 224, 148, 142, 61, 104, 200, 183, 190, 180, 215, 125, 61, 122, 116, 200, 190, 157, 71, 152, 188, 135, 185, 59, 190, 167, 63, 211, 189, 23, 69, 82, 61, 178, 149, 139, 190, 237, 163, 246, 61, 12, 22, 140, 188, 238, 122, 149, 61, 162, 203, 255, 189, 86, 119, 16, 62, 63, 250, 246, 61, 92, 196, 218, 190, 46, 218, 7, 191, 155, 187, 61, 190, 88, 210, 151, 186, 226, 240, 227, 62, 61, 51, 90, 62, 107, 105, 89, 61, 84, 13, 233, 189, 10, 122, 156, 62, 212, 30, 13, 190, 88, 238, 38, 191, 172, 49, 252, 189, 60, 33, 172, 62, 91, 23, 47, 62, 52, 28, 36, 191, 250, 167, 100, 61, 206, 31, 141, 63, 195, 17, 157, 189, 77, 137, 140, 189, 207, 27, 70, 190, 146, 49, 38, 191, 240, 145, 186, 61, 245, 237, 30, 191, 43, 49, 130, 190, 132, 136, 126, 62, 52, 194, 71, 62, 222, 20, 127, 61, 107, 245, 247, 62, 74, 226, 145, 191, 51, 115, 219, 189, 227, 113, 208, 190, 65, 214, 61, 62, 84, 21, 16, 190, 69, 161, 231, 190, 77, 172, 237, 189, 227, 217, 66, 62, 139, 112, 22, 63, 113, 58, 231, 190, 177, 232, 9, 61, 42, 144, 42, 63, 14, 96, 54, 190, 244, 86, 21, 62, 182, 17, 46, 189, 170, 249, 228, 62, 55, 164, 115, 62, 66, 92, 162, 62, 87, 136, 3, 191, 107, 254, 175, 61, 64, 150, 200, 190, 225, 22, 202, 61, 115, 242, 97, 61, 181, 144, 139, 62, 168, 4, 59, 62, 9, 154, 140, 190, 252, 21, 79, 62, 36, 88, 84, 62, 58, 3, 86, 61, 68, 9, 4, 190, 114, 129, 30, 62, 253, 137, 144, 190, 230, 242, 35, 62, 88, 45, 57, 62, 17, 150, 91, 188, 159, 233, 70, 61, 123, 220, 191, 188, 221, 236, 176, 62, 19, 166, 63, 62, 156, 111, 1, 62, 6, 127, 133, 190, 221, 245, 155, 188, 226, 94, 82, 62, 207, 182, 70, 191, 247, 127, 26, 61, 195, 184, 93, 62, 71, 9, 98, 188, 50, 108, 174, 190, 45, 237, 67, 61, 232, 235, 228, 189, 191, 148, 115, 62, 225, 60, 192, 60, 186, 73, 126, 190, 208, 230, 1, 190, 27, 13, 153, 187, 143, 185, 250, 61, 234, 117, 70, 187, 42, 153, 174, 189, 137, 175, 84, 62, 54, 115, 4, 189, 39, 100, 225, 189, 206, 37, 83, 190, 205, 35, 42, 190, 217, 168, 207, 190, 76, 166, 115, 62, 74, 214, 46, 62, 8, 151, 164, 190, 98, 50, 152, 190, 146, 128, 160, 186, 154, 230, 73, 62, 151, 146, 178, 188, 154, 24, 214, 188, 114, 149, 34, 61, 165, 61, 53, 60, 157, 76, 108, 62, 148, 158, 162, 190, 50, 213, 54, 189, 30, 244, 159, 187, 26, 59, 214, 189, 123, 141, 192, 189, 216, 131, 47, 62, 90, 98, 123, 62, 251, 144, 117, 189, 79, 91, 155, 188, 197, 220, 45, 62, 220, 212, 181, 61, 193, 101, 16, 190, 220, 60, 15, 190, 227, 164, 32, 62, 83, 15, 11, 190, 26, 172, 14, 62, 33, 240, 221, 61, 249, 60, 39, 190, 58, 79, 192, 61, 92, 174, 135, 189, 2, 90, 8, 190, 92, 242, 45, 61, 130, 176, 150, 189, 96, 54, 184, 61, 86, 26, 66, 189, 98, 197, 202, 61, 2, 188, 1, 190, 206, 132, 225, 61, 49, 200, 250, 189, 209, 1, 155, 188, 161, 174, 49, 190, 109, 8, 25, 62, 236, 106, 203, 61, 4, 169, 252, 189, 6, 113, 253, 61, 221, 181, 155, 189, 240, 96, 209, 189, 188, 50, 181, 187, 151, 28, 62, 61, 147, 103, 16, 62, 67, 125, 221, 61, 138, 241, 8, 191, 84, 122, 48, 62, 79, 167, 189, 61, 64, 41, 72, 190, 235, 3, 140, 190, 231, 9, 108, 62, 181, 154, 220, 190, 174, 201, 72, 190, 11, 235, 82, 62, 118, 162, 79, 62, 12, 99, 23, 61, 231, 132, 143, 62, 215, 101, 28, 191, 221, 110, 108, 189, 120, 206, 133, 190, 16, 244, 149, 61, 11, 192, 141, 190, 9, 1, 29, 190, 214, 153, 51, 190, 2, 51, 213, 60, 215, 70, 213, 62, 254, 207, 143, 190, 213, 116, 153, 190, 124, 101, 215, 189, 17, 38, 113, 189, 28, 248, 95, 62, 250, 54, 161, 190, 140, 98, 162, 189, 134, 50, 110, 62, 154, 235, 0, 62, 17, 95, 20, 190, 77, 42, 64, 61, 1, 139, 110, 189, 7, 72, 0, 63, 48, 229, 111, 61, 183, 185, 198, 62, 109, 89, 173, 62, 210, 88, 203, 190, 46, 82, 93, 62, 221, 112, 137, 190, 143, 55, 104, 190, 12, 78, 155, 190, 229, 11, 117, 189, 109, 11, 69, 60, 189, 191, 204, 190, 152, 137, 58, 62, 65, 47, 9, 62, 78, 121, 226, 61, 244, 153, 27, 188, 253, 42, 20, 62, 109, 84, 214, 189, 21, 218, 135, 190, 73, 67, 117, 191, 219, 69, 21, 191, 202, 190, 132, 62, 203, 153, 142, 189, 26, 222, 54, 189, 101, 40, 249, 190, 187, 5, 101, 62, 241, 114, 118, 190, 59, 126, 156, 190, 155, 146, 26, 190, 134, 217, 77, 62, 128, 40, 139, 189, 85, 215, 191, 61, 181, 127, 163, 61, 177, 204, 148, 61, 157, 61, 169, 188, 164, 11, 83, 190, 153, 106, 22, 62, 81, 44, 52, 189, 132, 146, 49, 190, 186, 253, 66, 190, 134, 210, 4, 62, 156, 230, 36, 189, 147, 134, 48, 62, 13, 218, 193, 61, 157, 57, 182, 61, 195, 74, 59, 62, 32, 123, 81, 62, 131, 40, 214, 190, 123, 54, 187, 189, 77, 195, 169, 190, 211, 9, 49, 191, 23, 168, 249, 62, 64, 39, 60, 60, 187, 64, 38, 190, 157, 5, 209, 62, 91, 56, 27, 60, 191, 252, 49, 191, 145, 199, 150, 191, 196, 94, 20, 62, 223, 54, 95, 61, 222, 151, 8, 189, 84, 131, 243, 189, 242, 84, 50, 190, 5, 236, 0, 62, 99, 185, 22, 190, 88, 213, 136, 189, 75, 29, 147, 189, 35, 66, 197, 189, 189, 106, 192, 61, 211, 194, 149, 189, 209, 89, 9, 60, 124, 120, 23, 190, 135, 41, 36, 62, 185, 117, 97, 189, 167, 12, 160, 188, 252, 62, 29, 62, 110, 181, 193, 189, 2, 185, 210, 189, 217, 118, 156, 189, 215, 106, 161, 189, 227, 24, 174, 61, 240, 253, 51, 190, 161, 199, 140, 61, 237, 168, 198, 189, 170, 141, 247, 189, 111, 98, 75, 190, 39, 72, 191, 61, 207, 110, 238, 189, 89, 182, 39, 190, 81, 34, 179, 61, 254, 166, 60, 188, 118, 161, 49, 190, 67, 210, 140, 61, 99, 205, 138, 61, 42, 163, 211, 61, 231, 75, 246, 189, 127, 82, 139, 190, 234, 97, 83, 62, 223, 52, 195, 189, 253, 105, 5, 191, 42, 77, 10, 188, 20, 117, 220, 190, 67, 225, 63, 190, 193, 74, 149, 62, 126, 45, 233, 61, 226, 220, 110, 62, 125, 176, 13, 63, 135, 92, 199, 191, 67, 166, 241, 60, 185, 194, 100, 190, 111, 48, 234, 61, 13, 42, 160, 190, 159, 214, 130, 190, 17, 121, 192, 190, 88, 142, 201, 62, 203, 107, 224, 188, 151, 46, 235, 191, 174, 236, 74, 62, 103, 188, 162, 60, 223, 86, 137, 190, 23, 109, 141, 62, 217, 195, 132, 189, 229, 110, 129, 190, 128, 177, 15, 62, 166, 159, 170, 61, 84, 221, 144, 190, 158, 189, 31, 62, 173, 58, 191, 189, 132, 67, 101, 190, 155, 92, 131, 62, 146, 12, 37, 188, 175, 239, 81, 190, 155, 10, 94, 61, 246, 0, 119, 62, 195, 248, 176, 189, 135, 43, 51, 189, 129, 132, 25, 190, 84, 58, 189, 61, 88, 243, 129, 62, 132, 154, 128, 189, 188, 182, 58, 62, 124, 136, 136, 62, 13, 19, 85, 189, 57, 158, 152, 190, 92, 63, 135, 190, 29, 47, 156, 61, 229, 162, 91, 62, 71, 75, 190, 62, 93, 33, 10, 62, 160, 26, 136, 62, 97, 226, 33, 58, 149, 9, 69, 61, 32, 160, 136, 190, 0, 185, 85, 191, 225, 53, 182, 61, 145, 54, 10, 62, 248, 253, 231, 61, 34, 81, 249, 190, 190, 60, 10, 62, 38, 148, 22, 62, 185, 59, 34, 190, 119, 219, 165, 61, 145, 114, 53, 189, 189, 229, 91, 190, 52, 138, 157, 189, 0, 130, 178, 189, 96, 37, 85, 190, 99, 35, 230, 189, 80, 240, 128, 188, 193, 48, 109, 189, 232, 47, 28, 190, 185, 206, 175, 61, 6, 34, 137, 61, 46, 221, 204, 189, 221, 26, 42, 190, 134, 111, 5, 190, 164, 139, 76, 190, 172, 208, 169, 61, 236, 217, 55, 190, 79, 178, 165, 61, 102, 88, 238, 189, 108, 251, 160, 61, 252, 127, 250, 189, 207, 65, 235, 61, 8, 169, 172, 189, 49, 181, 34, 190, 6, 168, 236, 61, 82, 21, 198, 59, 177, 81, 246, 60, 6, 44, 88, 189, 207, 97, 124, 61, 41, 60, 222, 60, 142, 244, 28, 188, 91, 254, 38, 61, 170, 190, 50, 62, 33, 120, 19, 62, 174, 33, 124, 190, 171, 69, 50, 62, 238, 145, 240, 189, 217, 204, 118, 189, 160, 51, 189, 189, 255, 133, 71, 62, 6, 109, 100, 61, 233, 165, 90, 62, 209, 46, 236, 61, 139, 138, 213, 61, 133, 207, 68, 62, 80, 157, 9, 61, 121, 166, 47, 62, 17, 67, 222, 62, 88, 123, 181, 190, 254, 94, 211, 190, 119, 106, 243, 189, 156, 221, 157, 62, 44, 110, 122, 190, 109, 146, 182, 60, 85, 230, 44, 190, 64, 100, 187, 61, 139, 8, 29, 61, 109, 171, 63, 190, 77, 65, 30, 190, 225, 165, 166, 62, 39, 72, 42, 190, 148, 231, 73, 190, 226, 71, 138, 61, 163, 40, 49, 62, 141, 75, 195, 61, 82, 223, 13, 190, 149, 147, 147, 189, 107, 208, 134, 190, 219, 192, 69, 62, 3, 203, 179, 190, 166, 236, 71, 189, 231, 132, 21, 60, 38, 33, 193, 189, 17, 215, 78, 190, 58, 147, 90, 62, 101, 214, 125, 62, 28, 33, 143, 62, 35, 208, 168, 190, 167, 197, 224, 189, 10, 241, 144, 189, 255, 47, 232, 190, 67, 82, 171, 62, 231, 149, 248, 61, 153, 149, 145, 189, 65, 5, 138, 60, 39, 38, 185, 62, 240, 87, 15, 191, 64, 153, 138, 191, 163, 93, 72, 190, 121, 202, 7, 61, 71, 56, 66, 62, 101, 14, 50, 190, 250, 117, 124, 61, 123, 19, 210, 62, 210, 121, 10, 63, 186, 172, 95, 61, 91, 235, 155, 189, 1, 207, 0, 191, 134, 138, 252, 62, 182, 135, 105, 191, 239, 195, 182, 188, 83, 65, 28, 61, 102, 28, 122, 188, 200, 173, 224, 186, 41, 130, 117, 62, 140, 194, 181, 190, 65, 23, 82, 190, 19, 235, 222, 189, 10, 235, 224, 62, 176, 0, 228, 190, 151, 104, 251, 189, 133, 255, 247, 60, 157, 207, 110, 60, 136, 173, 231, 62, 77, 142, 0, 190, 177, 42, 104, 191, 242, 148, 129, 62, 255, 38, 195, 189, 166, 41, 61, 190, 214, 232, 220, 190, 48, 69, 177, 62, 240, 112, 160, 62, 51, 140, 114, 62, 6, 230, 124, 190, 47, 213, 15, 190, 59, 49, 178, 62, 53, 3, 220, 62, 190, 115, 253, 189, 186, 27, 115, 190, 67, 169, 173, 190, 101, 80, 80, 62, 243, 79, 84, 191, 89, 172, 248, 61, 216, 97, 98, 62, 47, 224, 132, 62, 90, 250, 80, 189, 164, 249, 28, 190, 173, 75, 186, 190, 63, 3, 191, 61, 89, 211, 209, 189, 59, 106, 53, 62, 17, 211, 128, 190, 102, 5, 75, 190, 37, 49, 21, 190, 216, 40, 208, 61, 134, 190, 238, 62, 10, 5, 95, 61, 13, 7, 11, 191, 174, 205, 102, 62, 54, 13, 182, 189, 49, 67, 177, 189, 98, 15, 130, 189, 142, 68, 136, 62, 56, 173, 179, 58, 90, 83, 132, 62, 5, 117, 20, 190, 10, 29, 37, 190, 120, 56, 225, 190, 135, 170, 243, 61, 123, 161, 13, 190, 16, 21, 18, 62, 173, 193, 192, 189, 19, 105, 162, 190, 31, 118, 123, 62, 14, 207, 171, 62, 78, 19, 142, 61, 72, 235, 142, 60, 100, 125, 142, 62, 175, 96, 143, 190, 33, 12, 143, 189, 227, 25, 4, 62, 190, 212, 53, 61, 152, 242, 216, 189, 158, 239, 176, 61, 30, 9, 151, 62, 198, 248, 105, 62, 19, 102, 199, 188, 169, 148, 103, 190, 71, 33, 68, 62, 145, 188, 194, 62, 36, 150, 141, 191, 113, 220, 161, 189, 6, 255, 157, 62, 233, 131, 16, 190, 206, 232, 220, 190, 232, 252, 103, 62, 212, 91, 22, 62, 126, 117, 71, 62, 52, 255, 246, 61, 152, 81, 234, 62, 44, 120, 29, 61, 233, 183, 254, 189, 215, 58, 77, 61, 16, 73, 15, 191, 158, 244, 117, 62, 76, 234, 227, 189, 15, 87, 5, 188, 184, 186, 243, 189, 104, 89, 162, 59, 79, 84, 75, 190, 174, 189, 62, 61, 46, 106, 121, 62, 240, 42, 156, 189, 140, 26, 131, 190, 158, 201, 60, 190, 242, 229, 71, 190, 222, 93, 163, 191, 4, 192, 149, 189, 27, 89, 160, 190, 32, 217, 192, 62, 132, 43, 236, 60, 120, 227, 223, 190, 5, 61, 105, 62, 18, 40, 184, 61, 173, 4, 9, 62, 119, 58, 50, 190, 85, 211, 137, 62, 246, 79, 241, 60, 167, 226, 97, 61, 248, 84, 45, 191, 82, 157, 240, 61, 120, 154, 221, 188, 121, 200, 24, 62, 20, 94, 239, 188, 32, 137, 88, 190, 156, 243, 179, 189, 211, 92, 23, 62, 190, 231, 23, 61, 67, 223, 53, 62, 104, 103, 146, 61, 76, 224, 255, 189, 126, 247, 230, 190, 76, 15, 83, 191, 13, 47, 63, 189, 191, 167, 187, 61, 106, 126, 143, 190, 21, 229, 11, 189, 30, 183, 83, 61, 250, 12, 110, 61, 161, 222, 46, 62, 99, 97, 119, 189, 110, 147, 35, 62, 17, 247, 48, 60, 211, 175, 155, 190, 147, 160, 43, 63, 125, 245, 24, 61, 7, 78, 26, 62, 0, 159, 39, 190, 107, 188, 230, 61, 170, 78, 135, 62, 34, 14, 122, 62, 83, 11, 155, 61, 254, 18, 17, 62, 140, 120, 119, 191, 6, 32, 129, 62, 107, 169, 16, 62, 52, 249, 7, 63, 50, 8, 2, 60, 207, 85, 255, 190, 110, 10, 27, 62, 42, 91, 169, 61, 138, 104, 132, 190, 198, 193, 187, 190, 151, 130, 138, 62, 240, 56, 157, 190, 191, 56, 18, 190, 32, 86, 147, 61, 231, 159, 7, 62, 249, 164, 121, 189, 91, 254, 137, 189, 189, 108, 184, 62, 67, 138, 90, 61, 207, 137, 149, 190, 4, 74, 137, 190, 3, 225, 25, 60, 67, 77, 220, 62, 54, 151, 178, 191, 198, 253, 225, 61, 36, 220, 129, 188, 75, 49, 216, 60, 113, 173, 23, 191, 191, 231, 12, 59, 81, 110, 143, 61, 15, 103, 142, 62, 10, 169, 175, 60, 20, 146, 210, 190, 142, 172, 179, 62, 208, 161, 56, 187, 175, 88, 64, 62, 15, 4, 66, 189, 173, 24, 219, 189, 249, 87, 117, 62, 193, 233, 251, 60, 96, 63, 0, 190, 101, 211, 197, 190, 185, 238, 109, 62, 68, 1, 247, 190, 134, 9, 116, 62, 211, 185, 127, 61, 39, 245, 3, 61, 63, 239, 120, 61, 136, 115, 232, 61, 8, 208, 176, 62, 246, 214, 148, 62, 111, 100, 195, 190, 167, 163, 38, 190, 252, 230, 118, 62, 27, 206, 51, 62, 151, 252, 24, 191, 227, 128, 128, 62, 35, 44, 60, 62, 85, 82, 32, 61, 83, 117, 128, 190, 63, 36, 44, 62, 176, 186, 155, 189, 101, 120, 137, 62, 231, 226, 70, 61, 13, 245, 71, 62, 154, 100, 68, 189, 227, 80, 141, 190, 239, 150, 40, 61, 182, 185, 70, 191, 1, 195, 45, 62, 191, 69, 55, 62, 145, 130, 141, 189, 9, 132, 238, 61, 52, 206, 145, 61, 83, 45, 211, 61, 14, 54, 62, 189, 41, 57, 53, 62, 108, 110, 215, 189, 30, 211, 188, 62, 103, 19, 25, 62, 195, 91, 93, 190, 220, 84, 245, 190, 244, 146, 32, 61, 214, 231, 138, 190, 100, 80, 227, 62, 102, 205, 84, 62, 113, 164, 9, 62, 203, 211, 9, 62, 31, 131, 216, 62, 169, 172, 168, 190, 82, 26, 42, 191, 157, 153, 205, 61, 203, 14, 121, 62, 52, 223, 74, 62, 60, 177, 68, 191, 104, 28, 188, 60, 47, 23, 7, 191, 197, 147, 154, 62, 105, 192, 154, 59, 127, 166, 10, 62, 219, 85, 149, 61, 243, 183, 190, 189, 23, 179, 119, 62, 181, 236, 154, 62, 85, 167, 49, 190, 111, 101, 184, 189, 191, 52, 34, 62, 214, 61, 193, 190, 150, 210, 16, 62, 73, 54, 128, 62, 129, 13, 42, 190, 208, 162, 244, 189, 172, 82, 166, 61, 20, 2, 151, 62, 167, 91, 221, 61, 243, 57, 6, 190, 252, 93, 30, 61, 33, 136, 16, 62, 192, 163, 98, 61, 215, 33, 97, 190, 63, 42, 61, 188, 95, 125, 159, 62, 68, 83, 32, 62, 72, 85, 152, 190, 42, 240, 185, 62, 92, 97, 238, 61, 21, 139, 162, 189, 38, 122, 161, 188, 142, 107, 9, 189, 52, 123, 176, 62, 138, 111, 180, 188, 93, 10, 130, 190, 61, 5, 143, 62, 131, 70, 86, 62, 163, 146, 137, 189, 185, 15, 27, 191, 169, 55, 75, 61, 150, 49, 109, 62, 196, 191, 193, 190, 18, 155, 216, 61, 19, 21, 237, 189, 221, 116, 190, 61, 28, 52, 11, 61, 189, 11, 187, 189, 13, 245, 36, 62, 233, 1, 150, 62, 22, 87, 255, 189, 16, 56, 96, 62, 30, 179, 13, 191, 59, 22, 108, 189, 207, 117, 14, 191, 228, 47, 81, 189, 159, 138, 165, 60, 19, 62, 215, 61, 245, 71, 195, 62, 190, 246, 86, 61, 51, 63, 205, 190, 151, 60, 29, 191, 116, 217, 196, 62, 125, 60, 11, 62, 196, 172, 136, 62, 75, 80, 221, 62, 55, 32, 142, 190, 206, 61, 67, 189, 160, 247, 161, 190, 89, 38, 177, 61, 39, 147, 81, 190, 24, 211, 13, 190, 22, 184, 148, 190, 14, 251, 109, 189, 206, 151, 75, 190, 68, 191, 116, 190, 236, 56, 236, 61, 108, 153, 75, 190, 19, 246, 66, 189, 176, 68, 136, 190, 170, 251, 213, 60, 77, 117, 69, 190, 61, 156, 229, 189, 112, 12, 192, 188, 76, 206, 220, 59, 133, 173, 15, 62, 92, 154, 203, 190, 79, 171, 167, 62, 161, 77, 169, 62, 176, 148, 162, 190, 84, 229, 31, 190, 183, 203, 251, 61, 51, 27, 37, 62, 23, 65, 37, 62, 176, 102, 61, 190, 129, 225, 70, 60, 223, 162, 53, 190, 218, 147, 134, 60, 222, 196, 148, 62, 78, 137, 242, 61, 84, 245, 160, 189, 141, 218, 94, 189, 34, 129, 252, 61, 162, 180, 227, 188, 26, 247, 34, 191, 65, 57, 254, 61, 221, 87, 177, 189, 59, 247, 12, 61, 119, 56, 91, 189, 16, 65, 94, 62, 193, 49, 217, 190, 14, 72, 23, 191, 218, 40, 213, 188, 226, 163, 69, 62, 199, 163, 91, 62, 161, 36, 12, 190, 214, 135, 114, 62, 161, 12, 19, 62, 18, 39, 207, 189, 183, 36, 131, 61, 252, 183, 155, 189, 178, 103, 184, 190, 228, 20, 238, 60, 2, 133, 62, 61, 85, 66, 1, 62, 214, 40, 153, 62, 47, 46, 216, 61, 253, 140, 252, 189, 53, 219, 198, 190, 207, 238, 144, 189, 190, 172, 95, 187, 92, 224, 74, 61, 211, 52, 247, 61, 10, 101, 153, 190, 12, 26, 89, 62, 169, 51, 172, 62, 175, 217, 100, 60, 184, 253, 27, 190, 183, 212, 40, 62, 44, 4, 118, 190, 171, 52, 126, 62, 90, 166, 138, 189, 248, 73, 118, 189, 117, 118, 249, 61, 244, 190, 58, 62, 200, 39, 2, 63, 106, 119, 185, 62, 154, 26, 66, 188, 77, 161, 0, 191, 198, 188, 127, 62, 245, 31, 59, 62, 122, 210, 70, 191, 5, 63, 225, 61, 140, 109, 230, 61, 255, 195, 50, 62, 18, 238, 105, 190, 29, 66, 18, 189, 131, 40, 195, 189, 132, 227, 145, 61, 152, 175, 93, 61, 249, 203, 98, 189, 231, 54, 141, 189, 121, 35, 248, 188, 183, 149, 89, 190, 41, 173, 185, 187, 253, 10, 18, 190, 249, 138, 157, 61, 147, 53, 10, 190, 233, 156, 197, 189, 61, 252, 163, 60, 56, 210, 159, 190, 19, 139, 179, 61, 139, 132, 214, 61, 2, 153, 157, 61, 71, 128, 159, 189, 3, 84, 199, 188, 202, 120, 253, 60, 250, 29, 30, 62, 103, 67, 97, 189, 141, 246, 242, 60, 57, 198, 51, 189, 7, 193, 91, 190, 204, 62, 254, 188, 108, 35, 185, 61, 129, 218, 235, 61, 38, 202, 12, 189, 117, 59, 219, 189, 147, 23, 237, 189, 197, 241, 171, 190, 108, 53, 172, 61, 180, 179, 137, 189, 35, 15, 93, 61, 126, 145, 143, 191, 66, 187, 245, 60, 48, 10, 78, 62, 135, 25, 110, 61, 232, 216, 205, 188, 60, 205, 76, 62, 175, 106, 179, 189, 217, 198, 253, 190, 226, 164, 31, 190, 250, 175, 178, 189, 187, 53, 170, 62, 242, 151, 144, 62, 71, 79, 193, 190, 171, 9, 131, 62, 255, 14, 75, 62, 6, 143, 172, 189, 211, 168, 5, 62, 160, 59, 167, 62, 19, 121, 161, 62, 49, 193, 143, 190, 1, 159, 233, 61, 34, 109, 183, 189, 226, 124, 87, 62, 43, 40, 192, 191, 78, 74, 145, 61, 64, 187, 6, 190, 22, 255, 36, 62, 132, 248, 62, 190, 15, 126, 170, 189, 3, 171, 61, 62, 181, 47, 131, 61, 87, 159, 35, 190, 237, 37, 214, 60, 145, 217, 121, 62, 210, 111, 202, 61, 228, 110, 83, 189, 154, 225, 141, 62, 197, 105, 247, 60, 112, 194, 103, 190, 0, 139, 100, 190, 64, 227, 40, 61, 214, 3, 231, 188, 98, 198, 96, 190, 36, 108, 143, 189, 120, 27, 145, 190, 110, 100, 0, 62, 231, 89, 9, 189, 123, 15, 52, 188, 211, 130, 19, 61, 18, 8, 141, 62, 231, 137, 154, 190, 15, 146, 191, 61, 84, 247, 154, 190, 31, 233, 189, 190, 125, 38, 137, 190, 99, 128, 172, 61, 203, 120, 176, 189, 36, 44, 88, 189, 36, 166, 159, 62, 124, 131, 13, 190, 156, 102, 166, 190, 240, 204, 231, 190, 248, 29, 143, 62, 109, 105, 43, 190, 222, 41, 197, 62, 128, 13, 9, 63, 241, 53, 9, 189, 133, 129, 53, 61, 62, 241, 243, 190, 84, 183, 255, 62, 226, 46, 239, 190, 196, 246, 180, 190, 198, 17, 196, 61, 120, 210, 27, 62, 179, 162, 143, 189, 234, 36, 153, 62, 16, 183, 57, 190, 41, 135, 25, 60, 80, 88, 129, 189, 235, 10, 192, 62, 38, 174, 2, 191, 89, 82, 65, 190, 101, 140, 4, 189, 250, 237, 178, 61, 13, 180, 213, 62, 122, 88, 45, 190, 108, 253, 198, 189, 25, 93, 7, 63, 36, 159, 50, 61, 58, 225, 96, 61, 121, 0, 59, 191, 80, 232, 170, 62, 184, 46, 17, 62, 64, 6, 233, 61, 131, 44, 31, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 165, 94, 62, 187, 233, 85, 188, 114, 74, 35, 60, 82, 142, 65, 62, 150, 35, 102, 62, 103, 165, 18, 61, 72, 251, 44, 62, 83, 200, 219, 189, 88, 5, 50, 187, 234, 92, 170, 189, 85, 202, 4, 62, 175, 93, 102, 62, 30, 17, 221, 59, 183, 63, 182, 189, 228, 74, 186, 189, 190, 68, 41, 62, 222, 75, 22, 62, 175, 80, 49, 62, 199, 58, 142, 190, 101, 2, 42, 62, 45, 151, 49, 62, 204, 193, 244, 188, 94, 147, 18, 190, 37, 103, 188, 62, 63, 195, 82, 189, 75, 206, 90, 190, 21, 80, 129, 62, 147, 92, 47, 61, 120, 26, 177, 190, 211, 150, 255, 188, 200, 116, 79, 190, 155, 201, 45, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 250, 139, 62, 68, 218, 168, 61, 201, 45, 84, 63, 129, 94, 92, 190, 59, 157, 142, 189, 253, 40, 129, 61, 206, 14, 108, 62, 202, 41, 83, 63, 169, 201, 112, 62, 225, 158, 242, 59, 220, 230, 167, 63, 204, 141, 134, 62, 14, 76, 85, 189, 211, 211, 192, 189, 22, 90, 193, 62, 193, 196, 220, 62, 43, 95, 183, 62, 227, 92, 146, 190, 37, 217, 42, 191, 163, 97, 43, 190, 172, 145, 67, 191, 198, 9, 199, 190, 172, 192, 167, 62, 175, 127, 101, 190, 187, 16, 205, 62, 217, 179, 250, 190, 199, 251, 123, 189, 223, 163, 145, 190, 164, 238, 205, 61, 84, 170, 144, 190, 251, 219, 190, 62, 206, 99, 50, 63, 149, 54, 131, 190, 117, 244, 148, 62, 102, 97, 244, 62, 193, 102, 201, 189, 104, 151, 58, 190, 123, 87, 32, 62, 13, 197, 220, 190, 30, 229, 105, 62, 131, 158, 47, 190, 176, 202, 198, 189, 179, 175, 8, 189, 163, 250, 177, 190, 225, 179, 227, 60, 75, 171, 34, 62, 99, 230, 90, 190, 56, 93, 232, 61, 134, 174, 242, 189, 202, 47, 137, 188, 19, 133, 227, 61, 6, 21, 119, 190, 70, 161, 219, 61, 105, 234, 220, 60, 200, 74, 3, 62, 236, 115, 129, 190, 40, 83, 86, 188, 15, 167, 166, 62, 54, 143, 209, 190, 132, 122, 157, 62, 48, 133, 1, 62, 117, 13, 129, 190, 146, 139, 35, 62, 10, 181, 219, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 212, 195, 59, 63, 111, 75, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {176, 16, 138, 63, 35, 72, 43, 63, 9, 58, 238, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {3, 163, 53, 190, 123, 155, 190, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0048/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}