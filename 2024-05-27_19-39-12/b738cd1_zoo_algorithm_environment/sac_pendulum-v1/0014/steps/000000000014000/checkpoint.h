// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 30, 242, 62, 193, 89, 22, 191, 2, 88, 193, 62, 3, 58, 16, 191, 21, 144, 135, 61, 255, 194, 22, 190, 78, 15, 173, 190, 179, 19, 203, 63, 16, 85, 195, 62, 227, 176, 61, 62, 212, 44, 110, 63, 68, 214, 238, 62, 183, 35, 75, 191, 230, 141, 116, 191, 7, 97, 46, 191, 84, 27, 100, 62, 131, 247, 118, 63, 93, 56, 174, 62, 25, 188, 44, 63, 47, 25, 3, 63, 179, 209, 20, 62, 211, 163, 5, 190, 15, 88, 73, 62, 133, 23, 192, 190, 205, 1, 29, 63, 183, 105, 50, 191, 4, 133, 134, 62, 67, 242, 126, 190, 177, 201, 65, 189, 135, 121, 240, 190, 18, 250, 13, 62, 50, 237, 201, 62, 35, 45, 216, 190, 178, 82, 66, 189, 141, 57, 163, 191, 129, 85, 5, 190, 242, 53, 81, 63, 189, 245, 192, 190, 241, 91, 171, 190, 100, 244, 64, 190, 147, 89, 50, 190, 113, 2, 128, 62, 96, 98, 159, 190, 12, 209, 35, 63, 81, 77, 138, 62, 4, 236, 11, 63, 177, 188, 117, 63, 44, 124, 42, 62, 161, 156, 51, 190, 10, 42, 100, 63, 90, 132, 99, 190, 15, 88, 158, 190, 90, 230, 55, 63, 223, 16, 8, 63, 191, 85, 86, 63, 83, 44, 93, 63, 110, 175, 210, 62, 221, 93, 137, 62, 123, 131, 160, 189, 95, 169, 2, 61, 112, 53, 90, 63, 225, 172, 103, 191, 80, 29, 50, 190, 2, 52, 18, 190, 210, 96, 71, 191, 171, 181, 3, 63, 37, 130, 11, 191, 25, 159, 192, 61, 215, 146, 180, 61, 208, 44, 222, 62, 167, 146, 139, 63, 245, 70, 115, 62, 8, 162, 10, 63, 80, 142, 153, 191, 2, 208, 191, 190, 203, 56, 156, 190, 58, 126, 201, 61, 62, 25, 32, 63, 21, 140, 162, 188, 191, 238, 125, 191, 176, 215, 22, 62, 167, 213, 78, 62, 27, 2, 47, 191, 221, 96, 242, 190, 14, 47, 144, 189, 250, 129, 161, 190, 1, 52, 102, 62, 5, 19, 171, 190, 67, 81, 179, 63, 83, 75, 178, 62, 119, 205, 1, 191, 207, 180, 208, 191, 211, 76, 112, 190, 95, 204, 147, 62, 248, 40, 53, 191, 251, 56, 90, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 15, 183, 190, 168, 204, 122, 63, 197, 98, 107, 190, 48, 11, 244, 187, 249, 196, 23, 191, 157, 223, 215, 190, 75, 211, 232, 62, 102, 170, 132, 189, 231, 197, 153, 62, 194, 157, 130, 187, 40, 127, 156, 62, 129, 169, 19, 62, 17, 234, 57, 191, 228, 83, 162, 190, 224, 207, 184, 190, 27, 41, 114, 62, 253, 170, 225, 62, 241, 141, 222, 190, 184, 165, 93, 191, 79, 34, 244, 190, 133, 180, 42, 62, 98, 248, 212, 190, 50, 85, 22, 63, 92, 230, 136, 189, 137, 85, 94, 190, 188, 198, 8, 191, 226, 211, 157, 190, 203, 29, 181, 190, 102, 109, 219, 190, 224, 142, 102, 190, 22, 168, 140, 190, 200, 249, 120, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 5, 250, 61, 14, 225, 46, 190, 80, 249, 23, 62, 245, 45, 141, 190, 83, 64, 211, 190, 125, 123, 128, 62, 145, 213, 252, 61, 144, 163, 255, 189, 98, 137, 253, 187, 249, 239, 28, 190, 111, 40, 67, 189, 95, 149, 245, 61, 237, 66, 237, 61, 182, 244, 46, 190, 159, 0, 101, 189, 242, 118, 249, 189, 208, 72, 22, 191, 107, 85, 62, 190, 125, 243, 42, 62, 101, 196, 175, 61, 137, 97, 38, 62, 27, 117, 15, 62, 86, 19, 162, 189, 48, 232, 1, 190, 127, 9, 231, 62, 16, 64, 157, 60, 148, 46, 168, 61, 73, 40, 195, 61, 83, 53, 128, 60, 232, 151, 109, 59, 65, 65, 168, 190, 121, 234, 33, 62, 154, 48, 33, 190, 142, 74, 17, 190, 35, 54, 71, 190, 247, 111, 123, 190, 6, 76, 81, 191, 83, 45, 145, 190, 103, 241, 196, 190, 53, 154, 55, 190, 107, 60, 226, 59, 53, 88, 47, 190, 36, 49, 156, 190, 37, 87, 131, 61, 55, 17, 224, 189, 73, 32, 233, 61, 51, 104, 150, 189, 20, 94, 158, 190, 250, 94, 221, 190, 0, 221, 214, 61, 121, 46, 123, 190, 251, 111, 160, 61, 146, 50, 234, 189, 11, 127, 162, 61, 7, 142, 13, 61, 232, 83, 172, 190, 167, 1, 73, 60, 14, 220, 193, 61, 209, 144, 0, 62, 55, 176, 214, 61, 65, 67, 114, 190, 21, 49, 162, 189, 248, 129, 4, 60, 170, 253, 180, 189, 24, 84, 36, 62, 31, 104, 39, 190, 97, 47, 41, 59, 79, 113, 138, 60, 17, 78, 90, 189, 172, 103, 120, 189, 73, 164, 187, 187, 136, 12, 212, 61, 200, 67, 180, 189, 153, 26, 181, 61, 200, 140, 85, 189, 109, 19, 89, 190, 167, 13, 147, 61, 219, 191, 127, 56, 127, 124, 206, 189, 102, 23, 221, 60, 211, 240, 105, 190, 11, 47, 47, 61, 210, 130, 36, 62, 13, 80, 26, 190, 16, 227, 179, 61, 167, 200, 18, 190, 234, 246, 243, 188, 194, 54, 14, 190, 9, 82, 166, 189, 177, 59, 69, 189, 107, 171, 240, 61, 201, 170, 27, 62, 183, 59, 88, 62, 38, 108, 118, 61, 239, 195, 162, 189, 175, 120, 54, 190, 82, 77, 180, 62, 148, 88, 146, 62, 4, 69, 249, 188, 214, 48, 104, 190, 27, 35, 180, 189, 91, 92, 78, 191, 79, 202, 218, 62, 236, 64, 83, 62, 211, 133, 95, 62, 11, 251, 138, 62, 176, 59, 184, 62, 118, 173, 192, 189, 212, 133, 194, 60, 131, 152, 199, 190, 10, 116, 21, 191, 200, 178, 132, 190, 2, 251, 181, 62, 6, 105, 229, 190, 137, 230, 28, 191, 86, 69, 137, 189, 242, 0, 26, 62, 51, 183, 208, 61, 167, 177, 77, 61, 80, 23, 33, 191, 73, 213, 136, 189, 127, 114, 171, 188, 10, 251, 131, 62, 220, 109, 54, 190, 210, 208, 139, 61, 216, 83, 45, 190, 81, 126, 22, 191, 4, 227, 115, 62, 165, 108, 80, 190, 11, 95, 159, 189, 182, 122, 229, 189, 127, 27, 166, 188, 42, 139, 145, 190, 9, 203, 143, 190, 57, 245, 9, 189, 177, 226, 154, 190, 244, 230, 107, 62, 161, 59, 218, 190, 182, 100, 200, 188, 244, 237, 165, 190, 2, 171, 191, 190, 210, 89, 196, 188, 253, 203, 32, 190, 95, 43, 167, 61, 33, 121, 37, 62, 19, 144, 164, 61, 84, 50, 221, 190, 58, 200, 21, 62, 65, 9, 181, 62, 188, 41, 221, 61, 116, 215, 46, 62, 180, 223, 162, 189, 52, 4, 184, 190, 232, 78, 148, 189, 16, 160, 56, 62, 134, 1, 5, 191, 48, 6, 225, 61, 126, 115, 147, 188, 43, 199, 6, 191, 78, 55, 217, 61, 30, 147, 130, 189, 135, 111, 42, 61, 236, 59, 106, 61, 141, 238, 191, 189, 50, 39, 152, 190, 47, 10, 102, 61, 125, 103, 213, 189, 12, 35, 194, 61, 125, 236, 27, 190, 233, 142, 4, 191, 55, 161, 129, 189, 63, 85, 164, 62, 19, 58, 98, 62, 227, 78, 180, 61, 65, 120, 232, 189, 80, 29, 76, 189, 83, 249, 124, 190, 48, 247, 59, 62, 243, 41, 168, 190, 161, 54, 250, 61, 112, 108, 26, 63, 113, 183, 75, 190, 179, 182, 237, 189, 164, 81, 51, 190, 3, 33, 108, 62, 162, 246, 62, 62, 68, 66, 211, 60, 140, 64, 224, 61, 82, 36, 186, 190, 159, 79, 11, 62, 233, 188, 178, 189, 221, 178, 146, 62, 106, 36, 231, 61, 61, 219, 141, 61, 122, 131, 64, 190, 166, 65, 52, 62, 5, 47, 51, 189, 32, 250, 187, 61, 213, 91, 58, 62, 250, 71, 103, 190, 114, 16, 7, 62, 203, 29, 115, 61, 99, 172, 177, 61, 254, 222, 254, 190, 213, 213, 3, 191, 136, 214, 135, 189, 229, 163, 160, 189, 201, 92, 75, 62, 206, 155, 209, 62, 72, 252, 227, 61, 99, 224, 62, 190, 95, 183, 15, 62, 251, 77, 12, 189, 96, 197, 127, 62, 171, 213, 65, 62, 134, 75, 171, 61, 58, 151, 14, 191, 51, 80, 81, 190, 195, 36, 70, 190, 29, 218, 30, 190, 209, 1, 100, 61, 76, 220, 133, 190, 70, 106, 8, 191, 50, 167, 73, 190, 53, 64, 49, 186, 187, 78, 207, 190, 173, 31, 249, 190, 79, 22, 28, 62, 224, 188, 44, 190, 124, 115, 57, 62, 34, 227, 147, 62, 121, 54, 149, 189, 193, 155, 1, 62, 140, 144, 61, 190, 67, 129, 105, 189, 224, 18, 2, 190, 97, 105, 31, 189, 207, 29, 151, 190, 136, 152, 248, 189, 243, 28, 13, 61, 165, 57, 6, 191, 245, 145, 18, 190, 143, 147, 208, 62, 134, 40, 179, 189, 71, 163, 81, 62, 184, 151, 131, 189, 173, 20, 80, 190, 15, 206, 100, 61, 101, 25, 181, 62, 200, 224, 160, 190, 144, 105, 125, 188, 35, 160, 101, 61, 241, 253, 21, 190, 186, 37, 63, 190, 166, 99, 60, 62, 152, 184, 42, 188, 96, 65, 16, 190, 190, 110, 99, 62, 255, 200, 226, 61, 239, 183, 155, 190, 74, 84, 91, 190, 165, 190, 111, 190, 211, 52, 122, 189, 90, 130, 7, 62, 227, 210, 52, 62, 12, 224, 201, 189, 224, 180, 194, 61, 0, 21, 38, 190, 101, 224, 150, 189, 201, 207, 60, 189, 233, 69, 106, 190, 124, 234, 46, 190, 99, 250, 188, 61, 15, 99, 221, 189, 178, 190, 197, 190, 233, 124, 231, 61, 173, 147, 153, 62, 17, 203, 45, 190, 67, 91, 126, 62, 165, 230, 176, 190, 197, 149, 126, 188, 241, 228, 122, 62, 92, 155, 124, 62, 223, 136, 141, 61, 195, 10, 61, 190, 63, 122, 205, 61, 110, 109, 31, 61, 237, 238, 206, 62, 50, 17, 178, 189, 32, 117, 242, 58, 225, 141, 16, 189, 76, 31, 63, 61, 101, 147, 204, 189, 123, 198, 28, 62, 203, 243, 236, 61, 157, 146, 219, 61, 50, 108, 16, 190, 209, 204, 51, 190, 68, 71, 248, 61, 255, 208, 172, 188, 134, 107, 108, 61, 17, 188, 136, 189, 218, 65, 28, 61, 253, 3, 35, 190, 239, 121, 224, 189, 48, 153, 49, 190, 253, 51, 165, 185, 84, 205, 239, 61, 210, 76, 17, 61, 105, 117, 209, 61, 42, 177, 191, 189, 248, 172, 233, 189, 69, 175, 11, 190, 35, 85, 0, 62, 178, 41, 173, 189, 228, 67, 137, 189, 174, 238, 130, 189, 205, 246, 85, 60, 64, 199, 36, 61, 226, 158, 253, 61, 181, 66, 233, 189, 131, 58, 57, 190, 68, 228, 6, 189, 6, 209, 85, 188, 11, 104, 3, 189, 160, 252, 134, 189, 116, 246, 127, 59, 188, 121, 36, 62, 181, 220, 155, 61, 145, 56, 202, 60, 113, 28, 254, 189, 22, 141, 128, 188, 73, 224, 213, 189, 80, 69, 140, 190, 135, 37, 105, 60, 30, 198, 190, 61, 65, 134, 202, 189, 10, 228, 244, 189, 149, 21, 237, 189, 72, 213, 104, 61, 9, 250, 212, 189, 223, 46, 173, 61, 145, 63, 150, 189, 66, 142, 147, 189, 220, 53, 24, 190, 222, 162, 144, 189, 20, 121, 207, 189, 145, 9, 49, 190, 159, 192, 132, 61, 57, 48, 156, 189, 173, 191, 85, 61, 61, 50, 217, 189, 132, 238, 57, 190, 219, 193, 112, 190, 25, 200, 33, 189, 177, 184, 159, 188, 62, 64, 150, 190, 206, 136, 120, 189, 217, 76, 126, 189, 207, 203, 60, 62, 3, 51, 10, 61, 126, 213, 152, 189, 151, 22, 179, 189, 181, 69, 27, 189, 91, 137, 156, 62, 15, 152, 54, 62, 57, 150, 240, 189, 223, 109, 68, 190, 73, 156, 3, 190, 52, 210, 141, 62, 234, 19, 35, 62, 82, 146, 195, 189, 131, 162, 91, 61, 92, 240, 203, 61, 186, 141, 237, 61, 120, 51, 17, 190, 104, 130, 193, 62, 240, 177, 174, 62, 230, 209, 142, 62, 87, 99, 97, 62, 93, 85, 25, 62, 87, 88, 27, 62, 225, 35, 45, 190, 215, 150, 222, 62, 28, 159, 95, 61, 120, 48, 131, 190, 160, 202, 29, 62, 196, 44, 119, 61, 144, 1, 51, 190, 248, 232, 27, 190, 154, 21, 44, 61, 89, 69, 209, 188, 204, 132, 21, 190, 94, 118, 164, 189, 222, 114, 26, 61, 214, 55, 44, 190, 50, 67, 171, 61, 158, 7, 15, 62, 73, 45, 36, 189, 169, 255, 183, 61, 112, 110, 106, 189, 1, 13, 51, 61, 129, 56, 187, 186, 235, 30, 77, 189, 111, 213, 173, 61, 151, 33, 147, 61, 35, 242, 228, 60, 71, 196, 30, 190, 104, 209, 154, 189, 49, 211, 141, 60, 120, 168, 98, 186, 205, 78, 140, 61, 5, 168, 42, 190, 207, 36, 25, 190, 153, 167, 232, 188, 57, 90, 19, 190, 191, 188, 192, 190, 204, 214, 68, 190, 72, 103, 16, 62, 122, 171, 3, 188, 167, 254, 57, 191, 151, 71, 148, 61, 82, 3, 1, 62, 174, 146, 163, 190, 184, 80, 4, 190, 214, 60, 5, 191, 142, 200, 29, 191, 120, 248, 118, 190, 18, 48, 122, 189, 200, 128, 112, 189, 220, 56, 35, 62, 154, 157, 165, 62, 145, 202, 6, 190, 35, 18, 144, 62, 88, 197, 52, 62, 176, 139, 29, 62, 35, 161, 230, 190, 170, 14, 224, 190, 118, 214, 22, 62, 31, 120, 142, 62, 8, 45, 89, 190, 89, 95, 70, 62, 76, 88, 144, 189, 104, 44, 122, 190, 203, 80, 83, 188, 89, 119, 74, 61, 180, 123, 83, 190, 147, 75, 178, 189, 200, 53, 212, 188, 177, 207, 88, 61, 229, 2, 111, 62, 52, 177, 146, 190, 165, 50, 1, 191, 4, 59, 176, 190, 226, 129, 219, 61, 50, 24, 119, 62, 96, 21, 105, 61, 227, 59, 127, 190, 248, 66, 176, 188, 253, 184, 191, 189, 151, 99, 219, 62, 14, 210, 121, 62, 161, 225, 100, 190, 138, 49, 9, 190, 208, 126, 82, 189, 225, 213, 7, 190, 211, 36, 45, 191, 25, 180, 25, 59, 253, 75, 229, 62, 119, 109, 124, 188, 81, 28, 79, 62, 201, 9, 229, 190, 149, 73, 211, 62, 38, 112, 163, 189, 181, 233, 181, 62, 206, 203, 102, 62, 202, 5, 64, 190, 30, 176, 104, 62, 156, 29, 22, 190, 138, 109, 157, 62, 74, 13, 149, 62, 53, 66, 36, 62, 194, 248, 50, 191, 230, 207, 180, 62, 29, 206, 116, 189, 195, 140, 97, 61, 184, 79, 122, 62, 161, 50, 228, 190, 244, 113, 220, 189, 221, 83, 43, 62, 49, 43, 141, 62, 8, 49, 143, 190, 72, 99, 117, 191, 71, 232, 83, 62, 116, 79, 164, 62, 55, 71, 40, 62, 116, 128, 16, 63, 225, 42, 15, 190, 235, 191, 215, 190, 104, 212, 40, 62, 243, 128, 175, 190, 239, 26, 4, 63, 175, 68, 167, 61, 77, 85, 150, 62, 83, 196, 104, 191, 111, 139, 34, 191, 110, 228, 46, 191, 123, 23, 0, 191, 88, 188, 16, 63, 88, 119, 34, 191, 43, 54, 220, 189, 234, 60, 210, 190, 197, 215, 77, 61, 137, 62, 204, 191, 111, 114, 69, 189, 7, 123, 238, 61, 117, 179, 248, 189, 33, 240, 17, 190, 152, 130, 211, 61, 122, 209, 100, 189, 116, 207, 77, 62, 78, 109, 19, 190, 77, 180, 64, 190, 90, 8, 61, 189, 20, 207, 20, 190, 161, 240, 145, 61, 26, 227, 202, 189, 83, 227, 211, 61, 25, 148, 180, 186, 206, 222, 84, 189, 73, 70, 9, 62, 180, 131, 127, 189, 25, 72, 224, 190, 27, 158, 0, 62, 170, 2, 140, 190, 79, 107, 31, 62, 83, 66, 68, 190, 17, 245, 28, 62, 103, 190, 50, 62, 25, 69, 160, 60, 29, 217, 33, 188, 2, 224, 50, 60, 216, 167, 159, 191, 135, 214, 96, 62, 116, 167, 156, 188, 6, 120, 146, 191, 67, 167, 81, 190, 229, 161, 22, 189, 44, 3, 7, 190, 240, 193, 52, 61, 122, 147, 213, 189, 203, 130, 49, 190, 8, 150, 38, 187, 5, 249, 79, 189, 176, 4, 106, 190, 108, 28, 146, 190, 45, 209, 4, 189, 116, 80, 183, 61, 15, 212, 53, 61, 70, 186, 207, 190, 147, 4, 235, 189, 197, 7, 27, 189, 142, 26, 212, 60, 232, 234, 229, 188, 235, 67, 190, 190, 209, 201, 59, 62, 166, 231, 221, 60, 125, 53, 150, 190, 248, 115, 75, 61, 215, 104, 6, 61, 212, 106, 171, 62, 87, 86, 242, 189, 98, 220, 79, 62, 138, 8, 140, 190, 214, 61, 143, 191, 229, 37, 185, 61, 83, 9, 165, 189, 124, 118, 190, 59, 22, 184, 212, 62, 177, 105, 74, 190, 173, 38, 64, 191, 204, 101, 132, 190, 126, 186, 110, 189, 44, 140, 91, 63, 62, 171, 176, 61, 239, 169, 233, 60, 183, 175, 156, 190, 121, 182, 132, 190, 62, 125, 195, 62, 69, 69, 78, 189, 4, 203, 43, 190, 29, 134, 7, 191, 253, 196, 29, 62, 178, 84, 241, 62, 128, 51, 136, 190, 40, 7, 201, 189, 199, 157, 31, 63, 182, 110, 236, 189, 186, 123, 61, 62, 15, 180, 27, 191, 15, 147, 62, 190, 69, 27, 247, 62, 119, 152, 123, 61, 152, 194, 57, 191, 95, 171, 169, 190, 121, 255, 89, 62, 210, 25, 235, 190, 199, 145, 157, 188, 137, 198, 178, 60, 254, 240, 172, 62, 248, 48, 128, 189, 215, 182, 63, 190, 55, 30, 27, 191, 140, 201, 191, 190, 72, 196, 187, 189, 95, 116, 89, 62, 230, 249, 194, 61, 27, 10, 81, 191, 1, 44, 150, 188, 116, 205, 29, 188, 192, 153, 37, 190, 42, 34, 119, 62, 225, 177, 37, 190, 72, 144, 108, 190, 203, 41, 163, 189, 212, 6, 39, 190, 208, 183, 235, 190, 45, 107, 121, 61, 176, 174, 17, 63, 113, 176, 132, 189, 109, 144, 22, 62, 205, 244, 239, 190, 246, 33, 55, 62, 56, 65, 35, 61, 240, 17, 198, 62, 141, 96, 109, 190, 58, 181, 82, 190, 9, 0, 249, 59, 238, 93, 17, 190, 88, 34, 50, 62, 247, 1, 124, 187, 70, 81, 89, 62, 41, 148, 211, 62, 74, 156, 199, 190, 179, 42, 214, 61, 241, 253, 151, 190, 49, 154, 125, 189, 182, 137, 68, 190, 157, 238, 41, 189, 36, 174, 246, 61, 127, 65, 244, 189, 224, 48, 159, 62, 4, 106, 184, 190, 172, 79, 164, 190, 152, 192, 81, 191, 118, 86, 118, 189, 53, 66, 81, 61, 233, 179, 67, 190, 103, 125, 12, 189, 131, 103, 11, 62, 165, 109, 129, 191, 172, 99, 116, 190, 70, 204, 157, 62, 167, 174, 225, 189, 120, 145, 218, 190, 129, 85, 152, 190, 23, 91, 8, 62, 103, 245, 205, 190, 221, 4, 213, 189, 248, 205, 152, 61, 170, 56, 121, 62, 145, 55, 120, 189, 197, 75, 30, 189, 91, 167, 133, 189, 148, 235, 244, 188, 238, 240, 180, 189, 153, 34, 176, 188, 187, 110, 9, 190, 210, 43, 176, 188, 187, 85, 220, 189, 121, 222, 236, 189, 169, 214, 74, 60, 162, 144, 198, 59, 136, 169, 224, 188, 220, 117, 234, 189, 182, 48, 157, 189, 58, 246, 141, 61, 181, 74, 102, 61, 176, 81, 162, 61, 40, 182, 135, 189, 235, 29, 236, 61, 26, 190, 251, 189, 13, 24, 0, 190, 217, 216, 242, 189, 120, 2, 28, 61, 82, 240, 201, 60, 166, 160, 3, 62, 185, 139, 63, 61, 11, 239, 223, 188, 42, 110, 204, 189, 128, 199, 60, 61, 135, 91, 185, 188, 209, 161, 2, 62, 39, 203, 18, 62, 65, 190, 162, 190, 28, 217, 205, 60, 24, 222, 8, 62, 168, 94, 73, 187, 191, 142, 193, 190, 231, 8, 97, 190, 9, 204, 44, 61, 243, 29, 21, 61, 30, 46, 179, 189, 178, 83, 54, 191, 94, 112, 204, 190, 208, 3, 11, 60, 128, 144, 75, 62, 244, 213, 202, 61, 241, 6, 212, 189, 203, 136, 255, 189, 197, 249, 134, 189, 126, 118, 166, 62, 131, 111, 73, 190, 100, 173, 5, 190, 50, 0, 216, 62, 232, 3, 116, 190, 160, 255, 218, 61, 183, 86, 39, 190, 174, 49, 177, 61, 42, 206, 139, 62, 107, 216, 55, 189, 128, 178, 9, 190, 89, 240, 158, 190, 175, 174, 31, 189, 168, 13, 212, 61, 38, 73, 20, 62, 217, 206, 162, 61, 250, 238, 62, 190, 253, 24, 15, 62, 201, 71, 5, 61, 165, 160, 45, 190, 153, 85, 230, 189, 56, 47, 143, 60, 232, 66, 130, 187, 104, 218, 74, 61, 185, 182, 203, 61, 151, 54, 178, 188, 100, 32, 223, 189, 76, 6, 60, 62, 215, 146, 86, 190, 57, 1, 28, 189, 184, 58, 150, 190, 216, 38, 24, 190, 65, 224, 52, 190, 170, 9, 215, 61, 156, 165, 159, 61, 58, 13, 42, 190, 248, 6, 42, 190, 91, 42, 244, 190, 98, 190, 219, 61, 33, 253, 177, 61, 239, 138, 179, 61, 232, 230, 47, 190, 209, 201, 8, 62, 19, 95, 68, 189, 203, 46, 66, 187, 38, 14, 148, 61, 210, 220, 21, 189, 136, 213, 217, 62, 255, 102, 82, 61, 251, 189, 83, 191, 30, 239, 6, 62, 132, 200, 135, 62, 31, 241, 69, 190, 248, 217, 207, 62, 201, 123, 145, 190, 23, 15, 131, 190, 146, 253, 197, 61, 160, 43, 154, 61, 95, 193, 232, 62, 148, 248, 159, 190, 15, 17, 171, 62, 254, 181, 105, 62, 54, 129, 188, 62, 29, 145, 130, 61, 49, 161, 158, 190, 218, 137, 80, 190, 246, 33, 49, 190, 177, 174, 170, 190, 108, 205, 46, 62, 241, 178, 222, 60, 128, 121, 134, 62, 210, 25, 219, 190, 98, 23, 60, 191, 4, 27, 103, 191, 50, 61, 169, 190, 24, 120, 38, 62, 58, 152, 36, 191, 163, 42, 33, 63, 170, 146, 248, 190, 56, 16, 206, 189, 229, 221, 150, 191, 217, 155, 42, 190, 198, 70, 250, 61, 91, 206, 227, 189, 39, 212, 10, 62, 47, 137, 132, 62, 128, 124, 116, 59, 237, 64, 54, 62, 64, 11, 49, 189, 210, 183, 39, 190, 173, 113, 144, 189, 168, 108, 41, 61, 17, 189, 72, 190, 135, 42, 144, 187, 252, 98, 60, 62, 112, 120, 186, 190, 91, 171, 140, 188, 202, 98, 157, 61, 49, 118, 187, 61, 216, 100, 217, 189, 247, 16, 200, 188, 174, 185, 129, 190, 166, 187, 37, 62, 182, 161, 143, 61, 70, 163, 30, 189, 153, 78, 97, 61, 130, 102, 60, 190, 167, 232, 110, 61, 30, 116, 209, 188, 74, 162, 127, 191, 47, 141, 181, 61, 62, 50, 164, 190, 252, 198, 194, 189, 126, 24, 192, 61, 188, 123, 110, 189, 187, 240, 185, 189, 111, 54, 18, 62, 57, 101, 96, 62, 239, 121, 160, 60, 127, 180, 170, 190, 72, 134, 104, 190, 184, 220, 177, 61, 198, 148, 179, 61, 190, 41, 40, 191, 33, 201, 134, 190, 209, 164, 186, 60, 160, 67, 184, 62, 49, 232, 107, 62, 168, 20, 161, 190, 31, 81, 219, 62, 142, 30, 161, 188, 204, 35, 199, 190, 47, 156, 165, 190, 241, 98, 154, 189, 179, 99, 59, 62, 118, 52, 91, 191, 208, 74, 220, 186, 60, 71, 130, 190, 125, 122, 54, 191, 103, 250, 82, 59, 116, 218, 119, 190, 3, 102, 231, 189, 252, 144, 164, 190, 130, 255, 176, 190, 11, 58, 218, 61, 14, 217, 111, 190, 85, 174, 178, 61, 229, 70, 27, 190, 152, 191, 225, 189, 42, 205, 144, 62, 14, 93, 38, 60, 100, 39, 220, 61, 198, 77, 199, 190, 157, 234, 13, 62, 94, 6, 7, 190, 52, 134, 134, 190, 173, 169, 135, 189, 39, 51, 35, 61, 129, 75, 13, 63, 150, 135, 102, 60, 114, 98, 181, 61, 72, 226, 171, 190, 169, 139, 167, 60, 238, 2, 198, 62, 197, 179, 97, 190, 168, 152, 168, 188, 165, 150, 128, 189, 211, 99, 0, 190, 233, 9, 138, 189, 23, 189, 46, 190, 96, 189, 71, 189, 29, 164, 80, 190, 31, 56, 129, 190, 52, 166, 19, 62, 132, 49, 235, 59, 190, 148, 35, 188, 66, 255, 21, 61, 169, 57, 208, 189, 1, 37, 99, 190, 62, 158, 46, 190, 131, 67, 242, 62, 127, 101, 184, 60, 231, 184, 79, 190, 127, 250, 20, 62, 225, 5, 161, 190, 236, 4, 181, 190, 120, 66, 165, 62, 111, 4, 46, 60, 88, 95, 134, 189, 13, 222, 238, 189, 60, 138, 224, 189, 135, 56, 25, 191, 226, 135, 162, 190, 184, 147, 162, 188, 81, 134, 8, 62, 29, 46, 191, 61, 242, 146, 215, 186, 137, 95, 69, 62, 61, 38, 154, 189, 2, 78, 67, 62, 69, 2, 206, 190, 4, 203, 39, 60, 78, 140, 81, 190, 116, 23, 3, 190, 168, 190, 144, 187, 60, 111, 201, 62, 174, 220, 191, 61, 75, 231, 183, 60, 98, 1, 41, 62, 251, 140, 180, 191, 60, 242, 62, 62, 182, 93, 161, 61, 69, 201, 24, 62, 20, 163, 177, 61, 137, 98, 240, 190, 94, 95, 181, 190, 110, 88, 88, 62, 215, 36, 14, 62, 212, 76, 127, 62, 4, 66, 22, 191, 178, 126, 160, 62, 8, 14, 171, 190, 69, 195, 194, 62, 247, 247, 32, 62, 237, 110, 7, 191, 187, 80, 26, 63, 41, 120, 48, 60, 137, 91, 17, 191, 53, 237, 12, 62, 44, 33, 115, 62, 28, 199, 93, 62, 91, 121, 174, 190, 79, 249, 29, 191, 171, 30, 95, 191, 25, 23, 118, 190, 5, 77, 92, 62, 205, 177, 157, 191, 220, 221, 251, 62, 63, 81, 196, 190, 86, 155, 205, 61, 47, 188, 174, 189, 142, 235, 102, 189, 168, 214, 1, 62, 113, 58, 254, 61, 117, 126, 52, 190, 50, 202, 244, 61, 164, 173, 166, 190, 111, 147, 59, 62, 223, 34, 172, 62, 188, 101, 136, 61, 177, 55, 98, 62, 84, 23, 235, 190, 75, 230, 231, 61, 26, 238, 39, 62, 141, 236, 14, 62, 68, 106, 93, 62, 130, 28, 207, 188, 177, 92, 40, 190, 216, 2, 226, 189, 224, 11, 240, 59, 52, 226, 55, 61, 200, 223, 68, 62, 110, 67, 27, 190, 100, 251, 102, 189, 14, 253, 11, 190, 45, 84, 131, 61, 72, 187, 86, 190, 138, 47, 9, 62, 17, 180, 158, 187, 69, 22, 213, 62, 24, 99, 204, 61, 100, 221, 116, 190, 223, 94, 138, 62, 79, 216, 30, 189, 217, 187, 82, 190, 251, 197, 94, 190, 185, 255, 72, 190, 41, 87, 83, 189, 23, 14, 16, 190, 186, 114, 105, 62, 122, 133, 160, 190, 215, 135, 138, 189, 75, 71, 69, 188, 97, 180, 156, 190, 132, 234, 96, 60, 37, 131, 104, 190, 178, 146, 136, 189, 172, 223, 132, 190, 101, 155, 73, 62, 116, 129, 101, 190, 93, 23, 237, 189, 97, 36, 11, 62, 25, 42, 30, 190, 218, 118, 151, 62, 179, 225, 58, 190, 57, 202, 155, 187, 47, 29, 89, 62, 98, 222, 108, 61, 134, 112, 0, 190, 213, 28, 187, 189, 107, 191, 80, 62, 184, 240, 143, 62, 216, 38, 189, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 72, 139, 61, 166, 46, 110, 190, 122, 91, 31, 190, 160, 56, 131, 62, 193, 38, 77, 62, 85, 209, 26, 62, 94, 100, 51, 62, 157, 112, 86, 61, 76, 179, 97, 62, 54, 149, 202, 189, 183, 81, 88, 189, 30, 67, 234, 189, 136, 55, 34, 188, 82, 3, 26, 62, 248, 36, 113, 62, 130, 105, 121, 62, 158, 144, 190, 189, 249, 36, 228, 189, 76, 101, 18, 62, 50, 184, 0, 62, 140, 193, 83, 188, 168, 243, 248, 189, 204, 40, 234, 188, 160, 49, 176, 190, 75, 119, 175, 61, 168, 52, 188, 190, 112, 176, 223, 61, 56, 242, 188, 62, 51, 113, 23, 62, 12, 80, 20, 62, 176, 10, 204, 61, 78, 64, 105, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 99, 16, 190, 15, 112, 0, 191, 25, 142, 224, 61, 59, 157, 7, 63, 122, 189, 163, 57, 114, 82, 177, 62, 219, 46, 171, 189, 148, 166, 227, 190, 215, 241, 60, 62, 152, 32, 130, 189, 195, 227, 181, 61, 180, 73, 226, 190, 11, 236, 153, 189, 210, 164, 151, 62, 60, 9, 1, 63, 17, 208, 134, 191, 2, 84, 253, 190, 164, 49, 246, 190, 165, 194, 91, 63, 129, 163, 21, 63, 57, 67, 131, 63, 1, 127, 237, 61, 229, 232, 219, 60, 188, 89, 230, 189, 122, 201, 73, 191, 217, 163, 188, 190, 33, 255, 164, 62, 65, 168, 5, 187, 143, 69, 52, 190, 107, 38, 174, 191, 92, 139, 37, 189, 72, 147, 234, 61, 115, 65, 32, 63, 8, 111, 105, 62, 204, 49, 212, 187, 121, 167, 246, 189, 199, 123, 9, 191, 123, 86, 230, 59, 89, 87, 161, 190, 8, 77, 250, 189, 0, 238, 28, 190, 233, 100, 120, 61, 22, 95, 178, 60, 100, 185, 13, 189, 210, 200, 218, 61, 106, 60, 117, 190, 5, 168, 148, 187, 91, 105, 21, 189, 116, 142, 36, 189, 112, 216, 8, 190, 175, 117, 139, 62, 198, 12, 128, 61, 63, 251, 132, 62, 245, 210, 10, 190, 17, 60, 139, 62, 76, 201, 58, 61, 201, 184, 22, 62, 109, 234, 77, 62, 214, 9, 114, 63, 192, 248, 23, 191, 109, 245, 203, 62, 216, 158, 237, 61, 148, 252, 60, 190, 58, 126, 93, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 204, 61, 189, 106, 23, 95, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 68, 133, 190, 95, 68, 141, 191, 147, 1, 195, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 99, 176, 63, 220, 5, 186, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0014/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}