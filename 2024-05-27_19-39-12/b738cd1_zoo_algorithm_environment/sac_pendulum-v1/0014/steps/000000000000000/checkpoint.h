// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 215, 11, 63, 172, 47, 68, 190, 12, 131, 224, 62, 88, 241, 126, 190, 160, 47, 115, 62, 8, 110, 187, 190, 247, 197, 13, 191, 81, 76, 149, 62, 179, 47, 172, 62, 242, 196, 175, 60, 242, 127, 178, 62, 48, 177, 3, 63, 198, 85, 227, 190, 28, 136, 148, 62, 239, 5, 19, 191, 17, 154, 106, 190, 219, 216, 197, 62, 250, 244, 6, 63, 158, 206, 238, 62, 39, 131, 14, 190, 47, 142, 182, 62, 219, 238, 168, 60, 100, 13, 55, 62, 81, 131, 158, 189, 41, 162, 122, 62, 77, 157, 7, 191, 75, 98, 250, 62, 219, 231, 53, 190, 57, 31, 216, 62, 194, 109, 188, 188, 135, 219, 140, 62, 104, 244, 200, 62, 101, 21, 108, 190, 109, 57, 242, 190, 13, 4, 241, 188, 100, 158, 135, 190, 135, 95, 90, 61, 225, 28, 67, 187, 24, 122, 197, 190, 85, 135, 222, 190, 30, 71, 3, 190, 73, 3, 53, 187, 59, 70, 38, 189, 23, 81, 35, 62, 184, 124, 241, 62, 31, 112, 160, 61, 144, 122, 144, 62, 56, 201, 168, 62, 85, 169, 213, 189, 131, 124, 17, 63, 253, 92, 36, 190, 187, 203, 232, 190, 150, 168, 72, 60, 109, 249, 154, 62, 164, 17, 117, 62, 196, 230, 3, 63, 80, 244, 9, 63, 227, 139, 148, 62, 165, 196, 182, 189, 138, 254, 122, 61, 84, 241, 224, 62, 17, 227, 154, 190, 83, 194, 76, 190, 250, 111, 134, 189, 102, 251, 6, 191, 45, 91, 225, 62, 125, 175, 74, 190, 207, 41, 29, 187, 35, 64, 224, 61, 209, 108, 107, 62, 54, 204, 216, 62, 218, 84, 96, 62, 200, 8, 17, 62, 123, 12, 8, 191, 21, 21, 159, 190, 137, 65, 14, 191, 206, 205, 98, 190, 142, 210, 78, 62, 6, 241, 176, 61, 114, 34, 9, 191, 128, 173, 158, 187, 191, 167, 215, 188, 25, 134, 72, 190, 79, 241, 162, 190, 41, 72, 36, 190, 131, 121, 22, 190, 148, 106, 26, 62, 137, 133, 182, 190, 17, 115, 130, 62, 127, 234, 6, 63, 215, 90, 225, 190, 84, 128, 6, 191, 104, 217, 168, 190, 136, 41, 46, 62, 47, 33, 255, 190, 151, 81, 233, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 196, 19, 191, 164, 74, 17, 63, 255, 153, 183, 190, 19, 255, 39, 189, 163, 217, 255, 190, 53, 137, 140, 190, 86, 158, 99, 62, 45, 184, 153, 190, 55, 30, 1, 63, 248, 40, 69, 188, 156, 21, 115, 62, 191, 68, 161, 62, 192, 2, 242, 190, 83, 137, 157, 61, 97, 33, 111, 190, 109, 14, 165, 61, 236, 36, 177, 62, 231, 160, 167, 190, 171, 61, 203, 190, 215, 202, 227, 190, 186, 170, 195, 189, 55, 203, 12, 191, 219, 101, 17, 63, 96, 204, 138, 190, 72, 120, 188, 190, 21, 50, 2, 191, 4, 160, 101, 190, 220, 217, 14, 191, 165, 77, 86, 190, 173, 186, 244, 189, 21, 204, 31, 190, 251, 11, 229, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 127, 190, 61, 231, 75, 141, 189, 9, 97, 203, 61, 85, 97, 177, 189, 13, 154, 202, 189, 74, 248, 207, 61, 186, 184, 228, 61, 53, 3, 180, 186, 84, 208, 207, 189, 219, 222, 222, 61, 66, 247, 132, 61, 80, 155, 254, 61, 227, 139, 116, 189, 192, 135, 100, 189, 115, 24, 201, 189, 112, 182, 180, 61, 62, 105, 5, 190, 221, 238, 6, 190, 115, 158, 25, 188, 86, 29, 204, 61, 155, 125, 121, 189, 29, 180, 38, 62, 142, 13, 242, 188, 197, 92, 13, 62, 102, 179, 51, 62, 228, 18, 209, 61, 18, 145, 176, 188, 1, 16, 17, 62, 235, 162, 194, 61, 215, 34, 126, 189, 200, 84, 36, 190, 14, 148, 157, 61, 105, 250, 245, 61, 62, 94, 35, 190, 185, 103, 215, 188, 193, 104, 17, 60, 246, 125, 20, 189, 16, 215, 5, 190, 217, 80, 208, 189, 243, 6, 250, 189, 47, 95, 41, 62, 22, 224, 155, 189, 197, 1, 42, 189, 156, 29, 194, 188, 65, 36, 29, 190, 10, 183, 230, 187, 210, 57, 214, 61, 219, 95, 43, 190, 2, 16, 179, 61, 160, 169, 238, 61, 12, 48, 186, 189, 122, 0, 206, 61, 238, 113, 4, 190, 167, 2, 44, 62, 187, 229, 198, 61, 108, 108, 196, 189, 139, 166, 221, 189, 214, 205, 65, 61, 41, 98, 182, 61, 32, 124, 21, 62, 238, 15, 28, 190, 28, 96, 1, 61, 144, 225, 50, 190, 243, 76, 171, 189, 203, 1, 29, 62, 208, 42, 166, 189, 82, 171, 78, 187, 185, 68, 2, 61, 193, 151, 59, 189, 49, 92, 111, 189, 232, 187, 63, 60, 131, 108, 222, 61, 129, 17, 133, 189, 52, 207, 194, 61, 173, 19, 104, 189, 145, 203, 30, 190, 249, 198, 156, 61, 139, 47, 149, 60, 78, 172, 209, 189, 12, 79, 90, 61, 3, 134, 254, 189, 192, 167, 17, 61, 19, 140, 33, 62, 109, 234, 38, 190, 213, 228, 169, 61, 136, 27, 49, 190, 54, 247, 13, 61, 69, 127, 7, 190, 75, 172, 154, 189, 225, 183, 151, 189, 51, 178, 7, 62, 31, 220, 34, 62, 109, 5, 45, 62, 48, 200, 145, 61, 35, 46, 112, 189, 124, 133, 47, 190, 242, 153, 50, 62, 213, 169, 180, 61, 4, 195, 48, 62, 67, 209, 88, 189, 108, 191, 246, 189, 229, 47, 21, 190, 251, 202, 184, 61, 200, 128, 246, 61, 228, 87, 193, 189, 67, 212, 137, 61, 75, 223, 170, 61, 253, 55, 159, 61, 1, 227, 200, 189, 162, 218, 10, 61, 62, 82, 48, 190, 11, 232, 16, 190, 231, 20, 3, 188, 239, 237, 236, 189, 230, 56, 48, 62, 217, 222, 141, 189, 153, 52, 119, 188, 105, 116, 184, 189, 180, 201, 49, 190, 240, 62, 48, 190, 166, 56, 17, 61, 225, 113, 20, 62, 117, 74, 208, 61, 223, 137, 169, 189, 9, 34, 190, 189, 145, 30, 211, 189, 188, 113, 24, 190, 11, 24, 134, 60, 180, 242, 200, 188, 69, 211, 236, 188, 202, 89, 198, 189, 112, 72, 103, 188, 182, 106, 163, 188, 132, 150, 211, 189, 155, 231, 214, 189, 164, 179, 205, 189, 101, 165, 240, 61, 21, 144, 157, 189, 205, 174, 207, 189, 58, 214, 251, 61, 139, 46, 39, 190, 162, 27, 42, 189, 228, 101, 173, 189, 157, 140, 93, 61, 201, 203, 186, 61, 176, 50, 108, 189, 203, 206, 193, 189, 92, 66, 20, 62, 158, 33, 239, 189, 55, 158, 8, 62, 192, 245, 179, 61, 18, 226, 104, 61, 88, 202, 147, 189, 53, 17, 36, 190, 65, 240, 42, 62, 171, 136, 47, 190, 131, 221, 93, 61, 82, 75, 216, 188, 122, 25, 66, 189, 64, 5, 231, 61, 175, 205, 184, 58, 77, 69, 14, 60, 111, 55, 151, 189, 54, 135, 240, 59, 16, 118, 173, 188, 203, 157, 24, 62, 206, 58, 163, 188, 66, 21, 149, 189, 70, 133, 37, 190, 162, 65, 6, 58, 240, 248, 250, 61, 171, 85, 43, 62, 48, 104, 9, 189, 22, 243, 203, 61, 128, 42, 102, 186, 165, 98, 189, 61, 103, 242, 177, 188, 83, 221, 13, 62, 159, 137, 138, 189, 151, 149, 231, 61, 15, 27, 33, 62, 184, 223, 129, 60, 39, 71, 0, 190, 26, 79, 216, 188, 184, 98, 159, 189, 136, 10, 18, 62, 40, 245, 217, 189, 179, 140, 85, 189, 180, 67, 22, 190, 184, 219, 173, 61, 12, 42, 42, 190, 158, 8, 27, 62, 160, 255, 232, 61, 164, 104, 196, 61, 135, 247, 87, 188, 238, 135, 10, 62, 92, 165, 154, 60, 210, 25, 15, 62, 215, 250, 146, 61, 194, 229, 2, 190, 32, 223, 229, 61, 202, 230, 224, 189, 55, 22, 236, 189, 107, 155, 133, 60, 174, 158, 223, 61, 122, 58, 25, 190, 28, 12, 1, 190, 124, 93, 151, 61, 41, 92, 27, 62, 7, 144, 225, 61, 128, 2, 238, 189, 56, 154, 20, 62, 252, 237, 15, 190, 230, 42, 234, 61, 92, 44, 19, 62, 208, 55, 186, 61, 53, 45, 24, 62, 203, 16, 43, 190, 121, 100, 22, 190, 40, 113, 215, 61, 194, 189, 176, 189, 14, 98, 34, 190, 246, 42, 248, 189, 60, 135, 7, 190, 187, 227, 177, 188, 125, 168, 199, 189, 93, 14, 12, 190, 24, 134, 81, 61, 247, 250, 222, 189, 210, 216, 193, 61, 201, 186, 52, 62, 187, 148, 148, 60, 153, 137, 145, 61, 114, 43, 103, 61, 227, 209, 1, 189, 5, 125, 243, 61, 98, 76, 176, 189, 62, 94, 116, 189, 33, 140, 0, 189, 18, 248, 22, 61, 98, 1, 42, 61, 242, 150, 143, 60, 145, 28, 171, 61, 28, 114, 162, 189, 238, 9, 7, 62, 186, 183, 187, 188, 184, 134, 222, 189, 192, 16, 139, 189, 155, 8, 196, 60, 6, 235, 29, 190, 26, 51, 187, 188, 61, 32, 218, 189, 140, 198, 155, 188, 49, 107, 143, 60, 234, 79, 177, 61, 112, 22, 217, 189, 141, 148, 18, 190, 94, 207, 196, 61, 117, 178, 200, 61, 102, 6, 52, 190, 138, 240, 245, 189, 135, 130, 250, 61, 176, 38, 190, 189, 109, 122, 207, 61, 8, 150, 12, 189, 172, 172, 11, 62, 220, 114, 74, 61, 224, 21, 24, 190, 205, 21, 214, 189, 51, 255, 188, 189, 245, 199, 227, 60, 206, 243, 150, 189, 150, 228, 92, 61, 194, 65, 2, 190, 191, 248, 164, 60, 146, 166, 227, 61, 98, 36, 72, 61, 188, 95, 137, 189, 102, 90, 238, 61, 61, 120, 31, 190, 132, 221, 10, 189, 4, 13, 1, 62, 148, 95, 129, 188, 112, 144, 187, 61, 36, 18, 241, 189, 37, 103, 1, 62, 31, 25, 217, 61, 94, 228, 142, 61, 151, 174, 152, 189, 32, 117, 242, 58, 25, 136, 189, 188, 5, 82, 113, 61, 101, 147, 204, 189, 79, 76, 41, 62, 208, 26, 3, 62, 157, 146, 219, 61, 188, 209, 3, 190, 195, 4, 44, 190, 68, 71, 248, 61, 255, 208, 172, 188, 134, 107, 108, 61, 252, 201, 96, 189, 173, 127, 78, 61, 94, 120, 22, 190, 239, 121, 224, 189, 206, 22, 37, 190, 92, 225, 67, 60, 114, 115, 244, 61, 210, 76, 17, 61, 67, 179, 234, 61, 62, 178, 166, 189, 128, 158, 208, 189, 69, 175, 11, 190, 138, 212, 12, 62, 227, 238, 149, 189, 228, 67, 137, 189, 179, 156, 83, 189, 66, 40, 207, 60, 64, 199, 36, 61, 67, 118, 11, 62, 23, 114, 67, 189, 119, 82, 220, 189, 0, 59, 53, 188, 87, 112, 116, 61, 11, 104, 3, 189, 5, 118, 223, 188, 54, 32, 201, 61, 188, 121, 36, 62, 209, 179, 46, 62, 20, 251, 179, 61, 41, 23, 1, 190, 156, 136, 148, 61, 73, 224, 213, 189, 60, 1, 20, 190, 183, 46, 74, 61, 62, 138, 49, 62, 184, 164, 247, 187, 208, 255, 189, 189, 121, 177, 136, 189, 47, 193, 59, 61, 13, 167, 121, 60, 90, 93, 0, 62, 82, 24, 17, 61, 250, 168, 160, 188, 105, 99, 213, 189, 68, 10, 250, 188, 207, 190, 112, 60, 196, 59, 49, 190, 172, 180, 182, 61, 140, 63, 24, 189, 234, 166, 84, 60, 135, 103, 120, 185, 152, 148, 24, 190, 130, 33, 199, 189, 134, 249, 86, 189, 206, 210, 131, 60, 187, 240, 111, 188, 182, 105, 125, 189, 0, 150, 176, 188, 22, 127, 209, 61, 82, 161, 181, 189, 138, 126, 208, 60, 125, 86, 57, 189, 18, 247, 248, 58, 144, 186, 213, 61, 225, 113, 128, 187, 228, 13, 245, 189, 47, 20, 22, 189, 48, 95, 155, 61, 50, 164, 27, 62, 33, 119, 7, 62, 119, 44, 190, 189, 139, 209, 171, 189, 105, 117, 133, 189, 222, 83, 152, 61, 238, 35, 167, 189, 241, 247, 17, 62, 35, 141, 237, 61, 100, 126, 148, 188, 12, 37, 221, 61, 136, 71, 52, 61, 228, 66, 208, 61, 76, 71, 229, 60, 50, 231, 45, 62, 228, 96, 100, 61, 225, 46, 47, 190, 160, 202, 29, 62, 29, 208, 136, 61, 111, 18, 254, 189, 79, 3, 24, 190, 126, 189, 204, 60, 45, 73, 254, 60, 131, 78, 18, 190, 127, 189, 29, 188, 0, 221, 234, 61, 215, 24, 33, 190, 62, 131, 1, 62, 158, 7, 15, 62, 76, 2, 15, 189, 39, 82, 192, 61, 222, 64, 225, 60, 1, 13, 51, 61, 77, 178, 36, 60, 235, 30, 77, 189, 134, 220, 19, 62, 151, 33, 147, 61, 92, 152, 91, 61, 88, 175, 24, 190, 231, 235, 54, 189, 49, 211, 141, 60, 79, 53, 145, 186, 85, 56, 243, 61, 5, 168, 42, 190, 31, 152, 22, 190, 203, 27, 199, 188, 96, 129, 19, 190, 111, 212, 43, 190, 53, 98, 26, 61, 115, 181, 183, 189, 201, 86, 127, 189, 47, 254, 21, 190, 207, 75, 94, 189, 246, 225, 215, 60, 234, 16, 184, 189, 145, 14, 42, 190, 156, 2, 21, 62, 214, 82, 41, 190, 4, 153, 36, 62, 244, 71, 98, 61, 227, 52, 123, 61, 16, 181, 36, 62, 213, 117, 175, 61, 86, 77, 206, 189, 244, 134, 15, 62, 142, 21, 34, 187, 4, 200, 27, 62, 92, 12, 60, 189, 53, 124, 35, 190, 202, 11, 50, 62, 78, 71, 42, 62, 66, 222, 48, 189, 170, 240, 218, 61, 192, 162, 138, 188, 183, 47, 49, 190, 94, 131, 30, 62, 215, 250, 223, 189, 19, 1, 195, 60, 198, 109, 20, 190, 66, 67, 208, 189, 206, 156, 35, 189, 149, 204, 81, 61, 38, 217, 34, 189, 80, 171, 174, 59, 249, 153, 15, 62, 98, 216, 31, 62, 56, 179, 41, 190, 223, 107, 8, 188, 3, 106, 130, 61, 180, 171, 47, 61, 109, 3, 145, 189, 5, 115, 10, 59, 197, 55, 26, 62, 194, 167, 209, 61, 222, 76, 30, 62, 87, 55, 139, 189, 115, 61, 28, 190, 218, 26, 111, 189, 40, 204, 214, 186, 152, 90, 12, 61, 10, 66, 233, 188, 78, 121, 26, 62, 217, 90, 123, 61, 20, 36, 126, 61, 232, 132, 49, 190, 12, 59, 124, 187, 32, 17, 112, 60, 16, 164, 37, 190, 144, 67, 23, 62, 21, 164, 101, 61, 167, 251, 114, 61, 38, 24, 1, 62, 208, 60, 19, 188, 105, 140, 146, 189, 160, 86, 7, 62, 188, 212, 98, 189, 99, 161, 32, 62, 65, 34, 218, 187, 66, 171, 35, 190, 225, 229, 107, 188, 108, 146, 33, 190, 225, 94, 224, 61, 223, 230, 168, 58, 56, 200, 186, 61, 166, 106, 48, 190, 114, 23, 124, 61, 89, 128, 198, 189, 114, 250, 39, 62, 222, 117, 6, 61, 109, 95, 45, 190, 194, 80, 45, 62, 172, 112, 72, 189, 11, 180, 194, 189, 64, 123, 8, 190, 52, 95, 5, 61, 223, 215, 33, 189, 93, 155, 232, 189, 123, 84, 130, 189, 199, 111, 116, 189, 117, 41, 40, 61, 175, 98, 250, 189, 47, 165, 89, 61, 186, 100, 150, 188, 79, 99, 109, 189, 218, 43, 225, 188, 180, 179, 255, 61, 66, 164, 183, 61, 113, 88, 10, 190, 77, 40, 32, 190, 213, 199, 5, 188, 122, 209, 100, 189, 138, 124, 9, 62, 32, 137, 29, 190, 104, 219, 225, 189, 175, 249, 50, 62, 6, 245, 12, 190, 69, 92, 229, 61, 23, 166, 125, 189, 99, 15, 146, 61, 100, 39, 210, 61, 231, 145, 96, 59, 15, 235, 23, 189, 4, 193, 64, 189, 58, 205, 187, 188, 66, 191, 148, 61, 194, 72, 246, 189, 49, 91, 251, 61, 16, 127, 10, 62, 176, 70, 33, 62, 201, 224, 122, 188, 127, 172, 1, 61, 248, 127, 52, 188, 60, 237, 208, 61, 65, 32, 44, 190, 31, 114, 1, 62, 214, 121, 71, 189, 6, 247, 227, 188, 136, 64, 77, 61, 138, 31, 39, 61, 17, 67, 17, 190, 31, 171, 42, 62, 108, 143, 250, 187, 4, 241, 50, 190, 168, 21, 95, 188, 167, 190, 194, 189, 71, 106, 245, 189, 92, 247, 45, 190, 35, 199, 211, 188, 63, 146, 213, 60, 147, 89, 241, 61, 111, 87, 45, 61, 112, 205, 167, 189, 67, 166, 69, 60, 223, 82, 42, 62, 206, 177, 17, 188, 38, 148, 198, 61, 132, 162, 239, 61, 4, 51, 224, 61, 110, 252, 21, 60, 106, 66, 128, 61, 65, 250, 27, 61, 149, 14, 177, 61, 79, 38, 161, 189, 136, 164, 37, 62, 116, 93, 241, 189, 65, 154, 42, 190, 87, 5, 233, 60, 124, 168, 144, 189, 35, 104, 182, 61, 201, 132, 130, 188, 196, 21, 12, 190, 92, 212, 142, 189, 230, 148, 219, 189, 228, 255, 98, 61, 247, 81, 48, 190, 28, 164, 253, 189, 159, 241, 22, 190, 185, 24, 216, 189, 138, 98, 146, 60, 121, 147, 37, 62, 16, 76, 26, 190, 181, 206, 51, 60, 200, 121, 215, 189, 86, 80, 39, 62, 161, 108, 177, 61, 211, 246, 219, 61, 40, 7, 201, 189, 61, 7, 132, 189, 85, 222, 20, 62, 166, 24, 133, 188, 229, 157, 249, 189, 79, 112, 38, 187, 20, 119, 196, 61, 15, 120, 197, 61, 39, 222, 26, 190, 187, 226, 38, 190, 227, 216, 5, 190, 30, 29, 10, 62, 54, 220, 228, 189, 42, 37, 20, 61, 204, 66, 249, 61, 176, 24, 183, 189, 131, 188, 86, 60, 85, 49, 137, 60, 217, 26, 40, 61, 185, 243, 42, 187, 30, 214, 58, 186, 140, 76, 44, 61, 201, 236, 239, 189, 110, 23, 127, 188, 99, 125, 68, 189, 195, 232, 24, 190, 34, 9, 39, 62, 182, 232, 241, 61, 78, 140, 13, 61, 136, 207, 159, 189, 114, 138, 39, 190, 247, 53, 157, 61, 124, 218, 38, 61, 4, 217, 41, 62, 236, 60, 49, 189, 243, 19, 125, 59, 162, 87, 26, 190, 7, 227, 193, 188, 114, 241, 25, 189, 27, 115, 4, 62, 110, 38, 189, 189, 80, 58, 45, 190, 29, 108, 151, 61, 130, 252, 176, 189, 79, 215, 71, 189, 136, 20, 195, 61, 119, 228, 52, 61, 210, 150, 17, 62, 132, 117, 205, 189, 41, 151, 75, 188, 136, 180, 211, 61, 75, 167, 211, 59, 113, 213, 146, 60, 113, 104, 179, 60, 106, 231, 250, 60, 105, 168, 39, 188, 240, 69, 35, 190, 226, 70, 241, 61, 102, 159, 25, 62, 136, 167, 247, 189, 54, 170, 37, 190, 45, 88, 219, 61, 203, 110, 244, 61, 77, 215, 232, 189, 131, 103, 11, 62, 109, 131, 17, 190, 232, 102, 144, 189, 119, 82, 143, 61, 29, 78, 190, 189, 7, 181, 208, 189, 119, 55, 27, 190, 50, 134, 248, 61, 198, 173, 255, 189, 182, 124, 205, 61, 163, 83, 226, 189, 56, 86, 19, 190, 204, 176, 91, 61, 197, 75, 30, 189, 12, 106, 92, 189, 148, 235, 244, 188, 87, 156, 179, 189, 4, 41, 155, 188, 187, 110, 9, 190, 210, 43, 176, 188, 187, 85, 220, 189, 204, 220, 236, 189, 213, 7, 106, 60, 207, 168, 34, 60, 200, 3, 151, 188, 220, 117, 234, 189, 162, 241, 146, 189, 58, 246, 141, 61, 62, 253, 106, 61, 113, 68, 173, 61, 30, 235, 134, 189, 235, 29, 236, 61, 26, 190, 251, 189, 76, 196, 253, 189, 217, 216, 242, 189, 250, 140, 58, 61, 232, 148, 203, 60, 123, 246, 3, 62, 14, 39, 72, 61, 205, 101, 198, 188, 218, 51, 204, 189, 128, 199, 60, 61, 135, 91, 185, 188, 195, 138, 12, 62, 240, 241, 21, 62, 211, 217, 15, 190, 141, 250, 237, 187, 227, 40, 175, 189, 3, 0, 189, 61, 181, 49, 238, 186, 225, 177, 12, 190, 236, 91, 50, 62, 23, 66, 41, 58, 211, 86, 222, 189, 209, 159, 89, 61, 187, 185, 213, 189, 19, 101, 252, 60, 109, 156, 8, 190, 248, 145, 220, 60, 85, 86, 152, 188, 121, 154, 67, 58, 159, 151, 42, 62, 20, 26, 32, 62, 113, 247, 32, 62, 85, 153, 21, 190, 234, 197, 67, 61, 140, 163, 22, 61, 184, 114, 206, 61, 98, 130, 30, 187, 109, 118, 5, 60, 204, 250, 169, 61, 137, 76, 52, 190, 144, 184, 167, 188, 120, 48, 194, 189, 113, 217, 33, 190, 192, 10, 28, 62, 84, 1, 40, 188, 38, 46, 173, 61, 103, 243, 149, 189, 169, 20, 17, 62, 230, 182, 36, 61, 202, 215, 0, 190, 182, 160, 219, 189, 229, 179, 248, 60, 3, 244, 142, 61, 146, 53, 123, 61, 15, 199, 47, 62, 66, 95, 104, 61, 212, 99, 67, 189, 99, 0, 248, 61, 173, 187, 47, 190, 207, 68, 11, 189, 91, 112, 236, 189, 179, 22, 56, 189, 70, 253, 51, 190, 255, 109, 228, 61, 156, 165, 159, 61, 153, 163, 244, 189, 199, 205, 40, 190, 20, 172, 22, 190, 160, 59, 226, 61, 93, 12, 166, 61, 11, 141, 179, 61, 26, 61, 241, 189, 54, 67, 39, 62, 86, 129, 67, 189, 137, 212, 218, 58, 167, 116, 4, 62, 214, 126, 223, 59, 16, 52, 6, 62, 173, 122, 92, 61, 51, 119, 106, 189, 29, 215, 106, 189, 223, 64, 49, 62, 140, 205, 236, 189, 9, 56, 25, 62, 130, 231, 249, 188, 143, 115, 118, 189, 97, 9, 193, 189, 234, 220, 223, 61, 179, 119, 158, 61, 79, 12, 208, 61, 188, 54, 61, 61, 100, 228, 249, 187, 177, 1, 44, 62, 67, 97, 17, 61, 177, 124, 181, 61, 5, 2, 14, 190, 204, 183, 39, 190, 177, 58, 40, 187, 241, 55, 29, 188, 101, 47, 106, 189, 121, 2, 7, 61, 203, 28, 23, 189, 150, 205, 157, 61, 61, 144, 70, 189, 252, 204, 48, 190, 137, 30, 247, 61, 223, 65, 78, 60, 18, 109, 33, 62, 98, 19, 239, 188, 169, 152, 21, 190, 31, 64, 186, 61, 218, 43, 122, 61, 208, 230, 30, 62, 242, 92, 199, 189, 38, 120, 39, 62, 37, 121, 40, 62, 222, 242, 198, 60, 63, 164, 45, 62, 28, 119, 119, 57, 233, 197, 158, 61, 126, 45, 9, 62, 210, 227, 166, 61, 188, 150, 156, 189, 107, 56, 233, 61, 92, 31, 24, 62, 84, 152, 183, 59, 249, 151, 250, 61, 145, 77, 230, 189, 118, 254, 214, 61, 44, 52, 1, 62, 101, 218, 162, 60, 220, 4, 236, 59, 117, 52, 16, 62, 247, 89, 37, 62, 230, 143, 82, 61, 98, 34, 186, 189, 6, 164, 44, 190, 111, 86, 39, 62, 255, 118, 254, 61, 192, 83, 39, 190, 231, 77, 68, 61, 213, 106, 253, 189, 13, 250, 161, 189, 3, 57, 187, 61, 3, 46, 188, 189, 33, 42, 132, 60, 240, 122, 179, 188, 226, 209, 50, 62, 142, 46, 14, 62, 97, 198, 38, 190, 64, 95, 165, 189, 18, 82, 34, 62, 188, 134, 32, 62, 48, 242, 86, 61, 42, 14, 9, 190, 97, 57, 35, 62, 173, 96, 13, 62, 105, 38, 148, 61, 16, 45, 144, 189, 113, 67, 32, 62, 142, 30, 161, 188, 198, 114, 103, 60, 64, 245, 39, 190, 152, 49, 91, 189, 109, 57, 232, 60, 117, 247, 25, 190, 0, 41, 7, 62, 9, 242, 27, 190, 237, 81, 49, 190, 119, 129, 169, 61, 7, 205, 52, 190, 195, 250, 1, 190, 198, 251, 198, 188, 202, 207, 38, 61, 171, 228, 184, 187, 241, 228, 165, 189, 128, 56, 236, 61, 89, 48, 181, 60, 94, 142, 24, 62, 92, 21, 84, 61, 225, 152, 16, 62, 121, 25, 241, 189, 53, 186, 222, 189, 230, 206, 73, 61, 190, 221, 83, 61, 167, 26, 50, 189, 250, 102, 111, 188, 74, 218, 11, 62, 216, 76, 21, 62, 187, 57, 229, 186, 168, 252, 68, 189, 240, 228, 138, 189, 142, 70, 104, 60, 29, 196, 185, 188, 113, 58, 203, 59, 135, 194, 119, 189, 45, 222, 35, 190, 6, 138, 198, 189, 185, 166, 21, 190, 235, 76, 212, 189, 186, 57, 110, 61, 174, 150, 145, 189, 212, 84, 250, 189, 247, 25, 19, 62, 14, 61, 227, 188, 158, 242, 172, 189, 79, 246, 14, 190, 64, 177, 171, 61, 123, 74, 185, 61, 232, 159, 15, 189, 167, 169, 46, 61, 147, 68, 18, 61, 147, 153, 32, 190, 81, 184, 29, 62, 138, 32, 61, 189, 12, 18, 33, 60, 133, 247, 244, 61, 61, 201, 219, 60, 154, 169, 15, 62, 216, 208, 199, 61, 190, 200, 132, 60, 225, 221, 40, 190, 92, 113, 243, 189, 111, 170, 217, 61, 245, 210, 6, 62, 233, 85, 66, 188, 235, 2, 82, 61, 221, 161, 254, 61, 144, 184, 25, 62, 88, 29, 160, 61, 125, 105, 46, 190, 100, 217, 166, 61, 141, 25, 106, 189, 141, 168, 241, 60, 174, 121, 231, 61, 228, 153, 247, 188, 9, 27, 141, 61, 71, 96, 51, 62, 226, 87, 155, 61, 181, 72, 168, 189, 136, 161, 78, 189, 180, 206, 43, 189, 249, 65, 84, 60, 48, 84, 81, 189, 244, 147, 27, 190, 106, 36, 27, 190, 104, 131, 146, 189, 156, 227, 137, 61, 202, 199, 6, 190, 224, 189, 169, 60, 158, 222, 250, 186, 218, 1, 165, 59, 186, 122, 9, 62, 246, 228, 170, 61, 170, 29, 193, 189, 166, 33, 42, 62, 87, 30, 143, 60, 176, 240, 51, 190, 195, 160, 17, 190, 56, 39, 46, 62, 201, 41, 179, 189, 235, 87, 241, 61, 158, 155, 51, 188, 252, 177, 50, 189, 239, 248, 13, 61, 59, 173, 214, 189, 140, 201, 78, 59, 52, 2, 178, 186, 141, 59, 31, 62, 212, 244, 50, 62, 198, 248, 194, 189, 213, 207, 13, 62, 56, 95, 3, 62, 174, 229, 210, 189, 190, 116, 190, 189, 201, 161, 151, 61, 176, 231, 8, 190, 240, 235, 26, 62, 48, 46, 98, 188, 241, 36, 182, 189, 190, 138, 71, 61, 78, 114, 96, 189, 232, 120, 42, 61, 51, 158, 41, 62, 12, 55, 153, 61, 51, 232, 4, 62, 66, 167, 31, 188, 55, 207, 163, 189, 34, 20, 203, 189, 66, 206, 157, 61, 11, 205, 218, 188, 17, 75, 231, 61, 28, 167, 225, 189, 247, 5, 171, 61, 89, 150, 198, 189, 118, 238, 41, 62, 41, 223, 168, 189, 5, 14, 156, 61, 184, 57, 204, 61, 68, 116, 17, 62, 211, 211, 34, 62, 62, 39, 241, 189, 175, 203, 32, 62, 197, 110, 252, 189, 172, 147, 5, 190, 93, 108, 194, 188, 216, 163, 158, 189, 101, 27, 210, 189, 7, 251, 226, 60, 160, 73, 83, 61, 129, 20, 108, 61, 51, 163, 17, 189, 103, 245, 173, 189, 249, 53, 76, 61, 76, 108, 49, 60, 176, 225, 155, 189, 231, 44, 190, 189, 155, 114, 200, 189, 107, 166, 207, 61, 39, 252, 27, 189, 200, 226, 239, 189, 18, 64, 70, 189, 141, 208, 83, 61, 118, 65, 202, 61, 216, 19, 231, 189, 186, 3, 231, 61, 144, 167, 158, 61, 59, 41, 7, 190, 184, 197, 12, 62, 35, 243, 23, 61, 104, 205, 52, 62, 79, 238, 26, 62, 6, 93, 13, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 139, 154, 61, 92, 250, 255, 189, 133, 26, 107, 189, 167, 247, 194, 189, 190, 198, 65, 61, 139, 112, 1, 62, 232, 69, 105, 61, 221, 183, 247, 61, 134, 88, 134, 60, 190, 162, 177, 189, 96, 156, 197, 61, 204, 37, 189, 189, 150, 109, 77, 61, 132, 28, 236, 61, 169, 120, 37, 62, 6, 25, 158, 59, 71, 230, 203, 61, 173, 4, 210, 61, 208, 206, 142, 61, 211, 157, 154, 189, 0, 3, 229, 189, 27, 111, 227, 189, 195, 195, 193, 188, 225, 35, 38, 190, 69, 223, 166, 61, 193, 70, 241, 189, 89, 37, 195, 61, 44, 104, 230, 61, 169, 94, 1, 62, 174, 148, 208, 61, 30, 69, 3, 61, 114, 221, 26, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 81, 175, 189, 243, 193, 29, 190, 156, 234, 10, 62, 24, 183, 148, 188, 78, 78, 233, 59, 80, 138, 39, 62, 79, 93, 174, 189, 232, 208, 202, 189, 79, 8, 227, 61, 168, 47, 153, 189, 86, 36, 219, 61, 190, 120, 3, 190, 24, 24, 244, 189, 110, 93, 132, 61, 133, 61, 18, 62, 75, 226, 156, 188, 53, 105, 10, 190, 107, 173, 46, 190, 59, 237, 253, 188, 4, 193, 48, 62, 144, 164, 48, 62, 21, 145, 237, 61, 40, 127, 221, 61, 92, 238, 213, 61, 206, 99, 228, 189, 125, 140, 214, 189, 182, 228, 1, 188, 29, 214, 46, 61, 17, 113, 41, 61, 239, 143, 50, 190, 1, 14, 29, 190, 243, 245, 179, 59, 125, 249, 183, 61, 119, 65, 250, 61, 119, 117, 106, 189, 174, 7, 242, 188, 66, 121, 44, 190, 217, 70, 157, 61, 165, 248, 255, 189, 26, 61, 51, 62, 80, 40, 108, 189, 50, 157, 146, 61, 68, 162, 85, 61, 81, 40, 14, 62, 220, 189, 19, 62, 2, 154, 1, 190, 88, 182, 44, 62, 116, 161, 74, 189, 207, 21, 223, 61, 249, 43, 112, 61, 11, 9, 12, 62, 95, 74, 31, 189, 143, 75, 221, 61, 170, 239, 10, 190, 59, 83, 67, 61, 58, 195, 9, 189, 198, 4, 95, 61, 176, 185, 224, 61, 103, 81, 171, 61, 159, 56, 29, 190, 190, 207, 207, 61, 184, 177, 2, 190, 244, 27, 178, 189, 227, 138, 145, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 184, 37, 190, 210, 45, 212, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {245, 210, 104, 190, 1, 141, 85, 191, 119, 96, 55, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 121, 85, 190, 32, 161, 134, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0014/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}