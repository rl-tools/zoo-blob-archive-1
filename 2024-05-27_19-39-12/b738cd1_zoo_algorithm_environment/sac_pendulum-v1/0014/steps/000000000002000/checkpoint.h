// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 77, 8, 63, 185, 195, 59, 190, 187, 22, 0, 63, 69, 90, 64, 190, 230, 5, 162, 189, 233, 212, 143, 190, 28, 39, 218, 190, 105, 106, 176, 62, 3, 246, 172, 62, 137, 251, 29, 62, 201, 243, 238, 62, 244, 70, 2, 63, 3, 231, 37, 191, 242, 54, 170, 62, 82, 122, 21, 191, 53, 168, 52, 189, 114, 114, 232, 62, 6, 238, 235, 62, 206, 13, 21, 63, 219, 77, 231, 189, 105, 23, 152, 62, 157, 237, 77, 62, 171, 41, 112, 62, 108, 4, 164, 190, 115, 250, 169, 62, 143, 94, 250, 190, 93, 169, 249, 62, 30, 219, 77, 190, 75, 40, 65, 63, 53, 113, 98, 190, 40, 196, 216, 61, 48, 166, 203, 62, 132, 151, 183, 190, 138, 96, 225, 190, 21, 74, 9, 191, 47, 90, 74, 190, 55, 208, 69, 62, 196, 92, 55, 190, 115, 184, 169, 190, 240, 241, 186, 190, 249, 101, 35, 191, 14, 199, 186, 61, 155, 61, 112, 60, 130, 53, 6, 62, 63, 201, 198, 62, 238, 10, 251, 61, 148, 138, 230, 62, 68, 219, 105, 62, 243, 151, 204, 189, 88, 212, 121, 63, 196, 251, 13, 190, 150, 234, 22, 191, 77, 205, 72, 190, 129, 7, 177, 62, 196, 140, 178, 62, 228, 165, 247, 62, 56, 154, 246, 62, 118, 158, 144, 62, 158, 193, 157, 189, 118, 126, 65, 61, 133, 21, 247, 62, 108, 215, 229, 190, 205, 237, 151, 190, 13, 152, 184, 189, 31, 174, 47, 191, 204, 139, 223, 62, 157, 108, 200, 189, 199, 104, 13, 189, 63, 74, 188, 61, 107, 228, 23, 62, 108, 202, 223, 62, 192, 158, 96, 62, 248, 73, 103, 62, 213, 2, 8, 191, 42, 202, 172, 190, 32, 164, 44, 191, 239, 127, 84, 191, 65, 19, 132, 62, 202, 40, 182, 189, 146, 94, 108, 191, 152, 138, 4, 62, 218, 158, 73, 62, 144, 213, 146, 190, 103, 216, 238, 190, 209, 15, 177, 189, 63, 72, 118, 190, 109, 167, 65, 62, 107, 107, 166, 190, 250, 120, 62, 62, 44, 199, 243, 62, 136, 247, 28, 191, 97, 76, 108, 191, 211, 158, 109, 190, 36, 168, 17, 188, 177, 107, 97, 191, 35, 152, 0, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 253, 236, 190, 114, 119, 85, 63, 135, 101, 211, 190, 98, 15, 215, 189, 181, 6, 236, 190, 85, 109, 207, 190, 27, 162, 68, 62, 106, 30, 127, 190, 217, 159, 243, 62, 142, 99, 40, 189, 149, 148, 178, 62, 138, 241, 136, 62, 245, 30, 46, 191, 38, 154, 245, 187, 147, 212, 191, 190, 90, 8, 172, 61, 246, 167, 222, 62, 50, 185, 64, 190, 140, 117, 19, 191, 221, 63, 234, 190, 147, 63, 132, 61, 225, 76, 3, 191, 210, 105, 59, 63, 238, 100, 142, 190, 157, 35, 178, 190, 120, 224, 196, 190, 214, 144, 199, 61, 125, 39, 246, 190, 139, 221, 138, 190, 12, 104, 82, 190, 50, 113, 191, 61, 196, 99, 70, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 172, 150, 61, 149, 185, 205, 189, 174, 46, 165, 61, 28, 127, 216, 189, 166, 103, 210, 189, 48, 44, 169, 61, 197, 101, 189, 61, 158, 50, 117, 187, 226, 247, 246, 189, 189, 235, 189, 61, 119, 238, 34, 61, 162, 192, 205, 61, 38, 54, 136, 189, 116, 185, 150, 189, 239, 8, 240, 189, 130, 166, 141, 61, 8, 4, 20, 190, 209, 38, 26, 190, 143, 3, 234, 188, 101, 196, 175, 61, 38, 231, 200, 189, 187, 141, 19, 62, 185, 10, 74, 189, 120, 244, 243, 61, 159, 67, 30, 62, 67, 177, 171, 61, 107, 51, 58, 189, 105, 106, 0, 62, 33, 217, 156, 61, 12, 203, 165, 189, 181, 115, 59, 190, 9, 68, 106, 61, 191, 68, 203, 61, 88, 39, 238, 189, 176, 238, 165, 189, 16, 113, 3, 189, 39, 151, 20, 189, 182, 188, 47, 190, 109, 127, 232, 189, 243, 6, 250, 189, 101, 80, 35, 62, 183, 102, 184, 189, 252, 13, 9, 189, 4, 74, 147, 61, 65, 36, 29, 190, 207, 245, 149, 61, 23, 46, 148, 61, 202, 153, 92, 190, 91, 119, 87, 190, 215, 192, 184, 61, 59, 209, 249, 189, 200, 249, 165, 61, 184, 193, 53, 189, 4, 56, 37, 62, 244, 14, 181, 61, 194, 58, 35, 190, 121, 109, 185, 189, 244, 32, 141, 61, 10, 246, 82, 62, 48, 206, 22, 62, 101, 145, 45, 190, 53, 25, 21, 187, 178, 115, 189, 188, 101, 181, 130, 188, 181, 157, 38, 62, 84, 68, 192, 189, 186, 16, 2, 61, 131, 218, 22, 61, 193, 151, 59, 189, 171, 75, 44, 189, 143, 46, 242, 58, 131, 108, 222, 61, 209, 61, 148, 189, 39, 4, 200, 61, 156, 140, 45, 189, 76, 237, 73, 190, 249, 198, 156, 61, 154, 45, 143, 59, 82, 247, 179, 189, 166, 22, 84, 61, 146, 3, 44, 190, 246, 183, 138, 61, 56, 24, 44, 62, 77, 167, 26, 190, 202, 42, 191, 61, 101, 93, 20, 190, 84, 95, 85, 60, 44, 142, 244, 189, 75, 172, 154, 189, 40, 42, 29, 189, 210, 132, 242, 61, 31, 220, 34, 62, 181, 240, 84, 62, 174, 176, 174, 61, 219, 167, 116, 189, 161, 13, 52, 190, 228, 145, 142, 62, 52, 88, 28, 62, 228, 135, 64, 61, 212, 125, 245, 188, 65, 3, 202, 189, 66, 231, 32, 190, 25, 10, 165, 62, 66, 173, 130, 62, 181, 179, 196, 61, 42, 101, 61, 62, 242, 136, 135, 62, 141, 104, 205, 188, 118, 41, 37, 189, 147, 52, 174, 190, 136, 6, 36, 190, 153, 146, 212, 189, 239, 72, 4, 62, 102, 171, 83, 190, 81, 151, 83, 62, 217, 222, 141, 189, 38, 208, 31, 62, 144, 53, 202, 189, 131, 104, 255, 189, 160, 152, 79, 190, 153, 60, 111, 60, 238, 200, 176, 60, 252, 233, 188, 61, 70, 32, 100, 189, 84, 124, 8, 190, 147, 4, 233, 189, 178, 159, 166, 190, 168, 204, 242, 61, 12, 26, 153, 189, 92, 1, 22, 189, 114, 152, 100, 189, 110, 238, 126, 60, 254, 229, 12, 190, 151, 253, 165, 189, 172, 154, 146, 189, 4, 225, 90, 187, 191, 62, 42, 62, 31, 183, 220, 189, 177, 217, 186, 59, 199, 26, 29, 60, 127, 34, 48, 190, 205, 33, 173, 189, 213, 111, 151, 189, 167, 41, 177, 61, 252, 203, 7, 62, 71, 230, 244, 188, 55, 56, 233, 189, 203, 233, 20, 62, 176, 16, 202, 61, 172, 224, 221, 61, 25, 8, 15, 62, 15, 245, 79, 60, 15, 212, 2, 189, 183, 227, 35, 190, 251, 20, 82, 62, 171, 7, 40, 190, 221, 24, 108, 61, 248, 81, 201, 59, 140, 211, 120, 190, 177, 197, 8, 62, 254, 19, 159, 189, 118, 33, 70, 61, 194, 198, 229, 189, 162, 147, 124, 189, 141, 244, 134, 189, 143, 27, 163, 61, 38, 95, 204, 189, 101, 188, 110, 59, 75, 198, 58, 190, 54, 142, 158, 190, 55, 96, 135, 61, 74, 247, 132, 62, 92, 174, 155, 188, 55, 29, 100, 62, 84, 238, 159, 189, 133, 70, 243, 60, 79, 82, 58, 190, 123, 2, 20, 62, 195, 137, 14, 190, 221, 183, 250, 61, 84, 254, 155, 62, 237, 181, 200, 189, 148, 185, 19, 190, 86, 188, 116, 189, 175, 224, 182, 188, 103, 34, 93, 62, 200, 9, 9, 62, 91, 117, 199, 60, 247, 203, 128, 190, 59, 65, 24, 61, 184, 161, 129, 188, 213, 84, 160, 62, 69, 105, 221, 61, 131, 62, 192, 61, 41, 128, 199, 186, 235, 94, 48, 62, 150, 242, 84, 61, 218, 93, 47, 62, 140, 62, 245, 61, 171, 202, 140, 190, 53, 91, 16, 62, 3, 71, 110, 61, 66, 1, 1, 189, 90, 225, 43, 189, 149, 97, 114, 60, 5, 22, 76, 190, 54, 92, 199, 189, 214, 182, 226, 61, 139, 104, 139, 62, 107, 20, 186, 61, 13, 235, 197, 189, 94, 163, 16, 62, 211, 75, 59, 190, 42, 101, 252, 61, 209, 222, 79, 62, 9, 250, 177, 61, 99, 198, 143, 61, 134, 1, 105, 190, 92, 44, 114, 190, 195, 50, 155, 187, 109, 139, 150, 189, 14, 105, 10, 190, 167, 243, 97, 190, 213, 20, 65, 190, 183, 90, 26, 189, 150, 106, 87, 190, 144, 253, 36, 190, 44, 17, 30, 61, 79, 46, 245, 189, 70, 45, 166, 61, 156, 36, 29, 62, 195, 96, 140, 60, 47, 125, 36, 61, 175, 84, 249, 60, 211, 114, 167, 189, 124, 226, 104, 61, 128, 54, 201, 189, 200, 24, 207, 189, 136, 184, 62, 189, 231, 200, 225, 60, 106, 132, 163, 61, 37, 201, 122, 188, 61, 129, 157, 61, 65, 163, 179, 189, 253, 32, 181, 59, 48, 132, 83, 189, 221, 168, 20, 190, 210, 236, 118, 189, 95, 122, 172, 188, 108, 252, 64, 190, 36, 235, 36, 190, 230, 83, 245, 189, 21, 122, 74, 189, 61, 14, 137, 186, 71, 40, 194, 60, 175, 116, 54, 190, 153, 21, 236, 189, 137, 235, 62, 62, 145, 236, 37, 61, 252, 37, 80, 190, 85, 204, 2, 190, 204, 32, 11, 61, 74, 123, 152, 187, 251, 76, 72, 62, 10, 188, 19, 62, 89, 29, 129, 189, 54, 132, 203, 61, 66, 137, 110, 189, 74, 72, 189, 189, 3, 244, 40, 61, 210, 150, 104, 189, 190, 64, 166, 189, 218, 202, 43, 188, 240, 41, 183, 189, 46, 81, 73, 189, 146, 166, 227, 61, 80, 45, 119, 62, 131, 220, 243, 189, 190, 26, 110, 62, 18, 69, 15, 190, 21, 194, 215, 60, 26, 6, 126, 62, 209, 40, 168, 62, 213, 210, 48, 62, 158, 65, 11, 190, 64, 205, 204, 61, 147, 79, 111, 62, 236, 172, 221, 62, 50, 17, 178, 189, 32, 117, 242, 58, 225, 141, 16, 189, 76, 31, 63, 61, 101, 147, 204, 189, 123, 198, 28, 62, 203, 243, 236, 61, 157, 146, 219, 61, 50, 108, 16, 190, 209, 204, 51, 190, 68, 71, 248, 61, 255, 208, 172, 188, 134, 107, 108, 61, 17, 188, 136, 189, 218, 65, 28, 61, 253, 3, 35, 190, 239, 121, 224, 189, 48, 153, 49, 190, 253, 51, 165, 185, 84, 205, 239, 61, 210, 76, 17, 61, 105, 117, 209, 61, 42, 177, 191, 189, 248, 172, 233, 189, 69, 175, 11, 190, 35, 85, 0, 62, 178, 41, 173, 189, 228, 67, 137, 189, 174, 238, 130, 189, 205, 246, 85, 60, 64, 199, 36, 61, 226, 158, 253, 61, 43, 193, 129, 189, 122, 64, 34, 190, 59, 142, 255, 188, 16, 176, 167, 60, 11, 104, 3, 189, 232, 130, 100, 189, 171, 14, 95, 61, 188, 121, 36, 62, 63, 53, 247, 61, 145, 56, 202, 60, 132, 140, 255, 189, 96, 153, 115, 188, 73, 224, 213, 189, 1, 202, 135, 190, 39, 88, 181, 60, 114, 204, 6, 62, 184, 249, 212, 189, 213, 121, 235, 189, 239, 81, 189, 189, 72, 213, 104, 61, 231, 62, 59, 189, 124, 146, 239, 61, 150, 187, 40, 189, 252, 71, 22, 189, 32, 112, 22, 190, 70, 7, 129, 189, 38, 220, 55, 189, 145, 9, 49, 190, 141, 203, 159, 61, 31, 248, 146, 189, 44, 147, 85, 61, 224, 28, 20, 189, 115, 167, 47, 190, 201, 15, 3, 190, 171, 20, 153, 189, 60, 121, 130, 187, 141, 234, 32, 189, 213, 34, 176, 189, 59, 216, 246, 188, 195, 37, 147, 61, 36, 84, 150, 189, 160, 177, 100, 188, 21, 52, 163, 189, 76, 103, 182, 188, 212, 51, 169, 61, 69, 139, 72, 59, 196, 19, 16, 190, 209, 162, 143, 189, 127, 159, 128, 60, 188, 130, 28, 62, 112, 143, 188, 61, 119, 44, 190, 189, 130, 137, 226, 189, 66, 122, 32, 189, 67, 37, 94, 61, 118, 126, 15, 190, 236, 145, 237, 61, 3, 209, 22, 62, 62, 186, 206, 60, 54, 89, 158, 61, 46, 62, 47, 61, 233, 195, 189, 61, 228, 76, 60, 60, 87, 65, 92, 62, 28, 159, 95, 61, 23, 195, 80, 190, 160, 202, 29, 62, 237, 40, 117, 61, 199, 71, 246, 189, 248, 232, 27, 190, 169, 17, 166, 59, 229, 149, 219, 60, 17, 112, 37, 190, 186, 54, 221, 188, 194, 190, 169, 61, 17, 193, 44, 190, 59, 132, 4, 62, 158, 7, 15, 62, 73, 45, 36, 189, 254, 210, 164, 61, 92, 47, 123, 186, 1, 13, 51, 61, 129, 56, 187, 186, 235, 30, 77, 189, 30, 89, 228, 61, 151, 33, 147, 61, 73, 237, 225, 60, 192, 232, 35, 190, 231, 235, 54, 189, 49, 211, 141, 60, 79, 53, 145, 186, 72, 138, 238, 61, 5, 168, 42, 190, 207, 36, 25, 190, 203, 27, 199, 188, 96, 129, 19, 190, 177, 247, 117, 190, 108, 153, 144, 61, 212, 234, 252, 188, 252, 158, 53, 189, 167, 139, 117, 190, 44, 128, 57, 189, 3, 230, 70, 61, 23, 218, 60, 190, 204, 144, 116, 189, 9, 149, 57, 190, 4, 142, 37, 190, 210, 9, 37, 62, 0, 166, 239, 187, 194, 239, 214, 61, 34, 7, 29, 62, 237, 14, 223, 61, 203, 225, 78, 190, 18, 206, 105, 62, 42, 141, 79, 189, 4, 200, 27, 62, 53, 100, 183, 61, 133, 33, 88, 190, 187, 97, 141, 62, 0, 129, 222, 61, 161, 14, 235, 188, 80, 207, 99, 62, 35, 205, 140, 62, 133, 213, 54, 190, 152, 238, 38, 62, 124, 252, 141, 189, 134, 237, 50, 61, 100, 209, 31, 62, 159, 60, 36, 190, 228, 150, 73, 188, 15, 18, 237, 60, 149, 252, 213, 189, 83, 83, 122, 189, 242, 102, 168, 61, 54, 202, 163, 61, 43, 101, 35, 190, 93, 119, 91, 189, 91, 39, 124, 190, 185, 54, 95, 189, 140, 155, 128, 60, 213, 139, 171, 187, 10, 6, 133, 62, 165, 106, 48, 61, 37, 124, 186, 61, 52, 141, 101, 190, 109, 225, 15, 190, 39, 18, 245, 189, 173, 55, 146, 59, 240, 100, 215, 61, 180, 184, 179, 189, 137, 90, 235, 61, 249, 11, 62, 60, 22, 151, 184, 61, 232, 41, 204, 189, 164, 156, 27, 62, 75, 31, 53, 61, 63, 251, 93, 190, 52, 213, 217, 61, 102, 194, 72, 62, 113, 156, 23, 62, 48, 252, 27, 62, 65, 47, 10, 62, 95, 73, 223, 189, 125, 115, 52, 62, 84, 64, 135, 188, 189, 7, 52, 62, 242, 235, 119, 61, 43, 12, 247, 190, 175, 82, 191, 188, 158, 228, 49, 62, 135, 96, 86, 62, 115, 114, 176, 61, 87, 14, 59, 190, 3, 49, 115, 190, 69, 211, 156, 61, 89, 72, 26, 189, 130, 65, 237, 62, 123, 166, 215, 189, 207, 159, 237, 189, 104, 212, 40, 62, 207, 243, 157, 190, 217, 203, 46, 190, 158, 48, 131, 61, 223, 230, 217, 61, 221, 230, 161, 190, 32, 239, 12, 191, 113, 42, 44, 191, 22, 55, 181, 190, 155, 138, 112, 189, 88, 187, 0, 190, 173, 151, 89, 61, 105, 85, 250, 190, 41, 234, 121, 189, 10, 24, 84, 190, 102, 196, 173, 61, 240, 211, 165, 61, 117, 179, 248, 189, 175, 214, 42, 190, 48, 184, 251, 187, 122, 209, 100, 189, 197, 123, 231, 61, 79, 112, 34, 190, 27, 120, 12, 190, 174, 239, 50, 61, 20, 207, 20, 190, 23, 218, 32, 61, 145, 203, 143, 189, 167, 150, 121, 61, 29, 199, 139, 61, 29, 219, 55, 189, 90, 180, 18, 189, 136, 49, 124, 189, 21, 225, 237, 189, 165, 1, 114, 61, 176, 32, 49, 190, 238, 248, 240, 61, 212, 202, 165, 61, 129, 185, 3, 62, 152, 38, 129, 189, 25, 69, 160, 60, 1, 55, 22, 189, 241, 135, 168, 61, 183, 185, 198, 190, 185, 101, 192, 61, 29, 175, 99, 189, 94, 183, 0, 190, 125, 128, 203, 60, 160, 97, 63, 61, 44, 3, 7, 190, 244, 220, 40, 62, 186, 155, 246, 58, 139, 245, 48, 190, 154, 99, 97, 188, 250, 91, 57, 189, 243, 139, 73, 190, 92, 169, 91, 190, 45, 209, 4, 189, 248, 90, 222, 60, 167, 70, 238, 61, 227, 123, 65, 61, 50, 240, 47, 189, 19, 133, 138, 188, 3, 112, 47, 62, 110, 78, 221, 188, 111, 249, 17, 61, 167, 87, 208, 61, 207, 217, 212, 61, 124, 73, 69, 57, 89, 133, 51, 61, 155, 1, 150, 60, 203, 245, 176, 61, 116, 85, 242, 189, 202, 14, 15, 62, 182, 220, 250, 189, 159, 145, 177, 190, 61, 19, 109, 60, 89, 24, 55, 190, 35, 147, 154, 61, 230, 255, 160, 61, 16, 62, 36, 190, 210, 191, 107, 190, 38, 40, 97, 190, 135, 2, 185, 189, 201, 116, 94, 190, 41, 7, 212, 188, 243, 69, 154, 190, 46, 37, 160, 190, 109, 249, 128, 61, 66, 125, 249, 61, 77, 186, 82, 60, 181, 67, 11, 190, 166, 174, 233, 189, 132, 14, 240, 61, 21, 121, 147, 62, 109, 160, 38, 190, 40, 7, 201, 189, 58, 100, 55, 190, 123, 127, 20, 188, 151, 122, 172, 61, 173, 211, 142, 190, 140, 204, 143, 189, 151, 64, 194, 62, 70, 249, 21, 62, 104, 191, 125, 190, 146, 75, 110, 190, 25, 158, 84, 189, 7, 174, 45, 62, 95, 151, 98, 189, 146, 112, 247, 60, 84, 253, 95, 62, 9, 140, 115, 189, 145, 105, 74, 187, 26, 222, 5, 190, 180, 130, 254, 60, 35, 128, 189, 188, 155, 216, 74, 190, 171, 97, 98, 61, 207, 97, 4, 191, 119, 221, 43, 189, 249, 179, 20, 61, 2, 218, 158, 190, 204, 151, 143, 62, 221, 138, 215, 61, 176, 120, 181, 60, 227, 53, 88, 190, 56, 219, 206, 189, 47, 64, 104, 61, 20, 58, 112, 61, 103, 119, 141, 62, 25, 237, 108, 189, 20, 141, 151, 61, 177, 48, 34, 190, 184, 208, 57, 189, 82, 130, 155, 61, 170, 30, 192, 62, 155, 140, 16, 190, 43, 139, 47, 190, 118, 83, 156, 61, 78, 203, 136, 61, 126, 96, 4, 62, 201, 142, 191, 61, 126, 211, 121, 61, 190, 39, 212, 61, 43, 248, 230, 189, 130, 20, 53, 61, 34, 225, 187, 61, 153, 11, 208, 188, 162, 113, 248, 60, 205, 70, 61, 59, 74, 90, 157, 61, 30, 78, 24, 60, 218, 192, 14, 190, 200, 15, 19, 62, 86, 96, 240, 61, 191, 26, 251, 189, 134, 14, 44, 190, 14, 112, 4, 62, 138, 215, 147, 61, 50, 233, 231, 189, 131, 103, 11, 62, 204, 49, 41, 190, 214, 81, 144, 189, 84, 196, 144, 61, 60, 204, 203, 189, 13, 159, 216, 189, 102, 171, 33, 190, 82, 53, 254, 61, 93, 84, 247, 189, 12, 171, 202, 61, 245, 140, 22, 190, 120, 195, 12, 190, 203, 10, 97, 61, 197, 75, 30, 189, 91, 167, 133, 189, 148, 235, 244, 188, 238, 240, 180, 189, 153, 34, 176, 188, 187, 110, 9, 190, 210, 43, 176, 188, 187, 85, 220, 189, 121, 222, 236, 189, 169, 214, 74, 60, 162, 144, 198, 59, 136, 169, 224, 188, 220, 117, 234, 189, 182, 48, 157, 189, 58, 246, 141, 61, 181, 74, 102, 61, 176, 81, 162, 61, 40, 182, 135, 189, 235, 29, 236, 61, 26, 190, 251, 189, 13, 24, 0, 190, 217, 216, 242, 189, 120, 2, 28, 61, 82, 240, 201, 60, 166, 160, 3, 62, 185, 139, 63, 61, 11, 239, 223, 188, 42, 110, 204, 189, 128, 199, 60, 61, 135, 91, 185, 188, 209, 161, 2, 62, 39, 203, 18, 62, 50, 228, 126, 190, 192, 20, 51, 61, 142, 62, 181, 189, 90, 30, 234, 60, 159, 195, 89, 189, 164, 165, 91, 190, 196, 24, 206, 61, 218, 146, 154, 61, 27, 159, 172, 189, 125, 6, 130, 190, 120, 117, 27, 190, 13, 28, 6, 62, 97, 20, 245, 189, 23, 73, 69, 62, 72, 119, 227, 189, 251, 180, 60, 189, 226, 177, 82, 60, 187, 174, 105, 62, 251, 17, 131, 61, 47, 26, 8, 190, 111, 247, 84, 62, 172, 203, 223, 189, 151, 17, 3, 62, 50, 210, 47, 189, 26, 251, 133, 61, 178, 226, 133, 62, 192, 12, 217, 61, 87, 157, 110, 61, 247, 38, 86, 190, 129, 37, 62, 190, 204, 216, 159, 62, 93, 55, 105, 62, 217, 206, 162, 61, 83, 186, 103, 189, 253, 24, 15, 62, 201, 71, 5, 61, 49, 12, 171, 189, 153, 85, 230, 189, 203, 223, 182, 60, 112, 65, 224, 61, 151, 166, 87, 61, 6, 167, 118, 62, 228, 104, 201, 61, 95, 84, 108, 189, 13, 90, 13, 62, 200, 246, 90, 190, 57, 1, 28, 189, 171, 28, 6, 190, 66, 152, 213, 60, 65, 224, 52, 190, 170, 9, 215, 61, 156, 165, 159, 61, 113, 180, 0, 190, 248, 6, 42, 190, 21, 96, 71, 190, 98, 190, 219, 61, 22, 255, 137, 61, 239, 138, 179, 61, 232, 152, 35, 190, 228, 223, 57, 62, 19, 95, 68, 189, 203, 46, 66, 187, 147, 73, 190, 61, 66, 241, 9, 189, 233, 129, 30, 62, 149, 5, 64, 61, 195, 24, 162, 189, 94, 75, 154, 189, 12, 39, 24, 62, 9, 193, 15, 190, 97, 242, 38, 62, 214, 228, 138, 190, 26, 201, 215, 189, 9, 77, 169, 61, 32, 138, 129, 61, 168, 105, 133, 61, 36, 182, 19, 189, 169, 18, 33, 189, 137, 41, 178, 188, 138, 43, 31, 62, 36, 246, 42, 62, 170, 99, 5, 59, 182, 8, 6, 190, 246, 33, 49, 190, 134, 70, 120, 190, 196, 243, 192, 188, 108, 10, 201, 60, 235, 255, 213, 60, 0, 73, 86, 190, 33, 112, 108, 190, 43, 123, 23, 191, 4, 72, 186, 190, 24, 225, 183, 61, 180, 224, 6, 188, 225, 207, 186, 61, 246, 73, 209, 190, 60, 67, 22, 190, 211, 98, 128, 189, 80, 226, 158, 60, 139, 12, 18, 62, 91, 206, 227, 189, 132, 163, 24, 62, 33, 138, 34, 62, 161, 29, 130, 59, 169, 245, 23, 62, 186, 126, 210, 188, 253, 106, 220, 187, 31, 136, 59, 60, 214, 173, 134, 61, 179, 74, 252, 189, 55, 178, 209, 61, 197, 152, 7, 62, 206, 92, 113, 189, 216, 121, 156, 61, 160, 15, 230, 189, 64, 25, 189, 61, 5, 51, 207, 60, 27, 220, 231, 59, 25, 171, 59, 189, 140, 253, 12, 62, 89, 96, 251, 61, 148, 119, 236, 60, 160, 49, 194, 189, 80, 52, 78, 190, 234, 237, 14, 62, 148, 43, 209, 61, 88, 140, 143, 190, 251, 61, 252, 60, 228, 144, 14, 190, 105, 142, 7, 190, 178, 234, 164, 61, 255, 152, 233, 189, 205, 143, 196, 187, 21, 106, 21, 189, 252, 220, 19, 62, 100, 152, 236, 61, 191, 50, 64, 190, 127, 220, 9, 190, 120, 179, 202, 61, 225, 26, 4, 62, 51, 211, 18, 61, 105, 135, 13, 190, 162, 213, 19, 62, 161, 82, 224, 61, 185, 8, 209, 59, 109, 171, 165, 189, 211, 183, 12, 62, 142, 30, 161, 188, 98, 120, 166, 188, 241, 195, 50, 190, 49, 109, 220, 189, 120, 254, 103, 59, 162, 20, 37, 190, 208, 74, 254, 61, 9, 242, 27, 190, 140, 202, 64, 190, 60, 202, 150, 61, 137, 165, 67, 190, 203, 129, 17, 190, 186, 81, 247, 188, 32, 109, 206, 60, 173, 116, 79, 61, 180, 99, 53, 189, 79, 121, 9, 62, 50, 79, 100, 60, 31, 4, 43, 62, 99, 159, 137, 61, 193, 228, 88, 62, 237, 105, 160, 189, 107, 51, 99, 190, 148, 135, 242, 61, 88, 192, 156, 61, 46, 176, 84, 189, 173, 4, 62, 61, 33, 1, 24, 62, 205, 233, 39, 62, 150, 180, 115, 188, 160, 97, 27, 184, 57, 79, 144, 189, 184, 16, 161, 60, 77, 123, 0, 62, 24, 245, 28, 187, 92, 162, 85, 187, 140, 227, 46, 190, 108, 161, 140, 189, 124, 1, 178, 189, 144, 19, 140, 61, 224, 46, 204, 61, 113, 95, 129, 189, 132, 93, 196, 189, 245, 234, 56, 62, 38, 105, 154, 61, 127, 209, 179, 189, 31, 243, 107, 190, 60, 77, 48, 61, 195, 245, 53, 61, 229, 151, 50, 189, 148, 201, 21, 60, 245, 162, 32, 188, 147, 153, 32, 190, 185, 102, 192, 61, 49, 206, 30, 190, 246, 215, 59, 189, 128, 230, 64, 61, 139, 215, 156, 60, 79, 106, 126, 185, 183, 11, 139, 61, 54, 203, 10, 189, 20, 241, 180, 190, 248, 111, 43, 190, 195, 180, 175, 61, 167, 175, 8, 62, 136, 180, 138, 189, 88, 109, 26, 61, 27, 164, 111, 60, 34, 123, 17, 62, 5, 85, 163, 61, 191, 248, 97, 190, 64, 187, 224, 59, 0, 76, 89, 189, 240, 106, 6, 60, 42, 90, 137, 61, 67, 120, 135, 60, 95, 22, 136, 60, 228, 149, 33, 62, 193, 235, 19, 62, 255, 11, 28, 190, 95, 228, 78, 189, 71, 47, 77, 61, 151, 18, 200, 186, 158, 217, 135, 188, 60, 217, 224, 190, 213, 145, 67, 190, 155, 128, 123, 62, 90, 145, 37, 62, 185, 156, 250, 189, 24, 102, 70, 190, 73, 176, 1, 190, 7, 45, 80, 188, 29, 144, 22, 62, 183, 22, 157, 62, 124, 110, 138, 190, 220, 7, 42, 62, 41, 120, 48, 60, 248, 125, 190, 190, 48, 31, 106, 190, 129, 149, 127, 62, 202, 86, 156, 189, 88, 78, 145, 189, 65, 186, 243, 190, 39, 98, 252, 190, 195, 149, 77, 190, 54, 70, 85, 190, 172, 122, 27, 189, 46, 180, 158, 189, 230, 112, 55, 190, 223, 184, 46, 62, 30, 220, 182, 189, 118, 183, 18, 62, 74, 32, 42, 62, 29, 196, 62, 61, 24, 90, 129, 189, 143, 141, 249, 61, 244, 229, 158, 190, 153, 198, 50, 62, 0, 225, 179, 62, 37, 174, 115, 61, 208, 65, 170, 188, 151, 141, 92, 190, 15, 252, 176, 188, 169, 102, 70, 62, 104, 30, 235, 61, 88, 172, 178, 62, 165, 0, 0, 189, 144, 18, 110, 189, 20, 163, 224, 189, 110, 9, 218, 189, 49, 181, 151, 188, 136, 14, 46, 62, 51, 151, 228, 189, 178, 203, 158, 189, 76, 224, 37, 190, 53, 132, 42, 189, 36, 134, 136, 190, 155, 147, 169, 61, 18, 58, 253, 61, 59, 83, 44, 189, 18, 203, 64, 61, 223, 193, 43, 190, 80, 85, 92, 62, 163, 160, 239, 189, 249, 80, 3, 190, 190, 232, 148, 189, 214, 254, 14, 190, 181, 88, 163, 188, 191, 150, 197, 61, 212, 129, 101, 62, 214, 44, 30, 190, 73, 84, 10, 60, 208, 85, 83, 189, 167, 240, 245, 60, 129, 2, 209, 61, 119, 71, 29, 190, 92, 107, 100, 189, 10, 104, 35, 190, 190, 122, 48, 62, 94, 181, 16, 190, 200, 226, 239, 189, 139, 14, 11, 62, 200, 142, 78, 189, 134, 127, 129, 62, 204, 65, 244, 189, 125, 180, 20, 62, 98, 218, 72, 62, 127, 252, 98, 62, 52, 118, 62, 62, 185, 155, 184, 188, 92, 43, 62, 62, 146, 63, 86, 62, 241, 138, 241, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 69, 96, 61, 26, 161, 255, 189, 153, 98, 212, 189, 11, 5, 23, 61, 161, 165, 1, 62, 97, 52, 4, 62, 247, 177, 20, 62, 120, 140, 154, 61, 162, 139, 43, 62, 54, 149, 202, 189, 135, 164, 123, 187, 66, 167, 245, 189, 207, 210, 191, 60, 0, 13, 112, 62, 3, 111, 241, 61, 173, 69, 107, 62, 73, 111, 18, 61, 69, 26, 203, 61, 159, 65, 220, 61, 84, 45, 187, 59, 251, 62, 222, 189, 168, 243, 248, 189, 24, 65, 128, 60, 222, 198, 36, 190, 104, 92, 239, 61, 60, 201, 61, 190, 178, 119, 12, 61, 45, 190, 80, 62, 203, 113, 168, 188, 91, 85, 87, 62, 87, 114, 235, 61, 142, 83, 32, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 203, 139, 189, 195, 72, 97, 190, 87, 60, 16, 62, 34, 126, 112, 62, 179, 23, 52, 187, 90, 209, 157, 62, 202, 116, 11, 190, 114, 26, 25, 190, 54, 190, 138, 62, 152, 32, 130, 189, 79, 212, 189, 61, 216, 86, 236, 189, 2, 181, 231, 189, 155, 211, 52, 62, 56, 130, 94, 62, 45, 26, 7, 191, 139, 226, 19, 190, 85, 153, 55, 190, 15, 87, 106, 62, 114, 243, 157, 62, 213, 110, 29, 62, 1, 127, 237, 61, 125, 218, 126, 62, 17, 90, 235, 61, 16, 36, 159, 190, 99, 8, 228, 189, 68, 90, 247, 185, 124, 214, 177, 61, 147, 5, 9, 61, 179, 0, 28, 191, 141, 216, 51, 190, 195, 187, 57, 62, 197, 207, 152, 61, 108, 149, 2, 62, 139, 1, 79, 189, 40, 114, 152, 190, 80, 191, 121, 190, 10, 83, 88, 61, 196, 231, 29, 190, 195, 11, 31, 62, 134, 166, 19, 190, 233, 100, 120, 61, 47, 141, 188, 60, 249, 169, 2, 62, 0, 153, 0, 62, 132, 14, 95, 190, 124, 22, 16, 62, 4, 249, 7, 60, 157, 39, 100, 61, 53, 133, 171, 60, 207, 77, 149, 62, 155, 141, 147, 189, 245, 23, 16, 62, 245, 210, 10, 190, 123, 251, 132, 61, 153, 159, 128, 188, 48, 191, 2, 62, 40, 77, 153, 61, 137, 203, 57, 61, 89, 60, 67, 190, 220, 59, 157, 61, 185, 127, 144, 189, 71, 152, 228, 189, 29, 182, 245, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 181, 2, 190, 126, 170, 138, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {167, 240, 171, 62, 234, 152, 44, 191, 155, 28, 85, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {94, 173, 170, 63, 220, 12, 96, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0014/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}