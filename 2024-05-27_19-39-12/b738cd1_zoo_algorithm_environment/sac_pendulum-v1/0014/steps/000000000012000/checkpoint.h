// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 177, 242, 62, 201, 244, 10, 191, 210, 9, 196, 62, 117, 11, 16, 191, 214, 9, 58, 61, 37, 142, 15, 190, 196, 142, 187, 190, 178, 239, 195, 63, 14, 215, 183, 62, 26, 15, 69, 62, 173, 179, 101, 63, 21, 172, 243, 62, 29, 21, 67, 191, 231, 115, 96, 191, 75, 1, 54, 191, 113, 37, 52, 62, 166, 29, 104, 63, 232, 18, 173, 62, 66, 154, 49, 63, 68, 232, 233, 62, 145, 3, 58, 62, 228, 114, 11, 190, 154, 87, 114, 62, 91, 207, 192, 190, 215, 203, 27, 63, 3, 68, 53, 191, 192, 35, 160, 62, 190, 99, 138, 190, 100, 138, 65, 189, 147, 144, 247, 190, 21, 80, 52, 62, 216, 68, 188, 62, 29, 114, 226, 190, 177, 45, 34, 190, 78, 24, 154, 191, 240, 113, 241, 189, 208, 148, 80, 63, 92, 92, 181, 190, 32, 246, 164, 190, 110, 49, 132, 190, 163, 186, 40, 190, 67, 128, 125, 62, 30, 223, 115, 190, 105, 138, 41, 63, 210, 123, 135, 62, 92, 223, 15, 63, 78, 59, 101, 63, 240, 127, 33, 62, 174, 230, 37, 190, 120, 98, 99, 63, 23, 148, 91, 190, 77, 77, 193, 190, 52, 137, 35, 63, 147, 143, 10, 63, 137, 209, 92, 63, 122, 237, 61, 63, 220, 232, 197, 62, 221, 93, 137, 62, 123, 131, 160, 189, 95, 169, 2, 61, 252, 60, 89, 63, 249, 81, 93, 191, 223, 41, 35, 190, 79, 241, 40, 190, 9, 142, 71, 191, 237, 35, 0, 63, 29, 144, 5, 191, 190, 87, 154, 61, 35, 155, 177, 61, 51, 145, 228, 62, 165, 100, 131, 63, 66, 42, 111, 62, 255, 26, 9, 63, 58, 75, 146, 191, 179, 203, 189, 190, 19, 95, 152, 190, 2, 60, 179, 61, 90, 50, 32, 63, 221, 110, 47, 61, 105, 101, 124, 191, 73, 243, 66, 62, 5, 196, 64, 62, 216, 211, 37, 191, 174, 241, 241, 190, 119, 135, 229, 189, 195, 212, 157, 190, 127, 147, 97, 62, 64, 125, 169, 190, 66, 95, 172, 63, 113, 181, 169, 62, 25, 143, 19, 191, 70, 234, 197, 191, 92, 157, 93, 190, 25, 237, 147, 62, 57, 175, 46, 191, 98, 92, 131, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 218, 180, 190, 167, 69, 124, 63, 212, 25, 104, 190, 25, 34, 253, 59, 214, 94, 23, 191, 197, 53, 224, 190, 30, 203, 239, 62, 204, 247, 101, 189, 27, 17, 148, 62, 192, 21, 16, 189, 5, 225, 162, 62, 200, 36, 199, 61, 167, 73, 56, 191, 175, 7, 150, 190, 124, 175, 157, 190, 8, 172, 123, 62, 12, 36, 230, 62, 69, 116, 240, 190, 196, 230, 90, 191, 79, 34, 244, 190, 19, 171, 36, 62, 162, 91, 205, 190, 37, 85, 31, 63, 18, 66, 144, 189, 14, 17, 97, 190, 191, 87, 29, 191, 241, 157, 175, 190, 181, 116, 174, 190, 178, 183, 198, 190, 217, 220, 97, 190, 202, 157, 135, 190, 130, 100, 89, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 116, 238, 61, 247, 76, 43, 190, 210, 93, 196, 61, 191, 111, 132, 190, 187, 92, 178, 190, 146, 47, 70, 62, 80, 82, 231, 61, 242, 209, 29, 190, 197, 202, 70, 188, 66, 223, 11, 190, 25, 62, 103, 189, 28, 102, 17, 62, 62, 171, 98, 61, 46, 162, 45, 190, 58, 13, 192, 189, 177, 207, 232, 189, 84, 200, 19, 191, 183, 11, 73, 190, 168, 1, 16, 62, 101, 196, 175, 61, 11, 159, 32, 62, 18, 171, 14, 62, 31, 31, 169, 189, 228, 139, 228, 189, 8, 28, 220, 62, 141, 236, 144, 60, 70, 108, 187, 61, 229, 208, 239, 61, 186, 170, 200, 60, 83, 147, 61, 189, 183, 229, 141, 190, 233, 138, 30, 62, 154, 48, 33, 190, 142, 74, 17, 190, 35, 54, 71, 190, 247, 111, 123, 190, 6, 76, 81, 191, 83, 45, 145, 190, 103, 241, 196, 190, 53, 154, 55, 190, 107, 60, 226, 59, 53, 88, 47, 190, 36, 49, 156, 190, 37, 87, 131, 61, 55, 17, 224, 189, 73, 32, 233, 61, 51, 104, 150, 189, 20, 94, 158, 190, 250, 94, 221, 190, 0, 221, 214, 61, 121, 46, 123, 190, 251, 111, 160, 61, 146, 50, 234, 189, 11, 127, 162, 61, 7, 142, 13, 61, 232, 83, 172, 190, 167, 1, 73, 60, 14, 220, 193, 61, 209, 144, 0, 62, 55, 176, 214, 61, 65, 67, 114, 190, 21, 49, 162, 189, 248, 129, 4, 60, 170, 253, 180, 189, 24, 84, 36, 62, 31, 104, 39, 190, 97, 47, 41, 59, 79, 113, 138, 60, 17, 78, 90, 189, 172, 103, 120, 189, 73, 164, 187, 187, 136, 12, 212, 61, 200, 67, 180, 189, 153, 26, 181, 61, 200, 140, 85, 189, 109, 19, 89, 190, 167, 13, 147, 61, 219, 191, 127, 56, 127, 124, 206, 189, 102, 23, 221, 60, 211, 240, 105, 190, 11, 47, 47, 61, 210, 130, 36, 62, 13, 80, 26, 190, 16, 227, 179, 61, 167, 200, 18, 190, 234, 246, 243, 188, 194, 54, 14, 190, 9, 82, 166, 189, 177, 59, 69, 189, 107, 171, 240, 61, 201, 170, 27, 62, 183, 59, 88, 62, 38, 108, 118, 61, 239, 195, 162, 189, 175, 120, 54, 190, 119, 147, 171, 62, 36, 176, 147, 62, 223, 195, 54, 189, 82, 166, 74, 190, 77, 27, 170, 189, 111, 143, 34, 191, 66, 229, 220, 62, 158, 77, 92, 62, 136, 24, 94, 62, 208, 75, 140, 62, 246, 130, 184, 62, 37, 214, 88, 189, 107, 190, 27, 61, 166, 226, 186, 190, 61, 216, 239, 190, 110, 100, 130, 190, 250, 83, 180, 62, 241, 239, 204, 190, 203, 227, 2, 191, 86, 69, 137, 189, 240, 219, 25, 62, 186, 197, 235, 61, 202, 208, 66, 61, 231, 113, 26, 191, 21, 226, 73, 189, 71, 95, 61, 60, 181, 2, 144, 62, 164, 85, 33, 190, 36, 186, 194, 61, 64, 151, 48, 190, 102, 42, 9, 191, 93, 248, 113, 62, 132, 88, 49, 190, 170, 198, 164, 189, 164, 250, 69, 189, 247, 159, 149, 188, 36, 12, 141, 190, 134, 75, 99, 190, 40, 109, 99, 189, 216, 233, 104, 190, 151, 128, 92, 62, 249, 254, 188, 190, 181, 239, 19, 189, 98, 58, 128, 190, 167, 235, 155, 190, 188, 220, 44, 188, 65, 96, 242, 189, 71, 175, 124, 61, 112, 140, 25, 62, 183, 228, 200, 61, 179, 143, 197, 190, 58, 200, 21, 62, 54, 198, 170, 62, 155, 77, 247, 61, 234, 32, 56, 62, 86, 109, 185, 189, 217, 184, 156, 190, 251, 52, 114, 189, 131, 175, 63, 62, 74, 251, 253, 190, 248, 199, 246, 61, 236, 0, 34, 61, 55, 3, 251, 190, 239, 156, 218, 61, 46, 97, 207, 189, 228, 78, 65, 61, 29, 95, 184, 61, 248, 201, 150, 189, 117, 232, 158, 190, 230, 126, 194, 61, 17, 8, 222, 189, 247, 184, 181, 61, 220, 0, 38, 190, 227, 187, 7, 191, 187, 135, 124, 189, 109, 180, 149, 62, 91, 222, 96, 62, 185, 139, 217, 61, 75, 154, 140, 189, 217, 138, 86, 189, 174, 86, 111, 190, 129, 55, 92, 62, 110, 238, 161, 190, 161, 54, 250, 61, 54, 51, 23, 63, 245, 122, 75, 190, 218, 222, 209, 189, 191, 11, 37, 190, 203, 207, 99, 62, 44, 64, 83, 62, 105, 207, 246, 60, 244, 237, 231, 61, 53, 175, 177, 190, 7, 96, 46, 62, 97, 30, 195, 189, 66, 148, 138, 62, 58, 23, 10, 62, 67, 179, 118, 61, 236, 151, 44, 190, 4, 154, 55, 62, 173, 75, 65, 60, 185, 146, 226, 61, 189, 217, 59, 62, 186, 47, 134, 190, 208, 39, 15, 62, 55, 158, 39, 61, 175, 161, 90, 61, 241, 139, 192, 190, 21, 171, 230, 190, 196, 237, 157, 189, 109, 12, 181, 189, 122, 169, 65, 62, 8, 122, 191, 62, 63, 96, 195, 61, 211, 0, 30, 190, 95, 183, 15, 62, 104, 101, 213, 188, 240, 26, 124, 62, 157, 23, 58, 62, 232, 98, 168, 61, 163, 226, 231, 190, 110, 141, 98, 190, 245, 0, 68, 190, 248, 109, 21, 190, 85, 72, 66, 61, 201, 231, 123, 190, 61, 58, 252, 190, 160, 159, 67, 190, 44, 210, 13, 61, 202, 221, 207, 190, 26, 18, 201, 190, 189, 87, 4, 62, 188, 122, 247, 189, 41, 155, 8, 62, 186, 50, 146, 62, 116, 12, 254, 189, 121, 82, 0, 62, 76, 245, 67, 190, 73, 226, 115, 189, 28, 218, 204, 189, 160, 135, 59, 189, 40, 189, 155, 190, 197, 73, 188, 189, 106, 12, 240, 60, 170, 63, 7, 191, 162, 16, 52, 190, 204, 5, 172, 62, 134, 40, 179, 189, 99, 44, 82, 62, 107, 204, 140, 189, 185, 22, 77, 190, 0, 39, 31, 61, 8, 206, 189, 62, 153, 61, 181, 190, 153, 253, 162, 187, 162, 213, 178, 60, 68, 163, 19, 190, 114, 212, 207, 189, 41, 128, 51, 62, 48, 111, 39, 188, 3, 140, 31, 190, 173, 64, 96, 62, 21, 50, 161, 61, 243, 8, 157, 190, 136, 142, 81, 190, 222, 118, 23, 190, 29, 22, 132, 189, 138, 106, 22, 62, 33, 5, 38, 62, 75, 74, 187, 189, 96, 220, 202, 61, 130, 136, 5, 190, 143, 103, 74, 189, 103, 180, 61, 189, 221, 173, 72, 190, 4, 79, 53, 190, 216, 65, 187, 61, 197, 215, 211, 189, 86, 155, 161, 190, 233, 124, 231, 61, 40, 8, 152, 62, 84, 242, 50, 190, 239, 190, 94, 62, 107, 132, 170, 190, 154, 217, 226, 59, 99, 63, 123, 62, 156, 17, 133, 62, 229, 142, 187, 61, 153, 62, 53, 190, 194, 184, 150, 61, 18, 234, 150, 61, 66, 199, 198, 62, 50, 17, 178, 189, 32, 117, 242, 58, 225, 141, 16, 189, 76, 31, 63, 61, 101, 147, 204, 189, 123, 198, 28, 62, 203, 243, 236, 61, 157, 146, 219, 61, 50, 108, 16, 190, 209, 204, 51, 190, 68, 71, 248, 61, 255, 208, 172, 188, 134, 107, 108, 61, 17, 188, 136, 189, 218, 65, 28, 61, 253, 3, 35, 190, 239, 121, 224, 189, 48, 153, 49, 190, 253, 51, 165, 185, 84, 205, 239, 61, 210, 76, 17, 61, 105, 117, 209, 61, 42, 177, 191, 189, 248, 172, 233, 189, 69, 175, 11, 190, 35, 85, 0, 62, 178, 41, 173, 189, 228, 67, 137, 189, 174, 238, 130, 189, 205, 246, 85, 60, 64, 199, 36, 61, 226, 158, 253, 61, 181, 66, 233, 189, 131, 58, 57, 190, 68, 228, 6, 189, 6, 209, 85, 188, 11, 104, 3, 189, 160, 252, 134, 189, 116, 246, 127, 59, 188, 121, 36, 62, 181, 220, 155, 61, 145, 56, 202, 60, 113, 28, 254, 189, 22, 141, 128, 188, 73, 224, 213, 189, 80, 69, 140, 190, 135, 37, 105, 60, 30, 198, 190, 61, 65, 134, 202, 189, 10, 228, 244, 189, 149, 21, 237, 189, 72, 213, 104, 61, 9, 250, 212, 189, 223, 46, 173, 61, 145, 63, 150, 189, 66, 142, 147, 189, 220, 53, 24, 190, 222, 162, 144, 189, 20, 121, 207, 189, 145, 9, 49, 190, 159, 192, 132, 61, 57, 48, 156, 189, 173, 191, 85, 61, 61, 50, 217, 189, 179, 202, 68, 190, 226, 227, 106, 190, 218, 72, 26, 189, 57, 96, 212, 188, 39, 10, 136, 190, 244, 222, 151, 189, 239, 195, 39, 189, 6, 178, 27, 62, 171, 190, 250, 60, 86, 94, 175, 189, 78, 63, 245, 189, 230, 255, 17, 189, 104, 130, 130, 62, 83, 212, 29, 62, 13, 153, 7, 190, 127, 143, 19, 190, 220, 38, 33, 190, 153, 29, 130, 62, 41, 106, 50, 62, 82, 146, 195, 189, 87, 222, 155, 61, 3, 15, 159, 61, 145, 57, 187, 61, 247, 192, 2, 190, 38, 246, 178, 62, 101, 244, 161, 62, 217, 101, 120, 62, 117, 171, 75, 62, 205, 47, 2, 62, 52, 167, 26, 62, 206, 248, 20, 190, 62, 88, 216, 62, 28, 159, 95, 61, 120, 48, 131, 190, 160, 202, 29, 62, 196, 44, 119, 61, 144, 1, 51, 190, 248, 232, 27, 190, 154, 21, 44, 61, 89, 69, 209, 188, 204, 132, 21, 190, 94, 118, 164, 189, 222, 114, 26, 61, 214, 55, 44, 190, 50, 67, 171, 61, 158, 7, 15, 62, 73, 45, 36, 189, 169, 255, 183, 61, 112, 110, 106, 189, 1, 13, 51, 61, 129, 56, 187, 186, 235, 30, 77, 189, 111, 213, 173, 61, 151, 33, 147, 61, 35, 242, 228, 60, 71, 196, 30, 190, 104, 209, 154, 189, 49, 211, 141, 60, 120, 168, 98, 186, 205, 78, 140, 61, 5, 168, 42, 190, 207, 36, 25, 190, 153, 167, 232, 188, 57, 90, 19, 190, 176, 13, 164, 190, 160, 90, 14, 190, 251, 99, 229, 61, 123, 32, 35, 189, 167, 254, 57, 191, 38, 234, 161, 60, 237, 174, 13, 60, 181, 64, 148, 190, 160, 132, 232, 189, 22, 171, 7, 191, 168, 249, 32, 191, 170, 197, 115, 190, 18, 48, 122, 189, 255, 207, 224, 187, 2, 74, 41, 62, 130, 92, 68, 62, 214, 22, 89, 190, 223, 40, 153, 62, 221, 251, 58, 61, 176, 139, 29, 62, 255, 246, 107, 190, 98, 168, 190, 190, 129, 226, 75, 62, 113, 1, 48, 62, 8, 45, 89, 190, 117, 33, 107, 62, 170, 192, 62, 61, 104, 44, 122, 190, 231, 59, 67, 61, 27, 109, 201, 60, 37, 80, 92, 190, 141, 13, 215, 187, 72, 28, 92, 189, 167, 11, 54, 61, 90, 213, 27, 62, 209, 176, 139, 190, 240, 153, 2, 191, 232, 74, 116, 190, 203, 204, 218, 61, 115, 87, 109, 62, 15, 42, 82, 61, 114, 196, 133, 190, 12, 236, 189, 188, 36, 188, 137, 189, 180, 188, 219, 62, 139, 36, 131, 62, 201, 50, 61, 190, 23, 246, 9, 190, 30, 2, 99, 189, 48, 103, 232, 189, 209, 197, 24, 191, 25, 180, 25, 59, 181, 196, 225, 62, 223, 210, 128, 188, 140, 254, 54, 62, 247, 116, 218, 190, 147, 192, 212, 62, 90, 177, 134, 189, 49, 121, 192, 62, 134, 9, 117, 62, 117, 12, 44, 190, 198, 73, 40, 62, 90, 35, 219, 189, 121, 235, 152, 62, 246, 173, 135, 62, 223, 139, 30, 62, 243, 41, 23, 191, 4, 13, 190, 62, 107, 223, 86, 188, 19, 206, 38, 62, 115, 107, 121, 62, 87, 20, 230, 190, 124, 77, 236, 189, 220, 247, 53, 62, 80, 241, 138, 62, 242, 234, 67, 190, 56, 162, 96, 191, 31, 118, 47, 62, 134, 97, 165, 62, 42, 68, 39, 62, 210, 6, 15, 63, 167, 16, 31, 190, 29, 160, 168, 190, 104, 212, 40, 62, 4, 95, 179, 190, 225, 144, 223, 62, 32, 84, 170, 61, 254, 152, 152, 62, 93, 16, 91, 191, 169, 38, 58, 191, 40, 124, 57, 191, 226, 67, 239, 190, 203, 7, 234, 62, 56, 197, 7, 191, 175, 139, 98, 189, 190, 182, 223, 190, 75, 31, 43, 61, 32, 83, 200, 191, 56, 129, 68, 189, 76, 207, 195, 61, 117, 179, 248, 189, 167, 177, 39, 190, 219, 75, 202, 61, 122, 209, 100, 189, 123, 250, 72, 62, 78, 109, 19, 190, 113, 216, 35, 190, 225, 81, 51, 186, 20, 207, 20, 190, 27, 123, 75, 61, 139, 23, 236, 189, 150, 113, 189, 61, 172, 39, 26, 61, 42, 150, 162, 189, 155, 29, 248, 61, 180, 131, 127, 189, 10, 94, 161, 190, 45, 185, 226, 61, 115, 48, 156, 190, 27, 177, 15, 62, 60, 169, 108, 189, 0, 109, 1, 62, 31, 235, 32, 62, 25, 69, 160, 60, 90, 31, 209, 188, 114, 154, 9, 60, 80, 212, 155, 191, 184, 241, 90, 62, 60, 19, 210, 186, 186, 147, 144, 191, 183, 20, 48, 190, 210, 126, 164, 188, 44, 3, 7, 190, 240, 216, 121, 61, 193, 2, 57, 189, 203, 130, 49, 190, 228, 134, 194, 60, 5, 249, 79, 189, 176, 4, 106, 190, 31, 69, 139, 190, 45, 209, 4, 189, 191, 66, 172, 61, 199, 124, 22, 61, 210, 130, 147, 190, 147, 4, 235, 189, 202, 251, 59, 189, 143, 215, 173, 61, 232, 234, 229, 188, 12, 144, 89, 190, 222, 147, 64, 62, 165, 145, 135, 60, 140, 31, 98, 190, 99, 113, 72, 61, 149, 39, 238, 60, 21, 118, 172, 62, 87, 86, 242, 189, 16, 97, 80, 62, 164, 4, 127, 190, 51, 153, 141, 191, 157, 124, 222, 61, 162, 250, 154, 189, 228, 47, 183, 60, 72, 226, 203, 62, 161, 128, 74, 190, 54, 236, 83, 191, 64, 48, 136, 190, 76, 52, 100, 189, 247, 241, 89, 63, 17, 40, 182, 61, 67, 109, 13, 60, 81, 105, 141, 190, 96, 28, 153, 190, 12, 11, 168, 62, 40, 171, 15, 189, 220, 92, 36, 190, 16, 72, 10, 191, 4, 170, 82, 62, 104, 255, 246, 62, 118, 222, 163, 190, 40, 7, 201, 189, 172, 75, 21, 63, 71, 98, 217, 189, 182, 203, 69, 62, 111, 24, 29, 191, 97, 158, 64, 190, 139, 253, 252, 62, 114, 149, 195, 61, 142, 199, 58, 191, 167, 53, 158, 190, 188, 255, 75, 62, 246, 54, 235, 190, 55, 90, 73, 188, 72, 63, 197, 187, 6, 94, 174, 62, 189, 117, 139, 189, 150, 157, 47, 190, 232, 252, 20, 191, 79, 138, 137, 190, 215, 182, 195, 189, 27, 218, 137, 62, 182, 249, 183, 61, 226, 67, 69, 191, 62, 8, 48, 188, 177, 97, 123, 60, 73, 125, 19, 190, 236, 84, 134, 62, 125, 237, 218, 189, 114, 248, 109, 190, 218, 145, 133, 189, 96, 34, 6, 190, 12, 137, 199, 190, 45, 107, 121, 61, 144, 74, 15, 63, 184, 104, 111, 189, 18, 222, 13, 62, 206, 214, 232, 190, 223, 106, 61, 62, 108, 221, 129, 61, 171, 239, 211, 62, 228, 240, 27, 190, 112, 70, 53, 190, 123, 142, 61, 60, 96, 30, 157, 189, 145, 148, 41, 62, 27, 82, 221, 61, 191, 30, 69, 62, 184, 31, 208, 62, 185, 150, 173, 190, 171, 152, 222, 61, 229, 57, 87, 190, 16, 153, 127, 189, 219, 196, 78, 190, 76, 130, 82, 61, 132, 92, 222, 61, 233, 42, 3, 190, 248, 88, 161, 62, 129, 242, 96, 190, 171, 19, 167, 190, 183, 22, 63, 191, 100, 168, 141, 189, 62, 60, 53, 61, 219, 228, 91, 190, 129, 151, 146, 189, 131, 103, 11, 62, 238, 154, 118, 191, 99, 58, 80, 190, 201, 138, 145, 62, 148, 19, 216, 189, 74, 101, 212, 190, 48, 237, 153, 190, 0, 244, 109, 62, 86, 87, 188, 190, 148, 40, 21, 189, 83, 134, 144, 61, 22, 154, 114, 62, 0, 44, 212, 60, 197, 75, 30, 189, 91, 167, 133, 189, 148, 235, 244, 188, 238, 240, 180, 189, 153, 34, 176, 188, 187, 110, 9, 190, 210, 43, 176, 188, 187, 85, 220, 189, 121, 222, 236, 189, 169, 214, 74, 60, 162, 144, 198, 59, 136, 169, 224, 188, 220, 117, 234, 189, 182, 48, 157, 189, 58, 246, 141, 61, 181, 74, 102, 61, 176, 81, 162, 61, 40, 182, 135, 189, 235, 29, 236, 61, 26, 190, 251, 189, 13, 24, 0, 190, 217, 216, 242, 189, 120, 2, 28, 61, 82, 240, 201, 60, 166, 160, 3, 62, 185, 139, 63, 61, 11, 239, 223, 188, 42, 110, 204, 189, 128, 199, 60, 61, 135, 91, 185, 188, 209, 161, 2, 62, 39, 203, 18, 62, 226, 34, 171, 190, 67, 0, 182, 60, 8, 4, 32, 62, 215, 177, 232, 60, 169, 128, 145, 190, 191, 93, 65, 190, 189, 145, 251, 60, 195, 165, 174, 61, 204, 228, 218, 189, 155, 252, 19, 191, 14, 102, 219, 190, 103, 5, 138, 61, 153, 181, 30, 62, 95, 179, 210, 61, 178, 51, 174, 189, 71, 199, 231, 189, 50, 44, 48, 189, 131, 38, 175, 62, 236, 184, 21, 190, 100, 173, 5, 190, 7, 136, 184, 62, 103, 208, 111, 190, 32, 83, 236, 61, 87, 64, 238, 189, 212, 254, 173, 61, 87, 151, 146, 62, 51, 105, 15, 189, 150, 207, 71, 59, 180, 230, 156, 190, 178, 182, 137, 188, 40, 97, 74, 62, 100, 74, 1, 62, 217, 206, 162, 61, 250, 238, 62, 190, 253, 24, 15, 62, 201, 71, 5, 61, 165, 160, 45, 190, 153, 85, 230, 189, 56, 47, 143, 60, 232, 66, 130, 187, 104, 218, 74, 61, 185, 182, 203, 61, 151, 54, 178, 188, 100, 32, 223, 189, 76, 6, 60, 62, 215, 146, 86, 190, 57, 1, 28, 189, 184, 58, 150, 190, 216, 38, 24, 190, 65, 224, 52, 190, 170, 9, 215, 61, 156, 165, 159, 61, 58, 13, 42, 190, 248, 6, 42, 190, 91, 42, 244, 190, 98, 190, 219, 61, 33, 253, 177, 61, 239, 138, 179, 61, 232, 230, 47, 190, 209, 201, 8, 62, 19, 95, 68, 189, 203, 46, 66, 187, 38, 14, 148, 61, 210, 220, 21, 189, 55, 115, 240, 62, 255, 117, 124, 61, 34, 219, 23, 191, 209, 177, 58, 62, 68, 144, 134, 62, 149, 206, 190, 60, 77, 151, 213, 62, 199, 211, 146, 190, 66, 188, 128, 190, 104, 236, 203, 61, 88, 198, 174, 61, 158, 213, 205, 62, 50, 132, 153, 190, 128, 131, 177, 62, 25, 2, 173, 62, 7, 217, 194, 62, 10, 9, 186, 61, 8, 73, 80, 190, 120, 41, 247, 189, 246, 33, 49, 190, 209, 249, 172, 190, 3, 136, 26, 62, 27, 97, 160, 61, 227, 11, 145, 62, 36, 23, 218, 190, 57, 241, 55, 191, 98, 126, 108, 191, 32, 83, 173, 190, 8, 240, 253, 61, 187, 174, 210, 190, 96, 142, 17, 63, 84, 33, 250, 190, 251, 18, 141, 189, 53, 115, 133, 191, 75, 92, 39, 190, 82, 61, 235, 61, 91, 206, 227, 189, 233, 22, 231, 61, 205, 188, 112, 62, 128, 124, 116, 59, 24, 96, 82, 62, 64, 11, 49, 189, 196, 187, 34, 190, 218, 81, 190, 188, 168, 108, 41, 61, 199, 212, 28, 190, 69, 155, 84, 60, 176, 137, 4, 62, 66, 113, 194, 190, 4, 26, 164, 187, 252, 206, 13, 61, 49, 118, 187, 61, 118, 22, 230, 188, 37, 164, 179, 60, 172, 102, 102, 190, 146, 210, 225, 61, 13, 221, 28, 62, 53, 74, 121, 188, 100, 157, 200, 61, 130, 102, 60, 190, 176, 189, 233, 61, 16, 231, 170, 188, 150, 91, 120, 191, 205, 23, 4, 62, 141, 111, 59, 190, 58, 66, 166, 189, 107, 89, 156, 61, 176, 23, 205, 189, 176, 220, 33, 190, 251, 175, 141, 61, 53, 95, 90, 62, 163, 49, 89, 61, 237, 104, 136, 190, 9, 2, 73, 190, 236, 126, 161, 61, 68, 244, 174, 61, 126, 245, 18, 191, 158, 93, 92, 190, 57, 196, 192, 61, 82, 173, 171, 62, 120, 253, 64, 62, 67, 126, 133, 190, 196, 49, 152, 62, 142, 30, 161, 188, 120, 129, 163, 190, 172, 114, 135, 190, 111, 204, 140, 189, 126, 241, 4, 62, 89, 219, 56, 191, 88, 201, 140, 61, 102, 67, 130, 190, 237, 57, 28, 191, 255, 144, 55, 58, 174, 1, 129, 190, 99, 65, 236, 189, 61, 221, 41, 190, 252, 201, 102, 190, 152, 111, 158, 61, 220, 250, 114, 190, 55, 234, 122, 61, 252, 168, 24, 190, 150, 145, 216, 189, 40, 241, 132, 62, 173, 203, 71, 188, 245, 149, 184, 61, 126, 129, 211, 190, 131, 73, 220, 61, 75, 137, 186, 189, 251, 147, 63, 190, 158, 159, 26, 189, 123, 88, 141, 188, 137, 11, 255, 62, 28, 18, 218, 188, 169, 50, 24, 61, 88, 196, 180, 190, 169, 139, 167, 60, 190, 128, 196, 62, 68, 157, 26, 190, 179, 185, 50, 188, 96, 59, 4, 190, 131, 122, 179, 189, 216, 196, 162, 189, 130, 162, 242, 189, 66, 220, 51, 189, 123, 25, 33, 190, 141, 0, 134, 190, 121, 132, 217, 61, 52, 131, 75, 60, 180, 55, 16, 189, 245, 166, 59, 61, 128, 251, 31, 190, 194, 133, 27, 190, 218, 133, 45, 190, 50, 114, 137, 62, 205, 39, 25, 61, 18, 255, 121, 190, 250, 27, 21, 62, 12, 109, 152, 190, 254, 126, 171, 190, 58, 19, 151, 62, 234, 87, 211, 188, 87, 99, 24, 189, 90, 222, 132, 189, 210, 20, 166, 189, 252, 66, 14, 191, 188, 238, 118, 190, 53, 41, 23, 61, 81, 134, 8, 62, 15, 91, 190, 61, 25, 220, 73, 188, 206, 136, 79, 62, 122, 59, 17, 189, 219, 226, 41, 62, 74, 39, 189, 190, 189, 11, 135, 188, 165, 250, 64, 190, 100, 95, 234, 189, 150, 84, 41, 189, 113, 212, 189, 62, 250, 7, 167, 61, 239, 126, 129, 189, 122, 252, 52, 62, 138, 46, 196, 191, 97, 228, 42, 62, 1, 90, 218, 61, 172, 204, 142, 189, 37, 245, 178, 61, 198, 155, 242, 190, 98, 216, 176, 190, 132, 205, 95, 62, 42, 27, 27, 62, 35, 174, 127, 62, 1, 211, 11, 191, 41, 36, 185, 62, 131, 242, 77, 190, 221, 87, 189, 62, 195, 76, 33, 62, 89, 27, 240, 190, 244, 39, 5, 63, 41, 120, 48, 60, 124, 33, 12, 191, 215, 63, 28, 62, 1, 156, 132, 62, 219, 185, 74, 62, 134, 69, 152, 190, 234, 60, 19, 191, 72, 55, 101, 191, 92, 71, 104, 190, 12, 65, 71, 62, 103, 25, 170, 191, 200, 120, 249, 62, 181, 192, 201, 190, 186, 165, 249, 61, 180, 107, 174, 189, 191, 40, 42, 189, 56, 169, 5, 62, 153, 212, 7, 62, 171, 42, 36, 190, 198, 34, 251, 61, 53, 221, 172, 190, 237, 213, 57, 62, 45, 207, 168, 62, 146, 196, 82, 61, 143, 29, 79, 62, 97, 131, 239, 190, 174, 204, 218, 61, 226, 41, 30, 62, 150, 137, 10, 62, 117, 21, 85, 62, 176, 185, 29, 189, 240, 248, 11, 190, 216, 2, 226, 189, 198, 147, 210, 187, 208, 122, 52, 61, 138, 172, 67, 62, 222, 9, 29, 190, 165, 97, 107, 189, 224, 45, 25, 190, 224, 150, 110, 61, 112, 129, 102, 190, 156, 9, 5, 62, 158, 111, 212, 59, 69, 220, 194, 62, 208, 184, 193, 61, 95, 194, 102, 190, 166, 99, 151, 62, 174, 221, 160, 186, 207, 134, 66, 190, 123, 154, 99, 190, 157, 242, 44, 190, 84, 80, 134, 189, 103, 169, 174, 189, 46, 74, 97, 62, 198, 181, 157, 190, 217, 98, 157, 189, 83, 85, 19, 187, 25, 7, 141, 190, 105, 217, 37, 61, 34, 156, 65, 190, 174, 155, 165, 189, 138, 90, 112, 190, 176, 252, 102, 62, 248, 164, 135, 190, 93, 23, 237, 189, 47, 40, 242, 61, 209, 123, 2, 190, 109, 209, 178, 62, 176, 41, 65, 190, 165, 166, 151, 187, 248, 219, 111, 62, 164, 122, 210, 61, 214, 239, 238, 189, 116, 240, 128, 189, 102, 19, 120, 62, 19, 244, 149, 62, 177, 101, 192, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 155, 138, 61, 166, 46, 110, 190, 122, 91, 31, 190, 55, 247, 129, 62, 238, 175, 59, 62, 48, 185, 21, 62, 187, 122, 48, 62, 208, 223, 82, 61, 2, 131, 85, 62, 54, 149, 202, 189, 183, 81, 88, 189, 45, 46, 235, 189, 136, 55, 34, 188, 31, 120, 1, 62, 8, 100, 106, 62, 253, 157, 119, 62, 35, 164, 211, 189, 73, 74, 162, 189, 152, 63, 30, 62, 34, 98, 248, 61, 97, 177, 179, 188, 168, 243, 248, 189, 101, 59, 71, 189, 160, 49, 176, 190, 228, 141, 203, 61, 157, 44, 181, 190, 15, 95, 248, 61, 178, 115, 178, 62, 241, 2, 36, 62, 21, 66, 30, 62, 189, 139, 199, 61, 194, 249, 103, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 4, 109, 190, 15, 112, 0, 191, 25, 142, 224, 61, 61, 79, 2, 63, 130, 123, 181, 188, 67, 210, 187, 62, 98, 96, 181, 189, 10, 240, 233, 190, 230, 203, 60, 62, 152, 32, 130, 189, 195, 227, 181, 61, 42, 40, 212, 190, 11, 236, 153, 189, 174, 180, 99, 62, 116, 187, 252, 62, 90, 185, 130, 191, 149, 84, 245, 190, 217, 2, 225, 190, 213, 112, 107, 63, 192, 211, 17, 63, 142, 87, 119, 63, 1, 127, 237, 61, 151, 130, 2, 62, 188, 89, 230, 189, 84, 70, 71, 191, 15, 40, 158, 190, 247, 20, 7, 62, 61, 55, 6, 188, 159, 81, 65, 190, 172, 150, 174, 191, 103, 154, 90, 189, 213, 27, 37, 62, 222, 189, 6, 63, 8, 111, 105, 62, 204, 49, 212, 187, 139, 204, 13, 190, 231, 136, 242, 190, 209, 192, 88, 61, 135, 35, 125, 190, 6, 67, 133, 189, 27, 157, 24, 190, 233, 100, 120, 61, 22, 95, 178, 60, 247, 109, 239, 188, 210, 200, 218, 61, 71, 167, 113, 190, 36, 161, 87, 60, 228, 77, 81, 61, 32, 196, 20, 189, 93, 74, 241, 189, 41, 124, 111, 62, 138, 41, 99, 61, 145, 194, 122, 62, 245, 210, 10, 190, 229, 50, 102, 62, 76, 201, 58, 61, 93, 159, 10, 62, 162, 10, 29, 62, 104, 2, 32, 63, 184, 61, 10, 191, 179, 3, 166, 62, 74, 114, 88, 60, 215, 57, 58, 190, 147, 113, 85, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 75, 110, 189, 193, 182, 69, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 49, 107, 62, 75, 39, 105, 191, 119, 162, 183, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {135, 62, 248, 63, 146, 20, 204, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0014/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}