// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 202, 218, 62, 102, 44, 128, 190, 196, 231, 10, 63, 195, 248, 239, 190, 128, 176, 236, 189, 120, 159, 40, 190, 75, 188, 202, 190, 105, 156, 162, 63, 162, 163, 219, 62, 25, 143, 102, 62, 174, 179, 66, 63, 57, 212, 248, 62, 226, 106, 61, 191, 101, 250, 43, 191, 254, 206, 65, 191, 52, 67, 3, 62, 109, 193, 87, 63, 29, 74, 190, 62, 97, 242, 59, 63, 83, 52, 151, 62, 68, 194, 152, 62, 23, 4, 6, 190, 46, 159, 96, 62, 95, 185, 187, 190, 41, 23, 17, 63, 120, 109, 7, 191, 51, 177, 178, 62, 121, 95, 129, 190, 48, 249, 136, 61, 96, 109, 0, 191, 115, 77, 70, 62, 235, 9, 236, 61, 242, 245, 10, 191, 220, 198, 129, 190, 73, 43, 132, 191, 117, 147, 195, 189, 21, 235, 66, 63, 13, 54, 193, 190, 155, 241, 158, 190, 20, 36, 86, 190, 219, 212, 87, 190, 8, 185, 130, 62, 208, 200, 209, 189, 208, 101, 38, 63, 69, 83, 168, 62, 114, 96, 28, 63, 136, 92, 59, 63, 249, 16, 2, 62, 3, 107, 184, 189, 49, 90, 90, 63, 209, 253, 55, 190, 67, 97, 8, 191, 191, 134, 251, 62, 137, 70, 12, 63, 175, 183, 93, 63, 58, 127, 23, 63, 225, 98, 181, 62, 221, 93, 137, 62, 123, 131, 160, 189, 95, 169, 2, 61, 92, 80, 80, 63, 227, 51, 69, 191, 82, 45, 77, 190, 79, 56, 61, 190, 246, 68, 80, 191, 246, 40, 252, 62, 116, 222, 214, 190, 184, 207, 49, 188, 207, 108, 214, 61, 48, 54, 223, 62, 225, 209, 101, 63, 121, 77, 116, 62, 218, 157, 12, 63, 142, 25, 134, 191, 128, 19, 173, 190, 200, 176, 243, 190, 72, 100, 112, 188, 98, 205, 28, 63, 94, 236, 20, 189, 114, 158, 129, 191, 221, 226, 254, 61, 212, 238, 88, 62, 107, 81, 25, 191, 221, 164, 247, 190, 51, 161, 235, 189, 73, 117, 184, 190, 5, 0, 120, 62, 102, 157, 180, 190, 65, 137, 142, 63, 244, 184, 204, 62, 155, 69, 38, 191, 77, 209, 174, 191, 199, 17, 63, 190, 129, 54, 130, 62, 149, 239, 25, 191, 153, 31, 159, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {158, 58, 175, 190, 153, 192, 116, 63, 241, 173, 129, 190, 10, 67, 65, 61, 155, 247, 16, 191, 240, 114, 194, 190, 245, 194, 238, 62, 19, 79, 96, 189, 12, 227, 158, 62, 181, 46, 234, 189, 245, 243, 152, 62, 183, 183, 132, 61, 139, 15, 43, 191, 80, 27, 184, 190, 223, 72, 78, 190, 206, 136, 120, 62, 237, 185, 227, 62, 140, 221, 191, 190, 117, 136, 81, 191, 79, 34, 244, 190, 22, 213, 23, 62, 196, 26, 211, 190, 252, 159, 42, 63, 245, 107, 146, 189, 75, 168, 72, 190, 151, 18, 23, 191, 157, 68, 10, 190, 241, 198, 135, 190, 142, 153, 153, 190, 84, 4, 101, 190, 127, 251, 88, 190, 53, 121, 46, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 9, 228, 61, 192, 38, 220, 189, 15, 46, 131, 61, 124, 166, 54, 190, 235, 153, 132, 190, 28, 78, 14, 62, 184, 83, 165, 61, 89, 46, 187, 189, 191, 62, 153, 189, 244, 59, 39, 189, 168, 173, 133, 188, 98, 234, 65, 62, 155, 107, 2, 188, 48, 11, 52, 190, 63, 227, 247, 189, 213, 12, 144, 189, 92, 184, 210, 190, 225, 75, 78, 190, 121, 86, 7, 62, 101, 196, 175, 61, 21, 197, 154, 61, 125, 128, 23, 62, 16, 24, 106, 189, 174, 75, 72, 188, 88, 98, 174, 62, 10, 21, 191, 60, 238, 73, 151, 61, 241, 121, 45, 62, 69, 70, 33, 61, 70, 187, 207, 189, 22, 33, 79, 190, 57, 204, 202, 61, 36, 248, 19, 190, 223, 11, 227, 189, 93, 71, 71, 190, 129, 190, 123, 190, 6, 76, 81, 191, 83, 45, 145, 190, 197, 57, 196, 190, 53, 154, 55, 190, 4, 183, 22, 61, 53, 88, 47, 190, 36, 49, 156, 190, 164, 169, 204, 61, 55, 17, 224, 189, 64, 42, 7, 62, 51, 104, 150, 189, 20, 94, 158, 190, 250, 94, 221, 190, 156, 203, 216, 61, 121, 46, 123, 190, 251, 111, 160, 61, 129, 133, 220, 189, 0, 70, 217, 61, 208, 155, 130, 61, 232, 83, 172, 190, 14, 101, 132, 60, 79, 190, 223, 61, 17, 132, 33, 62, 55, 176, 214, 61, 77, 229, 95, 190, 40, 200, 162, 189, 159, 239, 59, 61, 89, 82, 106, 189, 24, 84, 36, 62, 5, 114, 35, 190, 97, 47, 41, 59, 79, 113, 138, 60, 193, 151, 59, 189, 172, 103, 120, 189, 73, 164, 187, 187, 131, 108, 222, 61, 200, 67, 180, 189, 126, 11, 195, 61, 156, 140, 45, 189, 73, 180, 88, 190, 249, 198, 156, 61, 219, 191, 127, 56, 127, 124, 206, 189, 41, 239, 225, 60, 107, 169, 101, 190, 11, 47, 47, 61, 210, 130, 36, 62, 13, 80, 26, 190, 249, 240, 190, 61, 167, 200, 18, 190, 234, 246, 243, 188, 194, 54, 14, 190, 75, 172, 154, 189, 177, 59, 69, 189, 107, 171, 240, 61, 31, 220, 34, 62, 183, 59, 88, 62, 38, 108, 118, 61, 239, 195, 162, 189, 175, 120, 54, 190, 153, 115, 148, 62, 20, 101, 148, 62, 4, 112, 11, 190, 136, 210, 6, 190, 19, 167, 172, 189, 190, 52, 199, 190, 232, 172, 229, 62, 61, 28, 79, 62, 177, 46, 77, 62, 116, 35, 131, 62, 0, 168, 170, 62, 32, 187, 7, 189, 193, 168, 48, 189, 249, 188, 208, 190, 142, 166, 171, 190, 121, 133, 109, 190, 118, 243, 157, 62, 198, 224, 176, 190, 13, 1, 3, 190, 86, 69, 137, 189, 175, 180, 44, 62, 195, 140, 2, 61, 90, 174, 148, 61, 26, 56, 243, 190, 148, 166, 248, 188, 28, 199, 102, 58, 63, 234, 78, 62, 156, 34, 16, 190, 17, 211, 118, 60, 196, 21, 43, 190, 8, 43, 252, 190, 163, 126, 67, 62, 77, 249, 5, 190, 88, 138, 31, 189, 108, 21, 32, 189, 36, 43, 185, 188, 77, 12, 117, 190, 131, 142, 29, 190, 228, 151, 120, 189, 230, 141, 133, 189, 95, 73, 86, 62, 81, 57, 98, 190, 130, 106, 237, 60, 50, 54, 8, 190, 69, 109, 75, 190, 66, 55, 106, 188, 78, 116, 245, 189, 105, 50, 55, 61, 203, 85, 11, 62, 197, 87, 163, 61, 190, 15, 129, 190, 58, 200, 21, 62, 135, 42, 153, 62, 147, 236, 251, 61, 169, 238, 60, 62, 245, 36, 148, 189, 150, 16, 28, 190, 128, 235, 123, 189, 41, 245, 54, 62, 115, 224, 140, 190, 177, 3, 215, 61, 226, 56, 56, 61, 57, 162, 197, 190, 136, 131, 230, 61, 240, 235, 230, 189, 100, 181, 190, 61, 213, 238, 70, 61, 61, 75, 154, 189, 96, 117, 133, 190, 205, 133, 191, 61, 187, 196, 252, 189, 234, 222, 164, 61, 231, 91, 46, 190, 39, 138, 3, 191, 197, 41, 130, 189, 226, 91, 176, 62, 157, 200, 57, 62, 19, 125, 8, 62, 131, 162, 147, 189, 54, 251, 139, 189, 83, 48, 93, 190, 9, 31, 107, 62, 204, 178, 121, 190, 161, 54, 250, 61, 43, 113, 15, 63, 158, 99, 68, 190, 104, 186, 166, 189, 3, 112, 17, 190, 6, 231, 108, 62, 106, 70, 106, 62, 205, 176, 151, 61, 14, 185, 28, 62, 250, 158, 166, 190, 195, 14, 25, 62, 86, 50, 3, 189, 11, 52, 139, 62, 243, 199, 26, 62, 129, 170, 69, 61, 75, 131, 231, 189, 232, 103, 72, 62, 19, 21, 48, 61, 133, 171, 25, 62, 237, 17, 77, 62, 66, 189, 162, 190, 253, 225, 26, 62, 166, 83, 60, 60, 33, 187, 204, 59, 63, 104, 65, 190, 133, 166, 40, 190, 243, 7, 163, 189, 246, 223, 165, 189, 73, 153, 55, 62, 129, 53, 149, 62, 247, 131, 163, 61, 111, 107, 3, 190, 95, 183, 15, 62, 160, 26, 162, 188, 148, 1, 128, 62, 129, 152, 53, 62, 163, 9, 212, 61, 137, 100, 43, 190, 238, 209, 110, 190, 194, 57, 57, 190, 10, 134, 194, 189, 202, 19, 67, 61, 6, 156, 82, 190, 8, 80, 165, 190, 29, 187, 65, 190, 80, 184, 207, 61, 183, 192, 202, 190, 250, 241, 191, 190, 166, 227, 127, 61, 81, 24, 98, 189, 247, 204, 77, 61, 189, 61, 133, 62, 189, 187, 12, 190, 130, 207, 236, 61, 233, 234, 27, 190, 231, 93, 197, 188, 78, 143, 233, 185, 104, 35, 193, 58, 2, 111, 61, 190, 232, 54, 175, 189, 29, 74, 114, 188, 142, 88, 15, 191, 49, 253, 216, 189, 61, 163, 38, 62, 134, 40, 179, 189, 166, 187, 80, 62, 49, 128, 180, 60, 84, 162, 65, 190, 132, 111, 124, 189, 137, 94, 222, 62, 244, 28, 135, 190, 207, 63, 172, 61, 30, 88, 82, 60, 224, 57, 207, 188, 147, 121, 4, 190, 52, 101, 50, 62, 107, 228, 158, 187, 146, 90, 61, 190, 119, 197, 97, 62, 167, 127, 8, 62, 148, 81, 135, 190, 76, 186, 79, 190, 125, 101, 77, 60, 176, 32, 147, 189, 119, 149, 29, 62, 232, 120, 229, 61, 110, 227, 196, 189, 16, 156, 189, 61, 163, 9, 17, 190, 18, 49, 177, 189, 173, 169, 51, 189, 169, 0, 194, 189, 0, 79, 48, 190, 84, 73, 176, 61, 25, 3, 60, 189, 231, 118, 19, 190, 233, 124, 231, 61, 15, 111, 149, 62, 58, 231, 94, 190, 147, 130, 107, 62, 60, 182, 102, 190, 32, 250, 233, 60, 12, 156, 135, 62, 99, 149, 81, 62, 119, 83, 236, 61, 248, 175, 80, 190, 51, 90, 22, 62, 54, 57, 150, 61, 146, 167, 170, 62, 50, 17, 178, 189, 32, 117, 242, 58, 225, 141, 16, 189, 76, 31, 63, 61, 101, 147, 204, 189, 123, 198, 28, 62, 203, 243, 236, 61, 157, 146, 219, 61, 50, 108, 16, 190, 209, 204, 51, 190, 68, 71, 248, 61, 255, 208, 172, 188, 134, 107, 108, 61, 17, 188, 136, 189, 218, 65, 28, 61, 253, 3, 35, 190, 239, 121, 224, 189, 48, 153, 49, 190, 253, 51, 165, 185, 84, 205, 239, 61, 210, 76, 17, 61, 105, 117, 209, 61, 42, 177, 191, 189, 248, 172, 233, 189, 69, 175, 11, 190, 35, 85, 0, 62, 178, 41, 173, 189, 228, 67, 137, 189, 174, 238, 130, 189, 205, 246, 85, 60, 64, 199, 36, 61, 226, 158, 253, 61, 207, 119, 167, 189, 210, 253, 44, 190, 68, 228, 6, 189, 62, 207, 35, 60, 11, 104, 3, 189, 232, 219, 121, 189, 177, 136, 12, 61, 188, 121, 36, 62, 198, 38, 216, 61, 145, 56, 202, 60, 113, 28, 254, 189, 206, 11, 112, 188, 73, 224, 213, 189, 202, 185, 139, 190, 86, 178, 132, 60, 192, 53, 247, 61, 52, 193, 202, 189, 35, 164, 241, 189, 175, 60, 205, 189, 72, 213, 104, 61, 200, 10, 136, 189, 173, 93, 219, 61, 187, 161, 89, 189, 208, 13, 82, 189, 32, 112, 22, 190, 50, 149, 135, 189, 98, 152, 177, 189, 145, 9, 49, 190, 212, 178, 141, 61, 206, 57, 156, 189, 173, 191, 85, 61, 169, 242, 139, 189, 79, 90, 64, 190, 168, 98, 63, 190, 23, 190, 98, 189, 52, 11, 36, 189, 50, 43, 87, 190, 63, 120, 224, 189, 58, 112, 21, 189, 180, 183, 27, 62, 70, 98, 255, 60, 238, 130, 80, 189, 83, 214, 189, 189, 7, 160, 64, 60, 169, 246, 130, 62, 63, 131, 34, 62, 219, 128, 26, 190, 95, 63, 13, 190, 203, 134, 53, 190, 187, 219, 105, 62, 105, 175, 231, 61, 82, 146, 195, 189, 93, 251, 245, 61, 36, 159, 185, 61, 0, 236, 141, 61, 65, 209, 46, 190, 37, 194, 178, 62, 95, 250, 155, 62, 44, 39, 124, 62, 128, 204, 98, 62, 187, 113, 27, 62, 177, 146, 246, 61, 10, 116, 104, 189, 128, 6, 214, 62, 28, 159, 95, 61, 120, 48, 131, 190, 160, 202, 29, 62, 196, 44, 119, 61, 144, 1, 51, 190, 248, 232, 27, 190, 154, 21, 44, 61, 89, 69, 209, 188, 204, 132, 21, 190, 94, 118, 164, 189, 222, 114, 26, 61, 214, 55, 44, 190, 50, 67, 171, 61, 158, 7, 15, 62, 73, 45, 36, 189, 169, 255, 183, 61, 112, 110, 106, 189, 1, 13, 51, 61, 129, 56, 187, 186, 235, 30, 77, 189, 111, 213, 173, 61, 151, 33, 147, 61, 35, 242, 228, 60, 71, 196, 30, 190, 104, 209, 154, 189, 49, 211, 141, 60, 120, 168, 98, 186, 205, 78, 140, 61, 5, 168, 42, 190, 207, 36, 25, 190, 153, 167, 232, 188, 57, 90, 19, 190, 247, 105, 145, 190, 167, 197, 16, 190, 184, 28, 167, 61, 216, 147, 125, 189, 170, 250, 57, 191, 114, 14, 168, 188, 137, 197, 11, 189, 228, 81, 28, 190, 189, 133, 164, 189, 4, 26, 8, 191, 19, 194, 232, 190, 45, 94, 195, 189, 18, 48, 122, 189, 228, 19, 5, 61, 80, 147, 21, 62, 96, 77, 111, 61, 72, 63, 148, 190, 165, 191, 156, 62, 153, 230, 160, 189, 176, 139, 29, 62, 68, 135, 145, 189, 21, 131, 160, 190, 65, 132, 89, 62, 68, 71, 176, 61, 8, 45, 89, 190, 243, 103, 131, 62, 159, 218, 18, 62, 104, 44, 122, 190, 37, 180, 186, 61, 70, 175, 164, 186, 171, 166, 119, 190, 240, 236, 137, 61, 19, 84, 215, 189, 254, 55, 204, 61, 228, 80, 41, 61, 209, 65, 90, 190, 240, 27, 240, 190, 49, 76, 82, 189, 130, 169, 13, 62, 133, 112, 34, 62, 233, 232, 53, 61, 176, 156, 152, 190, 1, 214, 162, 189, 109, 8, 34, 188, 153, 137, 173, 62, 206, 22, 97, 62, 23, 13, 194, 189, 15, 167, 204, 189, 130, 115, 227, 189, 137, 186, 182, 189, 145, 217, 141, 190, 25, 180, 25, 59, 14, 140, 224, 62, 113, 12, 195, 189, 148, 151, 129, 62, 216, 234, 143, 190, 150, 235, 212, 62, 101, 74, 160, 189, 88, 95, 156, 62, 100, 161, 127, 62, 158, 21, 108, 190, 241, 212, 16, 62, 78, 57, 191, 60, 183, 196, 132, 62, 26, 232, 138, 62, 210, 235, 7, 62, 171, 40, 241, 190, 147, 23, 164, 62, 205, 31, 177, 60, 67, 207, 83, 62, 37, 63, 97, 62, 185, 172, 235, 190, 21, 181, 11, 190, 113, 83, 73, 62, 168, 141, 144, 62, 219, 252, 30, 61, 118, 95, 7, 191, 207, 57, 121, 61, 114, 201, 111, 62, 29, 63, 25, 62, 70, 148, 3, 63, 59, 82, 159, 190, 113, 104, 49, 190, 104, 212, 40, 62, 7, 218, 172, 190, 214, 61, 136, 62, 117, 207, 241, 60, 228, 194, 129, 62, 153, 250, 42, 191, 97, 152, 94, 191, 16, 154, 68, 191, 165, 72, 217, 190, 191, 30, 169, 62, 168, 31, 215, 190, 64, 139, 146, 61, 18, 202, 255, 190, 180, 133, 13, 60, 126, 76, 129, 191, 228, 46, 7, 189, 150, 42, 153, 61, 117, 179, 248, 189, 28, 82, 71, 190, 191, 40, 141, 61, 122, 209, 100, 189, 19, 129, 47, 62, 78, 109, 19, 190, 238, 192, 42, 190, 97, 75, 195, 188, 20, 207, 20, 190, 46, 138, 44, 61, 138, 227, 250, 189, 94, 138, 125, 61, 136, 195, 71, 61, 255, 65, 200, 189, 111, 227, 252, 60, 180, 131, 127, 189, 60, 156, 60, 190, 246, 251, 203, 61, 39, 227, 145, 190, 7, 126, 213, 61, 119, 254, 209, 60, 101, 177, 208, 61, 200, 252, 210, 61, 25, 69, 160, 60, 246, 34, 205, 188, 135, 176, 185, 59, 125, 159, 115, 191, 183, 117, 64, 62, 17, 33, 85, 188, 208, 197, 86, 191, 73, 241, 155, 189, 196, 207, 186, 60, 44, 3, 7, 190, 104, 122, 252, 61, 53, 19, 223, 60, 203, 130, 49, 190, 47, 240, 128, 60, 5, 249, 79, 189, 176, 4, 106, 190, 103, 83, 180, 190, 45, 209, 4, 189, 251, 77, 18, 61, 129, 157, 124, 61, 95, 244, 208, 188, 86, 66, 250, 189, 68, 147, 101, 189, 252, 230, 69, 62, 232, 234, 229, 188, 164, 102, 134, 189, 186, 153, 17, 62, 17, 225, 237, 56, 133, 155, 72, 189, 138, 212, 193, 60, 150, 145, 244, 186, 10, 34, 100, 62, 87, 86, 242, 189, 208, 73, 31, 62, 217, 158, 64, 190, 194, 63, 102, 191, 18, 6, 159, 61, 39, 132, 204, 189, 8, 237, 100, 61, 240, 111, 184, 62, 153, 104, 79, 190, 246, 113, 83, 191, 134, 115, 141, 190, 112, 43, 77, 189, 229, 234, 43, 63, 207, 107, 141, 61, 190, 92, 76, 190, 131, 134, 213, 190, 4, 167, 135, 190, 164, 88, 5, 61, 144, 207, 63, 189, 211, 201, 41, 190, 162, 90, 5, 191, 44, 66, 101, 62, 74, 124, 243, 62, 245, 177, 180, 190, 40, 7, 201, 189, 251, 78, 172, 62, 191, 123, 245, 189, 253, 182, 81, 62, 52, 67, 24, 191, 97, 142, 77, 190, 134, 246, 243, 62, 148, 193, 1, 62, 123, 219, 253, 190, 145, 157, 164, 190, 45, 177, 54, 62, 81, 28, 189, 190, 0, 240, 64, 188, 42, 152, 46, 189, 232, 10, 182, 62, 241, 217, 126, 188, 177, 220, 13, 190, 246, 9, 0, 191, 34, 177, 175, 189, 233, 65, 11, 190, 196, 244, 97, 62, 13, 161, 10, 61, 212, 198, 65, 191, 184, 123, 156, 189, 54, 226, 164, 60, 230, 17, 142, 190, 81, 87, 143, 62, 191, 101, 140, 60, 175, 111, 129, 190, 50, 95, 190, 189, 20, 196, 111, 189, 5, 240, 37, 190, 45, 107, 121, 61, 83, 128, 253, 62, 239, 29, 193, 189, 92, 13, 36, 62, 98, 191, 205, 190, 213, 12, 36, 62, 153, 229, 209, 61, 150, 99, 188, 62, 141, 219, 43, 189, 30, 141, 63, 190, 190, 193, 220, 61, 249, 53, 6, 61, 29, 143, 231, 61, 94, 83, 147, 60, 183, 33, 12, 62, 81, 1, 125, 62, 113, 63, 101, 190, 102, 44, 118, 60, 252, 16, 19, 189, 186, 77, 36, 190, 242, 168, 64, 190, 53, 148, 194, 60, 111, 248, 150, 61, 113, 38, 247, 189, 239, 56, 219, 61, 21, 213, 43, 190, 54, 216, 173, 190, 8, 13, 1, 191, 116, 253, 61, 190, 75, 124, 175, 61, 155, 78, 35, 189, 166, 7, 160, 189, 131, 103, 11, 62, 110, 214, 43, 191, 171, 126, 138, 190, 129, 247, 106, 62, 106, 227, 98, 190, 42, 234, 200, 190, 54, 30, 51, 190, 251, 196, 49, 62, 91, 247, 180, 190, 153, 157, 0, 190, 242, 74, 141, 189, 76, 134, 147, 188, 202, 137, 73, 189, 197, 75, 30, 189, 91, 167, 133, 189, 148, 235, 244, 188, 238, 240, 180, 189, 153, 34, 176, 188, 187, 110, 9, 190, 210, 43, 176, 188, 187, 85, 220, 189, 121, 222, 236, 189, 169, 214, 74, 60, 162, 144, 198, 59, 136, 169, 224, 188, 220, 117, 234, 189, 182, 48, 157, 189, 58, 246, 141, 61, 181, 74, 102, 61, 176, 81, 162, 61, 40, 182, 135, 189, 235, 29, 236, 61, 26, 190, 251, 189, 13, 24, 0, 190, 217, 216, 242, 189, 120, 2, 28, 61, 82, 240, 201, 60, 166, 160, 3, 62, 185, 139, 63, 61, 11, 239, 223, 188, 42, 110, 204, 189, 128, 199, 60, 61, 135, 91, 185, 188, 209, 161, 2, 62, 39, 203, 18, 62, 251, 142, 159, 190, 67, 155, 92, 61, 106, 20, 254, 61, 91, 150, 245, 60, 30, 19, 88, 190, 252, 11, 68, 190, 123, 104, 153, 60, 69, 168, 234, 61, 182, 104, 171, 189, 176, 56, 239, 190, 89, 95, 240, 190, 95, 255, 52, 62, 120, 15, 18, 190, 230, 239, 197, 61, 138, 175, 211, 189, 179, 145, 12, 190, 119, 81, 240, 188, 87, 165, 170, 62, 222, 179, 82, 189, 100, 173, 5, 190, 112, 12, 143, 62, 253, 102, 101, 190, 111, 226, 255, 61, 217, 133, 215, 189, 33, 159, 3, 62, 93, 140, 146, 62, 111, 198, 22, 61, 197, 195, 2, 62, 158, 48, 155, 190, 55, 161, 50, 189, 227, 195, 162, 62, 182, 51, 40, 62, 217, 206, 162, 61, 139, 106, 41, 190, 253, 24, 15, 62, 201, 71, 5, 61, 122, 254, 22, 190, 153, 85, 230, 189, 56, 47, 143, 60, 210, 188, 137, 60, 104, 218, 74, 61, 209, 142, 247, 61, 139, 28, 2, 187, 135, 224, 171, 189, 40, 196, 81, 62, 215, 146, 86, 190, 57, 1, 28, 189, 184, 58, 150, 190, 211, 26, 8, 190, 65, 224, 52, 190, 170, 9, 215, 61, 156, 165, 159, 61, 255, 223, 20, 190, 248, 6, 42, 190, 91, 42, 244, 190, 98, 190, 219, 61, 57, 254, 224, 61, 239, 138, 179, 61, 239, 32, 48, 190, 234, 224, 31, 62, 19, 95, 68, 189, 203, 46, 66, 187, 216, 235, 202, 61, 210, 220, 21, 189, 207, 222, 0, 63, 90, 40, 108, 61, 224, 130, 221, 190, 5, 70, 93, 62, 181, 176, 139, 62, 66, 195, 9, 62, 55, 5, 220, 62, 125, 47, 142, 190, 46, 80, 103, 190, 18, 62, 236, 61, 19, 210, 201, 61, 241, 96, 154, 62, 170, 247, 45, 190, 136, 183, 148, 62, 106, 189, 189, 62, 42, 207, 195, 62, 161, 53, 0, 62, 139, 72, 83, 190, 240, 24, 63, 61, 246, 33, 49, 190, 146, 153, 200, 190, 113, 121, 225, 61, 197, 98, 149, 61, 205, 178, 156, 62, 34, 8, 218, 190, 7, 28, 55, 191, 44, 134, 95, 191, 68, 195, 181, 190, 112, 194, 157, 61, 205, 18, 134, 190, 69, 147, 247, 62, 244, 67, 248, 190, 255, 73, 179, 189, 75, 95, 54, 191, 135, 140, 37, 190, 5, 55, 198, 61, 91, 206, 227, 189, 94, 222, 130, 61, 209, 144, 110, 62, 128, 124, 116, 59, 136, 151, 86, 62, 64, 11, 49, 189, 128, 250, 87, 188, 141, 94, 84, 188, 99, 44, 8, 61, 237, 206, 14, 190, 192, 244, 86, 58, 136, 19, 227, 61, 56, 10, 160, 190, 26, 46, 146, 188, 18, 106, 166, 189, 49, 118, 187, 61, 118, 41, 153, 61, 57, 191, 29, 61, 80, 239, 64, 190, 243, 130, 146, 61, 45, 100, 24, 62, 44, 101, 194, 188, 217, 118, 149, 61, 184, 202, 73, 190, 206, 108, 17, 62, 185, 64, 16, 189, 103, 135, 35, 191, 164, 227, 1, 62, 222, 101, 51, 190, 215, 46, 8, 190, 113, 146, 208, 61, 145, 228, 31, 190, 60, 177, 135, 189, 85, 119, 15, 61, 4, 1, 249, 61, 111, 242, 234, 61, 11, 19, 135, 190, 226, 160, 243, 189, 33, 233, 217, 61, 239, 15, 193, 61, 22, 132, 110, 189, 87, 94, 15, 190, 85, 209, 11, 62, 31, 180, 87, 62, 215, 231, 163, 61, 205, 92, 50, 190, 163, 194, 43, 62, 142, 30, 161, 188, 130, 226, 56, 190, 74, 191, 50, 190, 120, 117, 147, 189, 194, 88, 93, 60, 151, 158, 129, 190, 208, 74, 254, 61, 75, 11, 44, 190, 105, 229, 142, 190, 60, 202, 150, 61, 176, 187, 96, 190, 214, 17, 47, 190, 137, 101, 127, 189, 123, 152, 22, 190, 180, 168, 135, 61, 82, 197, 68, 190, 201, 116, 54, 61, 94, 59, 159, 189, 120, 142, 154, 188, 155, 157, 96, 62, 107, 76, 210, 59, 91, 218, 236, 58, 26, 170, 197, 190, 172, 18, 171, 61, 218, 143, 81, 58, 218, 110, 69, 190, 209, 76, 220, 189, 23, 201, 157, 189, 64, 77, 221, 62, 138, 48, 129, 189, 2, 125, 98, 189, 79, 161, 75, 190, 169, 139, 167, 60, 253, 109, 161, 62, 124, 19, 74, 190, 249, 93, 79, 188, 82, 30, 19, 190, 36, 173, 104, 189, 237, 204, 38, 190, 51, 18, 222, 189, 39, 60, 16, 188, 101, 244, 105, 190, 15, 182, 116, 190, 117, 218, 27, 62, 254, 103, 131, 189, 95, 133, 177, 189, 255, 30, 17, 188, 248, 2, 116, 190, 43, 221, 5, 189, 67, 218, 137, 189, 37, 33, 219, 188, 1, 48, 223, 60, 110, 222, 163, 190, 179, 212, 230, 61, 172, 219, 131, 190, 155, 34, 141, 190, 178, 189, 145, 62, 231, 233, 148, 190, 116, 200, 233, 188, 107, 68, 231, 188, 83, 118, 199, 187, 161, 199, 247, 190, 143, 145, 132, 190, 19, 65, 192, 61, 81, 134, 8, 62, 189, 150, 156, 60, 253, 197, 208, 59, 157, 16, 18, 62, 95, 141, 199, 61, 165, 186, 49, 61, 110, 69, 174, 190, 105, 237, 240, 57, 173, 199, 89, 190, 153, 114, 119, 189, 77, 25, 25, 190, 89, 141, 206, 62, 218, 244, 249, 60, 175, 240, 16, 62, 241, 232, 27, 62, 185, 136, 172, 191, 176, 201, 234, 61, 180, 66, 11, 62, 164, 224, 95, 190, 150, 123, 200, 61, 28, 25, 245, 190, 120, 42, 110, 190, 249, 194, 106, 62, 235, 209, 34, 62, 73, 201, 55, 62, 99, 185, 181, 190, 87, 100, 186, 62, 176, 221, 198, 189, 210, 174, 164, 62, 69, 80, 5, 62, 28, 128, 17, 191, 17, 231, 142, 62, 41, 120, 48, 60, 135, 197, 254, 190, 135, 215, 116, 62, 240, 210, 85, 62, 29, 162, 222, 61, 254, 192, 117, 190, 86, 46, 31, 191, 174, 218, 59, 191, 136, 57, 95, 190, 120, 15, 138, 62, 135, 214, 136, 191, 75, 83, 214, 62, 83, 69, 89, 190, 174, 63, 24, 62, 50, 220, 218, 189, 135, 90, 137, 60, 93, 191, 32, 62, 57, 156, 239, 61, 240, 2, 240, 189, 145, 147, 16, 62, 18, 166, 172, 190, 9, 193, 55, 62, 200, 177, 169, 62, 166, 234, 113, 61, 69, 5, 221, 61, 111, 38, 166, 190, 20, 21, 233, 61, 206, 21, 46, 62, 228, 251, 24, 62, 122, 164, 109, 62, 193, 129, 55, 189, 143, 158, 223, 189, 216, 2, 226, 189, 45, 84, 60, 189, 86, 35, 81, 61, 108, 33, 43, 62, 172, 193, 3, 190, 195, 122, 156, 189, 235, 95, 27, 190, 253, 17, 32, 61, 162, 232, 117, 190, 84, 103, 15, 62, 137, 211, 79, 61, 197, 160, 129, 62, 181, 155, 164, 61, 235, 241, 119, 190, 111, 84, 145, 62, 18, 121, 114, 188, 128, 197, 61, 190, 38, 59, 60, 190, 33, 161, 28, 190, 112, 163, 159, 189, 59, 110, 167, 189, 131, 34, 72, 62, 246, 129, 152, 190, 194, 224, 174, 189, 113, 246, 162, 60, 30, 163, 11, 190, 138, 254, 184, 60, 30, 168, 63, 190, 94, 206, 216, 189, 5, 186, 140, 190, 146, 25, 98, 62, 188, 130, 123, 190, 93, 23, 237, 189, 252, 144, 14, 62, 205, 147, 28, 190, 32, 171, 165, 62, 236, 69, 60, 190, 106, 94, 237, 61, 231, 226, 89, 62, 146, 154, 194, 61, 73, 64, 135, 61, 214, 207, 190, 189, 28, 77, 120, 62, 34, 231, 152, 62, 28, 237, 186, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 204, 145, 61, 139, 46, 78, 190, 158, 172, 28, 190, 152, 40, 134, 62, 134, 8, 65, 62, 185, 111, 23, 62, 72, 152, 34, 62, 169, 4, 28, 61, 212, 183, 76, 62, 54, 149, 202, 189, 110, 54, 169, 188, 241, 96, 239, 189, 136, 55, 34, 188, 22, 75, 223, 61, 83, 249, 135, 62, 246, 116, 113, 62, 54, 189, 161, 189, 16, 56, 239, 188, 127, 106, 52, 62, 19, 107, 191, 61, 226, 11, 129, 189, 168, 243, 248, 189, 150, 124, 254, 188, 133, 216, 166, 190, 206, 251, 201, 61, 79, 100, 152, 190, 31, 133, 35, 61, 5, 15, 158, 62, 62, 78, 235, 61, 64, 175, 24, 62, 162, 255, 183, 61, 112, 201, 85, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 90, 96, 190, 194, 127, 0, 191, 247, 160, 225, 61, 229, 90, 227, 62, 118, 49, 143, 188, 3, 66, 207, 62, 215, 1, 177, 189, 57, 190, 237, 190, 133, 15, 64, 62, 152, 32, 130, 189, 118, 10, 185, 61, 155, 166, 218, 190, 11, 236, 153, 189, 163, 215, 70, 62, 113, 14, 230, 62, 36, 205, 90, 191, 58, 26, 161, 190, 16, 225, 138, 190, 226, 152, 100, 63, 190, 44, 250, 62, 14, 83, 53, 63, 1, 127, 237, 61, 190, 197, 108, 62, 146, 188, 246, 189, 113, 235, 67, 191, 216, 185, 46, 190, 15, 148, 236, 61, 169, 186, 6, 60, 52, 173, 186, 189, 186, 239, 135, 191, 1, 25, 205, 189, 181, 129, 70, 62, 225, 113, 162, 62, 109, 93, 106, 62, 199, 63, 232, 187, 7, 181, 79, 190, 25, 24, 186, 190, 242, 130, 215, 61, 91, 87, 49, 190, 3, 189, 43, 187, 13, 238, 27, 190, 233, 100, 120, 61, 115, 51, 179, 60, 125, 246, 54, 60, 210, 200, 218, 61, 40, 133, 133, 190, 34, 134, 159, 61, 168, 53, 42, 61, 194, 248, 136, 61, 15, 132, 19, 189, 120, 73, 69, 62, 158, 10, 61, 61, 122, 40, 121, 62, 245, 210, 10, 190, 45, 22, 50, 62, 156, 89, 116, 61, 85, 241, 248, 61, 162, 83, 32, 62, 147, 247, 60, 62, 47, 135, 228, 190, 233, 203, 161, 62, 162, 218, 13, 60, 77, 32, 244, 189, 134, 153, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 27, 150, 189, 133, 43, 25, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {59, 30, 82, 63, 145, 206, 7, 192, 23, 88, 201, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {55, 182, 57, 64, 158, 35, 177, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0014/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}