// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 141, 208, 62, 96, 94, 12, 191, 123, 158, 197, 62, 19, 190, 41, 191, 242, 170, 166, 60, 9, 150, 15, 190, 81, 90, 32, 191, 21, 170, 218, 63, 78, 219, 192, 62, 67, 23, 46, 62, 209, 238, 120, 63, 254, 210, 219, 62, 134, 1, 51, 191, 54, 182, 130, 191, 181, 59, 17, 191, 40, 30, 126, 62, 18, 28, 130, 63, 196, 150, 190, 62, 68, 16, 35, 63, 202, 109, 234, 62, 198, 180, 74, 62, 232, 193, 134, 190, 132, 202, 250, 61, 23, 2, 172, 190, 115, 13, 29, 63, 194, 30, 41, 191, 36, 116, 128, 62, 51, 216, 17, 190, 128, 91, 82, 60, 169, 187, 241, 190, 133, 117, 150, 61, 71, 192, 237, 62, 249, 146, 228, 190, 19, 238, 105, 59, 140, 191, 165, 191, 185, 145, 137, 189, 208, 210, 87, 63, 78, 240, 7, 191, 26, 183, 155, 190, 232, 52, 135, 190, 227, 143, 7, 191, 22, 235, 116, 62, 128, 53, 251, 190, 103, 186, 76, 63, 254, 113, 122, 62, 53, 107, 4, 63, 131, 82, 138, 63, 76, 54, 57, 62, 221, 120, 70, 190, 189, 216, 94, 63, 247, 147, 143, 190, 245, 162, 207, 190, 56, 28, 93, 63, 127, 20, 27, 63, 29, 239, 87, 63, 232, 170, 117, 63, 126, 149, 226, 62, 221, 93, 137, 62, 123, 131, 160, 189, 95, 169, 2, 61, 9, 83, 88, 63, 46, 149, 123, 191, 192, 19, 91, 190, 59, 176, 143, 189, 64, 255, 76, 191, 84, 76, 247, 62, 6, 195, 38, 191, 221, 71, 185, 61, 92, 151, 25, 62, 121, 163, 223, 62, 255, 183, 148, 63, 155, 198, 138, 62, 0, 64, 13, 63, 71, 185, 165, 191, 86, 161, 177, 190, 213, 32, 249, 190, 152, 63, 99, 62, 61, 127, 22, 63, 4, 87, 22, 61, 62, 7, 81, 191, 29, 36, 133, 62, 184, 87, 134, 62, 30, 188, 90, 191, 171, 140, 230, 190, 178, 231, 203, 60, 16, 65, 204, 190, 195, 152, 48, 62, 142, 212, 43, 191, 88, 222, 196, 63, 221, 127, 176, 62, 223, 91, 235, 190, 228, 72, 218, 191, 200, 22, 140, 190, 150, 198, 150, 62, 92, 205, 48, 191, 139, 99, 142, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 74, 225, 190, 250, 126, 110, 63, 14, 135, 86, 190, 246, 125, 33, 189, 110, 101, 53, 191, 54, 229, 213, 190, 69, 49, 206, 62, 144, 179, 255, 189, 142, 241, 144, 62, 95, 132, 217, 57, 224, 153, 100, 62, 25, 29, 45, 62, 215, 169, 52, 191, 120, 136, 220, 189, 254, 53, 100, 190, 130, 244, 64, 62, 220, 15, 208, 62, 175, 136, 77, 190, 181, 192, 95, 191, 79, 34, 244, 190, 14, 132, 23, 62, 227, 67, 209, 190, 50, 224, 7, 63, 50, 1, 137, 189, 101, 208, 107, 190, 83, 101, 38, 191, 87, 240, 195, 190, 215, 88, 204, 190, 193, 105, 211, 190, 69, 197, 50, 190, 89, 193, 162, 189, 97, 77, 108, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 54, 158, 61, 24, 145, 82, 190, 49, 55, 34, 62, 183, 136, 148, 190, 132, 166, 253, 190, 62, 151, 160, 62, 168, 131, 41, 62, 188, 29, 227, 189, 161, 87, 81, 188, 35, 71, 67, 190, 192, 207, 65, 189, 70, 0, 209, 60, 68, 6, 37, 62, 55, 57, 157, 190, 145, 178, 92, 189, 186, 194, 169, 189, 9, 184, 39, 191, 233, 30, 132, 190, 190, 181, 42, 62, 101, 196, 175, 61, 199, 199, 62, 62, 81, 110, 25, 59, 231, 189, 91, 190, 205, 82, 216, 189, 104, 79, 221, 62, 34, 187, 35, 189, 121, 245, 143, 189, 105, 213, 31, 61, 0, 209, 200, 189, 241, 103, 89, 60, 200, 142, 224, 190, 76, 75, 255, 61, 154, 48, 33, 190, 142, 74, 17, 190, 35, 54, 71, 190, 247, 111, 123, 190, 6, 76, 81, 191, 83, 45, 145, 190, 103, 241, 196, 190, 53, 154, 55, 190, 107, 60, 226, 59, 53, 88, 47, 190, 36, 49, 156, 190, 37, 87, 131, 61, 55, 17, 224, 189, 73, 32, 233, 61, 51, 104, 150, 189, 20, 94, 158, 190, 250, 94, 221, 190, 0, 221, 214, 61, 121, 46, 123, 190, 251, 111, 160, 61, 146, 50, 234, 189, 11, 127, 162, 61, 7, 142, 13, 61, 232, 83, 172, 190, 167, 1, 73, 60, 14, 220, 193, 61, 209, 144, 0, 62, 55, 176, 214, 61, 65, 67, 114, 190, 21, 49, 162, 189, 248, 129, 4, 60, 170, 253, 180, 189, 24, 84, 36, 62, 31, 104, 39, 190, 97, 47, 41, 59, 79, 113, 138, 60, 17, 78, 90, 189, 172, 103, 120, 189, 73, 164, 187, 187, 136, 12, 212, 61, 200, 67, 180, 189, 153, 26, 181, 61, 200, 140, 85, 189, 109, 19, 89, 190, 167, 13, 147, 61, 219, 191, 127, 56, 127, 124, 206, 189, 102, 23, 221, 60, 211, 240, 105, 190, 11, 47, 47, 61, 210, 130, 36, 62, 13, 80, 26, 190, 16, 227, 179, 61, 167, 200, 18, 190, 234, 246, 243, 188, 194, 54, 14, 190, 9, 82, 166, 189, 177, 59, 69, 189, 107, 171, 240, 61, 201, 170, 27, 62, 183, 59, 88, 62, 38, 108, 118, 61, 239, 195, 162, 189, 175, 120, 54, 190, 10, 228, 195, 62, 166, 42, 113, 62, 20, 198, 87, 62, 54, 128, 127, 190, 111, 216, 80, 189, 69, 209, 101, 191, 163, 134, 215, 62, 4, 162, 73, 62, 200, 255, 71, 62, 0, 194, 138, 62, 66, 191, 180, 62, 222, 11, 34, 190, 220, 177, 178, 188, 56, 34, 190, 190, 73, 112, 82, 191, 27, 59, 138, 190, 137, 206, 177, 62, 105, 90, 229, 190, 161, 157, 56, 191, 86, 69, 137, 189, 120, 80, 253, 61, 29, 150, 2, 62, 16, 11, 64, 61, 165, 186, 41, 191, 160, 22, 212, 189, 158, 149, 24, 187, 66, 40, 81, 62, 205, 228, 111, 190, 95, 73, 0, 62, 173, 3, 150, 61, 50, 2, 55, 191, 165, 29, 72, 62, 121, 37, 120, 190, 75, 189, 23, 190, 244, 98, 18, 190, 180, 160, 246, 188, 48, 230, 146, 190, 156, 130, 179, 190, 73, 104, 136, 189, 105, 117, 242, 190, 110, 203, 87, 62, 245, 21, 116, 191, 7, 28, 130, 189, 8, 52, 229, 190, 92, 65, 34, 191, 45, 138, 26, 189, 87, 91, 48, 190, 18, 254, 22, 61, 209, 24, 4, 62, 158, 132, 139, 61, 66, 32, 207, 190, 58, 200, 21, 62, 88, 118, 168, 62, 196, 145, 249, 61, 230, 91, 222, 61, 58, 81, 226, 189, 204, 157, 200, 190, 44, 195, 190, 189, 145, 6, 79, 62, 152, 17, 9, 191, 106, 131, 218, 61, 29, 26, 72, 189, 159, 37, 33, 191, 224, 34, 170, 61, 81, 165, 186, 188, 161, 54, 155, 60, 154, 225, 81, 186, 246, 186, 4, 190, 152, 241, 132, 190, 78, 175, 57, 189, 225, 48, 210, 189, 219, 75, 25, 62, 84, 137, 34, 190, 214, 90, 228, 190, 39, 52, 18, 189, 21, 11, 150, 62, 237, 9, 95, 62, 90, 87, 26, 62, 150, 65, 28, 190, 1, 182, 94, 189, 193, 133, 94, 190, 209, 179, 62, 62, 139, 61, 224, 190, 161, 54, 250, 61, 111, 7, 25, 63, 32, 248, 12, 190, 164, 196, 177, 189, 218, 116, 78, 190, 86, 32, 93, 62, 30, 45, 90, 62, 198, 111, 133, 61, 247, 12, 47, 61, 190, 239, 147, 190, 135, 253, 162, 61, 118, 120, 106, 190, 98, 133, 141, 62, 134, 82, 14, 62, 173, 64, 17, 61, 142, 103, 71, 190, 82, 184, 93, 62, 107, 130, 252, 187, 239, 201, 234, 61, 60, 35, 44, 62, 201, 253, 67, 190, 209, 188, 255, 61, 216, 217, 149, 61, 139, 102, 167, 61, 83, 67, 76, 191, 118, 62, 24, 191, 89, 10, 169, 188, 222, 239, 29, 189, 223, 196, 68, 62, 55, 88, 212, 62, 157, 47, 44, 62, 215, 89, 248, 189, 95, 183, 15, 62, 167, 190, 135, 189, 17, 146, 157, 62, 3, 67, 30, 62, 237, 11, 189, 61, 231, 165, 33, 191, 19, 4, 30, 190, 189, 29, 216, 189, 59, 45, 174, 189, 248, 155, 207, 61, 10, 188, 138, 190, 91, 34, 20, 191, 30, 42, 56, 190, 160, 205, 182, 188, 135, 76, 192, 190, 70, 175, 68, 191, 36, 215, 55, 62, 58, 80, 34, 190, 115, 22, 9, 62, 178, 89, 144, 62, 98, 181, 104, 58, 223, 117, 7, 62, 224, 135, 237, 189, 231, 22, 145, 189, 81, 56, 144, 189, 175, 66, 194, 59, 11, 131, 160, 190, 131, 49, 19, 190, 100, 137, 243, 60, 46, 169, 11, 191, 188, 104, 20, 190, 23, 103, 234, 62, 134, 40, 179, 189, 180, 189, 87, 62, 252, 22, 134, 189, 55, 178, 112, 190, 35, 132, 135, 61, 216, 105, 189, 62, 30, 112, 128, 190, 227, 41, 130, 188, 53, 178, 107, 62, 135, 22, 60, 190, 133, 43, 9, 191, 150, 144, 175, 62, 198, 31, 12, 60, 20, 128, 223, 189, 177, 232, 51, 62, 27, 226, 25, 62, 100, 205, 165, 190, 44, 60, 62, 190, 124, 184, 174, 190, 189, 244, 164, 189, 36, 44, 202, 61, 2, 57, 46, 62, 65, 218, 241, 189, 127, 80, 139, 61, 9, 231, 245, 189, 131, 210, 177, 189, 181, 250, 191, 60, 255, 166, 127, 190, 163, 152, 73, 190, 113, 199, 110, 61, 221, 125, 132, 189, 81, 163, 231, 190, 233, 124, 231, 61, 133, 187, 145, 62, 55, 203, 195, 189, 43, 146, 153, 62, 24, 133, 201, 190, 127, 10, 213, 58, 211, 192, 151, 62, 190, 121, 155, 62, 242, 44, 85, 61, 163, 175, 204, 189, 135, 87, 10, 62, 219, 238, 44, 61, 68, 131, 205, 62, 50, 17, 178, 189, 32, 117, 242, 58, 225, 141, 16, 189, 76, 31, 63, 61, 101, 147, 204, 189, 123, 198, 28, 62, 203, 243, 236, 61, 157, 146, 219, 61, 50, 108, 16, 190, 209, 204, 51, 190, 68, 71, 248, 61, 255, 208, 172, 188, 134, 107, 108, 61, 17, 188, 136, 189, 218, 65, 28, 61, 253, 3, 35, 190, 239, 121, 224, 189, 48, 153, 49, 190, 253, 51, 165, 185, 84, 205, 239, 61, 210, 76, 17, 61, 105, 117, 209, 61, 42, 177, 191, 189, 248, 172, 233, 189, 69, 175, 11, 190, 35, 85, 0, 62, 178, 41, 173, 189, 228, 67, 137, 189, 174, 238, 130, 189, 205, 246, 85, 60, 64, 199, 36, 61, 226, 158, 253, 61, 181, 66, 233, 189, 131, 58, 57, 190, 68, 228, 6, 189, 6, 209, 85, 188, 11, 104, 3, 189, 160, 252, 134, 189, 116, 246, 127, 59, 188, 121, 36, 62, 181, 220, 155, 61, 145, 56, 202, 60, 113, 28, 254, 189, 22, 141, 128, 188, 73, 224, 213, 189, 80, 69, 140, 190, 135, 37, 105, 60, 30, 198, 190, 61, 65, 134, 202, 189, 10, 228, 244, 189, 149, 21, 237, 189, 72, 213, 104, 61, 9, 250, 212, 189, 223, 46, 173, 61, 145, 63, 150, 189, 66, 142, 147, 189, 220, 53, 24, 190, 222, 162, 144, 189, 20, 121, 207, 189, 145, 9, 49, 190, 159, 192, 132, 61, 57, 48, 156, 189, 173, 191, 85, 61, 61, 50, 217, 189, 93, 224, 31, 190, 148, 234, 176, 190, 128, 101, 113, 189, 77, 162, 255, 59, 198, 23, 0, 191, 56, 59, 157, 188, 181, 241, 136, 58, 203, 187, 177, 61, 190, 16, 158, 61, 144, 187, 26, 190, 66, 41, 92, 190, 187, 147, 85, 189, 211, 65, 187, 62, 247, 15, 226, 61, 24, 38, 21, 190, 194, 194, 34, 190, 194, 124, 153, 190, 126, 119, 136, 62, 46, 161, 136, 62, 82, 146, 195, 189, 97, 26, 158, 61, 185, 184, 87, 61, 121, 12, 132, 60, 141, 65, 104, 189, 228, 187, 199, 62, 191, 193, 161, 62, 109, 92, 149, 62, 220, 99, 119, 62, 103, 137, 183, 61, 48, 130, 7, 62, 77, 43, 27, 190, 209, 28, 234, 62, 133, 163, 136, 61, 53, 237, 146, 190, 216, 67, 3, 62, 87, 217, 35, 61, 144, 1, 51, 190, 78, 12, 54, 190, 6, 227, 37, 60, 89, 69, 209, 188, 247, 65, 11, 190, 94, 118, 164, 189, 222, 114, 26, 61, 168, 180, 43, 190, 50, 67, 171, 61, 182, 8, 16, 62, 170, 108, 121, 189, 200, 202, 99, 61, 169, 19, 178, 189, 59, 19, 217, 60, 67, 235, 210, 188, 235, 30, 77, 189, 111, 213, 173, 61, 122, 222, 172, 61, 229, 96, 0, 60, 251, 114, 63, 190, 104, 209, 154, 189, 141, 116, 28, 60, 193, 153, 192, 60, 205, 78, 140, 61, 78, 58, 23, 190, 130, 152, 50, 190, 153, 167, 232, 188, 158, 59, 251, 189, 197, 42, 247, 190, 18, 18, 48, 190, 104, 125, 45, 62, 20, 113, 116, 60, 82, 63, 80, 191, 201, 106, 242, 61, 154, 118, 144, 62, 137, 99, 130, 61, 46, 43, 142, 190, 195, 203, 118, 189, 228, 116, 99, 190, 219, 88, 170, 190, 47, 234, 142, 190, 108, 78, 203, 189, 179, 50, 137, 61, 103, 21, 253, 62, 45, 50, 59, 61, 65, 22, 95, 62, 49, 92, 132, 62, 176, 139, 29, 62, 181, 195, 158, 191, 73, 172, 252, 190, 170, 236, 135, 61, 236, 190, 214, 62, 178, 82, 25, 191, 6, 23, 11, 62, 81, 24, 185, 190, 150, 219, 3, 191, 105, 210, 93, 189, 80, 149, 133, 61, 62, 164, 92, 190, 205, 21, 134, 190, 161, 16, 167, 60, 112, 151, 2, 61, 179, 118, 144, 62, 246, 239, 160, 190, 228, 83, 173, 190, 199, 109, 238, 190, 136, 165, 186, 61, 103, 163, 159, 62, 90, 85, 74, 61, 232, 119, 39, 190, 89, 192, 185, 187, 38, 221, 157, 189, 101, 141, 240, 62, 30, 44, 166, 62, 197, 50, 115, 190, 125, 69, 34, 190, 251, 154, 52, 189, 10, 201, 181, 189, 136, 111, 71, 191, 25, 180, 25, 59, 252, 43, 223, 62, 179, 99, 99, 61, 232, 146, 139, 62, 115, 100, 255, 190, 81, 48, 226, 62, 231, 202, 231, 188, 205, 239, 198, 62, 231, 92, 140, 62, 235, 102, 216, 189, 72, 124, 142, 62, 35, 209, 76, 190, 51, 222, 152, 62, 96, 16, 45, 62, 166, 245, 40, 62, 138, 74, 152, 191, 84, 94, 144, 62, 250, 81, 10, 189, 170, 203, 191, 190, 174, 125, 97, 62, 138, 196, 197, 190, 121, 66, 0, 190, 126, 206, 77, 62, 199, 131, 141, 62, 234, 146, 40, 191, 233, 94, 120, 191, 110, 137, 5, 62, 222, 115, 217, 62, 132, 92, 12, 62, 216, 122, 12, 63, 99, 22, 179, 190, 211, 2, 26, 191, 104, 212, 40, 62, 194, 138, 176, 190, 120, 179, 244, 62, 226, 223, 160, 189, 40, 51, 132, 62, 196, 122, 112, 191, 77, 167, 39, 191, 239, 251, 57, 191, 193, 194, 209, 190, 36, 137, 10, 63, 176, 172, 148, 191, 126, 154, 226, 61, 75, 1, 217, 190, 53, 251, 154, 61, 109, 112, 218, 191, 89, 23, 168, 189, 164, 131, 8, 62, 117, 179, 248, 189, 28, 97, 252, 189, 194, 63, 95, 62, 122, 209, 100, 189, 7, 124, 129, 62, 78, 109, 19, 190, 120, 141, 91, 191, 153, 5, 17, 190, 152, 231, 50, 191, 227, 77, 65, 187, 187, 204, 244, 189, 232, 89, 76, 62, 212, 60, 81, 61, 170, 53, 121, 189, 208, 115, 93, 62, 180, 131, 127, 189, 120, 133, 182, 190, 126, 121, 141, 61, 96, 12, 169, 190, 11, 200, 92, 62, 115, 179, 206, 61, 72, 248, 3, 62, 100, 42, 47, 62, 25, 69, 160, 60, 16, 162, 179, 189, 118, 225, 176, 188, 5, 233, 217, 191, 139, 22, 123, 62, 2, 110, 142, 188, 38, 120, 165, 191, 183, 203, 96, 190, 139, 201, 184, 188, 44, 3, 7, 190, 37, 18, 242, 61, 208, 115, 246, 189, 203, 130, 49, 190, 212, 211, 140, 188, 5, 249, 79, 189, 176, 4, 106, 190, 87, 16, 182, 190, 45, 209, 4, 189, 214, 134, 189, 61, 32, 220, 151, 61, 64, 197, 175, 190, 147, 4, 235, 189, 60, 31, 19, 188, 248, 159, 12, 62, 232, 234, 229, 188, 135, 89, 6, 191, 218, 223, 56, 62, 199, 164, 129, 60, 85, 227, 74, 190, 248, 115, 75, 61, 118, 228, 82, 61, 186, 3, 170, 62, 87, 86, 242, 189, 51, 220, 77, 62, 86, 176, 141, 190, 30, 188, 163, 191, 128, 7, 162, 61, 58, 86, 57, 189, 245, 126, 170, 61, 81, 77, 226, 62, 204, 85, 89, 190, 146, 20, 229, 190, 75, 83, 144, 190, 67, 124, 107, 189, 252, 41, 97, 63, 8, 250, 4, 62, 82, 3, 83, 61, 76, 6, 169, 190, 118, 111, 14, 190, 28, 227, 202, 62, 229, 77, 41, 61, 115, 167, 14, 190, 232, 27, 21, 191, 107, 44, 151, 61, 178, 55, 250, 62, 197, 62, 163, 190, 40, 7, 201, 189, 197, 160, 50, 63, 188, 216, 70, 189, 182, 233, 149, 62, 198, 170, 54, 191, 6, 133, 43, 190, 239, 149, 5, 63, 169, 106, 68, 61, 216, 143, 115, 191, 44, 85, 130, 190, 209, 192, 117, 62, 252, 4, 58, 191, 201, 228, 233, 60, 77, 214, 128, 61, 45, 119, 164, 62, 115, 83, 18, 190, 247, 182, 94, 190, 20, 108, 239, 190, 248, 158, 9, 191, 152, 106, 183, 189, 138, 3, 22, 62, 229, 207, 186, 61, 24, 69, 102, 191, 74, 215, 53, 188, 243, 58, 238, 60, 251, 54, 146, 190, 81, 196, 163, 62, 219, 224, 104, 190, 17, 115, 112, 190, 167, 109, 146, 189, 191, 249, 12, 190, 104, 185, 18, 191, 45, 107, 121, 61, 185, 1, 16, 63, 61, 112, 65, 187, 206, 12, 99, 62, 217, 210, 251, 190, 77, 222, 31, 62, 147, 128, 161, 61, 164, 78, 221, 62, 38, 8, 232, 190, 233, 94, 7, 190, 14, 161, 166, 189, 78, 71, 140, 190, 235, 217, 44, 62, 90, 218, 113, 189, 210, 88, 119, 62, 71, 177, 9, 63, 80, 177, 141, 190, 64, 11, 189, 61, 224, 243, 61, 190, 223, 218, 9, 61, 144, 18, 107, 190, 128, 66, 203, 187, 245, 48, 192, 61, 231, 77, 251, 189, 154, 201, 159, 62, 140, 10, 8, 191, 19, 121, 213, 189, 122, 192, 129, 191, 63, 72, 187, 60, 13, 185, 133, 61, 142, 41, 152, 190, 201, 145, 176, 60, 131, 103, 11, 62, 4, 128, 152, 191, 64, 131, 191, 189, 215, 83, 221, 62, 134, 155, 92, 61, 19, 184, 20, 191, 92, 96, 84, 190, 144, 2, 16, 62, 251, 183, 12, 191, 11, 233, 170, 189, 10, 79, 79, 62, 27, 25, 78, 62, 96, 65, 58, 186, 197, 75, 30, 189, 91, 167, 133, 189, 148, 235, 244, 188, 238, 240, 180, 189, 153, 34, 176, 188, 187, 110, 9, 190, 210, 43, 176, 188, 187, 85, 220, 189, 121, 222, 236, 189, 169, 214, 74, 60, 162, 144, 198, 59, 136, 169, 224, 188, 220, 117, 234, 189, 182, 48, 157, 189, 58, 246, 141, 61, 181, 74, 102, 61, 176, 81, 162, 61, 40, 182, 135, 189, 235, 29, 236, 61, 26, 190, 251, 189, 13, 24, 0, 190, 217, 216, 242, 189, 120, 2, 28, 61, 82, 240, 201, 60, 166, 160, 3, 62, 185, 139, 63, 61, 11, 239, 223, 188, 42, 110, 204, 189, 128, 199, 60, 61, 135, 91, 185, 188, 209, 161, 2, 62, 39, 203, 18, 62, 188, 136, 50, 190, 20, 105, 51, 189, 107, 47, 24, 62, 141, 0, 47, 188, 163, 53, 15, 191, 170, 205, 61, 190, 191, 27, 180, 61, 136, 104, 212, 189, 69, 220, 236, 188, 137, 228, 116, 191, 190, 244, 3, 191, 113, 100, 193, 188, 130, 144, 63, 62, 163, 200, 106, 61, 135, 15, 204, 189, 192, 210, 208, 189, 215, 95, 108, 190, 163, 160, 168, 62, 128, 110, 43, 190, 100, 173, 5, 190, 81, 192, 229, 62, 81, 66, 163, 190, 13, 167, 221, 61, 229, 200, 63, 190, 6, 124, 109, 61, 212, 143, 135, 62, 133, 53, 28, 190, 254, 7, 184, 190, 134, 106, 191, 190, 171, 42, 189, 188, 95, 7, 178, 188, 192, 83, 92, 62, 217, 206, 162, 61, 250, 238, 62, 190, 253, 24, 15, 62, 201, 71, 5, 61, 165, 160, 45, 190, 153, 85, 230, 189, 56, 47, 143, 60, 232, 66, 130, 187, 104, 218, 74, 61, 185, 182, 203, 61, 151, 54, 178, 188, 100, 32, 223, 189, 76, 6, 60, 62, 215, 146, 86, 190, 57, 1, 28, 189, 184, 58, 150, 190, 216, 38, 24, 190, 65, 224, 52, 190, 170, 9, 215, 61, 156, 165, 159, 61, 58, 13, 42, 190, 248, 6, 42, 190, 91, 42, 244, 190, 98, 190, 219, 61, 33, 253, 177, 61, 239, 138, 179, 61, 232, 230, 47, 190, 209, 201, 8, 62, 19, 95, 68, 189, 203, 46, 66, 187, 38, 14, 148, 61, 210, 220, 21, 189, 250, 214, 214, 62, 18, 141, 142, 61, 80, 239, 175, 191, 42, 221, 226, 61, 170, 253, 137, 62, 207, 139, 217, 190, 135, 126, 207, 62, 247, 169, 106, 190, 171, 135, 129, 190, 83, 176, 7, 62, 98, 65, 196, 61, 216, 181, 185, 62, 65, 157, 152, 190, 96, 154, 8, 63, 244, 253, 181, 61, 172, 254, 188, 62, 104, 87, 168, 61, 128, 149, 23, 191, 114, 52, 91, 190, 246, 33, 49, 190, 222, 59, 169, 190, 241, 65, 151, 62, 253, 42, 225, 189, 80, 67, 136, 62, 224, 197, 239, 190, 141, 118, 56, 191, 89, 246, 96, 191, 164, 244, 158, 190, 131, 163, 214, 62, 237, 55, 166, 191, 24, 241, 21, 63, 122, 206, 243, 190, 113, 29, 172, 58, 226, 149, 175, 191, 219, 183, 52, 190, 146, 119, 39, 62, 91, 206, 227, 189, 153, 236, 59, 62, 185, 176, 152, 62, 128, 124, 116, 59, 194, 196, 121, 62, 64, 11, 49, 189, 149, 78, 222, 190, 23, 166, 51, 189, 194, 44, 176, 190, 75, 255, 104, 190, 45, 241, 174, 188, 15, 230, 85, 62, 212, 127, 200, 190, 22, 200, 102, 60, 181, 139, 68, 62, 49, 118, 187, 61, 84, 174, 176, 189, 192, 96, 157, 188, 208, 27, 141, 190, 206, 117, 70, 62, 159, 151, 214, 189, 53, 201, 66, 188, 173, 156, 51, 62, 130, 102, 60, 190, 224, 48, 41, 187, 238, 253, 25, 189, 183, 112, 196, 191, 140, 203, 40, 62, 117, 200, 243, 190, 175, 160, 145, 189, 96, 148, 20, 62, 7, 57, 0, 189, 96, 73, 22, 62, 195, 24, 128, 62, 193, 245, 52, 62, 198, 113, 56, 61, 75, 32, 203, 190, 93, 154, 83, 190, 49, 236, 222, 61, 86, 4, 93, 62, 151, 231, 45, 191, 195, 145, 134, 190, 114, 161, 136, 190, 171, 205, 172, 62, 47, 250, 138, 62, 170, 91, 221, 190, 227, 233, 13, 63, 142, 30, 161, 188, 0, 199, 7, 191, 37, 166, 207, 190, 80, 42, 63, 61, 163, 203, 62, 62, 194, 169, 131, 191, 25, 59, 11, 190, 182, 143, 112, 190, 158, 211, 58, 191, 213, 32, 141, 188, 151, 189, 51, 190, 25, 149, 23, 62, 167, 216, 220, 190, 230, 211, 230, 190, 135, 209, 14, 62, 46, 131, 145, 190, 255, 76, 154, 61, 63, 29, 204, 189, 132, 109, 93, 190, 113, 143, 136, 62, 78, 6, 212, 188, 13, 225, 13, 62, 112, 61, 215, 190, 226, 237, 240, 61, 151, 102, 101, 189, 119, 131, 187, 190, 210, 151, 206, 189, 84, 90, 229, 189, 143, 12, 10, 63, 121, 217, 4, 59, 155, 41, 105, 187, 226, 0, 170, 190, 169, 139, 167, 60, 116, 140, 203, 62, 217, 47, 64, 190, 63, 104, 51, 187, 208, 122, 116, 189, 58, 200, 129, 189, 212, 200, 7, 190, 171, 23, 140, 189, 30, 211, 41, 188, 124, 67, 84, 190, 224, 4, 169, 190, 223, 180, 152, 62, 56, 209, 92, 61, 255, 146, 60, 58, 31, 118, 244, 60, 34, 53, 36, 190, 99, 172, 46, 190, 58, 63, 22, 190, 53, 30, 53, 63, 36, 241, 38, 188, 77, 252, 178, 189, 85, 236, 244, 61, 70, 137, 109, 190, 32, 245, 209, 190, 188, 111, 180, 62, 153, 238, 92, 61, 208, 21, 245, 189, 5, 20, 141, 190, 145, 103, 22, 190, 189, 242, 91, 191, 14, 147, 228, 190, 201, 39, 34, 62, 81, 134, 8, 62, 206, 226, 168, 61, 60, 71, 131, 189, 93, 122, 173, 61, 43, 239, 116, 61, 50, 161, 87, 62, 250, 142, 241, 190, 138, 98, 32, 189, 211, 133, 235, 189, 120, 132, 54, 190, 164, 111, 221, 189, 11, 206, 249, 62, 217, 42, 163, 61, 147, 179, 114, 62, 35, 160, 44, 62, 100, 152, 228, 191, 137, 156, 253, 61, 158, 23, 30, 60, 124, 24, 26, 62, 127, 172, 141, 61, 38, 252, 228, 190, 127, 132, 194, 190, 74, 145, 94, 62, 253, 24, 34, 62, 77, 184, 117, 62, 13, 96, 30, 191, 4, 14, 21, 63, 167, 222, 23, 191, 138, 201, 187, 62, 207, 196, 76, 62, 31, 231, 124, 191, 182, 188, 15, 63, 41, 120, 48, 60, 10, 35, 20, 191, 98, 181, 230, 62, 244, 5, 82, 62, 156, 141, 98, 62, 37, 179, 219, 190, 36, 149, 28, 191, 75, 8, 214, 190, 245, 93, 139, 190, 62, 161, 0, 63, 182, 78, 232, 191, 111, 133, 211, 62, 29, 31, 176, 190, 210, 55, 160, 61, 34, 5, 195, 189, 178, 25, 174, 189, 243, 44, 237, 61, 200, 225, 14, 62, 168, 69, 56, 190, 160, 63, 153, 61, 90, 100, 160, 190, 231, 56, 48, 62, 103, 93, 176, 62, 104, 49, 119, 61, 114, 16, 106, 62, 196, 218, 232, 190, 65, 3, 208, 61, 182, 195, 46, 62, 182, 243, 191, 61, 81, 109, 92, 62, 135, 161, 233, 188, 244, 230, 9, 190, 216, 2, 226, 189, 208, 116, 112, 188, 48, 69, 129, 61, 226, 61, 38, 62, 63, 10, 57, 190, 19, 161, 238, 188, 89, 207, 5, 190, 194, 131, 15, 62, 65, 107, 52, 190, 168, 99, 24, 62, 158, 118, 28, 189, 206, 128, 239, 62, 236, 130, 231, 61, 155, 187, 131, 190, 209, 129, 134, 62, 76, 204, 176, 189, 131, 195, 111, 190, 184, 249, 140, 189, 226, 109, 132, 190, 128, 57, 83, 189, 220, 138, 145, 190, 37, 232, 107, 62, 66, 9, 167, 190, 15, 174, 1, 189, 85, 20, 247, 60, 196, 97, 197, 190, 166, 250, 170, 60, 184, 91, 130, 190, 245, 19, 147, 189, 118, 26, 101, 190, 169, 148, 66, 62, 197, 39, 147, 190, 93, 23, 237, 189, 74, 211, 25, 62, 44, 52, 0, 190, 20, 157, 145, 62, 23, 8, 80, 190, 241, 224, 89, 61, 235, 1, 88, 62, 163, 83, 233, 61, 55, 135, 184, 189, 84, 159, 120, 189, 213, 129, 33, 62, 7, 142, 163, 62, 185, 91, 188, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 59, 141, 61, 166, 46, 110, 190, 122, 91, 31, 190, 12, 160, 109, 62, 19, 1, 39, 62, 241, 7, 24, 62, 254, 171, 26, 62, 110, 74, 95, 61, 246, 174, 74, 62, 54, 149, 202, 189, 183, 81, 88, 189, 197, 37, 1, 190, 149, 38, 22, 189, 36, 129, 97, 62, 48, 238, 95, 62, 125, 77, 102, 62, 221, 121, 67, 189, 237, 253, 34, 190, 127, 73, 61, 62, 181, 3, 255, 61, 116, 93, 26, 61, 168, 243, 248, 189, 235, 129, 191, 188, 160, 49, 176, 190, 126, 234, 180, 61, 6, 211, 188, 190, 82, 253, 162, 61, 214, 134, 198, 62, 132, 153, 223, 61, 235, 82, 22, 62, 216, 244, 140, 61, 43, 135, 110, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 104, 219, 187, 15, 112, 0, 191, 25, 142, 224, 61, 131, 252, 3, 63, 189, 151, 135, 59, 37, 236, 125, 62, 147, 1, 143, 189, 227, 107, 219, 190, 196, 108, 230, 61, 152, 32, 130, 189, 195, 227, 181, 61, 212, 96, 221, 190, 53, 15, 153, 189, 14, 193, 217, 62, 100, 184, 239, 62, 33, 17, 134, 191, 225, 228, 21, 191, 102, 181, 10, 191, 44, 36, 131, 63, 187, 251, 14, 63, 85, 211, 164, 63, 1, 127, 237, 61, 64, 76, 126, 60, 188, 89, 230, 189, 77, 249, 71, 191, 6, 237, 46, 191, 23, 164, 35, 63, 90, 16, 212, 187, 148, 225, 186, 190, 77, 53, 208, 191, 105, 75, 136, 187, 89, 103, 80, 61, 9, 155, 47, 63, 8, 111, 105, 62, 204, 49, 212, 187, 125, 96, 12, 190, 94, 0, 14, 191, 247, 183, 163, 189, 229, 1, 194, 190, 201, 50, 78, 190, 156, 221, 17, 190, 233, 100, 120, 61, 22, 95, 178, 60, 169, 81, 20, 190, 248, 149, 253, 61, 43, 192, 140, 190, 29, 72, 159, 188, 163, 151, 200, 189, 136, 245, 95, 190, 51, 105, 122, 190, 42, 61, 155, 62, 175, 14, 136, 61, 124, 164, 137, 62, 245, 210, 10, 190, 149, 141, 206, 62, 76, 201, 58, 61, 85, 153, 233, 61, 167, 21, 178, 61, 12, 103, 125, 63, 136, 243, 34, 191, 13, 24, 143, 62, 231, 48, 162, 62, 144, 221, 82, 190, 50, 21, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 16, 50, 189, 64, 71, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {159, 206, 131, 191, 243, 128, 180, 63, 93, 94, 114, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {18, 8, 107, 64, 78, 200, 176, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0014/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}