// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 129, 248, 62, 240, 83, 12, 191, 135, 109, 210, 62, 54, 27, 21, 191, 234, 63, 59, 61, 231, 183, 27, 190, 18, 178, 222, 190, 65, 140, 211, 63, 58, 42, 192, 62, 157, 138, 58, 62, 51, 134, 113, 63, 12, 255, 233, 62, 7, 168, 70, 191, 202, 157, 123, 191, 225, 70, 43, 191, 65, 56, 146, 62, 248, 41, 132, 63, 52, 173, 175, 62, 60, 189, 41, 63, 208, 35, 1, 63, 106, 222, 4, 62, 113, 10, 21, 190, 155, 207, 21, 62, 231, 92, 184, 190, 58, 90, 28, 63, 178, 49, 44, 191, 9, 154, 116, 62, 46, 92, 128, 190, 201, 212, 31, 60, 125, 145, 244, 190, 168, 30, 218, 61, 14, 137, 219, 62, 43, 155, 201, 190, 52, 96, 74, 189, 191, 153, 157, 191, 48, 136, 34, 190, 19, 145, 79, 63, 72, 200, 218, 190, 17, 197, 176, 190, 12, 126, 170, 190, 60, 89, 155, 190, 59, 32, 147, 62, 26, 194, 190, 190, 63, 108, 45, 63, 0, 111, 139, 62, 248, 47, 9, 63, 191, 250, 128, 63, 123, 123, 45, 62, 236, 220, 55, 190, 28, 227, 97, 63, 207, 233, 86, 190, 170, 50, 69, 190, 93, 180, 105, 63, 101, 73, 11, 63, 1, 228, 84, 63, 74, 158, 117, 63, 254, 50, 217, 62, 221, 93, 137, 62, 123, 131, 160, 189, 95, 169, 2, 61, 28, 255, 89, 63, 47, 221, 116, 191, 32, 205, 65, 190, 130, 236, 135, 190, 18, 183, 71, 191, 110, 15, 3, 63, 100, 240, 20, 191, 93, 92, 245, 61, 229, 67, 177, 61, 197, 201, 221, 62, 130, 47, 145, 63, 226, 241, 118, 62, 69, 111, 10, 63, 39, 2, 160, 191, 111, 5, 198, 190, 231, 207, 140, 190, 44, 174, 46, 62, 234, 48, 29, 63, 188, 25, 236, 61, 182, 216, 99, 191, 194, 117, 71, 62, 74, 190, 83, 62, 59, 160, 66, 191, 240, 53, 240, 190, 20, 218, 169, 189, 234, 86, 188, 190, 14, 241, 92, 62, 74, 202, 226, 190, 91, 119, 187, 63, 153, 104, 190, 62, 20, 56, 251, 190, 134, 177, 211, 191, 19, 60, 136, 190, 35, 69, 147, 62, 197, 82, 46, 191, 95, 196, 92, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 132, 177, 190, 226, 167, 115, 63, 30, 88, 106, 190, 111, 217, 130, 188, 164, 166, 19, 191, 138, 167, 186, 190, 10, 15, 225, 62, 152, 122, 160, 189, 42, 22, 149, 62, 184, 155, 123, 188, 157, 170, 137, 62, 75, 72, 50, 62, 147, 125, 60, 191, 124, 139, 76, 190, 60, 42, 186, 190, 27, 190, 102, 62, 21, 129, 218, 62, 32, 211, 169, 190, 136, 158, 93, 191, 79, 34, 244, 190, 165, 157, 38, 62, 137, 127, 217, 190, 208, 191, 13, 63, 236, 169, 129, 189, 168, 236, 98, 190, 149, 233, 20, 191, 202, 27, 168, 190, 10, 174, 182, 190, 201, 241, 212, 190, 243, 203, 110, 190, 150, 225, 53, 190, 94, 244, 100, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 147, 216, 61, 216, 23, 53, 190, 126, 253, 34, 62, 177, 107, 159, 190, 198, 98, 207, 190, 158, 49, 129, 62, 102, 158, 250, 61, 159, 163, 159, 189, 106, 228, 204, 188, 152, 228, 235, 189, 71, 68, 114, 188, 82, 44, 236, 61, 187, 147, 61, 62, 153, 222, 65, 190, 71, 27, 90, 189, 120, 208, 3, 190, 103, 160, 28, 191, 41, 204, 80, 190, 194, 242, 18, 62, 101, 196, 175, 61, 207, 122, 55, 62, 28, 193, 219, 61, 45, 207, 13, 190, 167, 106, 27, 190, 24, 183, 245, 62, 210, 230, 3, 59, 189, 32, 201, 60, 141, 235, 248, 61, 192, 5, 54, 188, 62, 4, 102, 60, 167, 178, 180, 190, 38, 145, 8, 62, 154, 48, 33, 190, 142, 74, 17, 190, 35, 54, 71, 190, 247, 111, 123, 190, 6, 76, 81, 191, 83, 45, 145, 190, 103, 241, 196, 190, 53, 154, 55, 190, 107, 60, 226, 59, 53, 88, 47, 190, 36, 49, 156, 190, 37, 87, 131, 61, 55, 17, 224, 189, 73, 32, 233, 61, 51, 104, 150, 189, 20, 94, 158, 190, 250, 94, 221, 190, 0, 221, 214, 61, 121, 46, 123, 190, 251, 111, 160, 61, 146, 50, 234, 189, 11, 127, 162, 61, 7, 142, 13, 61, 232, 83, 172, 190, 167, 1, 73, 60, 14, 220, 193, 61, 209, 144, 0, 62, 55, 176, 214, 61, 65, 67, 114, 190, 21, 49, 162, 189, 248, 129, 4, 60, 170, 253, 180, 189, 24, 84, 36, 62, 31, 104, 39, 190, 97, 47, 41, 59, 79, 113, 138, 60, 17, 78, 90, 189, 172, 103, 120, 189, 73, 164, 187, 187, 136, 12, 212, 61, 200, 67, 180, 189, 153, 26, 181, 61, 200, 140, 85, 189, 109, 19, 89, 190, 167, 13, 147, 61, 219, 191, 127, 56, 127, 124, 206, 189, 102, 23, 221, 60, 211, 240, 105, 190, 11, 47, 47, 61, 210, 130, 36, 62, 13, 80, 26, 190, 16, 227, 179, 61, 167, 200, 18, 190, 234, 246, 243, 188, 194, 54, 14, 190, 9, 82, 166, 189, 177, 59, 69, 189, 107, 171, 240, 61, 201, 170, 27, 62, 183, 59, 88, 62, 38, 108, 118, 61, 239, 195, 162, 189, 175, 120, 54, 190, 12, 55, 187, 62, 23, 21, 133, 62, 65, 135, 12, 61, 66, 95, 118, 190, 87, 200, 176, 189, 22, 217, 97, 191, 58, 151, 215, 62, 37, 36, 72, 62, 34, 154, 82, 62, 129, 133, 135, 62, 61, 221, 180, 62, 181, 217, 1, 190, 130, 112, 40, 61, 210, 237, 203, 190, 80, 111, 53, 191, 99, 236, 136, 190, 164, 44, 178, 62, 232, 246, 234, 190, 37, 120, 42, 191, 86, 69, 137, 189, 165, 201, 17, 62, 74, 53, 198, 61, 60, 84, 149, 60, 244, 224, 37, 191, 154, 146, 158, 189, 205, 137, 223, 188, 104, 60, 102, 62, 100, 19, 70, 190, 138, 194, 150, 61, 35, 202, 223, 189, 135, 57, 37, 191, 8, 238, 94, 62, 112, 251, 95, 190, 3, 107, 220, 189, 61, 17, 3, 190, 214, 233, 215, 188, 48, 230, 146, 190, 149, 225, 162, 190, 28, 143, 106, 189, 216, 172, 232, 190, 90, 209, 105, 62, 195, 10, 21, 191, 45, 16, 188, 189, 138, 34, 193, 190, 249, 169, 19, 191, 40, 201, 223, 188, 226, 24, 37, 190, 90, 205, 55, 61, 4, 128, 190, 61, 161, 98, 160, 61, 209, 33, 230, 190, 58, 200, 21, 62, 177, 225, 173, 62, 143, 19, 224, 61, 119, 169, 50, 62, 80, 233, 217, 189, 221, 215, 196, 190, 46, 42, 160, 189, 39, 40, 58, 62, 188, 99, 10, 191, 7, 229, 208, 61, 120, 196, 9, 189, 81, 234, 1, 191, 30, 28, 223, 61, 140, 197, 37, 189, 244, 23, 230, 60, 51, 38, 126, 61, 87, 140, 217, 189, 87, 169, 160, 190, 62, 112, 153, 60, 91, 62, 213, 189, 18, 51, 182, 61, 193, 194, 33, 190, 253, 45, 9, 191, 42, 86, 116, 189, 216, 235, 142, 62, 137, 22, 81, 62, 207, 160, 209, 61, 109, 49, 4, 190, 55, 137, 81, 189, 239, 165, 110, 190, 117, 221, 67, 62, 114, 158, 190, 190, 161, 54, 250, 61, 194, 159, 24, 63, 185, 219, 59, 190, 34, 111, 221, 189, 142, 177, 61, 190, 173, 4, 79, 62, 38, 36, 74, 62, 173, 34, 218, 60, 183, 250, 126, 61, 211, 153, 176, 190, 161, 236, 14, 62, 1, 89, 55, 190, 149, 165, 142, 62, 120, 13, 166, 61, 27, 122, 148, 61, 230, 201, 53, 190, 225, 189, 61, 62, 188, 15, 124, 189, 164, 187, 182, 61, 120, 17, 45, 62, 231, 120, 80, 190, 62, 251, 238, 61, 97, 45, 163, 61, 231, 65, 169, 61, 116, 251, 51, 191, 119, 198, 25, 191, 166, 58, 127, 189, 107, 121, 44, 189, 148, 227, 68, 62, 76, 35, 213, 62, 26, 75, 12, 62, 137, 245, 67, 190, 95, 183, 15, 62, 57, 211, 103, 189, 146, 209, 124, 62, 92, 248, 86, 62, 195, 92, 165, 61, 196, 131, 32, 191, 13, 19, 68, 190, 194, 125, 76, 190, 230, 112, 25, 190, 154, 138, 78, 61, 132, 27, 127, 190, 95, 58, 9, 191, 186, 255, 87, 190, 17, 245, 174, 187, 209, 105, 204, 190, 42, 82, 26, 191, 156, 105, 37, 62, 91, 104, 37, 190, 37, 77, 253, 61, 214, 124, 147, 62, 248, 184, 22, 189, 164, 117, 10, 62, 243, 245, 8, 190, 77, 6, 116, 189, 239, 224, 171, 189, 182, 124, 217, 187, 58, 146, 149, 190, 43, 148, 0, 190, 227, 28, 2, 61, 230, 10, 10, 191, 111, 1, 83, 190, 195, 181, 212, 62, 134, 40, 179, 189, 45, 29, 92, 62, 210, 153, 78, 189, 32, 129, 115, 190, 12, 45, 109, 61, 162, 4, 193, 62, 255, 82, 153, 190, 46, 6, 109, 60, 109, 138, 30, 62, 2, 203, 47, 190, 62, 219, 161, 190, 35, 138, 133, 62, 36, 63, 1, 60, 6, 57, 17, 190, 200, 100, 80, 62, 105, 98, 22, 62, 249, 92, 161, 190, 63, 164, 91, 190, 49, 56, 162, 190, 102, 140, 147, 189, 9, 112, 233, 61, 78, 72, 43, 62, 46, 179, 225, 189, 47, 125, 158, 61, 136, 196, 52, 190, 195, 223, 189, 189, 182, 196, 63, 189, 152, 190, 131, 190, 177, 141, 60, 190, 214, 243, 159, 61, 83, 97, 201, 189, 135, 12, 223, 190, 233, 124, 231, 61, 113, 39, 148, 62, 91, 198, 43, 190, 243, 2, 140, 62, 178, 2, 189, 190, 107, 170, 241, 188, 239, 147, 123, 62, 86, 48, 117, 62, 70, 201, 82, 61, 41, 110, 62, 190, 35, 142, 8, 62, 83, 119, 100, 60, 97, 41, 201, 62, 50, 17, 178, 189, 32, 117, 242, 58, 225, 141, 16, 189, 76, 31, 63, 61, 101, 147, 204, 189, 123, 198, 28, 62, 203, 243, 236, 61, 157, 146, 219, 61, 50, 108, 16, 190, 209, 204, 51, 190, 68, 71, 248, 61, 255, 208, 172, 188, 134, 107, 108, 61, 17, 188, 136, 189, 218, 65, 28, 61, 253, 3, 35, 190, 239, 121, 224, 189, 48, 153, 49, 190, 253, 51, 165, 185, 84, 205, 239, 61, 210, 76, 17, 61, 105, 117, 209, 61, 42, 177, 191, 189, 248, 172, 233, 189, 69, 175, 11, 190, 35, 85, 0, 62, 178, 41, 173, 189, 228, 67, 137, 189, 174, 238, 130, 189, 205, 246, 85, 60, 64, 199, 36, 61, 226, 158, 253, 61, 181, 66, 233, 189, 131, 58, 57, 190, 68, 228, 6, 189, 6, 209, 85, 188, 11, 104, 3, 189, 160, 252, 134, 189, 116, 246, 127, 59, 188, 121, 36, 62, 181, 220, 155, 61, 145, 56, 202, 60, 113, 28, 254, 189, 22, 141, 128, 188, 73, 224, 213, 189, 80, 69, 140, 190, 135, 37, 105, 60, 30, 198, 190, 61, 65, 134, 202, 189, 10, 228, 244, 189, 149, 21, 237, 189, 72, 213, 104, 61, 9, 250, 212, 189, 223, 46, 173, 61, 145, 63, 150, 189, 66, 142, 147, 189, 220, 53, 24, 190, 222, 162, 144, 189, 20, 121, 207, 189, 145, 9, 49, 190, 159, 192, 132, 61, 57, 48, 156, 189, 173, 191, 85, 61, 61, 50, 217, 189, 254, 45, 49, 190, 16, 114, 124, 190, 188, 46, 165, 188, 32, 226, 221, 59, 59, 227, 172, 190, 176, 10, 137, 188, 121, 102, 85, 189, 95, 157, 54, 62, 187, 111, 43, 61, 8, 70, 163, 189, 253, 96, 187, 189, 84, 164, 178, 188, 150, 44, 173, 62, 9, 70, 47, 62, 141, 86, 201, 189, 166, 121, 55, 190, 94, 111, 233, 189, 74, 226, 150, 62, 132, 151, 78, 62, 82, 146, 195, 189, 199, 24, 39, 61, 220, 125, 197, 61, 175, 238, 216, 61, 55, 184, 193, 189, 254, 226, 203, 62, 52, 3, 178, 62, 216, 211, 155, 62, 88, 169, 115, 62, 139, 73, 18, 62, 18, 47, 47, 62, 84, 255, 21, 190, 230, 114, 224, 62, 61, 173, 136, 61, 184, 146, 146, 190, 21, 5, 4, 62, 193, 153, 38, 61, 144, 1, 51, 190, 28, 77, 53, 190, 254, 237, 50, 60, 89, 69, 209, 188, 236, 74, 11, 190, 94, 118, 164, 189, 222, 114, 26, 61, 45, 184, 43, 190, 50, 67, 171, 61, 150, 68, 16, 62, 125, 199, 118, 189, 145, 37, 103, 61, 124, 181, 176, 189, 147, 58, 222, 60, 22, 247, 204, 188, 235, 30, 77, 189, 111, 213, 173, 61, 39, 238, 172, 61, 188, 13, 10, 60, 125, 162, 62, 190, 104, 209, 154, 189, 109, 47, 36, 60, 89, 10, 189, 60, 205, 78, 140, 61, 105, 131, 23, 190, 2, 219, 49, 190, 153, 167, 232, 188, 100, 224, 251, 189, 138, 134, 211, 190, 165, 66, 74, 190, 54, 235, 1, 62, 45, 57, 149, 187, 167, 254, 57, 191, 207, 113, 168, 61, 209, 205, 100, 62, 92, 105, 174, 189, 7, 197, 19, 190, 59, 67, 104, 190, 77, 60, 191, 190, 23, 79, 111, 190, 81, 123, 122, 189, 117, 127, 75, 189, 123, 0, 185, 61, 208, 119, 207, 62, 236, 55, 168, 189, 230, 225, 117, 62, 125, 147, 114, 62, 176, 139, 29, 62, 58, 104, 77, 191, 180, 64, 225, 190, 93, 220, 203, 61, 185, 141, 171, 62, 163, 97, 128, 190, 20, 127, 44, 62, 95, 84, 95, 190, 104, 44, 122, 190, 147, 22, 150, 188, 83, 193, 249, 60, 42, 128, 82, 190, 235, 3, 16, 190, 123, 125, 113, 188, 118, 224, 27, 61, 74, 127, 153, 62, 171, 45, 153, 190, 27, 27, 228, 190, 208, 69, 214, 190, 14, 3, 202, 61, 71, 233, 134, 62, 162, 184, 65, 61, 8, 210, 100, 190, 200, 8, 160, 188, 165, 80, 3, 190, 253, 52, 235, 62, 42, 210, 126, 62, 22, 252, 126, 190, 47, 24, 21, 190, 114, 183, 70, 189, 104, 14, 245, 189, 35, 160, 58, 191, 25, 180, 25, 59, 33, 122, 226, 62, 105, 153, 74, 188, 173, 143, 75, 62, 32, 239, 240, 190, 122, 107, 213, 62, 13, 213, 152, 189, 137, 180, 172, 62, 149, 8, 117, 62, 126, 90, 58, 190, 63, 158, 147, 62, 242, 153, 92, 190, 121, 234, 149, 62, 99, 136, 135, 62, 125, 80, 32, 62, 147, 67, 101, 191, 12, 151, 159, 62, 11, 92, 9, 190, 137, 240, 97, 190, 91, 29, 115, 62, 118, 163, 230, 190, 93, 54, 218, 189, 107, 19, 28, 62, 99, 25, 136, 62, 119, 250, 210, 190, 183, 156, 129, 191, 28, 4, 71, 62, 152, 146, 202, 62, 250, 108, 30, 62, 131, 241, 11, 63, 85, 157, 125, 190, 219, 146, 10, 191, 104, 212, 40, 62, 111, 37, 172, 190, 217, 200, 254, 62, 150, 126, 3, 61, 50, 26, 141, 62, 25, 63, 111, 191, 73, 16, 38, 191, 83, 161, 51, 191, 211, 208, 8, 191, 121, 178, 14, 63, 117, 224, 83, 191, 201, 132, 251, 189, 86, 158, 205, 190, 24, 32, 123, 61, 43, 84, 194, 191, 135, 208, 249, 188, 241, 189, 20, 62, 117, 179, 248, 189, 218, 147, 228, 189, 202, 232, 11, 62, 122, 209, 100, 189, 120, 186, 89, 62, 78, 109, 19, 190, 103, 162, 175, 190, 237, 41, 189, 189, 20, 207, 20, 190, 87, 53, 156, 61, 15, 177, 133, 189, 51, 124, 18, 62, 6, 224, 60, 62, 12, 224, 182, 188, 66, 61, 36, 62, 180, 131, 127, 189, 192, 125, 0, 191, 120, 222, 6, 62, 76, 85, 120, 190, 6, 85, 65, 62, 185, 50, 174, 189, 210, 189, 49, 62, 17, 179, 74, 62, 25, 69, 160, 60, 179, 11, 52, 188, 127, 147, 253, 60, 148, 244, 169, 191, 143, 14, 105, 62, 8, 221, 81, 188, 249, 130, 144, 191, 184, 147, 88, 190, 226, 114, 190, 188, 44, 3, 7, 190, 145, 10, 145, 61, 236, 77, 5, 190, 203, 130, 49, 190, 153, 177, 208, 187, 5, 249, 79, 189, 176, 4, 106, 190, 220, 69, 156, 190, 45, 209, 4, 189, 53, 150, 228, 61, 37, 56, 185, 61, 122, 65, 227, 190, 147, 4, 235, 189, 27, 114, 24, 188, 76, 179, 24, 61, 232, 234, 229, 188, 22, 34, 4, 191, 225, 131, 74, 62, 44, 122, 76, 61, 222, 165, 152, 190, 248, 115, 75, 61, 92, 255, 102, 61, 5, 2, 178, 62, 87, 86, 242, 189, 18, 87, 98, 62, 117, 39, 138, 190, 49, 86, 145, 191, 149, 147, 188, 61, 78, 8, 92, 189, 233, 67, 234, 59, 114, 95, 216, 62, 134, 193, 72, 190, 234, 1, 34, 191, 138, 45, 135, 190, 239, 161, 33, 189, 216, 73, 95, 63, 227, 192, 233, 61, 108, 110, 91, 61, 155, 25, 163, 190, 218, 173, 92, 190, 224, 226, 222, 62, 219, 131, 227, 188, 209, 153, 43, 190, 245, 153, 7, 191, 4, 31, 181, 61, 11, 68, 244, 62, 238, 84, 114, 190, 40, 7, 201, 189, 175, 44, 51, 63, 41, 187, 203, 189, 11, 19, 78, 62, 4, 29, 35, 191, 233, 95, 43, 190, 31, 17, 254, 62, 13, 67, 20, 61, 20, 69, 71, 191, 52, 15, 163, 190, 182, 26, 97, 62, 7, 93, 32, 191, 104, 189, 239, 59, 227, 206, 9, 61, 230, 81, 167, 62, 181, 64, 224, 189, 188, 124, 81, 190, 21, 64, 23, 191, 203, 161, 246, 190, 42, 155, 186, 189, 231, 206, 13, 62, 242, 77, 190, 61, 168, 239, 95, 191, 76, 243, 112, 188, 1, 94, 167, 60, 32, 225, 42, 190, 247, 21, 113, 62, 63, 77, 123, 190, 5, 141, 109, 190, 45, 207, 155, 189, 250, 36, 49, 190, 245, 73, 2, 191, 45, 107, 121, 61, 252, 116, 18, 63, 115, 215, 141, 189, 224, 70, 249, 61, 172, 176, 244, 190, 143, 79, 62, 62, 112, 216, 8, 61, 212, 15, 197, 62, 145, 250, 147, 190, 99, 237, 80, 190, 101, 125, 71, 189, 75, 210, 80, 190, 93, 0, 44, 62, 30, 226, 204, 189, 242, 193, 84, 62, 25, 232, 219, 62, 202, 220, 191, 190, 42, 15, 35, 62, 65, 24, 158, 190, 88, 49, 162, 189, 230, 135, 49, 190, 80, 196, 83, 190, 110, 205, 20, 62, 31, 127, 226, 189, 244, 80, 128, 62, 92, 39, 225, 190, 73, 169, 191, 190, 196, 204, 81, 191, 235, 57, 159, 189, 100, 30, 102, 61, 14, 63, 40, 190, 32, 177, 172, 189, 131, 103, 11, 62, 103, 18, 136, 191, 111, 167, 173, 190, 101, 250, 153, 62, 1, 22, 233, 189, 59, 51, 212, 190, 150, 241, 144, 190, 123, 38, 5, 189, 114, 114, 197, 190, 12, 117, 47, 190, 207, 134, 193, 61, 199, 238, 79, 62, 12, 205, 101, 190, 197, 75, 30, 189, 91, 167, 133, 189, 148, 235, 244, 188, 238, 240, 180, 189, 153, 34, 176, 188, 187, 110, 9, 190, 210, 43, 176, 188, 187, 85, 220, 189, 121, 222, 236, 189, 169, 214, 74, 60, 162, 144, 198, 59, 136, 169, 224, 188, 220, 117, 234, 189, 182, 48, 157, 189, 58, 246, 141, 61, 181, 74, 102, 61, 176, 81, 162, 61, 40, 182, 135, 189, 235, 29, 236, 61, 26, 190, 251, 189, 13, 24, 0, 190, 217, 216, 242, 189, 120, 2, 28, 61, 82, 240, 201, 60, 166, 160, 3, 62, 185, 139, 63, 61, 11, 239, 223, 188, 42, 110, 204, 189, 128, 199, 60, 61, 135, 91, 185, 188, 209, 161, 2, 62, 39, 203, 18, 62, 77, 82, 137, 190, 211, 51, 21, 189, 120, 228, 214, 61, 6, 204, 25, 189, 47, 49, 248, 190, 146, 70, 112, 190, 219, 105, 140, 61, 170, 239, 159, 189, 205, 158, 134, 189, 158, 78, 93, 191, 53, 34, 219, 190, 230, 87, 167, 188, 168, 23, 96, 62, 73, 248, 87, 61, 219, 236, 13, 190, 248, 200, 229, 189, 254, 92, 226, 189, 61, 189, 149, 62, 115, 69, 88, 190, 100, 173, 5, 190, 53, 243, 222, 62, 91, 24, 146, 190, 199, 210, 17, 61, 230, 195, 62, 190, 173, 185, 140, 61, 152, 87, 115, 62, 142, 138, 185, 189, 57, 146, 143, 190, 11, 239, 171, 190, 253, 164, 141, 189, 191, 104, 165, 59, 178, 78, 40, 62, 217, 206, 162, 61, 250, 238, 62, 190, 253, 24, 15, 62, 201, 71, 5, 61, 165, 160, 45, 190, 153, 85, 230, 189, 56, 47, 143, 60, 232, 66, 130, 187, 104, 218, 74, 61, 185, 182, 203, 61, 151, 54, 178, 188, 100, 32, 223, 189, 76, 6, 60, 62, 215, 146, 86, 190, 57, 1, 28, 189, 184, 58, 150, 190, 216, 38, 24, 190, 65, 224, 52, 190, 170, 9, 215, 61, 156, 165, 159, 61, 58, 13, 42, 190, 248, 6, 42, 190, 91, 42, 244, 190, 98, 190, 219, 61, 33, 253, 177, 61, 239, 138, 179, 61, 232, 230, 47, 190, 209, 201, 8, 62, 19, 95, 68, 189, 203, 46, 66, 187, 38, 14, 148, 61, 210, 220, 21, 189, 97, 123, 215, 62, 72, 178, 143, 61, 133, 252, 135, 191, 39, 23, 246, 61, 138, 135, 140, 62, 84, 254, 189, 190, 207, 29, 210, 62, 101, 5, 129, 190, 133, 76, 123, 190, 153, 6, 246, 61, 28, 85, 187, 61, 133, 221, 221, 62, 43, 178, 159, 190, 142, 134, 25, 63, 156, 141, 99, 62, 39, 188, 190, 62, 18, 205, 159, 61, 217, 22, 206, 190, 214, 128, 95, 190, 246, 33, 49, 190, 120, 192, 168, 190, 126, 140, 180, 62, 163, 50, 12, 61, 197, 52, 136, 62, 59, 65, 226, 190, 226, 93, 29, 191, 79, 111, 80, 191, 167, 112, 163, 190, 210, 132, 213, 62, 86, 128, 101, 191, 110, 21, 34, 63, 46, 28, 239, 190, 204, 188, 173, 189, 17, 68, 155, 191, 254, 176, 16, 190, 155, 235, 26, 62, 91, 206, 227, 189, 13, 155, 49, 62, 41, 255, 139, 62, 128, 124, 116, 59, 30, 74, 56, 62, 64, 11, 49, 189, 58, 204, 85, 190, 128, 245, 97, 189, 168, 108, 41, 61, 127, 249, 90, 190, 226, 35, 174, 59, 57, 176, 87, 62, 149, 41, 106, 190, 246, 180, 67, 60, 205, 45, 249, 61, 49, 118, 187, 61, 131, 40, 19, 190, 50, 2, 143, 188, 118, 4, 113, 190, 124, 52, 72, 62, 162, 99, 204, 189, 218, 216, 123, 188, 197, 234, 233, 61, 130, 102, 60, 190, 85, 120, 202, 60, 208, 86, 22, 187, 154, 230, 128, 191, 130, 137, 186, 61, 4, 45, 5, 191, 69, 238, 213, 189, 235, 226, 253, 60, 60, 192, 175, 189, 106, 15, 77, 60, 49, 121, 13, 62, 125, 59, 94, 62, 95, 137, 154, 188, 67, 150, 188, 190, 116, 30, 138, 190, 67, 156, 204, 61, 175, 131, 232, 61, 150, 241, 30, 191, 224, 76, 189, 190, 137, 186, 131, 190, 198, 151, 184, 62, 161, 255, 122, 62, 142, 117, 6, 191, 242, 184, 225, 62, 142, 30, 161, 188, 26, 203, 215, 190, 52, 150, 208, 190, 215, 185, 244, 189, 226, 196, 63, 62, 218, 152, 101, 191, 36, 71, 82, 190, 60, 71, 130, 190, 108, 107, 73, 191, 213, 32, 141, 188, 229, 37, 160, 190, 35, 63, 142, 189, 92, 92, 214, 190, 8, 161, 213, 190, 154, 80, 241, 61, 67, 152, 132, 190, 247, 121, 162, 61, 231, 15, 242, 189, 191, 47, 24, 190, 1, 74, 134, 62, 234, 179, 13, 60, 191, 199, 235, 61, 48, 165, 193, 190, 15, 102, 238, 61, 125, 16, 7, 190, 214, 213, 201, 190, 230, 159, 19, 190, 231, 250, 41, 60, 112, 240, 9, 63, 89, 86, 222, 59, 183, 246, 160, 61, 229, 75, 154, 190, 169, 139, 167, 60, 200, 184, 187, 62, 122, 119, 123, 190, 54, 235, 189, 187, 23, 251, 136, 189, 223, 32, 17, 190, 195, 7, 2, 190, 112, 226, 6, 190, 117, 97, 79, 189, 223, 94, 145, 190, 54, 75, 143, 190, 153, 234, 85, 62, 61, 52, 207, 60, 193, 224, 35, 188, 139, 215, 52, 61, 228, 28, 231, 189, 179, 115, 151, 190, 139, 132, 7, 190, 51, 202, 243, 62, 253, 73, 44, 189, 198, 119, 216, 189, 3, 49, 251, 61, 174, 158, 114, 190, 75, 199, 158, 190, 202, 135, 187, 62, 0, 21, 23, 62, 243, 24, 12, 60, 35, 236, 27, 190, 98, 81, 79, 190, 131, 98, 43, 191, 126, 8, 171, 190, 188, 181, 35, 190, 81, 134, 8, 62, 50, 176, 177, 61, 143, 148, 55, 61, 247, 18, 60, 62, 29, 36, 39, 190, 49, 186, 106, 62, 140, 9, 182, 190, 223, 195, 231, 60, 174, 110, 12, 190, 212, 255, 181, 189, 48, 85, 132, 188, 181, 129, 228, 62, 73, 222, 174, 61, 165, 148, 10, 62, 71, 41, 45, 62, 177, 74, 187, 191, 122, 8, 61, 62, 213, 86, 76, 61, 2, 80, 81, 62, 176, 163, 155, 61, 236, 124, 230, 190, 60, 124, 184, 190, 63, 153, 94, 62, 98, 161, 17, 62, 14, 94, 88, 62, 47, 216, 27, 191, 116, 142, 255, 62, 126, 111, 214, 190, 65, 243, 192, 62, 24, 74, 54, 62, 186, 43, 55, 191, 5, 187, 32, 63, 41, 120, 48, 60, 170, 24, 26, 191, 57, 188, 184, 62, 28, 27, 137, 62, 17, 160, 98, 62, 79, 15, 213, 190, 83, 232, 3, 191, 226, 61, 28, 191, 98, 187, 131, 190, 204, 149, 205, 62, 196, 5, 173, 191, 48, 19, 230, 62, 97, 198, 178, 190, 173, 181, 155, 61, 74, 38, 55, 189, 200, 79, 125, 189, 151, 53, 243, 61, 195, 38, 60, 62, 166, 151, 72, 190, 123, 11, 195, 61, 128, 140, 138, 190, 223, 120, 56, 62, 176, 39, 202, 62, 87, 157, 176, 61, 30, 195, 128, 62, 101, 175, 236, 190, 163, 52, 228, 61, 138, 69, 59, 62, 236, 31, 236, 61, 199, 48, 119, 62, 56, 20, 143, 188, 3, 114, 62, 190, 216, 2, 226, 189, 254, 199, 140, 187, 189, 117, 64, 61, 198, 124, 120, 62, 97, 22, 45, 190, 125, 138, 24, 189, 89, 25, 12, 190, 65, 205, 196, 61, 141, 106, 35, 190, 111, 227, 252, 61, 65, 253, 13, 188, 255, 54, 254, 62, 147, 174, 227, 61, 74, 156, 137, 190, 146, 52, 139, 62, 81, 75, 49, 189, 49, 247, 107, 190, 135, 197, 81, 190, 219, 222, 124, 190, 193, 210, 104, 189, 222, 160, 158, 190, 68, 102, 97, 62, 37, 231, 204, 190, 199, 23, 166, 189, 109, 218, 60, 188, 10, 89, 220, 190, 90, 227, 68, 188, 230, 111, 128, 190, 55, 67, 151, 189, 37, 2, 132, 190, 76, 52, 57, 62, 246, 209, 149, 190, 93, 23, 237, 189, 196, 152, 7, 62, 22, 1, 49, 190, 40, 207, 159, 62, 188, 238, 74, 190, 1, 184, 95, 188, 233, 197, 60, 62, 213, 85, 111, 61, 1, 109, 48, 190, 38, 253, 247, 189, 74, 152, 75, 62, 198, 179, 145, 62, 146, 207, 183, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 87, 111, 61, 166, 46, 110, 190, 122, 91, 31, 190, 27, 137, 121, 62, 177, 13, 58, 62, 54, 88, 22, 62, 28, 205, 39, 62, 234, 148, 100, 61, 64, 136, 85, 62, 54, 149, 202, 189, 183, 81, 88, 189, 197, 208, 227, 189, 202, 88, 19, 189, 156, 154, 78, 62, 255, 42, 102, 62, 241, 75, 116, 62, 89, 82, 131, 189, 102, 224, 253, 189, 183, 180, 41, 62, 25, 43, 254, 61, 39, 110, 39, 189, 168, 243, 248, 189, 77, 5, 20, 189, 160, 49, 176, 190, 172, 25, 190, 61, 225, 133, 188, 190, 109, 83, 205, 61, 131, 73, 186, 62, 144, 160, 247, 61, 24, 10, 14, 62, 201, 252, 195, 61, 23, 67, 103, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 19, 180, 189, 15, 112, 0, 191, 25, 142, 224, 61, 188, 15, 6, 63, 180, 153, 132, 59, 223, 129, 156, 62, 124, 90, 179, 189, 47, 78, 230, 190, 89, 11, 35, 62, 152, 32, 130, 189, 195, 227, 181, 61, 209, 93, 230, 190, 199, 78, 153, 189, 47, 183, 160, 62, 128, 150, 251, 62, 227, 241, 135, 191, 0, 105, 1, 191, 70, 189, 16, 191, 17, 207, 106, 63, 18, 59, 21, 63, 7, 153, 131, 63, 1, 127, 237, 61, 116, 11, 19, 61, 188, 89, 230, 189, 98, 94, 76, 191, 233, 254, 213, 190, 0, 52, 247, 62, 230, 192, 34, 187, 34, 5, 139, 190, 170, 190, 183, 191, 140, 172, 32, 189, 6, 26, 193, 61, 156, 156, 44, 63, 8, 111, 105, 62, 204, 49, 212, 187, 31, 231, 12, 190, 81, 43, 14, 191, 46, 143, 179, 188, 209, 118, 178, 190, 187, 172, 27, 190, 154, 161, 42, 190, 233, 100, 120, 61, 22, 95, 178, 60, 245, 106, 118, 189, 133, 218, 252, 61, 217, 235, 124, 190, 210, 245, 225, 185, 230, 248, 116, 189, 178, 107, 10, 189, 6, 255, 7, 190, 119, 236, 143, 62, 241, 203, 54, 61, 178, 71, 148, 62, 245, 210, 10, 190, 212, 72, 176, 62, 76, 201, 58, 61, 36, 127, 219, 61, 188, 101, 83, 62, 39, 147, 136, 63, 32, 90, 25, 191, 250, 236, 191, 62, 172, 91, 79, 62, 125, 189, 112, 190, 140, 14, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 196, 77, 189, 239, 130, 119, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {252, 48, 36, 191, 251, 2, 167, 191, 163, 73, 41, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {223, 92, 8, 192, 18, 121, 97, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0014/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}