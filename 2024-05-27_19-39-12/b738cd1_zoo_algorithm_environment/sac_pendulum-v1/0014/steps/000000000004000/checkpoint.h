// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 4, 7, 63, 41, 68, 6, 190, 10, 111, 18, 63, 80, 151, 15, 190, 251, 8, 18, 190, 36, 210, 67, 190, 2, 169, 245, 190, 151, 189, 45, 63, 141, 205, 215, 62, 125, 159, 171, 62, 126, 2, 204, 62, 115, 127, 2, 63, 132, 90, 54, 191, 206, 91, 124, 62, 213, 181, 73, 191, 231, 8, 30, 62, 153, 189, 1, 63, 198, 82, 234, 62, 31, 144, 91, 63, 56, 221, 26, 60, 199, 60, 168, 62, 190, 134, 222, 189, 183, 57, 126, 62, 231, 24, 188, 190, 130, 179, 161, 62, 124, 22, 223, 190, 182, 7, 3, 63, 50, 225, 98, 190, 212, 90, 4, 63, 1, 188, 2, 191, 73, 153, 236, 61, 106, 12, 157, 62, 216, 214, 11, 191, 87, 181, 128, 190, 58, 215, 70, 191, 56, 123, 163, 188, 232, 87, 110, 62, 145, 41, 25, 191, 134, 203, 143, 190, 146, 196, 144, 190, 205, 163, 4, 191, 39, 247, 80, 62, 0, 50, 5, 188, 227, 116, 63, 62, 27, 18, 190, 62, 45, 141, 233, 62, 59, 143, 243, 62, 115, 201, 13, 62, 39, 2, 59, 189, 244, 156, 109, 63, 241, 62, 50, 190, 164, 60, 5, 191, 20, 85, 28, 189, 202, 132, 15, 63, 123, 240, 235, 62, 89, 247, 22, 63, 56, 186, 233, 62, 221, 93, 137, 62, 123, 131, 160, 189, 95, 169, 2, 61, 167, 148, 13, 63, 153, 134, 64, 191, 36, 135, 86, 190, 24, 107, 100, 190, 70, 6, 85, 191, 29, 241, 238, 62, 75, 143, 8, 190, 74, 5, 48, 61, 26, 128, 202, 61, 108, 119, 131, 62, 137, 155, 11, 63, 215, 31, 150, 62, 50, 184, 228, 62, 252, 162, 123, 191, 196, 0, 141, 190, 136, 134, 22, 191, 136, 30, 16, 191, 174, 119, 27, 63, 159, 35, 168, 61, 42, 120, 114, 191, 42, 225, 135, 62, 121, 243, 206, 61, 172, 64, 1, 191, 134, 93, 242, 190, 50, 11, 55, 190, 50, 49, 194, 190, 8, 15, 108, 62, 62, 220, 200, 190, 149, 215, 153, 62, 39, 168, 247, 62, 174, 87, 8, 191, 225, 235, 131, 191, 23, 184, 20, 190, 155, 153, 242, 61, 239, 18, 61, 191, 78, 171, 169, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 220, 175, 190, 133, 176, 118, 63, 120, 70, 138, 190, 19, 128, 97, 190, 29, 241, 182, 190, 219, 55, 18, 191, 141, 198, 176, 62, 86, 76, 36, 190, 43, 224, 180, 62, 101, 104, 136, 59, 252, 66, 173, 62, 243, 222, 66, 62, 158, 71, 55, 191, 162, 100, 183, 189, 81, 68, 208, 190, 57, 3, 143, 61, 29, 75, 238, 62, 11, 170, 167, 190, 152, 209, 41, 191, 79, 34, 244, 190, 153, 240, 233, 187, 241, 146, 208, 190, 169, 114, 78, 63, 100, 40, 125, 190, 138, 209, 200, 190, 151, 105, 2, 191, 124, 132, 25, 190, 58, 191, 244, 190, 121, 74, 129, 190, 215, 83, 54, 190, 109, 253, 25, 61, 115, 77, 162, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 180, 139, 61, 213, 118, 255, 189, 138, 174, 157, 61, 45, 63, 223, 189, 203, 253, 6, 190, 195, 200, 163, 61, 153, 137, 134, 61, 210, 0, 92, 188, 94, 191, 13, 190, 104, 37, 67, 61, 184, 25, 217, 60, 156, 211, 246, 61, 231, 228, 212, 60, 39, 185, 239, 189, 145, 246, 244, 189, 124, 115, 132, 61, 132, 81, 119, 190, 122, 27, 32, 190, 216, 107, 253, 188, 101, 196, 175, 61, 57, 144, 6, 189, 243, 254, 13, 62, 173, 86, 187, 189, 168, 7, 233, 61, 13, 40, 129, 62, 246, 34, 152, 61, 233, 52, 239, 189, 205, 36, 71, 62, 164, 147, 141, 61, 142, 242, 171, 189, 192, 72, 2, 190, 0, 46, 189, 187, 170, 147, 213, 58, 250, 237, 20, 190, 225, 112, 213, 189, 136, 72, 235, 189, 50, 65, 204, 190, 192, 185, 119, 190, 124, 209, 85, 190, 221, 212, 55, 190, 22, 62, 28, 62, 139, 99, 19, 190, 129, 128, 79, 190, 199, 83, 7, 62, 154, 189, 228, 189, 197, 139, 16, 62, 135, 240, 84, 60, 66, 166, 160, 190, 221, 77, 248, 190, 163, 92, 192, 61, 226, 139, 97, 190, 251, 111, 160, 61, 35, 116, 145, 61, 223, 173, 43, 62, 167, 213, 132, 61, 40, 25, 154, 190, 57, 38, 213, 61, 100, 132, 250, 61, 132, 118, 143, 62, 43, 166, 79, 62, 160, 44, 44, 190, 123, 178, 88, 188, 254, 248, 179, 60, 128, 179, 67, 61, 24, 84, 36, 62, 5, 114, 35, 190, 97, 47, 41, 59, 79, 113, 138, 60, 193, 151, 59, 189, 172, 103, 120, 189, 73, 164, 187, 187, 131, 108, 222, 61, 200, 67, 180, 189, 126, 11, 195, 61, 156, 140, 45, 189, 73, 180, 88, 190, 249, 198, 156, 61, 219, 191, 127, 56, 127, 124, 206, 189, 41, 239, 225, 60, 107, 169, 101, 190, 11, 47, 47, 61, 210, 130, 36, 62, 13, 80, 26, 190, 249, 240, 190, 61, 167, 200, 18, 190, 234, 246, 243, 188, 194, 54, 14, 190, 75, 172, 154, 189, 177, 59, 69, 189, 107, 171, 240, 61, 31, 220, 34, 62, 183, 59, 88, 62, 38, 108, 118, 61, 239, 195, 162, 189, 175, 120, 54, 190, 184, 96, 150, 62, 94, 81, 47, 62, 77, 43, 77, 190, 49, 8, 147, 189, 196, 8, 74, 189, 86, 55, 150, 190, 106, 111, 204, 62, 243, 220, 93, 62, 246, 58, 43, 62, 78, 216, 116, 62, 43, 62, 138, 62, 91, 129, 191, 188, 72, 181, 6, 190, 215, 245, 211, 190, 168, 125, 120, 190, 101, 128, 26, 190, 165, 183, 51, 62, 176, 98, 178, 190, 104, 66, 168, 61, 86, 69, 137, 189, 85, 57, 57, 61, 18, 99, 19, 58, 79, 12, 37, 189, 2, 63, 165, 190, 86, 166, 153, 189, 16, 92, 192, 60, 183, 53, 52, 62, 153, 192, 24, 190, 149, 179, 5, 189, 99, 190, 86, 190, 179, 52, 181, 190, 26, 14, 75, 62, 11, 8, 13, 190, 230, 81, 30, 61, 251, 148, 63, 189, 16, 198, 46, 59, 188, 212, 238, 189, 226, 85, 236, 189, 240, 25, 228, 189, 142, 46, 253, 61, 239, 127, 52, 62, 229, 245, 170, 189, 146, 203, 106, 61, 3, 35, 0, 60, 132, 224, 37, 190, 107, 139, 197, 189, 193, 151, 238, 189, 78, 69, 184, 61, 158, 233, 113, 62, 141, 73, 231, 186, 10, 217, 56, 190, 58, 200, 21, 62, 251, 104, 191, 61, 165, 245, 125, 61, 61, 103, 78, 62, 74, 70, 230, 188, 234, 116, 172, 189, 29, 167, 35, 190, 97, 10, 76, 62, 226, 218, 240, 189, 42, 218, 124, 60, 36, 159, 154, 60, 79, 155, 117, 190, 210, 52, 240, 61, 25, 199, 146, 189, 254, 252, 3, 61, 190, 36, 155, 188, 37, 139, 29, 189, 212, 111, 35, 190, 88, 159, 172, 61, 221, 46, 126, 188, 133, 191, 15, 62, 198, 192, 210, 189, 234, 77, 242, 190, 25, 190, 29, 189, 120, 226, 83, 62, 72, 104, 54, 61, 248, 21, 43, 62, 232, 210, 167, 189, 76, 101, 159, 61, 94, 18, 12, 190, 177, 94, 102, 62, 104, 9, 31, 190, 161, 54, 250, 61, 96, 172, 226, 62, 142, 19, 48, 190, 36, 166, 243, 189, 51, 56, 173, 189, 132, 247, 134, 61, 56, 82, 125, 62, 110, 154, 27, 62, 140, 30, 4, 62, 9, 70, 164, 190, 64, 144, 213, 61, 237, 63, 6, 190, 123, 161, 175, 62, 158, 160, 24, 62, 195, 94, 152, 61, 220, 155, 228, 188, 51, 67, 87, 62, 237, 244, 186, 61, 18, 20, 86, 62, 199, 11, 16, 62, 188, 169, 143, 190, 241, 77, 231, 61, 138, 109, 125, 61, 17, 190, 121, 60, 23, 233, 94, 189, 4, 17, 110, 60, 36, 150, 95, 190, 205, 210, 130, 189, 241, 34, 13, 62, 105, 117, 122, 62, 187, 104, 62, 61, 117, 132, 146, 189, 95, 183, 15, 62, 236, 33, 53, 190, 26, 3, 19, 62, 26, 205, 50, 62, 166, 221, 2, 62, 4, 69, 110, 60, 192, 185, 160, 190, 58, 237, 164, 190, 190, 69, 156, 60, 36, 138, 124, 189, 228, 171, 30, 190, 130, 251, 25, 190, 243, 180, 129, 190, 10, 114, 116, 61, 52, 132, 176, 190, 63, 121, 134, 190, 133, 119, 162, 61, 186, 144, 235, 189, 87, 109, 202, 61, 62, 43, 130, 62, 55, 219, 20, 61, 181, 83, 174, 61, 37, 174, 121, 189, 214, 119, 206, 189, 93, 194, 102, 190, 128, 54, 201, 189, 176, 87, 83, 190, 70, 195, 41, 189, 199, 31, 177, 61, 39, 124, 157, 189, 74, 182, 138, 189, 243, 52, 22, 62, 134, 40, 179, 189, 109, 17, 93, 189, 76, 146, 103, 189, 246, 13, 68, 190, 19, 131, 7, 60, 224, 110, 254, 189, 156, 192, 128, 190, 164, 175, 241, 189, 105, 7, 10, 190, 106, 167, 140, 189, 28, 23, 78, 189, 40, 231, 81, 60, 188, 108, 221, 189, 233, 79, 23, 190, 190, 246, 80, 62, 177, 247, 195, 61, 102, 23, 99, 190, 242, 91, 36, 190, 69, 37, 61, 60, 80, 44, 9, 189, 78, 238, 51, 62, 116, 15, 30, 62, 162, 150, 208, 189, 102, 12, 58, 61, 131, 172, 165, 189, 210, 238, 29, 190, 160, 137, 106, 185, 193, 57, 169, 189, 8, 66, 174, 189, 212, 157, 137, 61, 90, 202, 75, 189, 225, 175, 202, 189, 233, 124, 231, 61, 103, 168, 43, 62, 73, 43, 51, 190, 219, 118, 140, 62, 86, 200, 63, 190, 226, 151, 147, 188, 49, 62, 141, 62, 131, 208, 161, 62, 153, 196, 224, 61, 76, 116, 57, 190, 101, 239, 252, 61, 108, 120, 46, 62, 250, 191, 213, 62, 50, 17, 178, 189, 32, 117, 242, 58, 225, 141, 16, 189, 76, 31, 63, 61, 101, 147, 204, 189, 123, 198, 28, 62, 203, 243, 236, 61, 157, 146, 219, 61, 50, 108, 16, 190, 209, 204, 51, 190, 68, 71, 248, 61, 255, 208, 172, 188, 134, 107, 108, 61, 17, 188, 136, 189, 218, 65, 28, 61, 253, 3, 35, 190, 239, 121, 224, 189, 48, 153, 49, 190, 253, 51, 165, 185, 84, 205, 239, 61, 210, 76, 17, 61, 105, 117, 209, 61, 42, 177, 191, 189, 248, 172, 233, 189, 69, 175, 11, 190, 35, 85, 0, 62, 178, 41, 173, 189, 228, 67, 137, 189, 174, 238, 130, 189, 205, 246, 85, 60, 64, 199, 36, 61, 226, 158, 253, 61, 231, 88, 155, 189, 253, 146, 40, 190, 48, 167, 3, 189, 87, 251, 109, 60, 11, 104, 3, 189, 227, 23, 113, 189, 115, 88, 47, 61, 188, 121, 36, 62, 249, 109, 225, 61, 145, 56, 202, 60, 113, 28, 254, 189, 39, 132, 115, 188, 73, 224, 213, 189, 223, 195, 139, 190, 214, 212, 144, 60, 107, 41, 2, 62, 33, 99, 200, 189, 35, 164, 241, 189, 221, 230, 197, 189, 72, 213, 104, 61, 249, 36, 126, 189, 114, 217, 219, 61, 187, 97, 74, 189, 20, 0, 39, 189, 32, 112, 22, 190, 50, 149, 135, 189, 148, 67, 174, 189, 145, 9, 49, 190, 197, 157, 140, 61, 51, 138, 154, 189, 173, 191, 85, 61, 183, 0, 123, 189, 206, 137, 92, 190, 49, 30, 9, 190, 144, 62, 129, 189, 37, 14, 104, 189, 3, 181, 47, 190, 235, 175, 235, 189, 48, 224, 129, 189, 242, 97, 60, 62, 210, 4, 167, 188, 11, 110, 52, 188, 156, 204, 138, 189, 73, 0, 7, 61, 100, 79, 138, 62, 103, 10, 224, 61, 111, 233, 29, 190, 253, 159, 43, 190, 27, 0, 181, 190, 234, 246, 71, 62, 166, 38, 114, 61, 82, 146, 195, 189, 133, 79, 29, 62, 1, 0, 74, 61, 209, 220, 64, 61, 149, 170, 63, 190, 55, 219, 189, 62, 56, 92, 135, 62, 43, 61, 39, 62, 188, 21, 105, 62, 87, 238, 243, 61, 110, 152, 234, 61, 104, 30, 113, 61, 77, 111, 182, 62, 28, 159, 95, 61, 80, 234, 106, 190, 160, 202, 29, 62, 237, 40, 117, 61, 45, 84, 2, 190, 248, 232, 27, 190, 94, 239, 182, 187, 236, 208, 88, 60, 17, 112, 37, 190, 50, 104, 46, 189, 170, 19, 99, 61, 17, 193, 44, 190, 155, 191, 2, 62, 158, 7, 15, 62, 73, 45, 36, 189, 174, 168, 162, 61, 105, 97, 163, 188, 1, 13, 51, 61, 129, 56, 187, 186, 235, 30, 77, 189, 2, 37, 183, 61, 151, 33, 147, 61, 142, 154, 124, 60, 192, 232, 35, 190, 247, 221, 98, 189, 49, 211, 141, 60, 79, 53, 145, 186, 193, 21, 211, 61, 5, 168, 42, 190, 207, 36, 25, 190, 203, 27, 199, 188, 96, 129, 19, 190, 181, 167, 152, 190, 250, 95, 89, 60, 176, 71, 57, 61, 236, 210, 129, 189, 57, 102, 28, 191, 175, 168, 129, 189, 52, 197, 219, 187, 43, 128, 124, 190, 8, 132, 98, 189, 6, 254, 64, 191, 3, 212, 228, 190, 245, 177, 132, 61, 177, 43, 102, 189, 9, 217, 131, 61, 111, 172, 0, 62, 226, 183, 203, 61, 11, 102, 65, 190, 62, 97, 143, 62, 12, 54, 246, 189, 176, 139, 29, 62, 38, 145, 130, 61, 254, 144, 144, 190, 73, 42, 140, 62, 15, 47, 128, 61, 247, 172, 240, 189, 191, 190, 119, 62, 242, 233, 115, 62, 154, 129, 107, 190, 53, 211, 217, 61, 31, 53, 246, 188, 63, 247, 214, 189, 192, 145, 233, 61, 21, 202, 19, 190, 230, 134, 193, 60, 245, 173, 231, 60, 245, 214, 19, 190, 80, 13, 192, 190, 109, 194, 25, 187, 77, 38, 49, 62, 120, 177, 55, 190, 27, 191, 5, 61, 104, 226, 33, 191, 22, 101, 124, 190, 218, 146, 23, 189, 140, 241, 11, 188, 32, 37, 103, 62, 111, 164, 241, 188, 190, 45, 157, 61, 222, 152, 49, 190, 227, 106, 166, 189, 170, 52, 63, 190, 25, 180, 25, 59, 10, 85, 158, 62, 160, 12, 22, 190, 95, 211, 73, 62, 205, 111, 231, 189, 186, 60, 23, 62, 47, 156, 162, 189, 37, 241, 116, 62, 39, 190, 102, 61, 25, 86, 149, 190, 250, 41, 9, 62, 251, 138, 129, 60, 178, 249, 110, 62, 178, 125, 162, 62, 34, 61, 28, 62, 133, 217, 133, 190, 24, 29, 136, 62, 112, 227, 3, 60, 225, 6, 141, 62, 104, 65, 133, 62, 149, 193, 5, 191, 126, 163, 168, 189, 150, 113, 48, 62, 76, 122, 127, 62, 0, 174, 14, 62, 163, 106, 138, 190, 160, 7, 22, 190, 76, 78, 55, 62, 113, 115, 253, 60, 23, 113, 220, 62, 6, 223, 150, 190, 6, 134, 4, 189, 104, 212, 40, 62, 54, 27, 150, 190, 210, 161, 16, 60, 169, 75, 145, 61, 14, 43, 74, 62, 102, 146, 242, 190, 136, 224, 128, 191, 139, 26, 95, 191, 28, 100, 196, 190, 143, 57, 174, 61, 231, 25, 129, 190, 69, 85, 16, 62, 203, 138, 16, 191, 161, 61, 62, 189, 207, 15, 164, 190, 41, 197, 118, 61, 70, 4, 181, 61, 117, 179, 248, 189, 127, 45, 41, 190, 246, 118, 178, 60, 122, 209, 100, 189, 186, 95, 239, 61, 78, 109, 19, 190, 238, 192, 42, 190, 171, 120, 131, 189, 20, 207, 20, 190, 33, 245, 146, 59, 178, 172, 152, 189, 118, 193, 163, 61, 199, 205, 46, 61, 247, 235, 130, 189, 27, 246, 138, 188, 180, 131, 127, 189, 121, 8, 129, 190, 13, 112, 51, 61, 209, 147, 58, 190, 52, 191, 7, 62, 212, 202, 165, 61, 21, 85, 193, 61, 64, 156, 159, 189, 25, 69, 160, 60, 228, 103, 131, 189, 160, 205, 147, 61, 100, 55, 251, 190, 31, 46, 184, 61, 187, 36, 66, 189, 179, 233, 83, 190, 236, 71, 90, 60, 95, 60, 107, 61, 44, 3, 7, 190, 84, 167, 44, 62, 95, 232, 221, 60, 203, 130, 49, 190, 135, 105, 72, 188, 239, 136, 70, 189, 7, 71, 93, 190, 251, 177, 192, 190, 45, 209, 4, 189, 60, 183, 116, 188, 248, 165, 231, 61, 215, 122, 147, 61, 167, 203, 56, 189, 192, 20, 226, 188, 192, 241, 60, 62, 232, 234, 229, 188, 213, 153, 196, 189, 28, 149, 164, 61, 216, 229, 214, 61, 140, 118, 130, 60, 89, 182, 6, 61, 171, 116, 129, 188, 160, 97, 74, 61, 87, 86, 242, 189, 58, 69, 220, 61, 50, 224, 252, 189, 128, 132, 236, 190, 6, 129, 239, 187, 157, 176, 67, 190, 73, 158, 220, 61, 11, 101, 30, 62, 67, 210, 97, 190, 211, 163, 45, 191, 77, 107, 166, 190, 102, 194, 100, 60, 113, 33, 101, 190, 237, 155, 48, 61, 20, 146, 65, 191, 46, 34, 25, 191, 205, 186, 48, 60, 142, 173, 40, 61, 59, 214, 50, 189, 42, 89, 119, 190, 103, 204, 219, 189, 99, 54, 45, 62, 64, 40, 174, 62, 178, 56, 165, 190, 40, 7, 201, 189, 190, 187, 37, 59, 74, 58, 54, 190, 28, 118, 31, 62, 243, 164, 4, 191, 216, 123, 30, 190, 185, 181, 190, 62, 1, 87, 27, 62, 244, 99, 194, 190, 117, 34, 203, 190, 64, 123, 132, 59, 12, 211, 72, 60, 106, 189, 54, 189, 189, 85, 146, 188, 141, 169, 145, 62, 196, 230, 153, 189, 213, 234, 152, 189, 183, 216, 249, 190, 244, 17, 86, 189, 136, 112, 77, 189, 255, 152, 87, 190, 240, 90, 112, 61, 82, 197, 136, 191, 197, 24, 116, 190, 255, 170, 252, 60, 80, 31, 151, 190, 145, 108, 136, 62, 157, 162, 3, 61, 254, 169, 86, 189, 67, 212, 51, 190, 10, 242, 175, 189, 136, 165, 50, 189, 45, 107, 121, 61, 223, 90, 211, 62, 4, 92, 240, 189, 219, 200, 226, 61, 48, 238, 145, 190, 232, 80, 60, 58, 204, 41, 161, 61, 78, 153, 200, 62, 10, 233, 216, 189, 89, 38, 104, 190, 89, 134, 128, 61, 25, 253, 23, 189, 141, 239, 14, 62, 5, 90, 73, 60, 201, 187, 242, 61, 155, 136, 146, 62, 249, 117, 168, 188, 192, 227, 193, 61, 49, 75, 202, 61, 124, 42, 145, 189, 183, 28, 244, 188, 234, 83, 129, 61, 100, 142, 54, 62, 23, 129, 45, 60, 72, 63, 52, 190, 58, 72, 75, 190, 106, 187, 157, 190, 61, 135, 99, 190, 227, 23, 20, 61, 152, 139, 148, 62, 151, 126, 143, 61, 184, 187, 126, 189, 131, 103, 11, 62, 118, 226, 30, 191, 189, 172, 160, 190, 11, 127, 83, 62, 54, 178, 221, 188, 165, 193, 240, 190, 148, 82, 170, 188, 196, 74, 186, 189, 68, 17, 181, 190, 40, 239, 0, 190, 112, 102, 135, 188, 59, 229, 156, 190, 36, 122, 254, 189, 197, 75, 30, 189, 91, 167, 133, 189, 148, 235, 244, 188, 238, 240, 180, 189, 153, 34, 176, 188, 187, 110, 9, 190, 210, 43, 176, 188, 187, 85, 220, 189, 121, 222, 236, 189, 169, 214, 74, 60, 162, 144, 198, 59, 136, 169, 224, 188, 220, 117, 234, 189, 182, 48, 157, 189, 58, 246, 141, 61, 181, 74, 102, 61, 176, 81, 162, 61, 40, 182, 135, 189, 235, 29, 236, 61, 26, 190, 251, 189, 13, 24, 0, 190, 217, 216, 242, 189, 120, 2, 28, 61, 82, 240, 201, 60, 166, 160, 3, 62, 185, 139, 63, 61, 11, 239, 223, 188, 42, 110, 204, 189, 128, 199, 60, 61, 135, 91, 185, 188, 209, 161, 2, 62, 39, 203, 18, 62, 166, 162, 140, 190, 128, 220, 1, 189, 52, 140, 156, 61, 185, 177, 103, 61, 159, 90, 98, 190, 252, 152, 62, 190, 129, 76, 238, 61, 115, 108, 29, 62, 248, 196, 164, 188, 27, 133, 248, 190, 183, 63, 159, 190, 214, 224, 195, 60, 145, 123, 150, 189, 192, 120, 249, 61, 53, 107, 208, 189, 204, 139, 3, 188, 70, 203, 128, 60, 237, 195, 172, 62, 241, 182, 172, 60, 100, 173, 5, 190, 46, 159, 170, 62, 150, 78, 84, 190, 49, 183, 207, 61, 75, 151, 148, 189, 94, 17, 8, 62, 14, 38, 158, 62, 44, 246, 202, 61, 9, 27, 250, 61, 192, 250, 152, 190, 43, 113, 155, 189, 57, 65, 6, 62, 15, 169, 103, 62, 217, 206, 162, 61, 164, 155, 144, 189, 253, 24, 15, 62, 201, 71, 5, 61, 14, 146, 235, 189, 153, 85, 230, 189, 184, 59, 43, 61, 25, 83, 60, 61, 5, 20, 87, 61, 67, 17, 36, 62, 21, 107, 64, 61, 164, 57, 112, 60, 165, 109, 42, 62, 135, 200, 79, 190, 57, 1, 28, 189, 57, 226, 13, 190, 93, 22, 149, 189, 65, 224, 52, 190, 170, 9, 215, 61, 156, 165, 159, 61, 146, 85, 213, 189, 248, 6, 42, 190, 32, 11, 62, 190, 98, 190, 219, 61, 39, 197, 10, 62, 239, 138, 179, 61, 90, 185, 19, 190, 74, 93, 53, 62, 19, 95, 68, 189, 203, 46, 66, 187, 90, 1, 68, 62, 64, 147, 6, 189, 113, 187, 222, 62, 105, 35, 13, 62, 191, 137, 189, 190, 162, 166, 87, 61, 59, 232, 62, 62, 184, 217, 244, 187, 57, 163, 234, 62, 42, 46, 165, 190, 137, 32, 70, 190, 11, 182, 195, 61, 177, 86, 247, 61, 148, 156, 54, 62, 113, 187, 246, 189, 144, 30, 2, 62, 34, 161, 25, 62, 127, 179, 108, 62, 17, 6, 71, 62, 209, 62, 136, 190, 3, 35, 58, 60, 246, 33, 49, 190, 94, 218, 112, 190, 186, 172, 176, 189, 20, 185, 16, 62, 83, 7, 18, 62, 200, 163, 195, 190, 42, 22, 96, 191, 12, 214, 93, 191, 92, 17, 200, 190, 167, 184, 129, 189, 200, 32, 102, 190, 120, 248, 103, 62, 253, 197, 12, 191, 105, 53, 3, 190, 146, 203, 33, 190, 79, 155, 220, 186, 218, 238, 21, 62, 91, 206, 227, 189, 12, 9, 24, 62, 113, 171, 65, 62, 128, 124, 116, 59, 196, 36, 28, 62, 215, 247, 49, 189, 53, 158, 33, 60, 196, 213, 161, 189, 214, 173, 134, 61, 50, 164, 19, 190, 165, 218, 206, 61, 48, 88, 19, 62, 177, 153, 226, 189, 227, 157, 123, 61, 125, 1, 197, 189, 49, 118, 187, 61, 21, 134, 18, 189, 96, 90, 137, 58, 215, 48, 111, 189, 101, 166, 22, 62, 175, 38, 204, 61, 159, 181, 15, 60, 114, 15, 220, 189, 126, 52, 78, 190, 248, 209, 254, 61, 51, 188, 193, 61, 214, 161, 171, 190, 70, 1, 0, 61, 11, 93, 14, 190, 141, 92, 23, 190, 178, 234, 164, 61, 31, 100, 233, 189, 32, 114, 255, 187, 21, 106, 21, 189, 219, 23, 12, 62, 55, 230, 219, 61, 200, 191, 61, 190, 194, 64, 26, 190, 36, 251, 156, 61, 225, 26, 4, 62, 51, 211, 18, 61, 105, 135, 13, 190, 162, 213, 19, 62, 248, 10, 211, 61, 255, 224, 146, 188, 109, 171, 165, 189, 45, 12, 13, 62, 142, 30, 161, 188, 63, 63, 202, 188, 241, 195, 50, 190, 123, 112, 243, 189, 114, 144, 36, 59, 162, 20, 37, 190, 208, 74, 254, 61, 9, 242, 27, 190, 188, 202, 64, 190, 60, 202, 150, 61, 137, 165, 67, 190, 203, 129, 17, 190, 186, 81, 247, 188, 59, 207, 8, 189, 189, 25, 156, 61, 204, 104, 140, 58, 191, 192, 254, 61, 110, 121, 65, 189, 42, 148, 26, 62, 158, 109, 94, 60, 209, 234, 13, 62, 166, 31, 158, 189, 196, 69, 153, 190, 193, 2, 82, 61, 114, 178, 145, 61, 10, 155, 43, 190, 119, 16, 245, 60, 95, 174, 249, 61, 104, 195, 45, 62, 217, 255, 61, 61, 229, 227, 27, 61, 190, 241, 249, 189, 169, 139, 167, 60, 94, 66, 6, 60, 164, 75, 101, 189, 186, 203, 130, 61, 31, 255, 75, 190, 255, 213, 59, 190, 203, 202, 163, 189, 253, 63, 9, 61, 63, 149, 4, 188, 194, 175, 224, 189, 236, 38, 149, 189, 19, 37, 45, 62, 32, 56, 21, 61, 120, 196, 95, 189, 224, 176, 115, 190, 166, 234, 61, 60, 233, 76, 129, 61, 229, 151, 50, 189, 61, 159, 128, 60, 189, 196, 63, 61, 147, 153, 32, 190, 156, 191, 206, 61, 147, 253, 29, 190, 165, 83, 64, 189, 222, 234, 100, 60, 139, 215, 156, 60, 0, 180, 213, 189, 197, 181, 131, 61, 68, 231, 0, 60, 250, 195, 148, 190, 116, 209, 93, 190, 10, 241, 246, 61, 81, 134, 8, 62, 205, 69, 202, 189, 18, 79, 77, 187, 213, 124, 169, 59, 83, 226, 68, 62, 144, 191, 163, 61, 88, 86, 157, 190, 160, 92, 50, 189, 0, 76, 89, 189, 127, 198, 67, 189, 77, 139, 46, 61, 236, 27, 134, 60, 70, 2, 96, 188, 37, 4, 142, 62, 140, 76, 86, 62, 38, 182, 191, 190, 227, 241, 132, 187, 31, 81, 155, 61, 189, 240, 9, 61, 74, 213, 232, 61, 184, 46, 243, 190, 178, 96, 146, 190, 62, 10, 127, 62, 250, 60, 82, 62, 83, 212, 213, 188, 144, 214, 137, 190, 136, 3, 137, 59, 151, 56, 1, 61, 192, 68, 45, 62, 249, 141, 157, 62, 62, 3, 9, 191, 180, 135, 62, 62, 41, 120, 48, 60, 24, 37, 179, 190, 136, 108, 103, 190, 71, 206, 156, 62, 107, 80, 45, 189, 207, 221, 95, 190, 111, 141, 139, 191, 229, 72, 46, 191, 174, 235, 101, 190, 190, 22, 129, 190, 129, 6, 101, 190, 225, 16, 68, 61, 212, 184, 138, 190, 56, 225, 32, 62, 51, 30, 167, 189, 200, 190, 196, 61, 124, 220, 43, 62, 224, 39, 177, 61, 184, 216, 130, 189, 125, 6, 216, 61, 150, 246, 156, 190, 158, 225, 31, 62, 11, 203, 187, 62, 141, 77, 191, 61, 181, 119, 4, 61, 137, 35, 91, 190, 106, 15, 202, 60, 218, 136, 65, 62, 96, 124, 234, 61, 70, 193, 159, 62, 6, 46, 111, 189, 228, 84, 135, 189, 216, 2, 226, 189, 113, 9, 6, 190, 208, 138, 84, 186, 5, 104, 45, 62, 81, 41, 225, 189, 63, 107, 24, 190, 60, 181, 76, 190, 205, 59, 132, 189, 252, 167, 118, 190, 10, 211, 192, 61, 16, 239, 206, 61, 213, 43, 192, 61, 109, 156, 234, 60, 208, 33, 79, 190, 215, 14, 99, 62, 59, 183, 110, 189, 215, 138, 18, 190, 37, 26, 0, 190, 116, 152, 34, 190, 164, 80, 84, 189, 140, 18, 105, 61, 146, 201, 112, 62, 164, 238, 99, 190, 44, 26, 147, 189, 64, 216, 151, 189, 118, 231, 89, 189, 52, 222, 113, 61, 172, 111, 54, 190, 143, 107, 88, 189, 124, 131, 185, 189, 128, 205, 90, 62, 247, 6, 69, 190, 93, 23, 237, 189, 129, 117, 45, 61, 39, 188, 231, 189, 90, 57, 151, 62, 45, 195, 36, 190, 147, 180, 152, 61, 72, 187, 96, 62, 251, 123, 79, 62, 247, 67, 221, 61, 37, 182, 152, 189, 37, 121, 89, 62, 207, 43, 26, 62, 135, 163, 230, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 23, 87, 60, 79, 104, 37, 190, 158, 172, 28, 190, 147, 208, 165, 61, 31, 99, 80, 62, 215, 112, 24, 62, 207, 113, 11, 62, 15, 105, 88, 61, 89, 207, 69, 62, 54, 149, 202, 189, 200, 172, 93, 188, 213, 216, 6, 190, 167, 22, 165, 59, 96, 70, 95, 62, 78, 73, 88, 62, 242, 12, 135, 62, 98, 246, 230, 60, 104, 17, 211, 61, 126, 110, 60, 62, 197, 160, 113, 61, 10, 179, 31, 189, 168, 243, 248, 189, 216, 96, 211, 188, 59, 164, 62, 190, 69, 40, 125, 62, 156, 13, 74, 190, 126, 196, 154, 60, 67, 78, 132, 62, 243, 54, 81, 188, 119, 162, 147, 62, 42, 118, 2, 62, 189, 16, 56, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 179, 214, 189, 171, 111, 207, 190, 247, 160, 225, 61, 96, 224, 172, 62, 59, 180, 3, 62, 126, 249, 163, 62, 66, 67, 218, 189, 2, 242, 188, 190, 6, 248, 128, 62, 152, 32, 130, 189, 62, 12, 185, 61, 139, 33, 194, 190, 52, 11, 217, 189, 159, 225, 136, 62, 252, 103, 208, 62, 80, 23, 60, 191, 104, 221, 211, 189, 228, 52, 46, 190, 192, 37, 18, 63, 182, 236, 234, 62, 127, 161, 54, 63, 1, 127, 237, 61, 210, 11, 144, 62, 121, 49, 3, 189, 197, 70, 49, 191, 178, 36, 218, 189, 249, 163, 40, 187, 148, 68, 44, 61, 115, 59, 191, 189, 140, 232, 87, 191, 64, 198, 14, 190, 10, 243, 45, 62, 63, 191, 143, 61, 5, 68, 36, 62, 199, 63, 232, 187, 235, 36, 82, 190, 157, 188, 133, 190, 77, 21, 29, 62, 131, 65, 59, 190, 99, 92, 23, 62, 9, 65, 37, 190, 233, 100, 120, 61, 71, 60, 179, 60, 175, 173, 88, 62, 93, 240, 255, 61, 58, 12, 122, 190, 62, 106, 53, 62, 205, 92, 86, 61, 111, 227, 86, 61, 20, 42, 76, 60, 157, 203, 130, 62, 191, 58, 70, 189, 81, 68, 140, 62, 245, 210, 10, 190, 47, 8, 216, 61, 134, 255, 166, 61, 15, 115, 31, 62, 38, 45, 144, 61, 122, 75, 47, 61, 67, 174, 79, 190, 223, 50, 159, 61, 195, 24, 97, 189, 98, 190, 250, 189, 97, 152, 16, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 203, 243, 189, 78, 62, 14, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {196, 178, 107, 191, 254, 103, 109, 62, 16, 166, 2, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {164, 218, 155, 63, 155, 162, 213, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0014/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}