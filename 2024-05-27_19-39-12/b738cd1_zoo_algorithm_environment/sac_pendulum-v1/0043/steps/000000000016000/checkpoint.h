// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 89, 167, 62, 94, 178, 182, 188, 166, 83, 9, 191, 170, 51, 159, 190, 90, 152, 76, 190, 224, 125, 11, 63, 138, 199, 154, 190, 97, 200, 119, 63, 76, 234, 114, 62, 183, 17, 158, 62, 14, 222, 161, 191, 106, 143, 38, 190, 118, 53, 235, 62, 214, 171, 116, 63, 110, 219, 235, 62, 65, 221, 221, 190, 80, 230, 229, 63, 253, 231, 182, 62, 52, 175, 115, 191, 202, 154, 223, 188, 85, 204, 3, 63, 205, 83, 78, 63, 103, 152, 138, 191, 128, 196, 8, 190, 172, 100, 105, 191, 172, 100, 129, 62, 52, 30, 200, 61, 3, 169, 61, 61, 126, 104, 52, 191, 102, 169, 249, 189, 30, 44, 161, 59, 97, 225, 169, 62, 234, 32, 3, 191, 160, 147, 234, 189, 5, 48, 147, 63, 219, 55, 155, 62, 156, 62, 22, 190, 197, 57, 160, 62, 218, 56, 158, 190, 243, 26, 15, 62, 29, 25, 135, 188, 112, 102, 219, 190, 14, 190, 197, 190, 199, 18, 188, 190, 0, 33, 219, 62, 153, 202, 138, 190, 146, 33, 146, 61, 68, 213, 51, 191, 118, 45, 110, 63, 206, 56, 93, 63, 107, 144, 10, 63, 27, 151, 67, 191, 236, 67, 9, 191, 43, 141, 18, 63, 44, 220, 167, 190, 186, 214, 225, 191, 133, 77, 228, 190, 67, 100, 49, 191, 71, 230, 4, 63, 123, 192, 236, 62, 185, 94, 247, 190, 133, 54, 72, 62, 41, 255, 187, 190, 165, 167, 10, 63, 145, 139, 163, 190, 29, 83, 15, 63, 158, 210, 216, 190, 104, 161, 108, 191, 235, 170, 79, 189, 143, 112, 47, 63, 148, 139, 149, 191, 118, 154, 153, 190, 80, 94, 88, 191, 186, 150, 28, 191, 147, 178, 222, 190, 173, 245, 32, 63, 206, 148, 117, 63, 36, 81, 108, 62, 166, 109, 31, 191, 33, 32, 188, 190, 115, 182, 69, 189, 146, 125, 45, 63, 51, 58, 150, 190, 38, 103, 27, 63, 42, 0, 251, 61, 215, 224, 118, 191, 214, 157, 80, 190, 123, 180, 52, 63, 237, 53, 157, 60, 12, 112, 155, 62, 114, 19, 93, 63, 150, 106, 53, 191, 148, 27, 167, 190, 10, 83, 47, 191, 93, 251, 183, 190, 153, 46, 63, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 205, 112, 191, 14, 39, 142, 62, 148, 3, 31, 63, 7, 63, 152, 188, 43, 217, 82, 190, 99, 234, 18, 190, 182, 101, 134, 190, 65, 76, 109, 61, 69, 75, 79, 62, 216, 109, 175, 188, 36, 2, 219, 62, 146, 75, 197, 60, 130, 141, 32, 63, 106, 0, 160, 190, 248, 123, 186, 62, 127, 11, 181, 61, 153, 47, 176, 189, 142, 171, 99, 62, 59, 164, 44, 190, 19, 234, 179, 189, 7, 93, 133, 190, 98, 125, 45, 191, 89, 4, 9, 63, 94, 186, 161, 190, 89, 195, 252, 190, 72, 252, 225, 189, 14, 251, 38, 63, 234, 246, 44, 190, 101, 219, 159, 189, 172, 232, 105, 191, 52, 143, 81, 191, 46, 54, 254, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 82, 243, 189, 242, 103, 135, 190, 5, 134, 201, 60, 131, 159, 6, 190, 233, 156, 102, 62, 251, 146, 190, 61, 83, 255, 243, 190, 39, 81, 25, 61, 180, 173, 231, 189, 192, 29, 76, 62, 126, 81, 44, 190, 47, 108, 31, 62, 142, 213, 141, 190, 115, 253, 8, 62, 146, 76, 1, 190, 152, 249, 57, 189, 57, 94, 140, 62, 98, 100, 68, 190, 145, 215, 237, 62, 57, 244, 126, 190, 250, 2, 244, 60, 93, 166, 91, 61, 135, 96, 0, 62, 1, 46, 138, 190, 12, 195, 188, 62, 192, 16, 54, 189, 35, 231, 24, 62, 245, 175, 245, 60, 10, 126, 219, 61, 221, 228, 249, 189, 167, 73, 205, 190, 104, 57, 116, 62, 45, 226, 250, 189, 240, 10, 1, 62, 245, 186, 32, 190, 193, 92, 170, 190, 171, 161, 20, 62, 244, 15, 111, 190, 107, 62, 47, 61, 30, 6, 129, 190, 234, 229, 176, 190, 160, 218, 183, 58, 225, 160, 8, 191, 194, 92, 245, 189, 116, 35, 166, 190, 55, 172, 47, 190, 204, 145, 5, 190, 93, 221, 25, 62, 128, 254, 175, 61, 39, 223, 87, 190, 12, 254, 31, 190, 161, 91, 228, 61, 80, 19, 165, 60, 236, 173, 113, 62, 99, 7, 176, 189, 162, 134, 39, 191, 185, 137, 0, 62, 88, 248, 170, 62, 141, 216, 38, 191, 232, 77, 53, 62, 161, 170, 65, 61, 8, 15, 217, 61, 37, 200, 24, 189, 236, 215, 44, 62, 190, 167, 75, 190, 23, 24, 187, 61, 242, 102, 224, 62, 26, 65, 21, 191, 87, 90, 95, 189, 241, 41, 1, 191, 87, 49, 1, 189, 128, 240, 165, 190, 190, 226, 138, 62, 221, 207, 64, 190, 32, 19, 39, 62, 178, 3, 3, 190, 142, 104, 18, 62, 164, 138, 104, 189, 233, 76, 17, 190, 112, 243, 255, 189, 104, 187, 56, 62, 166, 139, 99, 60, 235, 14, 147, 190, 165, 41, 149, 190, 182, 125, 61, 190, 223, 171, 2, 61, 113, 159, 132, 190, 235, 13, 27, 191, 69, 51, 194, 189, 129, 241, 0, 63, 27, 241, 65, 190, 156, 69, 232, 188, 197, 29, 164, 190, 135, 36, 176, 189, 103, 214, 76, 191, 160, 37, 140, 63, 143, 130, 147, 61, 193, 33, 93, 190, 171, 235, 12, 191, 2, 32, 226, 190, 193, 13, 76, 62, 67, 191, 157, 191, 166, 159, 13, 190, 237, 176, 182, 190, 249, 169, 210, 61, 19, 3, 6, 62, 1, 84, 145, 62, 203, 184, 115, 190, 80, 172, 101, 62, 141, 65, 12, 62, 11, 127, 99, 61, 226, 119, 9, 62, 187, 192, 174, 190, 206, 30, 157, 190, 55, 104, 177, 62, 92, 97, 244, 189, 250, 165, 65, 62, 97, 148, 132, 190, 211, 130, 80, 190, 96, 25, 150, 189, 42, 59, 209, 188, 153, 98, 160, 190, 203, 107, 28, 190, 64, 211, 38, 189, 96, 102, 203, 189, 188, 51, 141, 61, 109, 178, 138, 61, 119, 127, 227, 62, 35, 84, 41, 61, 30, 143, 89, 187, 204, 134, 207, 189, 122, 58, 246, 61, 197, 120, 121, 190, 81, 135, 188, 190, 244, 148, 11, 60, 69, 218, 153, 62, 78, 140, 82, 190, 81, 132, 114, 62, 44, 27, 39, 62, 167, 230, 177, 190, 255, 95, 69, 62, 243, 107, 202, 60, 234, 14, 72, 62, 12, 251, 240, 189, 156, 67, 15, 190, 175, 237, 73, 62, 20, 104, 38, 191, 249, 152, 160, 188, 113, 195, 62, 190, 230, 55, 216, 189, 61, 4, 28, 62, 179, 97, 201, 61, 82, 1, 58, 191, 66, 146, 131, 190, 57, 221, 163, 61, 86, 4, 66, 61, 255, 45, 5, 62, 9, 160, 101, 190, 16, 142, 20, 62, 134, 53, 122, 61, 226, 15, 190, 62, 99, 124, 50, 188, 77, 13, 148, 60, 243, 213, 51, 63, 111, 26, 23, 190, 93, 238, 204, 62, 117, 229, 15, 62, 255, 20, 140, 62, 232, 221, 171, 62, 195, 12, 82, 61, 216, 90, 244, 189, 142, 154, 142, 189, 121, 67, 47, 60, 45, 132, 39, 190, 14, 114, 67, 62, 242, 253, 145, 190, 49, 30, 73, 190, 157, 119, 158, 189, 127, 98, 10, 192, 13, 255, 77, 62, 65, 195, 65, 62, 97, 247, 35, 189, 144, 210, 77, 60, 211, 63, 123, 62, 2, 15, 47, 191, 188, 54, 76, 190, 97, 219, 141, 62, 37, 178, 131, 189, 50, 201, 9, 62, 123, 169, 142, 190, 219, 75, 202, 62, 143, 205, 195, 190, 229, 173, 89, 62, 68, 33, 209, 61, 78, 190, 132, 62, 212, 171, 156, 190, 248, 227, 161, 189, 183, 120, 83, 191, 99, 170, 131, 186, 127, 190, 72, 62, 245, 31, 46, 191, 195, 1, 26, 189, 86, 131, 243, 61, 187, 180, 128, 190, 8, 191, 51, 189, 247, 151, 184, 61, 196, 128, 35, 61, 30, 98, 34, 62, 206, 218, 50, 189, 134, 7, 237, 61, 232, 231, 167, 190, 154, 173, 229, 189, 160, 233, 227, 60, 251, 46, 227, 60, 33, 73, 218, 190, 149, 127, 74, 191, 96, 105, 134, 190, 9, 175, 143, 62, 95, 32, 130, 190, 62, 161, 87, 61, 55, 159, 81, 190, 238, 207, 56, 62, 55, 86, 162, 191, 130, 224, 170, 190, 192, 8, 209, 188, 26, 142, 100, 61, 123, 152, 38, 190, 225, 71, 151, 189, 135, 39, 42, 190, 152, 26, 38, 189, 119, 64, 167, 61, 103, 24, 133, 61, 159, 25, 231, 61, 48, 65, 13, 190, 36, 198, 4, 189, 75, 206, 33, 190, 79, 104, 236, 61, 119, 228, 14, 62, 156, 155, 26, 190, 191, 121, 59, 190, 166, 193, 0, 190, 195, 119, 208, 189, 208, 24, 214, 60, 47, 199, 25, 190, 185, 75, 149, 60, 142, 32, 31, 61, 54, 206, 169, 189, 58, 90, 240, 189, 186, 150, 135, 188, 222, 130, 226, 189, 153, 207, 179, 61, 57, 86, 189, 59, 1, 112, 249, 189, 219, 148, 177, 61, 147, 20, 149, 188, 38, 177, 253, 61, 7, 255, 159, 189, 232, 84, 57, 61, 157, 85, 17, 61, 210, 235, 4, 62, 84, 189, 3, 62, 22, 7, 40, 190, 146, 3, 42, 189, 240, 2, 171, 61, 22, 150, 15, 190, 140, 106, 27, 62, 139, 228, 70, 190, 218, 10, 1, 61, 122, 199, 100, 190, 12, 217, 104, 61, 229, 104, 161, 189, 242, 135, 243, 189, 77, 149, 29, 61, 183, 214, 156, 189, 47, 73, 194, 60, 81, 233, 225, 61, 17, 51, 251, 189, 71, 18, 183, 61, 184, 164, 41, 190, 182, 241, 26, 190, 68, 183, 35, 190, 32, 180, 179, 61, 16, 169, 183, 190, 62, 44, 218, 189, 31, 141, 44, 190, 116, 5, 184, 189, 44, 100, 9, 62, 140, 149, 254, 59, 22, 238, 95, 62, 73, 25, 216, 188, 74, 156, 1, 191, 65, 100, 171, 191, 18, 105, 145, 62, 230, 156, 47, 191, 164, 184, 37, 189, 62, 119, 62, 190, 71, 249, 43, 191, 165, 166, 3, 190, 255, 174, 11, 62, 129, 131, 243, 59, 148, 20, 118, 61, 163, 84, 109, 62, 110, 117, 44, 190, 108, 49, 248, 61, 89, 131, 139, 62, 249, 194, 6, 189, 29, 30, 47, 189, 224, 106, 24, 190, 231, 248, 135, 62, 150, 107, 238, 188, 81, 123, 81, 191, 30, 33, 240, 189, 203, 26, 109, 62, 171, 18, 230, 62, 155, 187, 245, 190, 26, 117, 142, 62, 66, 80, 157, 61, 201, 125, 62, 62, 83, 22, 207, 62, 172, 33, 238, 189, 192, 48, 95, 62, 172, 204, 4, 62, 248, 148, 157, 62, 21, 205, 137, 62, 90, 52, 16, 190, 76, 76, 144, 62, 172, 175, 248, 61, 165, 93, 216, 60, 50, 242, 146, 62, 140, 217, 97, 190, 136, 17, 12, 190, 161, 8, 51, 189, 108, 105, 2, 62, 158, 68, 153, 191, 247, 255, 180, 61, 131, 90, 183, 190, 145, 119, 19, 191, 55, 88, 50, 189, 135, 31, 97, 190, 254, 21, 12, 62, 211, 142, 66, 191, 219, 228, 132, 190, 69, 154, 92, 62, 190, 145, 171, 62, 205, 0, 251, 189, 183, 247, 165, 190, 235, 18, 2, 63, 71, 9, 224, 190, 147, 247, 252, 60, 236, 137, 45, 191, 155, 202, 48, 63, 155, 45, 92, 62, 241, 85, 194, 62, 141, 217, 45, 62, 195, 47, 81, 190, 50, 128, 213, 62, 15, 46, 134, 190, 130, 168, 236, 62, 178, 146, 208, 62, 52, 130, 228, 62, 182, 136, 79, 62, 248, 216, 153, 189, 198, 126, 240, 61, 35, 149, 166, 61, 209, 124, 215, 60, 85, 127, 211, 189, 9, 95, 178, 62, 246, 70, 116, 190, 14, 19, 238, 190, 167, 121, 224, 61, 93, 170, 46, 191, 48, 99, 184, 62, 248, 165, 190, 189, 2, 76, 232, 190, 58, 2, 176, 61, 70, 99, 167, 62, 195, 208, 40, 191, 59, 87, 83, 190, 28, 186, 163, 62, 126, 199, 114, 190, 34, 209, 75, 61, 189, 205, 35, 191, 112, 1, 178, 61, 126, 72, 130, 190, 31, 171, 20, 62, 134, 97, 243, 60, 9, 159, 1, 189, 123, 27, 86, 60, 54, 192, 147, 61, 116, 87, 40, 190, 212, 38, 138, 60, 160, 222, 70, 189, 194, 249, 167, 189, 182, 47, 22, 189, 226, 242, 8, 190, 47, 179, 29, 190, 230, 132, 74, 189, 14, 159, 14, 190, 157, 196, 46, 190, 201, 188, 151, 61, 248, 66, 208, 60, 164, 18, 40, 190, 36, 130, 241, 189, 241, 238, 90, 61, 224, 147, 123, 189, 229, 137, 22, 189, 137, 220, 146, 189, 17, 39, 152, 189, 25, 199, 74, 189, 130, 132, 152, 61, 221, 17, 158, 61, 196, 78, 14, 190, 253, 205, 7, 190, 36, 44, 84, 61, 185, 46, 2, 62, 181, 122, 172, 61, 229, 121, 17, 190, 194, 107, 172, 190, 107, 209, 4, 63, 141, 91, 178, 190, 174, 102, 150, 62, 176, 134, 110, 62, 185, 235, 38, 191, 31, 230, 1, 190, 209, 14, 144, 190, 111, 190, 134, 190, 84, 115, 224, 61, 147, 52, 197, 188, 7, 37, 60, 62, 183, 89, 113, 61, 121, 255, 62, 191, 135, 248, 50, 62, 152, 56, 89, 62, 29, 98, 46, 191, 166, 148, 134, 190, 60, 139, 49, 61, 84, 143, 249, 188, 235, 65, 143, 190, 99, 210, 79, 191, 97, 6, 0, 191, 51, 5, 156, 61, 121, 126, 163, 62, 23, 85, 32, 190, 90, 245, 160, 189, 130, 148, 5, 191, 136, 109, 185, 189, 154, 149, 12, 191, 200, 224, 230, 189, 90, 50, 206, 61, 228, 19, 188, 187, 217, 42, 44, 191, 99, 40, 38, 191, 138, 88, 152, 189, 211, 70, 128, 191, 219, 127, 143, 189, 211, 95, 211, 189, 169, 70, 184, 190, 248, 172, 52, 62, 123, 251, 37, 62, 244, 53, 74, 190, 50, 221, 247, 61, 228, 202, 190, 61, 104, 27, 156, 61, 43, 136, 41, 62, 30, 81, 175, 190, 181, 132, 122, 190, 222, 0, 42, 190, 222, 200, 165, 59, 58, 48, 54, 190, 42, 169, 99, 187, 165, 139, 150, 190, 167, 34, 98, 187, 250, 252, 116, 189, 193, 222, 127, 61, 125, 26, 135, 190, 21, 218, 32, 189, 97, 98, 22, 61, 31, 29, 124, 61, 196, 8, 170, 62, 25, 108, 133, 190, 186, 31, 138, 189, 117, 57, 94, 189, 229, 219, 131, 61, 124, 59, 242, 190, 255, 211, 217, 189, 191, 99, 134, 191, 12, 6, 250, 189, 82, 104, 189, 187, 137, 215, 71, 190, 27, 129, 152, 61, 55, 154, 18, 62, 180, 134, 129, 190, 208, 13, 126, 61, 253, 106, 137, 188, 248, 140, 108, 61, 75, 164, 31, 62, 159, 21, 85, 62, 179, 73, 111, 189, 94, 4, 133, 190, 204, 79, 91, 190, 199, 3, 74, 62, 127, 110, 66, 62, 97, 244, 233, 189, 182, 56, 147, 191, 42, 70, 61, 190, 171, 144, 48, 62, 118, 121, 135, 190, 207, 215, 48, 62, 150, 38, 108, 190, 20, 237, 158, 60, 224, 80, 189, 191, 149, 97, 199, 190, 29, 196, 228, 62, 207, 9, 106, 61, 209, 8, 9, 190, 161, 144, 20, 62, 229, 220, 58, 62, 156, 129, 134, 190, 46, 43, 154, 60, 88, 21, 36, 189, 128, 139, 36, 191, 230, 252, 183, 61, 18, 138, 18, 190, 21, 162, 72, 62, 97, 10, 145, 190, 100, 113, 237, 61, 110, 63, 45, 61, 132, 147, 10, 62, 37, 199, 109, 62, 9, 212, 29, 189, 89, 141, 67, 189, 57, 131, 120, 189, 47, 159, 158, 61, 166, 230, 71, 62, 192, 85, 151, 190, 226, 217, 191, 62, 225, 7, 8, 61, 49, 133, 48, 62, 226, 204, 2, 191, 64, 9, 234, 60, 196, 101, 100, 62, 111, 95, 131, 62, 89, 64, 251, 62, 24, 143, 45, 62, 105, 252, 0, 191, 156, 161, 62, 191, 79, 157, 149, 62, 234, 211, 162, 188, 33, 83, 162, 190, 169, 176, 57, 191, 135, 139, 223, 190, 3, 0, 192, 190, 84, 98, 228, 187, 116, 92, 129, 61, 82, 135, 133, 62, 135, 199, 19, 191, 188, 88, 95, 62, 210, 134, 85, 189, 153, 55, 43, 191, 123, 35, 201, 60, 93, 228, 1, 62, 254, 205, 71, 189, 17, 252, 177, 62, 209, 199, 244, 189, 228, 35, 21, 190, 97, 52, 231, 190, 16, 15, 187, 62, 198, 32, 245, 190, 219, 87, 58, 62, 35, 62, 160, 62, 86, 75, 246, 62, 91, 59, 145, 190, 101, 56, 197, 188, 249, 205, 211, 189, 69, 155, 53, 191, 175, 205, 142, 63, 221, 42, 249, 188, 127, 194, 31, 188, 223, 21, 130, 61, 61, 225, 20, 62, 123, 221, 149, 188, 34, 122, 12, 190, 22, 39, 27, 190, 233, 172, 219, 58, 0, 219, 51, 190, 243, 185, 48, 61, 227, 229, 167, 189, 138, 143, 42, 62, 198, 76, 220, 189, 22, 63, 152, 189, 178, 177, 241, 189, 84, 212, 246, 189, 219, 161, 121, 189, 140, 44, 108, 189, 170, 31, 78, 187, 212, 222, 24, 62, 192, 149, 8, 190, 138, 51, 238, 189, 18, 78, 43, 190, 56, 144, 128, 189, 13, 181, 176, 60, 225, 45, 23, 190, 224, 236, 238, 59, 236, 102, 253, 189, 110, 217, 230, 189, 51, 83, 16, 190, 246, 172, 206, 61, 61, 96, 162, 189, 48, 237, 146, 62, 233, 191, 191, 187, 236, 172, 170, 189, 114, 182, 28, 63, 89, 76, 193, 190, 139, 176, 34, 62, 111, 148, 70, 62, 173, 88, 230, 62, 124, 238, 11, 62, 199, 155, 69, 190, 234, 169, 135, 190, 155, 136, 24, 190, 168, 121, 129, 59, 45, 111, 38, 60, 70, 175, 115, 62, 241, 16, 252, 190, 155, 45, 181, 190, 79, 80, 147, 62, 85, 67, 210, 191, 188, 102, 43, 62, 22, 47, 24, 61, 30, 70, 155, 190, 142, 227, 24, 62, 161, 140, 70, 62, 137, 103, 158, 191, 75, 190, 231, 190, 19, 203, 116, 62, 58, 230, 143, 189, 26, 220, 228, 188, 194, 12, 0, 191, 234, 215, 40, 190, 137, 78, 189, 190, 25, 141, 6, 190, 195, 41, 247, 187, 23, 54, 182, 188, 6, 3, 185, 190, 187, 104, 224, 61, 17, 181, 202, 190, 146, 109, 133, 190, 145, 255, 69, 188, 7, 249, 124, 62, 166, 216, 5, 191, 227, 142, 132, 190, 225, 16, 2, 190, 181, 14, 2, 61, 77, 12, 73, 190, 203, 225, 249, 189, 67, 180, 88, 190, 203, 164, 164, 62, 86, 205, 142, 189, 247, 230, 32, 62, 221, 37, 155, 190, 77, 87, 199, 190, 2, 255, 111, 62, 51, 238, 142, 62, 243, 161, 211, 190, 179, 118, 110, 62, 123, 69, 146, 62, 73, 161, 109, 60, 117, 90, 136, 62, 165, 94, 87, 191, 72, 178, 4, 62, 20, 10, 225, 190, 125, 247, 219, 62, 5, 150, 173, 61, 22, 213, 61, 62, 212, 144, 249, 189, 23, 130, 154, 60, 254, 6, 20, 190, 55, 208, 216, 61, 179, 192, 9, 62, 159, 245, 169, 62, 27, 150, 112, 61, 51, 131, 66, 62, 26, 136, 150, 62, 197, 125, 153, 188, 87, 234, 82, 62, 234, 29, 148, 189, 195, 57, 138, 62, 32, 76, 94, 61, 222, 226, 174, 61, 157, 30, 245, 188, 203, 232, 168, 190, 10, 249, 9, 189, 24, 41, 66, 190, 241, 135, 127, 190, 179, 28, 36, 188, 106, 243, 100, 61, 173, 56, 151, 190, 56, 206, 95, 62, 146, 250, 208, 61, 214, 159, 10, 62, 68, 93, 38, 62, 125, 234, 201, 61, 82, 39, 96, 62, 167, 76, 154, 188, 79, 56, 66, 190, 114, 9, 209, 61, 28, 150, 140, 59, 70, 17, 161, 190, 54, 226, 252, 61, 191, 32, 219, 189, 108, 33, 159, 190, 202, 227, 179, 190, 156, 178, 116, 190, 87, 73, 130, 61, 136, 218, 163, 61, 173, 124, 252, 60, 12, 13, 98, 62, 176, 203, 39, 60, 154, 209, 65, 190, 49, 60, 218, 61, 148, 41, 100, 61, 190, 33, 66, 188, 50, 239, 191, 60, 97, 146, 194, 61, 193, 130, 3, 190, 197, 93, 166, 189, 231, 121, 9, 188, 224, 137, 82, 191, 87, 183, 37, 190, 179, 237, 98, 62, 156, 74, 48, 190, 79, 81, 44, 61, 80, 206, 68, 190, 237, 233, 141, 60, 105, 164, 170, 190, 14, 197, 99, 62, 113, 118, 14, 191, 53, 54, 122, 190, 129, 136, 66, 62, 121, 89, 177, 190, 76, 63, 9, 61, 186, 221, 148, 191, 21, 18, 215, 190, 122, 149, 77, 190, 79, 163, 12, 62, 173, 240, 10, 61, 245, 233, 45, 62, 233, 193, 159, 190, 37, 232, 151, 188, 179, 215, 80, 62, 229, 34, 77, 190, 116, 12, 160, 61, 120, 67, 161, 62, 109, 106, 8, 190, 54, 40, 209, 62, 39, 221, 255, 189, 167, 172, 140, 189, 245, 123, 85, 62, 220, 23, 41, 62, 207, 243, 42, 191, 19, 234, 164, 62, 165, 30, 154, 62, 64, 86, 222, 61, 142, 108, 152, 61, 70, 109, 209, 61, 137, 161, 138, 62, 234, 36, 29, 191, 84, 18, 247, 62, 78, 47, 134, 190, 68, 39, 137, 190, 233, 122, 46, 62, 242, 189, 188, 190, 13, 163, 144, 189, 184, 40, 42, 190, 47, 242, 8, 60, 176, 57, 64, 188, 244, 16, 24, 190, 83, 9, 14, 191, 163, 51, 245, 188, 154, 230, 16, 58, 95, 105, 176, 61, 27, 195, 179, 61, 37, 171, 170, 190, 51, 219, 158, 189, 129, 70, 170, 57, 54, 246, 111, 190, 188, 191, 107, 191, 176, 174, 4, 190, 77, 215, 129, 190, 186, 116, 214, 189, 217, 40, 224, 189, 238, 42, 185, 190, 154, 16, 24, 191, 109, 241, 165, 62, 20, 15, 35, 190, 76, 29, 49, 190, 164, 5, 3, 190, 223, 12, 150, 190, 21, 134, 177, 189, 220, 226, 175, 190, 179, 0, 43, 190, 56, 108, 23, 189, 112, 38, 197, 61, 235, 135, 228, 190, 103, 56, 41, 62, 152, 222, 12, 191, 59, 26, 60, 187, 29, 159, 252, 189, 42, 202, 68, 188, 17, 243, 135, 60, 216, 148, 172, 61, 25, 193, 190, 60, 28, 112, 163, 189, 175, 167, 38, 62, 189, 19, 186, 61, 11, 13, 17, 61, 107, 95, 40, 62, 118, 74, 133, 189, 254, 86, 211, 189, 120, 193, 173, 188, 209, 216, 247, 61, 224, 15, 157, 62, 88, 137, 71, 62, 159, 140, 58, 191, 213, 42, 11, 190, 224, 179, 204, 60, 132, 175, 145, 189, 81, 62, 50, 62, 136, 12, 179, 190, 166, 162, 82, 189, 65, 54, 63, 191, 19, 47, 72, 63, 15, 104, 3, 190, 204, 76, 5, 62, 203, 79, 212, 189, 108, 248, 199, 189, 154, 162, 170, 61, 46, 236, 136, 189, 202, 66, 29, 61, 142, 123, 79, 190, 150, 97, 150, 60, 217, 3, 2, 62, 246, 167, 185, 61, 60, 252, 219, 189, 187, 228, 150, 60, 247, 250, 141, 189, 160, 221, 108, 190, 113, 197, 254, 188, 185, 25, 207, 61, 21, 61, 125, 190, 201, 136, 101, 61, 114, 213, 238, 189, 189, 195, 72, 61, 125, 255, 6, 59, 92, 168, 149, 189, 243, 172, 242, 61, 107, 69, 24, 183, 176, 27, 239, 189, 195, 162, 203, 189, 216, 60, 245, 189, 20, 195, 50, 190, 233, 96, 52, 190, 150, 179, 199, 61, 174, 150, 111, 61, 63, 167, 165, 189, 6, 175, 17, 189, 197, 77, 154, 188, 98, 217, 206, 60, 80, 116, 140, 189, 244, 212, 15, 190, 106, 130, 70, 189, 102, 244, 166, 60, 177, 205, 185, 61, 243, 125, 157, 189, 67, 196, 105, 188, 204, 66, 182, 61, 69, 52, 47, 190, 9, 248, 245, 187, 198, 185, 69, 61, 40, 63, 1, 190, 151, 19, 231, 188, 145, 6, 58, 189, 220, 154, 245, 188, 72, 146, 34, 190, 108, 72, 255, 188, 118, 113, 16, 190, 92, 237, 176, 189, 5, 175, 15, 62, 198, 87, 220, 189, 100, 99, 41, 62, 114, 10, 90, 61, 237, 46, 126, 61, 176, 21, 26, 62, 197, 231, 47, 62, 38, 156, 240, 60, 114, 129, 142, 189, 41, 64, 191, 60, 61, 61, 90, 189, 94, 195, 201, 189, 221, 159, 31, 190, 136, 143, 194, 189, 17, 143, 161, 189, 188, 236, 0, 190, 121, 70, 123, 190, 10, 197, 211, 187, 181, 205, 161, 189, 44, 18, 154, 190, 147, 38, 204, 61, 209, 127, 130, 190, 238, 216, 9, 190, 142, 60, 200, 189, 117, 162, 143, 61, 38, 17, 41, 189, 225, 59, 169, 189, 7, 139, 47, 190, 117, 174, 73, 189, 34, 98, 143, 60, 12, 72, 2, 62, 114, 229, 32, 190, 10, 48, 33, 190, 103, 101, 177, 59, 173, 17, 166, 61, 46, 186, 83, 190, 134, 22, 31, 62, 228, 157, 81, 61, 46, 224, 244, 60, 12, 129, 10, 62, 197, 149, 15, 190, 4, 174, 94, 61, 220, 140, 4, 190, 120, 231, 147, 62, 36, 59, 12, 62, 250, 26, 49, 62, 186, 173, 52, 62, 160, 61, 137, 189, 191, 212, 0, 62, 18, 110, 22, 62, 219, 84, 102, 190, 150, 91, 51, 61, 244, 225, 114, 188, 233, 106, 67, 62, 18, 207, 192, 190, 58, 13, 74, 190, 50, 142, 205, 188, 138, 147, 3, 190, 38, 179, 157, 190, 227, 35, 65, 62, 202, 140, 35, 61, 194, 45, 89, 191, 18, 42, 235, 190, 184, 94, 227, 59, 15, 168, 9, 62, 189, 247, 125, 190, 73, 255, 160, 61, 187, 234, 97, 62, 79, 39, 249, 190, 136, 184, 68, 189, 166, 204, 59, 191, 180, 5, 30, 63, 251, 136, 18, 63, 49, 223, 72, 190, 121, 193, 178, 189, 242, 86, 131, 189, 90, 59, 231, 187, 140, 198, 118, 190, 190, 226, 4, 191, 135, 162, 212, 61, 125, 224, 200, 61, 16, 92, 72, 61, 184, 104, 154, 61, 203, 143, 191, 190, 207, 255, 0, 191, 175, 154, 143, 189, 21, 153, 103, 189, 71, 58, 197, 61, 198, 167, 192, 190, 246, 227, 188, 61, 41, 47, 198, 61, 165, 228, 172, 58, 170, 126, 101, 61, 182, 136, 112, 190, 68, 242, 124, 189, 249, 55, 137, 62, 54, 193, 170, 190, 247, 201, 126, 188, 103, 213, 244, 189, 237, 91, 148, 61, 246, 110, 14, 62, 231, 173, 212, 190, 108, 164, 226, 60, 47, 126, 120, 191, 120, 189, 15, 189, 98, 205, 160, 60, 186, 243, 141, 190, 183, 195, 73, 190, 11, 148, 17, 191, 52, 198, 168, 62, 245, 18, 17, 190, 67, 125, 231, 190, 164, 148, 57, 191, 157, 16, 253, 189, 168, 255, 196, 189, 39, 93, 63, 62, 209, 241, 101, 62, 149, 89, 10, 61, 109, 96, 48, 189, 154, 159, 190, 190, 86, 20, 80, 61, 89, 235, 161, 61, 185, 188, 206, 190, 209, 12, 32, 62, 72, 120, 157, 190, 28, 162, 88, 62, 135, 20, 129, 190, 79, 105, 142, 189, 155, 244, 202, 61, 248, 135, 0, 62, 92, 219, 136, 62, 202, 201, 22, 62, 174, 123, 3, 188, 236, 141, 141, 188, 17, 249, 5, 186, 150, 151, 112, 62, 173, 168, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 154, 3, 62, 91, 96, 189, 60, 228, 15, 173, 61, 70, 42, 154, 189, 24, 94, 8, 62, 27, 133, 58, 189, 157, 165, 133, 62, 93, 228, 73, 190, 181, 83, 140, 190, 178, 78, 140, 190, 70, 47, 248, 60, 108, 92, 176, 62, 134, 167, 130, 189, 122, 32, 69, 187, 59, 74, 129, 188, 72, 66, 134, 62, 86, 210, 178, 190, 9, 177, 247, 62, 92, 12, 18, 60, 194, 142, 225, 62, 188, 187, 201, 189, 17, 107, 179, 62, 50, 17, 146, 62, 221, 39, 118, 62, 185, 163, 221, 189, 236, 31, 24, 62, 31, 81, 24, 190, 159, 45, 78, 190, 53, 38, 103, 189, 165, 141, 123, 62, 110, 142, 42, 62, 36, 84, 231, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 61, 68, 190, 21, 185, 157, 190, 233, 139, 23, 191, 139, 55, 143, 62, 75, 188, 19, 62, 213, 10, 67, 63, 211, 232, 43, 191, 195, 93, 221, 60, 185, 28, 26, 61, 22, 59, 26, 63, 78, 63, 106, 191, 223, 15, 79, 63, 64, 233, 88, 61, 149, 95, 108, 191, 29, 244, 115, 62, 75, 21, 60, 191, 96, 192, 8, 191, 205, 198, 136, 191, 53, 233, 27, 190, 139, 14, 144, 63, 87, 121, 165, 190, 95, 246, 151, 61, 7, 103, 212, 189, 37, 31, 9, 191, 221, 122, 12, 63, 126, 63, 184, 190, 74, 105, 189, 187, 138, 79, 183, 61, 12, 146, 22, 62, 244, 222, 1, 191, 113, 27, 245, 61, 97, 52, 184, 62, 59, 249, 136, 61, 145, 65, 24, 187, 172, 82, 121, 62, 135, 16, 214, 189, 182, 57, 158, 190, 142, 206, 189, 61, 237, 27, 209, 190, 241, 169, 33, 190, 50, 5, 52, 62, 118, 51, 237, 189, 168, 127, 253, 61, 114, 17, 140, 61, 38, 248, 220, 61, 229, 76, 80, 62, 118, 3, 108, 190, 184, 79, 187, 62, 26, 5, 114, 62, 166, 5, 175, 189, 199, 252, 159, 188, 190, 26, 157, 189, 68, 169, 8, 190, 128, 189, 155, 190, 149, 74, 15, 190, 116, 105, 103, 62, 21, 124, 4, 62, 203, 28, 173, 189, 7, 239, 136, 61, 174, 96, 31, 190, 136, 109, 84, 61, 217, 164, 11, 191, 232, 183, 155, 190, 145, 226, 1, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 144, 43, 62, 208, 62, 253, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {228, 127, 200, 63, 196, 88, 21, 64, 219, 26, 0, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 232, 183, 192, 140, 127, 1, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0043/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}