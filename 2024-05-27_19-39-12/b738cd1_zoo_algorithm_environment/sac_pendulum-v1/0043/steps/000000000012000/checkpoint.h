// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 195, 177, 62, 235, 255, 93, 189, 156, 48, 10, 191, 80, 221, 134, 190, 0, 167, 220, 189, 4, 240, 1, 63, 130, 25, 152, 190, 10, 95, 89, 63, 112, 101, 116, 62, 8, 34, 179, 62, 80, 235, 138, 191, 181, 251, 29, 190, 142, 112, 231, 62, 153, 0, 97, 63, 72, 66, 237, 62, 51, 116, 204, 190, 164, 36, 220, 63, 97, 247, 177, 62, 27, 253, 73, 191, 249, 96, 3, 60, 62, 81, 8, 63, 115, 0, 92, 63, 94, 66, 125, 191, 131, 245, 3, 190, 72, 51, 69, 191, 118, 188, 139, 62, 255, 198, 202, 61, 3, 135, 91, 61, 252, 57, 241, 190, 159, 179, 114, 190, 157, 229, 33, 61, 143, 99, 111, 62, 204, 216, 2, 191, 98, 193, 244, 189, 189, 59, 129, 63, 240, 154, 178, 62, 22, 27, 163, 189, 52, 248, 165, 62, 112, 119, 147, 190, 185, 218, 234, 186, 153, 112, 148, 61, 231, 46, 205, 190, 20, 86, 245, 190, 91, 226, 213, 190, 195, 60, 200, 62, 46, 35, 143, 190, 223, 152, 31, 62, 24, 170, 43, 191, 192, 162, 109, 63, 11, 229, 53, 63, 247, 69, 15, 63, 3, 120, 21, 191, 154, 25, 19, 191, 219, 104, 23, 63, 1, 12, 148, 190, 237, 111, 204, 191, 189, 20, 195, 190, 111, 14, 24, 191, 157, 102, 1, 63, 201, 255, 244, 62, 114, 154, 234, 190, 205, 152, 145, 60, 146, 164, 174, 190, 136, 243, 254, 62, 141, 188, 162, 190, 147, 157, 13, 63, 138, 251, 227, 190, 108, 42, 52, 191, 64, 194, 136, 189, 134, 43, 47, 63, 253, 95, 137, 191, 160, 194, 138, 190, 219, 110, 71, 191, 172, 130, 253, 190, 38, 153, 220, 190, 45, 104, 38, 63, 46, 236, 83, 63, 229, 78, 89, 62, 12, 109, 28, 191, 45, 28, 144, 190, 205, 11, 35, 189, 74, 221, 68, 63, 217, 185, 161, 190, 123, 185, 21, 63, 229, 161, 3, 62, 214, 233, 60, 191, 251, 254, 113, 190, 252, 140, 14, 63, 86, 233, 157, 60, 66, 111, 161, 62, 7, 92, 91, 63, 86, 248, 17, 191, 110, 151, 166, 190, 122, 43, 29, 191, 44, 209, 243, 190, 136, 167, 65, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 218, 102, 191, 25, 96, 174, 62, 67, 224, 38, 63, 161, 155, 106, 58, 234, 248, 79, 190, 209, 31, 225, 189, 108, 203, 132, 190, 169, 219, 180, 61, 234, 210, 71, 62, 6, 11, 30, 60, 176, 217, 232, 62, 21, 161, 174, 60, 228, 81, 52, 63, 34, 143, 194, 190, 238, 248, 161, 62, 100, 181, 190, 61, 153, 3, 156, 189, 214, 177, 146, 62, 211, 158, 25, 190, 48, 187, 177, 189, 165, 59, 160, 190, 118, 246, 36, 191, 5, 36, 2, 63, 184, 117, 165, 190, 106, 51, 12, 191, 220, 105, 140, 189, 60, 128, 33, 63, 79, 58, 166, 189, 95, 39, 94, 189, 156, 228, 100, 191, 163, 30, 80, 191, 52, 163, 237, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 151, 240, 189, 30, 128, 125, 190, 131, 182, 229, 59, 197, 241, 251, 189, 216, 190, 85, 62, 116, 79, 46, 61, 222, 130, 192, 190, 230, 134, 173, 61, 221, 179, 52, 190, 61, 125, 2, 62, 99, 4, 5, 190, 189, 85, 9, 62, 52, 234, 126, 190, 26, 139, 1, 62, 157, 95, 35, 190, 30, 233, 107, 189, 181, 47, 154, 62, 95, 207, 90, 190, 4, 11, 175, 62, 115, 22, 133, 190, 250, 93, 113, 59, 54, 186, 221, 60, 66, 74, 233, 60, 246, 217, 100, 190, 54, 190, 159, 62, 249, 142, 234, 188, 203, 133, 185, 60, 252, 177, 160, 61, 174, 220, 111, 61, 12, 167, 246, 189, 156, 166, 99, 190, 57, 181, 180, 62, 45, 226, 250, 189, 37, 132, 3, 62, 92, 173, 14, 190, 66, 48, 149, 190, 156, 206, 2, 62, 229, 141, 89, 190, 134, 17, 80, 61, 142, 106, 110, 190, 36, 32, 141, 190, 222, 15, 136, 61, 184, 18, 228, 190, 34, 205, 252, 189, 192, 31, 63, 190, 55, 172, 47, 190, 24, 7, 3, 190, 93, 221, 25, 62, 21, 254, 130, 61, 14, 11, 83, 190, 12, 254, 31, 190, 36, 198, 233, 61, 80, 19, 165, 60, 30, 245, 99, 62, 40, 14, 158, 189, 215, 120, 5, 191, 185, 137, 0, 62, 108, 38, 142, 62, 193, 237, 24, 191, 216, 169, 41, 62, 184, 110, 92, 61, 89, 198, 89, 61, 37, 200, 24, 189, 165, 182, 83, 62, 61, 99, 225, 189, 66, 16, 248, 61, 35, 51, 227, 62, 42, 249, 249, 190, 230, 199, 69, 189, 166, 86, 232, 190, 155, 178, 10, 189, 230, 247, 163, 190, 125, 139, 140, 62, 220, 86, 169, 189, 1, 22, 85, 62, 175, 112, 164, 189, 218, 76, 52, 62, 166, 237, 17, 61, 97, 161, 238, 189, 232, 181, 215, 188, 54, 69, 52, 62, 183, 237, 194, 60, 186, 86, 155, 190, 128, 87, 149, 190, 120, 221, 180, 189, 193, 105, 111, 61, 102, 79, 63, 190, 57, 223, 11, 191, 194, 230, 192, 189, 248, 127, 243, 62, 189, 29, 37, 190, 139, 235, 167, 59, 160, 2, 102, 189, 82, 126, 191, 189, 204, 64, 21, 191, 245, 87, 138, 63, 171, 78, 203, 61, 205, 186, 134, 190, 123, 188, 17, 191, 94, 126, 208, 190, 200, 87, 74, 62, 52, 56, 137, 191, 84, 244, 32, 190, 141, 57, 204, 190, 98, 81, 103, 61, 131, 9, 39, 62, 112, 213, 142, 62, 40, 189, 157, 189, 118, 142, 90, 62, 151, 19, 30, 62, 185, 169, 218, 61, 186, 22, 17, 62, 233, 22, 202, 189, 101, 58, 150, 190, 115, 98, 189, 62, 53, 152, 251, 189, 186, 242, 107, 62, 97, 148, 132, 190, 110, 94, 81, 190, 136, 69, 93, 189, 150, 154, 173, 60, 32, 45, 214, 190, 149, 194, 17, 190, 64, 211, 38, 189, 62, 16, 120, 189, 188, 51, 141, 61, 78, 194, 145, 61, 93, 150, 205, 62, 43, 184, 226, 60, 26, 81, 55, 189, 214, 141, 106, 60, 94, 153, 147, 61, 217, 44, 1, 190, 118, 251, 197, 189, 33, 187, 132, 188, 61, 112, 156, 62, 150, 145, 37, 190, 86, 88, 39, 62, 76, 244, 8, 62, 246, 149, 138, 190, 90, 187, 66, 62, 249, 18, 4, 60, 138, 88, 31, 62, 176, 14, 15, 190, 202, 171, 174, 189, 36, 17, 21, 62, 158, 70, 32, 191, 43, 124, 71, 187, 104, 238, 246, 189, 223, 97, 21, 190, 145, 118, 10, 61, 37, 50, 163, 61, 97, 185, 252, 190, 226, 189, 63, 190, 179, 231, 50, 61, 119, 156, 115, 61, 250, 6, 201, 60, 148, 222, 134, 190, 194, 113, 37, 189, 22, 228, 238, 187, 130, 40, 225, 62, 154, 53, 193, 59, 99, 142, 88, 60, 82, 206, 41, 63, 182, 252, 10, 190, 77, 33, 162, 62, 204, 170, 3, 62, 231, 131, 134, 62, 252, 99, 144, 62, 236, 223, 154, 61, 255, 205, 209, 189, 54, 50, 243, 189, 67, 30, 162, 60, 23, 166, 51, 189, 244, 50, 93, 62, 173, 130, 67, 190, 16, 142, 74, 190, 219, 52, 102, 189, 131, 83, 209, 191, 223, 245, 58, 62, 41, 112, 34, 62, 144, 205, 23, 186, 46, 70, 127, 61, 66, 185, 81, 62, 108, 75, 34, 191, 49, 97, 60, 190, 224, 225, 160, 62, 100, 179, 131, 189, 121, 180, 203, 61, 83, 3, 102, 190, 108, 68, 173, 62, 85, 39, 196, 190, 218, 30, 84, 62, 181, 204, 75, 61, 14, 154, 101, 62, 178, 42, 88, 190, 181, 216, 152, 189, 75, 245, 75, 191, 248, 147, 111, 188, 90, 29, 117, 62, 45, 10, 2, 191, 143, 184, 42, 60, 127, 173, 200, 61, 69, 94, 147, 190, 52, 40, 71, 189, 202, 101, 156, 61, 13, 179, 173, 188, 162, 110, 0, 62, 47, 173, 141, 188, 107, 247, 229, 60, 167, 36, 82, 190, 71, 80, 4, 190, 82, 55, 102, 61, 39, 134, 131, 189, 156, 159, 169, 190, 143, 132, 50, 191, 10, 243, 78, 190, 45, 184, 141, 62, 3, 90, 105, 190, 191, 77, 220, 61, 230, 108, 164, 189, 85, 85, 19, 62, 225, 220, 164, 191, 207, 19, 186, 190, 80, 93, 156, 187, 26, 142, 100, 61, 104, 186, 36, 190, 225, 71, 151, 189, 135, 39, 42, 190, 152, 26, 38, 189, 119, 64, 167, 61, 103, 24, 133, 61, 107, 1, 239, 61, 251, 234, 11, 190, 76, 107, 21, 58, 75, 206, 33, 190, 207, 185, 18, 62, 193, 140, 37, 62, 156, 155, 26, 190, 111, 110, 25, 190, 166, 193, 0, 190, 195, 119, 208, 189, 174, 168, 25, 61, 47, 199, 25, 190, 152, 108, 38, 61, 142, 32, 31, 61, 89, 174, 162, 189, 15, 20, 239, 189, 196, 68, 167, 59, 222, 130, 226, 189, 79, 200, 200, 61, 57, 86, 189, 59, 113, 211, 240, 189, 219, 148, 177, 61, 23, 34, 146, 188, 38, 177, 253, 61, 7, 255, 159, 189, 232, 84, 57, 61, 157, 85, 17, 61, 210, 235, 4, 62, 84, 189, 3, 62, 22, 7, 40, 190, 146, 3, 42, 189, 240, 2, 171, 61, 22, 150, 15, 190, 140, 106, 27, 62, 139, 228, 70, 190, 218, 10, 1, 61, 122, 199, 100, 190, 12, 217, 104, 61, 229, 104, 161, 189, 242, 135, 243, 189, 77, 149, 29, 61, 183, 214, 156, 189, 47, 73, 194, 60, 81, 233, 225, 61, 17, 51, 251, 189, 71, 18, 183, 61, 184, 164, 41, 190, 182, 241, 26, 190, 68, 183, 35, 190, 32, 180, 179, 61, 16, 169, 183, 190, 62, 44, 218, 189, 31, 141, 44, 190, 116, 5, 184, 189, 44, 100, 9, 62, 140, 149, 254, 59, 28, 57, 37, 62, 42, 63, 103, 189, 30, 27, 245, 190, 26, 104, 132, 191, 9, 19, 34, 62, 80, 206, 39, 191, 175, 162, 239, 189, 192, 250, 40, 190, 137, 7, 56, 191, 140, 243, 18, 190, 187, 141, 176, 61, 235, 104, 152, 189, 66, 173, 205, 59, 47, 93, 49, 62, 228, 35, 77, 190, 20, 23, 143, 61, 121, 51, 35, 62, 195, 186, 143, 189, 60, 151, 194, 189, 9, 165, 66, 190, 101, 53, 92, 62, 161, 70, 146, 189, 50, 241, 85, 191, 51, 148, 150, 189, 30, 91, 47, 62, 184, 247, 181, 62, 232, 182, 0, 191, 5, 203, 44, 62, 122, 240, 125, 61, 15, 225, 250, 61, 142, 248, 197, 62, 136, 73, 24, 190, 71, 47, 177, 62, 13, 172, 51, 62, 21, 39, 158, 62, 177, 228, 117, 62, 13, 165, 207, 189, 78, 105, 159, 62, 249, 48, 3, 62, 238, 165, 214, 186, 26, 119, 150, 62, 103, 248, 131, 190, 188, 175, 8, 190, 119, 134, 136, 188, 22, 251, 4, 62, 42, 86, 119, 191, 22, 93, 222, 61, 136, 97, 166, 190, 184, 65, 234, 190, 177, 147, 135, 59, 219, 179, 139, 190, 90, 54, 234, 61, 255, 47, 13, 191, 143, 40, 157, 190, 152, 211, 53, 62, 176, 133, 122, 62, 133, 207, 160, 190, 191, 158, 57, 190, 102, 49, 249, 62, 52, 88, 200, 190, 169, 88, 182, 188, 147, 46, 28, 191, 193, 230, 51, 63, 192, 64, 50, 62, 68, 167, 180, 62, 93, 115, 47, 62, 17, 182, 74, 190, 115, 150, 220, 62, 98, 60, 110, 190, 120, 197, 190, 62, 144, 88, 197, 62, 55, 175, 253, 62, 143, 171, 222, 61, 251, 53, 63, 189, 163, 164, 255, 61, 14, 236, 237, 60, 179, 136, 34, 61, 18, 179, 13, 190, 145, 108, 184, 62, 50, 70, 130, 190, 58, 40, 220, 190, 101, 197, 228, 61, 235, 27, 33, 191, 74, 54, 176, 62, 139, 185, 71, 190, 30, 144, 204, 190, 111, 128, 193, 61, 47, 226, 191, 62, 253, 138, 34, 191, 177, 42, 34, 190, 91, 35, 149, 62, 89, 66, 92, 190, 207, 227, 104, 61, 238, 13, 18, 191, 117, 153, 157, 61, 102, 111, 143, 190, 31, 171, 20, 62, 134, 97, 243, 60, 9, 159, 1, 189, 123, 27, 86, 60, 54, 192, 147, 61, 116, 87, 40, 190, 212, 38, 138, 60, 160, 222, 70, 189, 194, 249, 167, 189, 182, 47, 22, 189, 226, 242, 8, 190, 47, 179, 29, 190, 230, 132, 74, 189, 14, 159, 14, 190, 157, 196, 46, 190, 201, 188, 151, 61, 248, 66, 208, 60, 164, 18, 40, 190, 36, 130, 241, 189, 241, 238, 90, 61, 224, 147, 123, 189, 229, 137, 22, 189, 137, 220, 146, 189, 17, 39, 152, 189, 25, 199, 74, 189, 130, 132, 152, 61, 221, 17, 158, 61, 196, 78, 14, 190, 253, 205, 7, 190, 36, 44, 84, 61, 185, 46, 2, 62, 181, 122, 172, 61, 177, 109, 37, 190, 255, 254, 63, 190, 162, 154, 246, 62, 247, 127, 129, 190, 237, 247, 123, 62, 100, 145, 151, 62, 253, 165, 9, 191, 17, 5, 240, 189, 34, 51, 64, 190, 68, 160, 61, 190, 92, 198, 173, 61, 0, 190, 92, 61, 111, 53, 36, 62, 251, 225, 24, 61, 167, 140, 9, 191, 50, 187, 34, 62, 38, 224, 65, 62, 168, 139, 21, 191, 173, 49, 137, 190, 122, 190, 160, 61, 223, 41, 132, 189, 97, 184, 143, 190, 143, 39, 186, 190, 84, 228, 216, 190, 43, 200, 233, 59, 130, 232, 141, 62, 228, 34, 225, 189, 138, 154, 0, 189, 24, 196, 163, 190, 133, 181, 143, 190, 95, 50, 203, 190, 200, 224, 230, 189, 49, 113, 98, 61, 228, 19, 188, 187, 117, 190, 33, 191, 155, 207, 195, 190, 108, 53, 226, 188, 30, 62, 253, 190, 219, 127, 143, 189, 177, 250, 132, 60, 217, 139, 234, 190, 143, 108, 47, 62, 183, 156, 236, 61, 48, 211, 132, 189, 159, 37, 154, 61, 18, 234, 44, 61, 104, 27, 156, 61, 199, 54, 235, 61, 84, 69, 115, 190, 181, 132, 122, 190, 43, 46, 59, 190, 222, 200, 165, 59, 100, 48, 97, 190, 42, 169, 99, 187, 66, 0, 170, 190, 237, 242, 225, 61, 188, 229, 223, 189, 17, 198, 22, 189, 144, 220, 153, 190, 64, 240, 15, 190, 98, 219, 95, 61, 31, 29, 124, 61, 110, 205, 191, 62, 25, 108, 133, 190, 158, 106, 182, 189, 141, 215, 120, 189, 178, 73, 186, 60, 158, 175, 199, 190, 155, 95, 34, 190, 122, 43, 91, 191, 211, 160, 8, 190, 78, 69, 228, 60, 222, 14, 74, 190, 153, 29, 37, 62, 203, 129, 12, 62, 241, 196, 66, 190, 64, 9, 100, 61, 64, 50, 37, 189, 118, 213, 77, 61, 157, 22, 6, 62, 90, 1, 69, 62, 184, 217, 185, 189, 102, 155, 138, 190, 141, 12, 110, 190, 47, 103, 3, 62, 253, 156, 46, 62, 150, 167, 154, 60, 49, 44, 134, 191, 163, 104, 138, 190, 134, 173, 44, 62, 131, 218, 161, 190, 0, 181, 57, 62, 97, 42, 42, 189, 186, 207, 133, 60, 225, 203, 159, 191, 185, 99, 225, 190, 111, 251, 206, 62, 69, 97, 54, 61, 168, 103, 221, 189, 57, 51, 219, 61, 253, 192, 52, 62, 74, 165, 125, 190, 218, 0, 225, 185, 244, 239, 129, 189, 96, 199, 34, 191, 105, 28, 204, 60, 101, 229, 26, 190, 137, 154, 59, 62, 113, 233, 138, 190, 127, 217, 183, 61, 93, 233, 217, 60, 127, 93, 247, 61, 167, 229, 106, 62, 186, 246, 85, 189, 151, 49, 204, 189, 224, 158, 171, 189, 194, 65, 151, 61, 249, 134, 50, 62, 251, 26, 150, 190, 60, 194, 113, 62, 83, 209, 209, 60, 55, 33, 80, 62, 78, 203, 240, 190, 161, 203, 171, 60, 210, 85, 0, 62, 54, 181, 81, 62, 109, 150, 173, 62, 148, 184, 30, 62, 82, 85, 247, 190, 81, 119, 26, 191, 132, 58, 140, 62, 18, 173, 50, 189, 43, 129, 173, 190, 203, 160, 10, 191, 213, 224, 16, 191, 155, 88, 187, 190, 90, 103, 139, 61, 184, 221, 20, 58, 40, 230, 138, 62, 92, 172, 184, 190, 154, 76, 106, 62, 27, 136, 34, 189, 17, 44, 40, 191, 221, 0, 210, 60, 134, 132, 11, 62, 111, 17, 26, 190, 31, 228, 67, 62, 214, 188, 95, 190, 136, 38, 7, 190, 27, 5, 43, 190, 179, 219, 133, 62, 63, 193, 246, 190, 39, 197, 16, 62, 18, 253, 151, 62, 214, 58, 204, 62, 49, 238, 86, 190, 44, 196, 182, 189, 249, 205, 211, 189, 19, 13, 33, 191, 106, 117, 131, 63, 221, 42, 249, 188, 127, 194, 31, 188, 223, 21, 130, 61, 61, 225, 20, 62, 123, 221, 149, 188, 34, 122, 12, 190, 22, 39, 27, 190, 233, 172, 219, 58, 0, 219, 51, 190, 243, 185, 48, 61, 227, 229, 167, 189, 138, 143, 42, 62, 198, 76, 220, 189, 22, 63, 152, 189, 178, 177, 241, 189, 84, 212, 246, 189, 219, 161, 121, 189, 140, 44, 108, 189, 170, 31, 78, 187, 212, 222, 24, 62, 192, 149, 8, 190, 138, 51, 238, 189, 18, 78, 43, 190, 56, 144, 128, 189, 13, 181, 176, 60, 225, 45, 23, 190, 224, 236, 238, 59, 236, 102, 253, 189, 110, 217, 230, 189, 51, 83, 16, 190, 246, 172, 206, 61, 61, 96, 162, 189, 160, 179, 164, 62, 157, 42, 77, 188, 252, 123, 56, 189, 98, 178, 30, 63, 72, 203, 164, 190, 227, 121, 35, 62, 184, 196, 66, 62, 219, 233, 248, 62, 106, 168, 219, 61, 72, 21, 24, 190, 45, 181, 115, 190, 124, 106, 23, 190, 100, 31, 185, 60, 172, 194, 43, 62, 156, 81, 109, 62, 187, 91, 187, 190, 44, 67, 168, 190, 208, 74, 143, 62, 15, 112, 187, 191, 223, 11, 56, 62, 58, 209, 243, 189, 8, 158, 142, 190, 212, 224, 254, 61, 4, 188, 129, 62, 105, 206, 149, 191, 148, 32, 208, 190, 51, 82, 86, 62, 111, 155, 123, 189, 239, 44, 231, 59, 29, 1, 241, 190, 160, 173, 4, 190, 6, 175, 201, 190, 235, 253, 252, 189, 2, 165, 16, 188, 8, 32, 41, 187, 4, 244, 135, 190, 189, 47, 201, 61, 34, 202, 189, 190, 55, 220, 105, 190, 115, 48, 91, 61, 66, 250, 164, 62, 222, 4, 191, 190, 84, 161, 51, 190, 10, 167, 251, 189, 251, 173, 208, 61, 182, 83, 13, 190, 209, 29, 255, 189, 99, 178, 72, 190, 127, 226, 169, 62, 122, 104, 148, 189, 99, 10, 246, 61, 94, 196, 143, 190, 21, 23, 181, 190, 181, 77, 86, 62, 254, 34, 152, 62, 207, 218, 150, 190, 209, 128, 85, 62, 99, 206, 149, 62, 104, 91, 39, 61, 151, 154, 145, 62, 148, 186, 6, 191, 5, 200, 183, 61, 249, 195, 207, 189, 25, 121, 249, 62, 87, 62, 211, 61, 169, 162, 65, 62, 249, 133, 224, 189, 234, 255, 78, 189, 100, 139, 5, 190, 73, 130, 237, 61, 3, 205, 67, 62, 180, 215, 151, 62, 25, 129, 40, 62, 255, 102, 23, 62, 133, 188, 108, 62, 11, 2, 39, 189, 162, 63, 21, 62, 122, 177, 128, 189, 144, 65, 146, 62, 110, 116, 18, 61, 60, 249, 173, 61, 0, 213, 149, 188, 56, 4, 169, 190, 171, 102, 222, 60, 88, 109, 0, 190, 21, 102, 135, 190, 1, 45, 175, 189, 61, 96, 181, 59, 27, 245, 99, 190, 5, 156, 48, 62, 15, 30, 244, 61, 132, 219, 28, 62, 207, 20, 203, 61, 54, 246, 113, 61, 139, 238, 119, 61, 191, 44, 9, 61, 215, 128, 97, 190, 255, 153, 244, 61, 101, 4, 96, 61, 27, 134, 29, 190, 204, 109, 46, 62, 93, 229, 141, 188, 149, 209, 133, 190, 176, 229, 122, 190, 129, 165, 118, 189, 254, 112, 189, 61, 215, 159, 134, 61, 87, 103, 124, 61, 200, 125, 105, 62, 95, 113, 51, 188, 147, 88, 50, 190, 186, 0, 149, 61, 64, 71, 250, 61, 54, 173, 197, 187, 210, 154, 75, 61, 45, 78, 20, 62, 195, 24, 171, 189, 106, 175, 212, 189, 135, 24, 237, 60, 42, 85, 44, 191, 238, 56, 222, 189, 217, 20, 123, 62, 189, 132, 205, 189, 38, 63, 249, 61, 39, 53, 8, 190, 131, 235, 174, 188, 37, 153, 211, 190, 60, 217, 130, 62, 213, 68, 9, 191, 119, 38, 82, 190, 145, 41, 54, 62, 248, 100, 171, 190, 107, 211, 251, 59, 234, 165, 106, 191, 25, 185, 190, 190, 19, 192, 68, 190, 143, 220, 78, 62, 116, 8, 221, 60, 22, 21, 75, 62, 99, 10, 82, 190, 138, 47, 198, 59, 28, 144, 96, 62, 232, 103, 44, 190, 144, 197, 182, 61, 248, 125, 153, 62, 191, 178, 219, 189, 183, 120, 174, 62, 134, 227, 205, 189, 114, 20, 157, 189, 124, 9, 94, 62, 176, 217, 58, 62, 62, 26, 38, 191, 208, 198, 137, 62, 215, 90, 146, 62, 251, 146, 180, 61, 177, 11, 198, 61, 69, 146, 228, 61, 157, 177, 149, 62, 90, 210, 232, 190, 176, 100, 15, 63, 39, 152, 95, 190, 26, 218, 145, 190, 184, 126, 58, 62, 55, 153, 155, 190, 248, 34, 173, 189, 223, 185, 1, 190, 135, 171, 249, 59, 197, 195, 190, 187, 29, 105, 185, 189, 0, 122, 10, 191, 10, 234, 250, 188, 196, 179, 65, 60, 183, 151, 181, 61, 219, 86, 191, 61, 164, 36, 177, 190, 209, 116, 158, 189, 169, 86, 133, 188, 47, 144, 143, 190, 188, 191, 107, 191, 82, 72, 8, 190, 61, 193, 52, 190, 102, 233, 171, 189, 147, 164, 162, 189, 210, 172, 166, 190, 154, 16, 24, 191, 2, 235, 159, 62, 131, 107, 145, 189, 241, 194, 31, 190, 52, 174, 143, 189, 223, 12, 150, 190, 141, 151, 177, 189, 220, 226, 175, 190, 74, 239, 52, 190, 55, 148, 125, 189, 163, 220, 154, 61, 138, 77, 182, 190, 111, 86, 5, 62, 93, 95, 15, 191, 225, 45, 106, 188, 240, 175, 155, 189, 178, 21, 12, 187, 209, 55, 187, 61, 42, 119, 247, 61, 109, 189, 149, 59, 114, 7, 36, 189, 109, 46, 50, 62, 164, 84, 133, 61, 157, 239, 82, 61, 211, 236, 23, 62, 64, 133, 192, 189, 170, 236, 87, 189, 255, 98, 61, 189, 55, 224, 223, 61, 92, 190, 139, 62, 112, 82, 116, 62, 137, 49, 31, 191, 216, 158, 35, 190, 12, 94, 178, 60, 20, 175, 134, 189, 209, 183, 46, 62, 90, 108, 90, 190, 158, 4, 176, 189, 88, 155, 15, 191, 115, 232, 75, 63, 15, 104, 3, 190, 204, 76, 5, 62, 203, 79, 212, 189, 108, 248, 199, 189, 154, 162, 170, 61, 46, 236, 136, 189, 202, 66, 29, 61, 142, 123, 79, 190, 150, 97, 150, 60, 217, 3, 2, 62, 246, 167, 185, 61, 60, 252, 219, 189, 187, 228, 150, 60, 247, 250, 141, 189, 160, 221, 108, 190, 113, 197, 254, 188, 185, 25, 207, 61, 21, 61, 125, 190, 201, 136, 101, 61, 114, 213, 238, 189, 189, 195, 72, 61, 125, 255, 6, 59, 92, 168, 149, 189, 243, 172, 242, 61, 107, 69, 24, 183, 176, 27, 239, 189, 195, 162, 203, 189, 216, 60, 245, 189, 20, 195, 50, 190, 233, 96, 52, 190, 150, 179, 199, 61, 174, 150, 111, 61, 63, 167, 165, 189, 6, 175, 17, 189, 197, 77, 154, 188, 115, 217, 206, 60, 80, 116, 140, 189, 244, 212, 15, 190, 106, 130, 70, 189, 125, 244, 166, 60, 177, 205, 185, 61, 243, 125, 157, 189, 54, 196, 105, 188, 204, 66, 182, 61, 69, 52, 47, 190, 9, 248, 245, 187, 198, 185, 69, 61, 40, 63, 1, 190, 151, 19, 231, 188, 145, 6, 58, 189, 206, 154, 245, 188, 72, 146, 34, 190, 108, 72, 255, 188, 118, 113, 16, 190, 92, 237, 176, 189, 5, 175, 15, 62, 198, 87, 220, 189, 100, 99, 41, 62, 114, 10, 90, 61, 237, 46, 126, 61, 176, 21, 26, 62, 197, 231, 47, 62, 38, 156, 240, 60, 114, 129, 142, 189, 41, 64, 191, 60, 61, 61, 90, 189, 94, 195, 201, 189, 221, 159, 31, 190, 136, 143, 194, 189, 17, 143, 161, 189, 188, 236, 0, 190, 121, 70, 123, 190, 10, 197, 211, 187, 181, 205, 161, 189, 44, 18, 154, 190, 147, 38, 204, 61, 209, 127, 130, 190, 238, 216, 9, 190, 142, 60, 200, 189, 117, 162, 143, 61, 38, 17, 41, 189, 225, 59, 169, 189, 7, 139, 47, 190, 117, 174, 73, 189, 34, 98, 143, 60, 12, 72, 2, 62, 114, 229, 32, 190, 10, 48, 33, 190, 103, 101, 177, 59, 173, 17, 166, 61, 46, 186, 83, 190, 134, 22, 31, 62, 228, 157, 81, 61, 46, 224, 244, 60, 12, 129, 10, 62, 197, 149, 15, 190, 225, 180, 8, 61, 188, 246, 199, 60, 230, 157, 133, 62, 164, 252, 252, 61, 117, 234, 64, 62, 57, 120, 137, 62, 232, 107, 46, 61, 164, 69, 160, 61, 153, 108, 103, 62, 202, 224, 165, 190, 250, 92, 84, 189, 29, 180, 141, 61, 225, 248, 230, 61, 172, 124, 215, 190, 234, 121, 183, 189, 175, 46, 237, 189, 115, 49, 252, 189, 57, 83, 81, 190, 207, 150, 16, 60, 219, 52, 222, 61, 166, 36, 26, 191, 68, 73, 205, 190, 201, 106, 126, 189, 219, 53, 144, 61, 167, 157, 192, 190, 155, 179, 231, 60, 160, 247, 46, 62, 143, 15, 217, 190, 78, 40, 206, 189, 213, 90, 44, 191, 177, 170, 2, 63, 157, 147, 219, 62, 49, 223, 72, 190, 128, 111, 29, 190, 195, 247, 60, 186, 70, 135, 93, 189, 192, 95, 134, 190, 171, 53, 146, 190, 86, 220, 196, 61, 238, 95, 244, 61, 169, 223, 228, 61, 93, 131, 81, 187, 171, 86, 94, 190, 22, 69, 227, 190, 148, 132, 95, 61, 21, 153, 103, 189, 108, 253, 198, 60, 81, 212, 187, 190, 239, 52, 190, 61, 156, 205, 23, 61, 147, 159, 4, 190, 206, 7, 171, 61, 71, 95, 117, 190, 57, 193, 8, 190, 27, 229, 42, 62, 218, 90, 99, 190, 224, 64, 41, 61, 208, 7, 101, 189, 179, 84, 73, 60, 51, 230, 203, 61, 86, 10, 237, 190, 235, 113, 81, 189, 68, 109, 101, 191, 56, 162, 117, 189, 176, 91, 73, 61, 200, 204, 148, 190, 106, 229, 62, 190, 189, 88, 246, 190, 26, 18, 155, 62, 192, 248, 22, 190, 53, 102, 181, 190, 211, 22, 38, 191, 202, 45, 74, 190, 171, 51, 108, 189, 140, 20, 77, 62, 41, 24, 79, 62, 250, 130, 45, 61, 86, 37, 1, 189, 54, 198, 191, 190, 182, 81, 97, 61, 29, 216, 212, 61, 133, 140, 201, 190, 28, 24, 46, 62, 254, 56, 112, 190, 0, 224, 101, 62, 252, 250, 126, 190, 18, 209, 176, 189, 40, 105, 59, 62, 69, 49, 20, 62, 109, 153, 147, 62, 52, 196, 1, 62, 9, 165, 203, 186, 61, 16, 201, 60, 158, 111, 82, 188, 11, 52, 142, 62, 129, 11, 243, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 37, 29, 62, 38, 124, 50, 61, 105, 216, 183, 61, 88, 87, 228, 189, 18, 241, 16, 62, 168, 189, 39, 189, 148, 152, 138, 62, 105, 38, 63, 190, 181, 83, 140, 190, 107, 57, 154, 190, 28, 174, 133, 61, 46, 47, 193, 62, 134, 167, 130, 189, 72, 13, 144, 188, 99, 35, 16, 189, 247, 237, 137, 62, 199, 65, 157, 190, 56, 44, 247, 62, 92, 12, 18, 60, 41, 181, 235, 62, 61, 59, 72, 189, 127, 12, 153, 62, 187, 6, 175, 62, 226, 89, 127, 62, 32, 225, 211, 189, 100, 253, 50, 62, 31, 81, 24, 190, 159, 45, 78, 190, 53, 38, 103, 189, 181, 229, 65, 62, 147, 235, 61, 62, 159, 244, 16, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 14, 36, 190, 28, 214, 128, 190, 69, 14, 7, 191, 74, 214, 157, 62, 165, 174, 37, 62, 12, 121, 34, 63, 170, 241, 24, 191, 177, 160, 230, 60, 185, 28, 26, 61, 90, 162, 1, 63, 164, 250, 83, 191, 148, 146, 77, 63, 64, 233, 88, 61, 226, 96, 61, 191, 146, 11, 104, 62, 224, 167, 35, 191, 107, 224, 214, 190, 64, 197, 125, 191, 53, 233, 27, 190, 70, 29, 142, 63, 170, 49, 158, 190, 212, 14, 198, 61, 106, 128, 196, 189, 255, 32, 2, 191, 197, 86, 205, 62, 212, 131, 177, 190, 74, 105, 189, 187, 138, 79, 183, 61, 12, 146, 22, 62, 55, 140, 2, 191, 240, 191, 216, 61, 244, 51, 186, 62, 117, 215, 156, 188, 179, 233, 224, 61, 20, 111, 97, 62, 108, 94, 248, 189, 92, 223, 21, 190, 142, 92, 58, 62, 74, 239, 21, 191, 243, 184, 33, 190, 50, 5, 52, 62, 87, 239, 59, 188, 181, 82, 128, 61, 29, 154, 216, 61, 38, 248, 220, 61, 221, 6, 72, 62, 108, 201, 199, 189, 163, 8, 246, 61, 67, 244, 154, 62, 176, 146, 136, 189, 199, 252, 159, 188, 159, 74, 58, 189, 47, 68, 49, 190, 244, 168, 108, 190, 92, 185, 0, 190, 54, 187, 10, 62, 8, 132, 165, 62, 30, 186, 158, 189, 7, 239, 136, 61, 174, 96, 31, 190, 136, 109, 84, 61, 243, 98, 79, 190, 11, 110, 113, 190, 157, 253, 226, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 222, 54, 62, 21, 17, 203, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 35, 86, 62, 179, 8, 140, 63, 217, 250, 121, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {81, 77, 46, 192, 61, 95, 161, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0043/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}