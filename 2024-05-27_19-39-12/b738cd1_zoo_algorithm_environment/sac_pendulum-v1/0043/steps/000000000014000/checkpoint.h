// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 129, 196, 62, 20, 151, 24, 189, 19, 90, 10, 191, 225, 38, 150, 190, 151, 13, 97, 190, 5, 19, 4, 63, 59, 108, 154, 190, 213, 92, 100, 63, 213, 165, 123, 62, 198, 142, 159, 62, 138, 97, 153, 191, 1, 157, 41, 190, 81, 128, 250, 62, 223, 225, 106, 63, 141, 27, 234, 62, 152, 87, 214, 190, 162, 30, 229, 63, 36, 215, 176, 62, 46, 175, 82, 191, 107, 126, 12, 60, 183, 69, 7, 63, 127, 213, 81, 63, 108, 58, 136, 191, 174, 53, 3, 190, 118, 143, 74, 191, 3, 41, 148, 62, 148, 129, 184, 61, 105, 161, 53, 61, 168, 240, 27, 191, 158, 216, 74, 190, 180, 172, 19, 61, 255, 20, 134, 62, 254, 62, 252, 190, 249, 103, 212, 189, 242, 252, 141, 63, 120, 185, 159, 62, 127, 16, 246, 189, 233, 158, 141, 62, 202, 21, 138, 190, 177, 99, 246, 60, 172, 69, 0, 61, 106, 127, 216, 190, 242, 86, 187, 190, 119, 12, 198, 190, 27, 206, 209, 62, 231, 44, 140, 190, 174, 89, 216, 61, 245, 210, 43, 191, 148, 29, 115, 63, 148, 216, 71, 63, 236, 139, 14, 63, 244, 209, 27, 191, 249, 246, 13, 191, 246, 197, 22, 63, 76, 167, 171, 190, 165, 10, 219, 191, 21, 2, 192, 190, 68, 193, 24, 191, 60, 9, 6, 63, 73, 249, 244, 62, 29, 210, 211, 190, 116, 42, 176, 61, 168, 132, 173, 190, 15, 8, 7, 63, 54, 142, 166, 190, 17, 175, 13, 63, 148, 145, 235, 190, 159, 130, 80, 191, 161, 181, 105, 189, 191, 79, 45, 63, 21, 54, 146, 191, 205, 253, 147, 190, 10, 110, 83, 191, 5, 23, 255, 190, 75, 187, 218, 190, 137, 200, 38, 63, 34, 143, 104, 63, 207, 207, 92, 62, 204, 117, 33, 191, 119, 76, 165, 190, 41, 142, 43, 189, 208, 67, 71, 63, 19, 220, 145, 190, 35, 44, 24, 63, 28, 121, 223, 61, 52, 26, 92, 191, 50, 71, 126, 190, 242, 207, 21, 63, 33, 49, 210, 60, 241, 169, 152, 62, 149, 214, 89, 63, 183, 219, 38, 191, 26, 144, 171, 190, 31, 80, 45, 191, 33, 72, 221, 190, 244, 169, 65, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 202, 100, 191, 209, 200, 155, 62, 222, 118, 35, 63, 201, 75, 209, 188, 217, 222, 55, 190, 74, 245, 31, 190, 10, 91, 139, 190, 205, 154, 130, 61, 127, 242, 75, 62, 57, 25, 234, 59, 21, 184, 234, 62, 214, 5, 28, 61, 235, 106, 41, 63, 83, 73, 178, 190, 154, 203, 196, 62, 165, 208, 202, 61, 237, 151, 130, 189, 85, 245, 140, 62, 108, 148, 22, 190, 29, 89, 154, 189, 51, 235, 152, 190, 129, 158, 38, 191, 92, 57, 253, 62, 96, 125, 167, 190, 205, 221, 6, 191, 189, 137, 159, 189, 27, 38, 34, 63, 87, 45, 183, 189, 90, 162, 170, 189, 153, 244, 110, 191, 95, 20, 84, 191, 104, 200, 241, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 252, 216, 189, 101, 245, 122, 190, 72, 167, 58, 61, 34, 151, 58, 190, 24, 114, 130, 62, 94, 152, 123, 61, 87, 125, 209, 190, 33, 75, 127, 61, 6, 166, 5, 190, 71, 203, 197, 61, 231, 116, 1, 190, 52, 64, 6, 62, 247, 140, 117, 190, 1, 148, 16, 62, 129, 15, 14, 190, 82, 12, 60, 189, 108, 68, 166, 62, 85, 197, 72, 190, 19, 194, 168, 62, 43, 49, 128, 190, 19, 165, 30, 61, 19, 225, 62, 61, 162, 7, 77, 188, 162, 111, 148, 190, 77, 206, 175, 62, 202, 220, 111, 58, 23, 99, 27, 61, 212, 19, 175, 61, 78, 78, 206, 187, 177, 233, 252, 189, 4, 38, 207, 190, 19, 205, 174, 62, 45, 226, 250, 189, 142, 68, 8, 62, 17, 157, 25, 190, 215, 210, 171, 190, 134, 153, 7, 62, 31, 54, 118, 190, 180, 150, 92, 61, 176, 183, 132, 190, 240, 59, 150, 190, 222, 15, 136, 61, 33, 194, 5, 191, 207, 13, 2, 190, 168, 103, 157, 190, 55, 172, 47, 190, 208, 159, 249, 189, 93, 221, 25, 62, 250, 84, 148, 61, 253, 60, 78, 190, 12, 254, 31, 190, 126, 129, 238, 61, 80, 19, 165, 60, 99, 233, 111, 62, 210, 66, 121, 189, 221, 239, 23, 191, 185, 137, 0, 62, 170, 137, 144, 62, 189, 211, 28, 191, 171, 100, 51, 62, 184, 110, 92, 61, 110, 63, 156, 61, 37, 200, 24, 189, 179, 127, 83, 62, 43, 8, 15, 190, 87, 170, 215, 61, 142, 172, 225, 62, 196, 33, 3, 191, 46, 75, 60, 189, 127, 5, 2, 191, 98, 51, 1, 189, 76, 79, 154, 190, 212, 82, 133, 62, 224, 6, 14, 190, 183, 31, 66, 62, 185, 174, 246, 189, 14, 201, 43, 62, 31, 26, 254, 187, 25, 221, 2, 190, 192, 4, 176, 189, 107, 200, 71, 62, 27, 64, 141, 60, 226, 1, 170, 190, 20, 122, 150, 190, 233, 116, 235, 189, 193, 222, 47, 61, 178, 157, 96, 190, 140, 190, 15, 191, 30, 17, 240, 189, 220, 174, 254, 62, 166, 71, 60, 190, 82, 49, 13, 60, 18, 115, 78, 190, 194, 246, 204, 189, 123, 96, 60, 191, 76, 83, 140, 63, 138, 42, 144, 61, 146, 157, 112, 190, 151, 215, 4, 191, 175, 200, 186, 190, 243, 30, 74, 62, 239, 104, 145, 191, 52, 27, 22, 190, 230, 132, 156, 190, 181, 25, 150, 61, 225, 235, 44, 62, 236, 107, 145, 62, 200, 211, 238, 189, 178, 34, 102, 62, 43, 125, 13, 62, 46, 75, 58, 61, 147, 212, 10, 62, 207, 8, 66, 190, 63, 34, 175, 190, 19, 133, 197, 62, 115, 214, 247, 189, 167, 229, 70, 62, 97, 148, 132, 190, 66, 56, 31, 190, 2, 28, 142, 188, 21, 59, 160, 187, 18, 142, 163, 190, 16, 116, 253, 189, 64, 211, 38, 189, 168, 149, 87, 189, 188, 51, 141, 61, 156, 14, 187, 61, 97, 172, 217, 62, 12, 198, 40, 61, 186, 25, 158, 187, 103, 170, 180, 189, 36, 255, 129, 61, 73, 242, 116, 190, 58, 93, 62, 190, 137, 143, 134, 60, 206, 112, 128, 62, 197, 226, 60, 190, 116, 212, 88, 62, 118, 197, 6, 62, 192, 23, 141, 190, 199, 107, 39, 62, 154, 255, 17, 61, 67, 58, 75, 62, 119, 172, 191, 189, 248, 82, 47, 190, 126, 232, 70, 62, 142, 166, 33, 191, 23, 227, 71, 60, 241, 247, 34, 190, 204, 144, 206, 189, 129, 195, 248, 61, 208, 125, 73, 61, 234, 73, 21, 191, 170, 217, 146, 190, 217, 91, 188, 61, 6, 226, 168, 60, 139, 82, 211, 61, 47, 91, 86, 190, 13, 18, 38, 61, 26, 82, 69, 61, 234, 120, 198, 62, 111, 22, 98, 187, 8, 141, 4, 60, 223, 29, 51, 63, 167, 181, 22, 190, 199, 110, 192, 62, 26, 31, 8, 62, 7, 83, 138, 62, 96, 105, 157, 62, 51, 34, 136, 61, 72, 129, 3, 190, 163, 206, 184, 189, 17, 53, 112, 186, 202, 215, 182, 189, 48, 4, 77, 62, 91, 160, 116, 190, 236, 166, 80, 190, 87, 22, 143, 189, 245, 26, 251, 191, 88, 97, 69, 62, 54, 221, 14, 62, 250, 47, 178, 188, 124, 32, 0, 61, 234, 77, 108, 62, 222, 244, 38, 191, 141, 31, 77, 190, 14, 137, 150, 62, 117, 182, 136, 189, 227, 194, 32, 62, 241, 66, 127, 190, 85, 192, 196, 62, 15, 211, 199, 190, 230, 32, 104, 62, 83, 37, 182, 61, 8, 202, 123, 62, 84, 26, 147, 190, 188, 139, 151, 189, 197, 54, 69, 191, 169, 73, 178, 58, 201, 79, 62, 62, 45, 60, 14, 191, 59, 94, 131, 188, 201, 13, 218, 61, 214, 234, 126, 190, 138, 11, 81, 189, 132, 31, 197, 61, 248, 191, 228, 60, 73, 233, 31, 62, 118, 32, 50, 189, 27, 26, 183, 61, 187, 80, 135, 190, 10, 138, 229, 189, 105, 80, 119, 61, 220, 247, 24, 187, 107, 192, 202, 190, 8, 63, 74, 191, 41, 189, 105, 190, 90, 208, 134, 62, 218, 90, 104, 190, 117, 108, 150, 61, 77, 158, 48, 190, 36, 177, 29, 62, 220, 19, 170, 191, 230, 185, 155, 190, 80, 93, 156, 187, 26, 142, 100, 61, 104, 186, 36, 190, 225, 71, 151, 189, 135, 39, 42, 190, 152, 26, 38, 189, 119, 64, 167, 61, 103, 24, 133, 61, 107, 1, 239, 61, 251, 234, 11, 190, 76, 107, 21, 58, 75, 206, 33, 190, 207, 185, 18, 62, 193, 140, 37, 62, 156, 155, 26, 190, 111, 110, 25, 190, 166, 193, 0, 190, 195, 119, 208, 189, 174, 168, 25, 61, 47, 199, 25, 190, 152, 108, 38, 61, 142, 32, 31, 61, 89, 174, 162, 189, 15, 20, 239, 189, 196, 68, 167, 59, 222, 130, 226, 189, 79, 200, 200, 61, 57, 86, 189, 59, 113, 211, 240, 189, 219, 148, 177, 61, 23, 34, 146, 188, 38, 177, 253, 61, 7, 255, 159, 189, 232, 84, 57, 61, 157, 85, 17, 61, 210, 235, 4, 62, 84, 189, 3, 62, 22, 7, 40, 190, 146, 3, 42, 189, 240, 2, 171, 61, 22, 150, 15, 190, 140, 106, 27, 62, 139, 228, 70, 190, 218, 10, 1, 61, 122, 199, 100, 190, 12, 217, 104, 61, 229, 104, 161, 189, 242, 135, 243, 189, 77, 149, 29, 61, 183, 214, 156, 189, 47, 73, 194, 60, 81, 233, 225, 61, 17, 51, 251, 189, 71, 18, 183, 61, 184, 164, 41, 190, 182, 241, 26, 190, 68, 183, 35, 190, 32, 180, 179, 61, 16, 169, 183, 190, 62, 44, 218, 189, 31, 141, 44, 190, 116, 5, 184, 189, 44, 100, 9, 62, 140, 149, 254, 59, 176, 102, 60, 62, 178, 148, 3, 189, 12, 202, 240, 190, 94, 229, 154, 191, 195, 29, 147, 62, 16, 164, 39, 191, 231, 59, 64, 189, 142, 140, 17, 190, 22, 102, 56, 191, 155, 106, 6, 190, 176, 113, 237, 61, 59, 119, 199, 60, 133, 20, 43, 61, 55, 140, 76, 62, 84, 197, 52, 190, 29, 223, 189, 61, 111, 91, 148, 62, 183, 117, 35, 189, 243, 237, 163, 189, 166, 146, 21, 190, 190, 81, 108, 62, 179, 165, 20, 189, 189, 207, 86, 191, 207, 146, 166, 189, 153, 38, 76, 62, 70, 76, 239, 62, 236, 2, 1, 191, 80, 146, 138, 62, 73, 5, 139, 61, 208, 28, 58, 62, 33, 211, 204, 62, 128, 83, 0, 190, 187, 204, 105, 62, 195, 1, 41, 62, 104, 162, 156, 62, 101, 230, 122, 62, 122, 132, 6, 190, 177, 76, 149, 62, 157, 120, 8, 62, 184, 161, 167, 59, 73, 82, 157, 62, 77, 41, 130, 190, 45, 12, 20, 190, 74, 222, 10, 189, 71, 119, 217, 61, 122, 104, 141, 191, 13, 185, 215, 61, 63, 234, 179, 190, 37, 133, 6, 191, 33, 128, 179, 187, 235, 223, 137, 190, 130, 4, 248, 61, 54, 77, 36, 191, 19, 147, 151, 190, 73, 186, 69, 62, 41, 247, 138, 62, 153, 7, 166, 190, 172, 224, 143, 190, 1, 172, 252, 62, 239, 157, 212, 190, 158, 167, 100, 188, 203, 204, 40, 191, 43, 111, 55, 63, 188, 196, 79, 62, 28, 123, 177, 62, 102, 42, 50, 62, 135, 210, 73, 190, 237, 207, 236, 62, 95, 107, 120, 190, 176, 172, 224, 62, 156, 148, 202, 62, 203, 81, 252, 62, 203, 159, 22, 62, 43, 94, 90, 188, 250, 54, 255, 61, 64, 193, 132, 61, 118, 129, 18, 61, 243, 214, 247, 189, 29, 238, 182, 62, 61, 244, 114, 190, 175, 192, 226, 190, 140, 254, 224, 61, 70, 40, 25, 191, 191, 186, 183, 62, 218, 30, 42, 190, 44, 204, 214, 190, 217, 215, 250, 61, 130, 81, 199, 62, 167, 1, 16, 191, 27, 84, 48, 190, 162, 228, 168, 62, 110, 125, 102, 190, 87, 100, 0, 62, 150, 24, 23, 191, 59, 20, 227, 61, 113, 60, 142, 190, 31, 171, 20, 62, 134, 97, 243, 60, 9, 159, 1, 189, 123, 27, 86, 60, 54, 192, 147, 61, 116, 87, 40, 190, 212, 38, 138, 60, 160, 222, 70, 189, 194, 249, 167, 189, 182, 47, 22, 189, 226, 242, 8, 190, 47, 179, 29, 190, 230, 132, 74, 189, 14, 159, 14, 190, 157, 196, 46, 190, 201, 188, 151, 61, 248, 66, 208, 60, 164, 18, 40, 190, 36, 130, 241, 189, 241, 238, 90, 61, 224, 147, 123, 189, 229, 137, 22, 189, 137, 220, 146, 189, 17, 39, 152, 189, 25, 199, 74, 189, 130, 132, 152, 61, 221, 17, 158, 61, 196, 78, 14, 190, 253, 205, 7, 190, 36, 44, 84, 61, 185, 46, 2, 62, 181, 122, 172, 61, 10, 136, 31, 190, 131, 36, 134, 190, 247, 223, 252, 62, 43, 106, 146, 190, 1, 218, 147, 62, 109, 106, 104, 62, 30, 64, 24, 191, 191, 85, 234, 189, 70, 59, 131, 190, 239, 187, 99, 190, 168, 135, 165, 61, 188, 145, 0, 189, 105, 47, 35, 62, 38, 201, 8, 61, 33, 219, 33, 191, 68, 57, 18, 62, 129, 211, 95, 62, 167, 237, 34, 191, 210, 34, 132, 190, 234, 180, 78, 61, 22, 57, 58, 189, 66, 44, 142, 190, 209, 230, 26, 191, 154, 103, 239, 190, 248, 155, 28, 61, 209, 212, 153, 62, 83, 171, 29, 190, 239, 44, 185, 188, 18, 216, 229, 190, 189, 75, 48, 190, 16, 153, 11, 191, 200, 224, 230, 189, 89, 205, 136, 61, 228, 19, 188, 187, 99, 41, 24, 191, 214, 101, 4, 191, 127, 68, 3, 59, 25, 41, 66, 191, 219, 127, 143, 189, 21, 230, 130, 188, 7, 135, 207, 190, 136, 183, 46, 62, 227, 174, 24, 62, 28, 93, 159, 189, 66, 85, 229, 61, 231, 123, 135, 61, 104, 27, 156, 61, 115, 56, 18, 62, 215, 107, 60, 190, 181, 132, 122, 190, 59, 81, 85, 190, 222, 200, 165, 59, 71, 43, 82, 190, 42, 169, 99, 187, 0, 93, 164, 190, 118, 172, 26, 61, 43, 69, 176, 189, 110, 219, 203, 61, 190, 207, 143, 190, 232, 122, 55, 189, 206, 147, 213, 60, 31, 29, 124, 61, 172, 64, 168, 62, 25, 108, 133, 190, 120, 110, 189, 189, 78, 247, 133, 189, 147, 30, 159, 61, 223, 186, 201, 190, 18, 55, 181, 189, 26, 178, 127, 191, 228, 134, 26, 190, 68, 56, 76, 61, 54, 97, 102, 190, 97, 12, 253, 61, 151, 224, 14, 62, 20, 112, 138, 190, 51, 200, 140, 61, 194, 20, 60, 189, 126, 10, 73, 61, 12, 174, 244, 61, 208, 190, 121, 62, 142, 127, 182, 189, 97, 157, 152, 190, 99, 7, 125, 190, 6, 226, 21, 62, 208, 150, 45, 62, 20, 88, 153, 189, 0, 144, 136, 191, 215, 72, 132, 190, 247, 141, 88, 62, 238, 10, 164, 190, 212, 234, 89, 62, 243, 120, 32, 190, 11, 73, 205, 187, 64, 222, 178, 191, 138, 14, 216, 190, 21, 26, 224, 62, 23, 221, 41, 61, 10, 65, 3, 190, 64, 63, 159, 61, 224, 125, 41, 62, 22, 236, 135, 190, 185, 112, 47, 60, 136, 101, 179, 189, 63, 18, 30, 191, 122, 77, 15, 61, 128, 217, 24, 190, 207, 12, 59, 62, 0, 120, 145, 190, 88, 193, 208, 61, 173, 17, 222, 60, 186, 30, 251, 61, 169, 146, 89, 62, 111, 90, 84, 189, 61, 81, 228, 189, 210, 254, 150, 189, 188, 251, 153, 61, 29, 166, 48, 62, 58, 254, 167, 190, 177, 246, 142, 62, 122, 246, 96, 60, 41, 15, 36, 62, 186, 191, 5, 191, 117, 154, 12, 60, 62, 232, 15, 62, 7, 80, 90, 62, 211, 168, 217, 62, 128, 57, 54, 62, 138, 142, 250, 190, 107, 56, 40, 191, 71, 89, 143, 62, 79, 244, 138, 189, 121, 64, 159, 190, 201, 165, 37, 191, 92, 222, 226, 190, 139, 40, 200, 190, 209, 239, 65, 61, 167, 215, 152, 187, 192, 44, 131, 62, 106, 218, 3, 191, 180, 135, 91, 62, 46, 158, 76, 189, 102, 90, 39, 191, 17, 37, 138, 60, 7, 216, 13, 62, 152, 80, 184, 189, 5, 34, 124, 62, 150, 122, 20, 190, 136, 162, 0, 190, 228, 177, 131, 190, 113, 137, 138, 62, 216, 77, 6, 191, 191, 207, 42, 62, 10, 254, 154, 62, 14, 222, 216, 62, 100, 196, 108, 190, 197, 216, 214, 189, 249, 205, 211, 189, 196, 236, 64, 191, 23, 224, 142, 63, 221, 42, 249, 188, 127, 194, 31, 188, 223, 21, 130, 61, 61, 225, 20, 62, 123, 221, 149, 188, 34, 122, 12, 190, 22, 39, 27, 190, 233, 172, 219, 58, 0, 219, 51, 190, 243, 185, 48, 61, 227, 229, 167, 189, 138, 143, 42, 62, 198, 76, 220, 189, 22, 63, 152, 189, 178, 177, 241, 189, 84, 212, 246, 189, 219, 161, 121, 189, 140, 44, 108, 189, 170, 31, 78, 187, 212, 222, 24, 62, 192, 149, 8, 190, 138, 51, 238, 189, 18, 78, 43, 190, 56, 144, 128, 189, 13, 181, 176, 60, 225, 45, 23, 190, 224, 236, 238, 59, 236, 102, 253, 189, 110, 217, 230, 189, 51, 83, 16, 190, 246, 172, 206, 61, 61, 96, 162, 189, 69, 214, 162, 62, 157, 208, 9, 188, 229, 143, 166, 189, 101, 219, 26, 63, 31, 108, 185, 190, 179, 98, 58, 62, 65, 166, 67, 62, 30, 188, 230, 62, 99, 168, 216, 61, 86, 65, 62, 190, 34, 181, 142, 190, 83, 60, 10, 190, 117, 152, 89, 188, 7, 26, 36, 62, 253, 98, 111, 62, 171, 65, 211, 190, 63, 215, 183, 190, 213, 102, 144, 62, 229, 185, 207, 191, 101, 182, 54, 62, 79, 104, 220, 189, 103, 146, 146, 190, 86, 159, 1, 62, 208, 236, 88, 62, 33, 32, 154, 191, 9, 10, 232, 190, 118, 34, 84, 62, 177, 249, 153, 189, 96, 85, 186, 58, 215, 95, 243, 190, 3, 108, 233, 189, 144, 204, 200, 190, 25, 141, 6, 190, 56, 88, 105, 186, 204, 107, 201, 185, 79, 134, 162, 190, 29, 253, 235, 61, 252, 186, 201, 190, 235, 249, 116, 190, 210, 170, 201, 60, 107, 179, 149, 62, 168, 85, 236, 190, 132, 202, 88, 190, 170, 178, 0, 190, 94, 245, 151, 61, 119, 2, 69, 190, 254, 91, 235, 189, 153, 124, 86, 190, 52, 89, 173, 62, 199, 115, 130, 189, 117, 82, 19, 62, 214, 218, 146, 190, 182, 97, 193, 190, 222, 217, 105, 62, 75, 9, 152, 62, 74, 137, 181, 190, 235, 116, 105, 62, 41, 183, 153, 62, 1, 213, 248, 60, 28, 159, 145, 62, 1, 118, 60, 191, 59, 108, 214, 61, 15, 151, 158, 190, 209, 38, 240, 62, 134, 124, 204, 61, 79, 42, 77, 62, 194, 140, 247, 189, 64, 23, 244, 187, 49, 68, 30, 190, 14, 245, 28, 62, 84, 24, 47, 62, 149, 56, 136, 62, 52, 85, 244, 61, 132, 33, 90, 62, 24, 76, 132, 62, 242, 190, 40, 60, 144, 211, 41, 62, 221, 21, 75, 189, 50, 77, 149, 62, 172, 109, 164, 61, 50, 47, 4, 61, 49, 173, 57, 188, 142, 92, 134, 190, 238, 143, 85, 60, 4, 168, 29, 190, 46, 179, 122, 190, 124, 109, 34, 60, 235, 100, 165, 60, 242, 212, 116, 190, 244, 213, 23, 62, 64, 111, 42, 62, 196, 230, 212, 61, 21, 22, 66, 62, 232, 106, 188, 61, 209, 251, 27, 62, 0, 84, 39, 60, 106, 2, 69, 190, 46, 249, 6, 62, 104, 234, 66, 61, 64, 67, 132, 190, 28, 250, 42, 62, 26, 57, 53, 189, 141, 141, 140, 190, 91, 188, 167, 190, 63, 74, 11, 190, 6, 26, 152, 61, 198, 99, 126, 61, 35, 131, 145, 61, 45, 170, 89, 62, 246, 53, 183, 58, 138, 243, 34, 190, 141, 4, 187, 61, 252, 160, 196, 61, 141, 225, 40, 60, 144, 14, 17, 61, 185, 160, 9, 62, 178, 90, 212, 189, 145, 251, 153, 189, 34, 178, 253, 60, 50, 185, 75, 191, 85, 215, 22, 190, 130, 171, 110, 62, 138, 69, 1, 190, 212, 244, 191, 61, 68, 214, 61, 190, 182, 191, 130, 59, 252, 141, 221, 190, 100, 97, 129, 62, 22, 199, 9, 191, 188, 172, 90, 190, 96, 107, 77, 62, 65, 17, 172, 190, 213, 38, 139, 61, 185, 88, 144, 191, 4, 170, 195, 190, 132, 194, 53, 190, 137, 230, 37, 62, 12, 28, 91, 60, 41, 21, 61, 62, 123, 198, 146, 190, 51, 85, 189, 186, 132, 197, 87, 62, 236, 81, 50, 190, 106, 88, 154, 61, 207, 223, 178, 62, 135, 39, 233, 189, 54, 170, 187, 62, 241, 253, 204, 189, 180, 22, 101, 189, 200, 221, 105, 62, 246, 227, 26, 62, 115, 209, 40, 191, 20, 210, 157, 62, 140, 112, 165, 62, 134, 6, 166, 61, 47, 229, 2, 62, 114, 39, 163, 61, 238, 240, 153, 62, 202, 47, 22, 191, 236, 219, 5, 63, 168, 10, 148, 190, 153, 146, 134, 190, 187, 179, 36, 62, 232, 129, 185, 190, 236, 40, 126, 189, 92, 108, 55, 190, 47, 242, 8, 60, 252, 171, 125, 57, 19, 134, 20, 190, 228, 255, 13, 191, 116, 217, 124, 189, 183, 173, 251, 187, 97, 86, 130, 61, 84, 216, 154, 59, 220, 17, 166, 190, 128, 157, 19, 190, 121, 176, 26, 60, 54, 246, 111, 190, 188, 191, 107, 191, 174, 77, 35, 190, 98, 219, 127, 190, 245, 171, 181, 189, 217, 40, 224, 189, 216, 163, 182, 190, 154, 16, 24, 191, 117, 72, 163, 62, 134, 76, 30, 190, 246, 92, 25, 190, 252, 91, 1, 190, 223, 12, 150, 190, 63, 228, 162, 189, 220, 226, 175, 190, 158, 106, 47, 190, 248, 50, 48, 189, 224, 200, 217, 61, 60, 20, 201, 190, 93, 242, 38, 62, 130, 236, 15, 191, 143, 120, 127, 187, 36, 123, 174, 189, 64, 20, 72, 188, 244, 228, 102, 61, 226, 174, 222, 61, 103, 180, 140, 60, 201, 15, 78, 189, 125, 23, 41, 62, 243, 20, 176, 61, 109, 179, 23, 61, 95, 45, 52, 62, 135, 10, 150, 189, 152, 214, 170, 189, 91, 166, 239, 188, 40, 213, 208, 61, 54, 219, 149, 62, 191, 8, 95, 62, 126, 103, 42, 191, 66, 60, 51, 190, 203, 59, 78, 61, 58, 158, 160, 189, 227, 98, 61, 62, 202, 92, 152, 190, 154, 234, 161, 189, 168, 239, 43, 191, 81, 60, 76, 63, 15, 104, 3, 190, 204, 76, 5, 62, 203, 79, 212, 189, 108, 248, 199, 189, 154, 162, 170, 61, 46, 236, 136, 189, 202, 66, 29, 61, 142, 123, 79, 190, 150, 97, 150, 60, 217, 3, 2, 62, 246, 167, 185, 61, 60, 252, 219, 189, 187, 228, 150, 60, 247, 250, 141, 189, 160, 221, 108, 190, 113, 197, 254, 188, 185, 25, 207, 61, 21, 61, 125, 190, 201, 136, 101, 61, 114, 213, 238, 189, 189, 195, 72, 61, 125, 255, 6, 59, 92, 168, 149, 189, 243, 172, 242, 61, 107, 69, 24, 183, 176, 27, 239, 189, 195, 162, 203, 189, 216, 60, 245, 189, 20, 195, 50, 190, 233, 96, 52, 190, 150, 179, 199, 61, 174, 150, 111, 61, 63, 167, 165, 189, 6, 175, 17, 189, 197, 77, 154, 188, 98, 217, 206, 60, 80, 116, 140, 189, 244, 212, 15, 190, 106, 130, 70, 189, 102, 244, 166, 60, 177, 205, 185, 61, 243, 125, 157, 189, 67, 196, 105, 188, 204, 66, 182, 61, 69, 52, 47, 190, 9, 248, 245, 187, 198, 185, 69, 61, 40, 63, 1, 190, 151, 19, 231, 188, 145, 6, 58, 189, 220, 154, 245, 188, 72, 146, 34, 190, 108, 72, 255, 188, 118, 113, 16, 190, 92, 237, 176, 189, 5, 175, 15, 62, 198, 87, 220, 189, 100, 99, 41, 62, 114, 10, 90, 61, 237, 46, 126, 61, 176, 21, 26, 62, 197, 231, 47, 62, 38, 156, 240, 60, 114, 129, 142, 189, 41, 64, 191, 60, 61, 61, 90, 189, 94, 195, 201, 189, 221, 159, 31, 190, 136, 143, 194, 189, 17, 143, 161, 189, 188, 236, 0, 190, 121, 70, 123, 190, 10, 197, 211, 187, 181, 205, 161, 189, 44, 18, 154, 190, 147, 38, 204, 61, 209, 127, 130, 190, 238, 216, 9, 190, 142, 60, 200, 189, 117, 162, 143, 61, 38, 17, 41, 189, 225, 59, 169, 189, 7, 139, 47, 190, 117, 174, 73, 189, 34, 98, 143, 60, 12, 72, 2, 62, 114, 229, 32, 190, 10, 48, 33, 190, 103, 101, 177, 59, 173, 17, 166, 61, 46, 186, 83, 190, 134, 22, 31, 62, 228, 157, 81, 61, 46, 224, 244, 60, 12, 129, 10, 62, 197, 149, 15, 190, 82, 177, 29, 61, 238, 228, 170, 188, 30, 182, 140, 62, 31, 169, 187, 61, 237, 199, 58, 62, 88, 243, 101, 62, 248, 40, 16, 61, 226, 128, 145, 61, 103, 235, 102, 62, 205, 19, 167, 190, 79, 188, 200, 188, 138, 111, 190, 60, 83, 172, 6, 62, 117, 126, 213, 190, 38, 182, 238, 189, 104, 22, 158, 189, 22, 210, 12, 190, 139, 237, 107, 190, 196, 243, 128, 61, 146, 209, 182, 61, 213, 255, 50, 191, 232, 103, 213, 190, 37, 242, 148, 189, 149, 35, 102, 61, 118, 4, 195, 190, 139, 122, 10, 61, 100, 124, 53, 62, 233, 128, 234, 190, 207, 226, 31, 190, 44, 24, 55, 191, 91, 49, 255, 62, 227, 198, 14, 63, 49, 223, 72, 190, 236, 10, 216, 189, 185, 170, 28, 189, 205, 212, 101, 189, 99, 65, 127, 190, 96, 234, 198, 190, 208, 177, 243, 61, 53, 59, 168, 61, 120, 83, 168, 61, 236, 64, 150, 60, 200, 148, 156, 190, 55, 68, 228, 190, 47, 144, 152, 188, 21, 153, 103, 189, 183, 161, 153, 61, 145, 23, 178, 190, 160, 232, 171, 61, 99, 152, 174, 61, 60, 241, 168, 189, 251, 167, 189, 61, 237, 123, 101, 190, 88, 250, 144, 189, 121, 75, 95, 62, 157, 237, 148, 190, 221, 177, 126, 61, 186, 247, 238, 189, 111, 177, 38, 61, 251, 148, 248, 61, 40, 108, 224, 190, 36, 201, 172, 60, 15, 137, 105, 191, 125, 235, 1, 189, 187, 227, 23, 60, 124, 120, 143, 190, 55, 82, 43, 190, 149, 252, 1, 191, 219, 237, 172, 62, 8, 61, 11, 190, 239, 16, 224, 190, 246, 196, 41, 191, 166, 51, 19, 190, 90, 222, 159, 189, 74, 137, 59, 62, 243, 23, 107, 62, 254, 245, 0, 61, 222, 130, 96, 189, 65, 187, 195, 190, 84, 229, 35, 61, 237, 50, 222, 61, 242, 9, 211, 190, 86, 220, 39, 62, 118, 70, 144, 190, 248, 35, 75, 62, 35, 183, 134, 190, 222, 27, 103, 189, 196, 3, 27, 62, 26, 58, 255, 61, 195, 175, 149, 62, 137, 42, 22, 62, 87, 163, 246, 186, 63, 73, 145, 59, 85, 191, 255, 186, 213, 44, 131, 62, 35, 118, 243, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 53, 39, 62, 73, 118, 17, 61, 152, 245, 212, 61, 222, 142, 115, 189, 129, 171, 180, 61, 0, 254, 88, 189, 198, 141, 127, 62, 105, 38, 63, 190, 181, 83, 140, 190, 35, 56, 135, 190, 170, 119, 60, 61, 37, 150, 188, 62, 134, 167, 130, 189, 23, 15, 38, 188, 164, 152, 68, 60, 149, 194, 153, 62, 120, 90, 182, 190, 76, 10, 242, 62, 92, 12, 18, 60, 156, 155, 217, 62, 237, 127, 127, 189, 183, 131, 146, 62, 75, 131, 156, 62, 92, 120, 134, 62, 40, 186, 231, 189, 76, 131, 60, 62, 31, 81, 24, 190, 159, 45, 78, 190, 53, 38, 103, 189, 31, 51, 72, 62, 254, 56, 24, 62, 67, 87, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 128, 76, 190, 127, 87, 148, 190, 132, 155, 21, 191, 128, 89, 139, 62, 230, 51, 46, 62, 134, 186, 71, 63, 243, 28, 43, 191, 177, 160, 230, 60, 185, 28, 26, 61, 105, 65, 14, 63, 73, 128, 98, 191, 118, 18, 83, 63, 64, 233, 88, 61, 70, 231, 84, 191, 19, 202, 105, 62, 159, 30, 65, 191, 15, 44, 250, 190, 79, 246, 132, 191, 53, 233, 27, 190, 21, 151, 146, 63, 95, 220, 177, 190, 113, 40, 189, 61, 62, 153, 204, 189, 77, 150, 17, 191, 176, 181, 8, 63, 22, 105, 190, 190, 74, 105, 189, 187, 138, 79, 183, 61, 12, 146, 22, 62, 205, 104, 240, 190, 76, 114, 212, 61, 25, 7, 177, 62, 79, 73, 38, 61, 173, 94, 201, 60, 159, 23, 74, 62, 42, 101, 251, 189, 125, 199, 24, 190, 74, 246, 36, 62, 0, 59, 239, 190, 243, 184, 33, 190, 50, 5, 52, 62, 192, 31, 211, 189, 238, 122, 27, 61, 159, 219, 214, 61, 38, 248, 220, 61, 162, 32, 32, 62, 120, 142, 48, 190, 224, 215, 154, 62, 181, 195, 145, 62, 31, 119, 143, 189, 199, 252, 159, 188, 22, 221, 4, 188, 226, 46, 1, 190, 208, 70, 93, 190, 140, 214, 48, 190, 249, 8, 113, 62, 241, 174, 28, 62, 173, 185, 194, 189, 7, 239, 136, 61, 174, 96, 31, 190, 136, 109, 84, 61, 136, 113, 188, 190, 126, 122, 125, 190, 159, 202, 203, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 212, 51, 62, 16, 144, 203, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {129, 86, 15, 63, 11, 107, 201, 191, 233, 53, 208, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {147, 213, 199, 63, 96, 10, 234, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0043/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}