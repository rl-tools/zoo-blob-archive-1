// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 217, 175, 62, 144, 193, 42, 189, 60, 133, 9, 191, 175, 196, 190, 190, 130, 4, 117, 190, 193, 25, 8, 63, 38, 217, 173, 190, 242, 51, 130, 63, 6, 229, 119, 62, 80, 33, 160, 62, 96, 88, 161, 191, 243, 72, 44, 190, 24, 15, 218, 62, 50, 184, 115, 63, 163, 253, 244, 62, 34, 87, 223, 190, 98, 90, 232, 63, 139, 43, 183, 62, 210, 7, 145, 191, 32, 41, 133, 189, 91, 112, 253, 62, 84, 119, 76, 63, 189, 245, 135, 191, 228, 121, 13, 190, 255, 194, 115, 191, 180, 206, 109, 62, 17, 195, 163, 61, 81, 45, 181, 61, 76, 34, 58, 191, 208, 234, 184, 189, 251, 243, 209, 188, 227, 83, 177, 62, 42, 70, 234, 190, 230, 11, 188, 189, 47, 204, 143, 63, 60, 244, 172, 62, 43, 23, 129, 190, 161, 96, 213, 62, 137, 201, 167, 190, 174, 197, 12, 62, 183, 215, 225, 188, 103, 31, 180, 190, 186, 32, 226, 190, 208, 0, 192, 190, 238, 153, 219, 62, 141, 135, 186, 190, 177, 104, 156, 61, 197, 174, 46, 191, 99, 118, 100, 63, 239, 128, 79, 63, 188, 18, 20, 63, 239, 133, 109, 191, 101, 236, 17, 191, 32, 42, 15, 63, 97, 161, 86, 190, 12, 93, 231, 191, 7, 122, 5, 191, 245, 225, 74, 191, 75, 245, 7, 63, 161, 137, 231, 62, 146, 26, 18, 191, 174, 54, 153, 61, 113, 162, 169, 190, 204, 64, 0, 63, 156, 109, 164, 190, 231, 15, 14, 63, 55, 207, 198, 190, 99, 2, 107, 191, 38, 1, 199, 188, 135, 102, 49, 63, 68, 156, 149, 191, 119, 167, 165, 190, 108, 201, 51, 191, 119, 250, 1, 191, 30, 6, 224, 190, 34, 211, 23, 63, 186, 10, 113, 63, 64, 163, 134, 62, 125, 90, 30, 191, 147, 23, 178, 190, 160, 62, 10, 189, 113, 118, 23, 63, 245, 238, 115, 190, 76, 137, 23, 63, 153, 15, 22, 62, 82, 81, 121, 191, 82, 171, 89, 190, 147, 178, 52, 63, 66, 149, 95, 60, 104, 120, 148, 62, 235, 226, 87, 63, 20, 48, 65, 191, 240, 128, 172, 190, 61, 1, 39, 191, 113, 8, 149, 190, 193, 131, 60, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 142, 110, 191, 96, 109, 122, 62, 168, 231, 22, 63, 138, 16, 25, 188, 134, 217, 101, 190, 116, 144, 45, 190, 81, 149, 119, 190, 94, 169, 140, 61, 19, 223, 143, 62, 8, 98, 137, 59, 180, 197, 201, 62, 170, 216, 36, 61, 40, 160, 8, 63, 14, 68, 181, 190, 118, 178, 176, 62, 164, 139, 98, 188, 245, 45, 252, 189, 125, 70, 112, 62, 123, 27, 79, 190, 224, 254, 220, 189, 87, 208, 132, 190, 183, 229, 49, 191, 27, 151, 16, 63, 60, 0, 157, 190, 0, 125, 30, 191, 214, 225, 20, 190, 153, 116, 38, 63, 177, 204, 131, 190, 175, 121, 131, 189, 215, 125, 110, 191, 33, 37, 85, 191, 212, 231, 17, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 87, 58, 190, 154, 72, 134, 190, 24, 97, 69, 60, 190, 67, 187, 188, 202, 176, 116, 62, 1, 146, 214, 61, 106, 251, 15, 191, 16, 74, 175, 61, 195, 154, 93, 190, 145, 89, 133, 62, 61, 141, 115, 190, 91, 135, 58, 62, 62, 253, 167, 190, 169, 250, 168, 61, 33, 70, 253, 189, 5, 230, 194, 189, 142, 118, 138, 62, 106, 5, 110, 190, 157, 244, 250, 62, 46, 228, 111, 190, 165, 26, 231, 188, 128, 210, 17, 62, 21, 253, 88, 62, 89, 228, 72, 190, 210, 29, 158, 62, 212, 211, 130, 189, 125, 138, 42, 62, 150, 42, 194, 61, 31, 24, 81, 62, 235, 255, 7, 59, 16, 130, 153, 190, 73, 48, 165, 61, 45, 226, 250, 189, 26, 13, 214, 61, 250, 92, 40, 190, 223, 186, 198, 190, 16, 171, 0, 62, 182, 201, 87, 190, 43, 89, 232, 60, 66, 128, 158, 190, 181, 91, 173, 190, 15, 85, 25, 189, 181, 144, 6, 191, 168, 198, 252, 189, 109, 11, 136, 190, 55, 172, 47, 190, 185, 96, 27, 190, 93, 221, 25, 62, 218, 167, 122, 61, 123, 219, 107, 190, 12, 254, 31, 190, 176, 48, 204, 61, 80, 19, 165, 60, 161, 68, 87, 62, 166, 104, 229, 189, 84, 209, 42, 191, 185, 137, 0, 62, 136, 79, 161, 62, 111, 247, 42, 191, 117, 115, 27, 62, 143, 195, 68, 61, 98, 115, 149, 61, 37, 200, 24, 189, 84, 147, 42, 62, 16, 98, 103, 190, 100, 21, 215, 61, 78, 75, 223, 62, 189, 19, 37, 191, 116, 105, 156, 189, 164, 234, 252, 190, 19, 248, 136, 188, 237, 71, 191, 190, 25, 146, 159, 62, 173, 71, 97, 190, 43, 20, 39, 62, 238, 231, 248, 189, 116, 68, 20, 62, 95, 3, 154, 189, 234, 0, 2, 190, 31, 185, 252, 189, 24, 76, 25, 62, 48, 235, 243, 60, 140, 56, 136, 190, 170, 2, 143, 190, 95, 60, 51, 190, 42, 107, 44, 61, 201, 224, 119, 190, 6, 186, 36, 191, 87, 201, 71, 189, 116, 129, 236, 62, 140, 201, 16, 190, 201, 33, 46, 189, 119, 60, 177, 190, 21, 222, 162, 189, 208, 165, 79, 191, 30, 46, 143, 63, 250, 159, 164, 61, 52, 192, 104, 190, 186, 175, 25, 191, 21, 65, 210, 190, 193, 13, 76, 62, 11, 102, 167, 191, 209, 40, 78, 190, 249, 85, 146, 190, 54, 48, 249, 61, 66, 124, 46, 62, 146, 172, 148, 62, 67, 172, 134, 190, 196, 131, 107, 62, 212, 82, 22, 62, 184, 4, 254, 58, 178, 222, 20, 62, 171, 148, 80, 190, 220, 192, 202, 190, 56, 196, 211, 62, 211, 153, 12, 190, 212, 92, 71, 62, 97, 148, 132, 190, 102, 127, 50, 190, 238, 241, 131, 188, 104, 255, 136, 60, 36, 79, 133, 190, 4, 105, 7, 190, 64, 211, 38, 189, 115, 100, 57, 189, 188, 51, 141, 61, 224, 48, 219, 61, 195, 47, 227, 62, 179, 97, 202, 60, 50, 203, 89, 60, 46, 149, 179, 189, 37, 243, 167, 61, 233, 202, 123, 190, 22, 150, 244, 190, 27, 48, 84, 60, 73, 189, 152, 62, 74, 56, 58, 190, 110, 60, 90, 62, 77, 58, 95, 62, 184, 4, 189, 190, 58, 166, 119, 62, 207, 211, 73, 60, 231, 151, 90, 62, 199, 75, 7, 190, 242, 143, 236, 189, 158, 154, 94, 62, 140, 118, 58, 191, 23, 35, 3, 189, 170, 239, 110, 190, 211, 185, 196, 189, 242, 43, 9, 62, 211, 130, 145, 61, 31, 201, 72, 191, 214, 50, 88, 190, 137, 53, 137, 61, 81, 179, 238, 60, 39, 252, 106, 61, 203, 168, 60, 190, 133, 74, 16, 62, 154, 50, 99, 61, 234, 247, 204, 62, 144, 57, 249, 58, 246, 118, 42, 61, 87, 138, 46, 63, 105, 113, 10, 190, 195, 179, 219, 62, 97, 74, 39, 62, 32, 228, 141, 62, 168, 120, 180, 62, 36, 147, 189, 61, 248, 95, 80, 189, 192, 241, 21, 189, 218, 56, 89, 61, 66, 197, 213, 189, 235, 144, 79, 62, 207, 104, 109, 190, 35, 134, 60, 190, 127, 22, 139, 189, 194, 109, 17, 192, 250, 40, 106, 62, 251, 123, 20, 62, 224, 201, 239, 188, 185, 174, 235, 188, 97, 233, 132, 62, 136, 229, 56, 191, 32, 87, 51, 190, 230, 247, 100, 62, 197, 146, 168, 189, 202, 4, 8, 62, 212, 228, 140, 190, 19, 89, 251, 62, 143, 238, 187, 190, 66, 147, 120, 62, 58, 106, 156, 61, 208, 138, 128, 62, 204, 240, 116, 190, 176, 229, 168, 189, 223, 57, 110, 191, 67, 135, 99, 189, 63, 230, 109, 62, 179, 149, 63, 191, 154, 92, 15, 189, 112, 118, 237, 61, 252, 248, 168, 190, 187, 9, 37, 189, 33, 81, 226, 61, 235, 117, 129, 60, 107, 28, 49, 62, 127, 17, 214, 188, 164, 106, 191, 61, 126, 45, 198, 190, 67, 112, 41, 190, 89, 250, 91, 61, 89, 33, 136, 59, 77, 201, 191, 190, 145, 119, 64, 191, 11, 124, 140, 190, 37, 249, 142, 62, 241, 165, 94, 190, 107, 168, 181, 61, 29, 82, 19, 190, 60, 253, 27, 62, 133, 124, 159, 191, 247, 227, 193, 190, 192, 8, 209, 188, 26, 142, 100, 61, 123, 152, 38, 190, 225, 71, 151, 189, 135, 39, 42, 190, 152, 26, 38, 189, 119, 64, 167, 61, 103, 24, 133, 61, 159, 25, 231, 61, 48, 65, 13, 190, 36, 198, 4, 189, 75, 206, 33, 190, 79, 104, 236, 61, 119, 228, 14, 62, 156, 155, 26, 190, 191, 121, 59, 190, 166, 193, 0, 190, 195, 119, 208, 189, 208, 24, 214, 60, 47, 199, 25, 190, 185, 75, 149, 60, 142, 32, 31, 61, 54, 206, 169, 189, 58, 90, 240, 189, 186, 150, 135, 188, 222, 130, 226, 189, 153, 207, 179, 61, 57, 86, 189, 59, 1, 112, 249, 189, 219, 148, 177, 61, 147, 20, 149, 188, 38, 177, 253, 61, 7, 255, 159, 189, 232, 84, 57, 61, 157, 85, 17, 61, 210, 235, 4, 62, 84, 189, 3, 62, 22, 7, 40, 190, 146, 3, 42, 189, 240, 2, 171, 61, 22, 150, 15, 190, 140, 106, 27, 62, 139, 228, 70, 190, 218, 10, 1, 61, 122, 199, 100, 190, 12, 217, 104, 61, 229, 104, 161, 189, 242, 135, 243, 189, 77, 149, 29, 61, 183, 214, 156, 189, 47, 73, 194, 60, 81, 233, 225, 61, 17, 51, 251, 189, 71, 18, 183, 61, 184, 164, 41, 190, 182, 241, 26, 190, 68, 183, 35, 190, 32, 180, 179, 61, 16, 169, 183, 190, 62, 44, 218, 189, 31, 141, 44, 190, 116, 5, 184, 189, 44, 100, 9, 62, 140, 149, 254, 59, 115, 25, 71, 62, 217, 41, 215, 188, 237, 210, 10, 191, 142, 98, 184, 191, 180, 5, 143, 62, 207, 223, 51, 191, 164, 184, 37, 189, 140, 27, 7, 190, 242, 0, 34, 191, 32, 73, 12, 190, 90, 150, 252, 61, 2, 140, 247, 185, 9, 54, 65, 61, 167, 161, 92, 62, 113, 87, 44, 190, 252, 155, 219, 61, 154, 61, 147, 62, 249, 194, 6, 189, 198, 12, 0, 189, 224, 106, 24, 190, 50, 186, 121, 62, 163, 4, 238, 188, 45, 205, 84, 191, 173, 162, 247, 189, 159, 174, 112, 62, 21, 215, 250, 62, 198, 136, 247, 190, 171, 247, 141, 62, 139, 73, 142, 61, 201, 125, 62, 62, 118, 43, 195, 62, 172, 33, 238, 189, 85, 28, 65, 62, 88, 192, 180, 61, 182, 224, 182, 62, 127, 203, 170, 62, 225, 108, 146, 189, 181, 66, 186, 62, 225, 102, 170, 61, 95, 56, 163, 61, 178, 128, 101, 62, 186, 104, 34, 190, 103, 196, 9, 190, 116, 229, 44, 61, 158, 111, 223, 61, 182, 105, 147, 191, 124, 164, 2, 61, 124, 197, 155, 190, 99, 159, 51, 191, 59, 107, 13, 190, 190, 165, 27, 190, 10, 81, 72, 62, 30, 98, 65, 191, 149, 14, 43, 190, 160, 133, 68, 62, 205, 138, 235, 62, 11, 26, 127, 190, 102, 170, 193, 190, 44, 15, 232, 62, 73, 110, 214, 190, 178, 191, 239, 61, 31, 253, 47, 191, 32, 193, 88, 63, 110, 119, 93, 62, 141, 37, 187, 62, 197, 159, 66, 62, 69, 116, 63, 190, 170, 10, 178, 62, 7, 27, 135, 190, 29, 7, 238, 62, 25, 95, 223, 62, 10, 249, 210, 62, 67, 41, 129, 62, 206, 116, 243, 189, 75, 10, 25, 62, 239, 53, 192, 61, 34, 0, 74, 61, 34, 69, 225, 189, 100, 179, 189, 62, 136, 220, 122, 190, 133, 10, 236, 190, 205, 223, 14, 62, 90, 41, 64, 191, 51, 235, 192, 62, 210, 181, 6, 190, 91, 232, 232, 190, 115, 95, 97, 61, 171, 7, 134, 62, 186, 204, 41, 191, 226, 133, 61, 190, 154, 123, 161, 62, 100, 100, 137, 190, 234, 45, 83, 189, 209, 157, 34, 191, 175, 109, 33, 61, 165, 189, 125, 190, 31, 171, 20, 62, 134, 97, 243, 60, 9, 159, 1, 189, 123, 27, 86, 60, 54, 192, 147, 61, 116, 87, 40, 190, 212, 38, 138, 60, 160, 222, 70, 189, 194, 249, 167, 189, 182, 47, 22, 189, 226, 242, 8, 190, 47, 179, 29, 190, 230, 132, 74, 189, 14, 159, 14, 190, 157, 196, 46, 190, 201, 188, 151, 61, 248, 66, 208, 60, 164, 18, 40, 190, 36, 130, 241, 189, 241, 238, 90, 61, 224, 147, 123, 189, 229, 137, 22, 189, 137, 220, 146, 189, 17, 39, 152, 189, 25, 199, 74, 189, 130, 132, 152, 61, 221, 17, 158, 61, 196, 78, 14, 190, 253, 205, 7, 190, 36, 44, 84, 61, 185, 46, 2, 62, 181, 122, 172, 61, 104, 220, 228, 189, 72, 204, 171, 190, 140, 63, 10, 63, 132, 215, 211, 190, 90, 88, 132, 62, 5, 230, 162, 62, 208, 37, 52, 191, 41, 100, 66, 190, 221, 65, 109, 190, 156, 42, 186, 190, 245, 231, 253, 61, 29, 214, 77, 61, 224, 75, 74, 62, 221, 52, 179, 61, 27, 40, 66, 191, 157, 81, 87, 62, 173, 147, 31, 62, 99, 28, 58, 191, 201, 115, 164, 190, 17, 125, 136, 61, 127, 192, 20, 60, 80, 186, 149, 190, 135, 198, 106, 191, 167, 36, 14, 191, 166, 14, 150, 61, 204, 135, 141, 62, 38, 226, 0, 190, 240, 15, 14, 190, 225, 63, 22, 191, 26, 155, 136, 189, 124, 32, 10, 191, 200, 224, 230, 189, 253, 157, 201, 61, 228, 19, 188, 187, 242, 96, 51, 191, 248, 196, 38, 191, 62, 127, 159, 189, 249, 125, 140, 191, 219, 127, 143, 189, 226, 99, 232, 187, 86, 179, 155, 190, 72, 6, 82, 62, 12, 44, 47, 62, 207, 59, 90, 190, 49, 5, 6, 62, 246, 226, 198, 61, 104, 27, 156, 61, 176, 181, 49, 62, 145, 89, 135, 190, 181, 132, 122, 190, 214, 152, 247, 189, 222, 200, 165, 59, 91, 43, 56, 190, 42, 169, 99, 187, 255, 17, 137, 190, 171, 147, 79, 61, 109, 142, 13, 189, 66, 187, 6, 62, 58, 120, 121, 190, 21, 218, 32, 189, 119, 43, 150, 61, 31, 29, 124, 61, 187, 158, 180, 62, 25, 108, 133, 190, 27, 37, 45, 189, 38, 55, 138, 189, 147, 139, 28, 61, 196, 188, 3, 191, 206, 106, 32, 190, 222, 223, 137, 191, 9, 136, 19, 190, 102, 2, 95, 189, 253, 194, 96, 190, 218, 216, 219, 60, 65, 23, 27, 62, 107, 33, 152, 190, 31, 208, 130, 61, 143, 203, 141, 59, 109, 50, 58, 61, 50, 3, 54, 62, 209, 41, 31, 62, 46, 250, 142, 189, 160, 210, 165, 190, 134, 104, 113, 190, 181, 88, 98, 62, 106, 254, 52, 62, 24, 59, 26, 190, 239, 47, 153, 191, 226, 185, 70, 190, 67, 202, 244, 61, 100, 45, 141, 190, 237, 177, 12, 62, 246, 241, 141, 190, 229, 98, 123, 59, 8, 155, 187, 191, 206, 201, 204, 190, 68, 16, 197, 62, 184, 203, 131, 60, 166, 10, 48, 190, 73, 96, 126, 62, 157, 207, 9, 62, 149, 62, 143, 190, 229, 100, 206, 188, 81, 18, 30, 61, 10, 87, 51, 191, 113, 225, 58, 62, 209, 165, 44, 190, 102, 179, 25, 62, 81, 216, 157, 190, 80, 27, 132, 61, 0, 17, 232, 59, 93, 212, 160, 61, 235, 225, 40, 62, 137, 163, 149, 189, 194, 82, 12, 187, 128, 0, 213, 189, 75, 182, 212, 186, 250, 14, 25, 62, 173, 106, 141, 190, 208, 145, 0, 63, 232, 244, 193, 189, 120, 121, 227, 61, 89, 62, 6, 191, 47, 28, 97, 188, 193, 70, 169, 62, 107, 159, 87, 62, 0, 102, 22, 63, 143, 43, 12, 62, 241, 220, 2, 191, 6, 145, 91, 191, 53, 146, 151, 62, 215, 243, 28, 60, 175, 132, 153, 190, 232, 123, 33, 191, 157, 228, 21, 191, 99, 240, 189, 190, 228, 103, 83, 189, 200, 39, 71, 60, 133, 89, 104, 62, 44, 123, 255, 190, 157, 70, 67, 62, 11, 163, 120, 189, 65, 87, 68, 191, 28, 226, 140, 60, 2, 174, 5, 62, 53, 237, 40, 190, 155, 70, 147, 62, 189, 75, 71, 190, 122, 108, 20, 190, 202, 29, 6, 191, 97, 31, 191, 62, 13, 137, 247, 190, 16, 161, 11, 62, 234, 167, 148, 62, 180, 168, 243, 62, 9, 203, 95, 190, 191, 28, 81, 189, 249, 205, 211, 189, 197, 102, 67, 191, 164, 22, 127, 63, 221, 42, 249, 188, 127, 194, 31, 188, 223, 21, 130, 61, 61, 225, 20, 62, 123, 221, 149, 188, 34, 122, 12, 190, 22, 39, 27, 190, 233, 172, 219, 58, 0, 219, 51, 190, 243, 185, 48, 61, 227, 229, 167, 189, 138, 143, 42, 62, 198, 76, 220, 189, 22, 63, 152, 189, 178, 177, 241, 189, 84, 212, 246, 189, 219, 161, 121, 189, 140, 44, 108, 189, 170, 31, 78, 187, 212, 222, 24, 62, 192, 149, 8, 190, 138, 51, 238, 189, 18, 78, 43, 190, 56, 144, 128, 189, 13, 181, 176, 60, 225, 45, 23, 190, 224, 236, 238, 59, 236, 102, 253, 189, 110, 217, 230, 189, 51, 83, 16, 190, 246, 172, 206, 61, 61, 96, 162, 189, 83, 52, 136, 62, 180, 193, 90, 187, 82, 9, 159, 189, 166, 32, 17, 63, 42, 47, 205, 190, 105, 58, 207, 61, 6, 132, 68, 62, 2, 82, 220, 62, 243, 187, 39, 62, 108, 56, 85, 190, 83, 163, 69, 190, 230, 25, 59, 190, 130, 117, 114, 61, 239, 36, 79, 60, 28, 185, 121, 62, 143, 138, 233, 190, 192, 174, 181, 190, 105, 61, 151, 62, 68, 245, 218, 191, 143, 177, 25, 62, 128, 91, 243, 61, 143, 196, 158, 190, 59, 247, 6, 62, 121, 127, 21, 62, 177, 244, 139, 191, 157, 230, 224, 190, 227, 6, 127, 62, 230, 149, 215, 189, 69, 13, 226, 189, 8, 228, 251, 190, 228, 233, 85, 190, 206, 243, 195, 190, 25, 141, 6, 190, 49, 84, 62, 188, 127, 26, 98, 189, 142, 9, 209, 190, 75, 214, 173, 61, 212, 96, 195, 190, 6, 187, 138, 190, 69, 240, 131, 189, 93, 177, 128, 62, 158, 234, 9, 191, 9, 126, 153, 190, 15, 200, 2, 190, 120, 58, 220, 187, 68, 27, 73, 190, 28, 169, 0, 190, 174, 244, 88, 190, 195, 6, 147, 62, 232, 228, 147, 189, 167, 233, 32, 62, 193, 158, 159, 190, 77, 87, 199, 190, 95, 245, 106, 62, 236, 86, 138, 62, 183, 72, 236, 190, 205, 80, 110, 62, 255, 192, 117, 62, 249, 198, 61, 60, 51, 229, 125, 62, 66, 255, 82, 191, 79, 20, 255, 61, 250, 18, 233, 190, 27, 99, 218, 62, 156, 86, 244, 61, 225, 42, 60, 62, 111, 52, 233, 189, 220, 52, 216, 188, 25, 225, 14, 190, 117, 230, 192, 61, 124, 152, 238, 61, 111, 79, 168, 62, 93, 166, 159, 61, 136, 13, 37, 62, 218, 11, 184, 62, 87, 126, 161, 188, 142, 125, 138, 62, 102, 127, 57, 189, 56, 66, 137, 62, 80, 100, 171, 61, 91, 95, 235, 61, 75, 212, 3, 189, 80, 91, 181, 190, 227, 155, 96, 189, 118, 75, 28, 190, 156, 48, 128, 190, 92, 21, 48, 189, 29, 228, 10, 61, 12, 94, 131, 190, 254, 1, 139, 62, 210, 18, 189, 61, 107, 71, 246, 61, 3, 225, 231, 61, 243, 69, 7, 62, 146, 18, 91, 62, 207, 222, 51, 189, 197, 229, 39, 190, 155, 35, 183, 61, 25, 139, 10, 61, 208, 64, 176, 190, 5, 126, 199, 61, 35, 131, 175, 189, 58, 2, 172, 190, 173, 51, 188, 190, 184, 242, 114, 190, 205, 192, 119, 60, 177, 126, 253, 61, 55, 85, 42, 61, 89, 240, 135, 62, 163, 152, 19, 61, 184, 125, 80, 190, 191, 134, 13, 62, 22, 241, 224, 60, 19, 186, 238, 188, 190, 57, 112, 189, 235, 92, 163, 61, 67, 103, 206, 189, 59, 39, 175, 189, 209, 33, 101, 189, 83, 104, 82, 191, 34, 212, 60, 190, 10, 248, 88, 62, 37, 253, 44, 190, 41, 22, 153, 59, 198, 17, 126, 190, 6, 218, 130, 60, 6, 86, 132, 190, 54, 175, 99, 62, 49, 183, 20, 191, 9, 14, 112, 190, 213, 144, 57, 62, 4, 224, 167, 190, 195, 59, 58, 61, 28, 52, 141, 191, 3, 213, 225, 190, 21, 221, 78, 190, 111, 130, 152, 61, 102, 181, 234, 188, 136, 242, 248, 61, 192, 18, 151, 190, 42, 196, 119, 189, 120, 46, 58, 62, 219, 190, 74, 190, 153, 223, 105, 61, 27, 147, 165, 62, 203, 92, 4, 190, 229, 129, 169, 62, 202, 6, 11, 190, 198, 163, 168, 189, 174, 141, 109, 62, 233, 129, 45, 62, 184, 24, 49, 191, 28, 35, 145, 62, 116, 80, 142, 62, 158, 157, 195, 61, 41, 122, 3, 62, 252, 161, 111, 61, 166, 254, 151, 62, 138, 3, 51, 191, 68, 126, 223, 62, 130, 165, 133, 190, 47, 121, 153, 190, 45, 90, 31, 62, 177, 136, 188, 190, 161, 158, 180, 189, 191, 82, 65, 190, 47, 242, 8, 60, 53, 50, 11, 188, 107, 180, 29, 190, 177, 3, 14, 191, 68, 116, 220, 188, 20, 38, 167, 188, 51, 13, 172, 61, 77, 141, 205, 61, 173, 134, 184, 190, 143, 254, 144, 189, 246, 109, 57, 188, 54, 246, 111, 190, 188, 191, 107, 191, 189, 6, 18, 190, 186, 13, 131, 190, 186, 116, 214, 189, 217, 40, 224, 189, 184, 218, 182, 190, 154, 16, 24, 191, 242, 190, 160, 62, 39, 114, 44, 190, 15, 26, 61, 190, 164, 5, 3, 190, 223, 12, 150, 190, 222, 182, 168, 189, 220, 226, 175, 190, 32, 250, 15, 190, 44, 176, 37, 189, 79, 114, 190, 61, 183, 93, 253, 190, 248, 29, 24, 62, 52, 25, 7, 191, 111, 219, 28, 188, 205, 3, 46, 190, 19, 165, 134, 59, 102, 17, 210, 188, 31, 107, 214, 61, 240, 222, 225, 60, 210, 89, 124, 189, 52, 14, 61, 62, 142, 32, 178, 61, 82, 62, 136, 61, 81, 150, 16, 62, 114, 200, 136, 189, 154, 4, 15, 190, 11, 239, 198, 188, 97, 121, 37, 62, 116, 192, 153, 62, 11, 66, 61, 62, 17, 207, 69, 191, 213, 0, 218, 189, 154, 160, 58, 188, 189, 125, 120, 189, 152, 98, 37, 62, 155, 111, 198, 190, 226, 248, 135, 189, 43, 106, 64, 191, 19, 24, 72, 63, 15, 104, 3, 190, 204, 76, 5, 62, 203, 79, 212, 189, 108, 248, 199, 189, 154, 162, 170, 61, 46, 236, 136, 189, 202, 66, 29, 61, 142, 123, 79, 190, 150, 97, 150, 60, 217, 3, 2, 62, 246, 167, 185, 61, 60, 252, 219, 189, 187, 228, 150, 60, 247, 250, 141, 189, 160, 221, 108, 190, 113, 197, 254, 188, 185, 25, 207, 61, 21, 61, 125, 190, 201, 136, 101, 61, 114, 213, 238, 189, 189, 195, 72, 61, 125, 255, 6, 59, 92, 168, 149, 189, 243, 172, 242, 61, 107, 69, 24, 183, 176, 27, 239, 189, 195, 162, 203, 189, 216, 60, 245, 189, 20, 195, 50, 190, 233, 96, 52, 190, 150, 179, 199, 61, 174, 150, 111, 61, 63, 167, 165, 189, 227, 45, 22, 189, 197, 77, 154, 188, 92, 94, 165, 60, 80, 116, 140, 189, 244, 212, 15, 190, 106, 130, 70, 189, 17, 76, 103, 60, 177, 205, 185, 61, 70, 189, 162, 189, 36, 81, 109, 188, 204, 66, 182, 61, 244, 95, 47, 190, 9, 248, 245, 187, 78, 189, 62, 61, 40, 63, 1, 190, 151, 19, 231, 188, 143, 44, 60, 189, 29, 187, 11, 189, 72, 146, 34, 190, 108, 72, 255, 188, 118, 113, 16, 190, 216, 18, 186, 189, 97, 35, 11, 62, 198, 87, 220, 189, 100, 99, 41, 62, 20, 211, 80, 61, 50, 139, 118, 61, 122, 178, 22, 62, 197, 231, 47, 62, 115, 246, 230, 60, 114, 129, 142, 189, 41, 64, 191, 60, 61, 61, 90, 189, 94, 195, 201, 189, 221, 159, 31, 190, 136, 143, 194, 189, 17, 143, 161, 189, 188, 236, 0, 190, 121, 70, 123, 190, 10, 197, 211, 187, 181, 205, 161, 189, 44, 18, 154, 190, 147, 38, 204, 61, 209, 127, 130, 190, 238, 216, 9, 190, 142, 60, 200, 189, 117, 162, 143, 61, 38, 17, 41, 189, 225, 59, 169, 189, 7, 139, 47, 190, 117, 174, 73, 189, 34, 98, 143, 60, 12, 72, 2, 62, 114, 229, 32, 190, 10, 48, 33, 190, 103, 101, 177, 59, 173, 17, 166, 61, 46, 186, 83, 190, 134, 22, 31, 62, 228, 157, 81, 61, 46, 224, 244, 60, 12, 129, 10, 62, 197, 149, 15, 190, 56, 115, 105, 61, 236, 107, 63, 190, 149, 255, 153, 62, 205, 186, 107, 62, 134, 85, 84, 62, 63, 138, 105, 62, 59, 243, 87, 190, 131, 142, 45, 62, 126, 236, 188, 61, 115, 206, 42, 190, 236, 213, 162, 59, 61, 209, 9, 61, 133, 131, 46, 62, 118, 51, 201, 190, 128, 194, 132, 190, 94, 243, 74, 189, 162, 167, 238, 189, 106, 8, 222, 190, 191, 169, 132, 62, 26, 20, 3, 61, 164, 190, 83, 191, 103, 221, 239, 190, 71, 169, 170, 61, 115, 113, 75, 62, 166, 234, 198, 190, 216, 67, 168, 61, 121, 35, 135, 62, 93, 76, 215, 190, 152, 219, 120, 61, 244, 147, 50, 191, 43, 150, 42, 63, 130, 162, 241, 62, 49, 223, 72, 190, 111, 242, 205, 189, 107, 138, 235, 189, 213, 76, 68, 61, 169, 100, 138, 190, 246, 240, 42, 191, 124, 14, 152, 61, 223, 3, 204, 61, 236, 131, 61, 61, 104, 146, 31, 62, 42, 17, 229, 190, 181, 62, 16, 191, 150, 32, 158, 189, 236, 86, 103, 189, 27, 161, 187, 61, 130, 239, 211, 190, 163, 176, 135, 61, 234, 249, 181, 61, 3, 149, 2, 62, 25, 178, 182, 59, 61, 60, 145, 190, 116, 175, 184, 189, 94, 33, 164, 62, 65, 98, 193, 190, 95, 204, 171, 61, 212, 248, 13, 190, 132, 151, 13, 62, 55, 241, 225, 61, 106, 38, 176, 190, 23, 139, 220, 60, 62, 43, 141, 191, 147, 226, 160, 189, 96, 206, 206, 60, 137, 173, 160, 190, 137, 131, 148, 190, 190, 228, 4, 191, 149, 144, 150, 62, 165, 68, 116, 190, 46, 80, 253, 190, 162, 193, 38, 191, 83, 193, 33, 190, 200, 107, 74, 189, 230, 70, 60, 62, 21, 108, 24, 62, 21, 149, 220, 60, 224, 180, 22, 189, 175, 126, 222, 190, 225, 191, 94, 61, 251, 240, 137, 61, 43, 174, 239, 190, 161, 182, 104, 62, 38, 176, 178, 190, 28, 254, 85, 62, 132, 132, 136, 190, 55, 102, 27, 189, 60, 248, 41, 62, 239, 61, 40, 62, 250, 33, 144, 62, 52, 140, 27, 62, 145, 250, 206, 188, 160, 169, 56, 61, 208, 66, 14, 186, 33, 165, 142, 62, 190, 173, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 214, 9, 62, 33, 164, 29, 187, 234, 166, 132, 61, 181, 73, 148, 189, 128, 185, 35, 62, 53, 31, 12, 189, 23, 184, 145, 62, 93, 228, 73, 190, 181, 83, 140, 190, 31, 101, 143, 190, 101, 125, 127, 188, 119, 146, 175, 62, 134, 167, 130, 189, 39, 183, 4, 189, 3, 142, 162, 59, 227, 3, 106, 62, 184, 228, 175, 190, 72, 227, 244, 62, 92, 12, 18, 60, 104, 50, 230, 62, 29, 120, 18, 190, 151, 69, 194, 62, 213, 117, 154, 62, 222, 107, 105, 62, 103, 99, 232, 189, 153, 134, 4, 62, 31, 81, 24, 190, 92, 210, 82, 190, 53, 38, 103, 189, 4, 60, 134, 62, 117, 131, 56, 62, 80, 77, 195, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 67, 69, 190, 239, 177, 131, 190, 18, 90, 27, 191, 123, 135, 145, 62, 6, 4, 6, 62, 7, 70, 49, 63, 54, 103, 25, 191, 195, 93, 221, 60, 185, 28, 26, 61, 234, 61, 22, 63, 119, 129, 128, 191, 107, 111, 70, 63, 64, 233, 88, 61, 39, 82, 129, 191, 163, 76, 89, 62, 130, 218, 62, 191, 93, 61, 251, 190, 59, 99, 120, 191, 53, 233, 27, 190, 68, 224, 134, 63, 246, 81, 149, 190, 198, 100, 150, 61, 196, 37, 44, 190, 200, 188, 230, 190, 59, 115, 11, 63, 248, 142, 180, 190, 74, 105, 189, 187, 121, 251, 181, 61, 12, 146, 22, 62, 40, 230, 252, 190, 134, 134, 91, 62, 216, 5, 183, 62, 196, 220, 226, 61, 65, 95, 150, 187, 67, 109, 136, 62, 185, 88, 36, 190, 135, 30, 209, 190, 195, 4, 45, 61, 202, 59, 205, 190, 241, 169, 33, 190, 50, 5, 52, 62, 44, 200, 46, 190, 118, 151, 75, 62, 6, 158, 104, 61, 38, 248, 220, 61, 171, 197, 90, 62, 74, 219, 158, 190, 206, 212, 203, 62, 120, 15, 145, 62, 145, 56, 22, 190, 199, 252, 159, 188, 53, 100, 175, 189, 251, 9, 27, 190, 114, 20, 190, 190, 241, 196, 23, 190, 6, 99, 87, 62, 57, 209, 25, 62, 197, 182, 158, 189, 7, 239, 136, 61, 90, 170, 31, 190, 136, 109, 84, 61, 244, 101, 31, 191, 180, 21, 143, 190, 25, 52, 216, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 15, 51, 62, 119, 172, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {36, 65, 207, 191, 97, 160, 198, 191, 143, 111, 134, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {81, 117, 31, 192, 232, 175, 21, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0043/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}