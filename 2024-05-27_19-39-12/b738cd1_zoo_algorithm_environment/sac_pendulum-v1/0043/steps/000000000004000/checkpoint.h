// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {223, 17, 83, 62, 72, 208, 225, 60, 68, 207, 31, 191, 62, 184, 160, 190, 155, 140, 38, 191, 252, 228, 40, 63, 169, 175, 112, 190, 130, 232, 32, 63, 232, 25, 215, 61, 69, 27, 212, 62, 170, 18, 70, 191, 22, 148, 241, 188, 84, 16, 149, 62, 107, 236, 37, 63, 131, 247, 248, 62, 86, 241, 36, 191, 69, 84, 16, 63, 145, 49, 236, 62, 142, 219, 24, 191, 143, 189, 7, 191, 192, 224, 17, 63, 212, 57, 105, 63, 55, 137, 49, 191, 192, 47, 58, 189, 20, 110, 27, 191, 113, 35, 158, 190, 74, 212, 52, 189, 249, 85, 118, 60, 207, 108, 24, 61, 213, 62, 228, 190, 13, 169, 26, 190, 148, 166, 167, 62, 255, 183, 237, 190, 33, 137, 248, 61, 207, 159, 60, 63, 213, 13, 207, 62, 177, 223, 122, 190, 72, 13, 137, 61, 240, 247, 208, 190, 116, 220, 154, 190, 110, 56, 252, 62, 207, 250, 220, 190, 167, 20, 240, 189, 234, 62, 36, 191, 148, 141, 248, 62, 67, 91, 181, 190, 203, 200, 234, 62, 176, 56, 47, 191, 245, 84, 65, 63, 181, 219, 28, 63, 18, 144, 28, 63, 236, 181, 140, 190, 249, 63, 85, 191, 225, 37, 42, 63, 141, 163, 254, 190, 61, 165, 222, 190, 78, 81, 173, 190, 152, 98, 8, 191, 223, 108, 138, 189, 157, 222, 8, 63, 160, 72, 176, 190, 121, 46, 201, 62, 7, 139, 201, 190, 187, 77, 239, 62, 71, 81, 166, 189, 101, 210, 8, 63, 158, 68, 84, 189, 187, 185, 2, 191, 171, 66, 71, 60, 207, 10, 226, 62, 150, 191, 81, 191, 95, 187, 131, 190, 49, 193, 45, 191, 207, 121, 216, 61, 59, 63, 230, 190, 156, 80, 252, 62, 132, 157, 20, 63, 130, 174, 143, 62, 148, 35, 181, 190, 67, 222, 197, 190, 192, 210, 237, 189, 67, 244, 65, 63, 33, 198, 178, 190, 114, 197, 20, 63, 87, 128, 192, 61, 41, 67, 246, 189, 60, 1, 207, 190, 113, 39, 227, 189, 1, 140, 101, 62, 86, 199, 158, 62, 226, 254, 60, 60, 65, 99, 31, 191, 70, 78, 158, 190, 59, 30, 213, 190, 78, 146, 31, 191, 234, 66, 21, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 10, 12, 191, 107, 39, 190, 61, 41, 137, 66, 63, 211, 9, 169, 60, 94, 147, 11, 190, 49, 124, 136, 188, 36, 227, 89, 190, 56, 230, 70, 61, 10, 203, 232, 61, 76, 104, 246, 61, 160, 87, 10, 63, 130, 248, 239, 61, 62, 99, 78, 63, 227, 142, 50, 190, 214, 201, 74, 62, 213, 237, 57, 189, 80, 25, 136, 59, 215, 22, 25, 62, 55, 150, 152, 190, 99, 195, 99, 189, 27, 110, 148, 190, 92, 106, 167, 190, 253, 34, 4, 63, 153, 16, 121, 190, 252, 91, 13, 191, 190, 49, 217, 61, 228, 197, 255, 62, 75, 42, 127, 62, 10, 169, 85, 190, 240, 127, 38, 191, 6, 106, 15, 191, 221, 196, 112, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 104, 137, 189, 209, 38, 94, 190, 86, 248, 171, 61, 115, 35, 109, 190, 190, 144, 114, 62, 95, 0, 4, 62, 10, 233, 148, 190, 90, 33, 190, 61, 92, 99, 29, 189, 131, 60, 249, 61, 43, 31, 0, 189, 82, 172, 46, 62, 0, 226, 26, 190, 160, 188, 96, 62, 100, 218, 215, 189, 202, 6, 154, 186, 164, 197, 167, 62, 34, 214, 23, 190, 150, 204, 64, 62, 184, 186, 92, 190, 14, 237, 81, 61, 209, 17, 161, 61, 250, 181, 67, 189, 104, 59, 56, 190, 87, 34, 160, 62, 102, 153, 126, 188, 119, 215, 23, 61, 2, 133, 37, 62, 177, 254, 220, 60, 101, 64, 64, 61, 148, 195, 94, 189, 202, 79, 200, 62, 149, 6, 2, 190, 247, 82, 72, 62, 53, 62, 52, 189, 203, 213, 157, 58, 176, 155, 10, 62, 219, 15, 26, 189, 51, 118, 4, 62, 13, 233, 227, 189, 145, 5, 153, 189, 236, 80, 18, 62, 9, 223, 26, 190, 201, 139, 162, 189, 30, 177, 186, 189, 31, 101, 48, 190, 40, 93, 122, 189, 155, 165, 27, 62, 98, 19, 91, 61, 88, 180, 16, 190, 191, 51, 203, 189, 60, 155, 53, 62, 78, 201, 178, 60, 145, 201, 102, 62, 143, 116, 10, 187, 242, 46, 111, 188, 185, 137, 0, 62, 60, 201, 122, 62, 51, 90, 144, 190, 10, 220, 63, 62, 114, 168, 134, 61, 193, 66, 174, 60, 222, 162, 22, 189, 247, 147, 157, 62, 1, 85, 181, 189, 212, 148, 88, 189, 246, 141, 101, 62, 12, 94, 40, 190, 105, 52, 12, 189, 188, 194, 109, 190, 152, 248, 23, 190, 102, 182, 0, 190, 201, 139, 136, 62, 16, 194, 220, 59, 116, 53, 237, 61, 53, 176, 13, 61, 86, 171, 150, 61, 92, 134, 179, 61, 163, 109, 172, 190, 209, 252, 3, 188, 31, 63, 57, 62, 151, 96, 49, 190, 106, 13, 199, 189, 88, 61, 129, 190, 119, 119, 35, 187, 193, 237, 138, 60, 229, 105, 165, 189, 114, 25, 28, 189, 183, 186, 13, 62, 85, 191, 162, 62, 145, 86, 202, 189, 78, 159, 244, 61, 42, 199, 251, 61, 16, 41, 176, 188, 245, 78, 171, 60, 29, 252, 18, 63, 234, 113, 204, 57, 165, 121, 120, 190, 25, 113, 22, 190, 36, 53, 69, 190, 223, 68, 76, 62, 201, 239, 99, 190, 244, 189, 20, 190, 223, 49, 23, 191, 123, 187, 226, 187, 54, 129, 97, 61, 8, 227, 63, 62, 86, 193, 240, 61, 128, 51, 17, 62, 206, 194, 138, 61, 66, 130, 164, 190, 183, 154, 115, 61, 103, 123, 240, 189, 7, 108, 144, 190, 100, 99, 168, 62, 5, 245, 192, 189, 249, 51, 59, 62, 97, 148, 132, 190, 65, 2, 24, 190, 156, 31, 114, 190, 208, 24, 73, 60, 205, 106, 22, 190, 253, 54, 239, 189, 20, 229, 40, 189, 59, 200, 44, 190, 188, 51, 141, 61, 191, 207, 80, 190, 84, 54, 184, 61, 102, 234, 53, 189, 175, 3, 193, 188, 218, 58, 239, 61, 203, 49, 152, 61, 237, 68, 102, 61, 89, 213, 242, 188, 166, 164, 204, 188, 56, 18, 104, 62, 113, 203, 51, 190, 74, 253, 16, 62, 177, 21, 186, 61, 26, 117, 227, 189, 144, 138, 250, 61, 75, 1, 189, 189, 211, 30, 20, 62, 128, 167, 35, 190, 202, 239, 184, 188, 38, 141, 24, 62, 180, 252, 62, 190, 71, 43, 31, 61, 216, 98, 139, 189, 140, 76, 132, 189, 28, 152, 89, 189, 160, 138, 157, 61, 62, 214, 143, 190, 177, 71, 6, 190, 65, 180, 249, 187, 169, 61, 178, 61, 198, 216, 133, 61, 47, 132, 20, 190, 79, 227, 65, 61, 110, 149, 26, 190, 255, 80, 136, 62, 90, 148, 91, 188, 231, 225, 255, 60, 57, 142, 210, 62, 199, 205, 10, 189, 12, 185, 12, 62, 243, 180, 212, 61, 74, 112, 32, 62, 139, 134, 224, 61, 39, 211, 31, 62, 172, 86, 35, 61, 99, 5, 202, 189, 139, 139, 82, 62, 59, 238, 158, 190, 145, 124, 64, 62, 21, 187, 62, 190, 90, 29, 198, 189, 83, 128, 140, 189, 103, 69, 242, 190, 16, 135, 40, 62, 174, 135, 48, 190, 13, 229, 190, 61, 98, 234, 207, 187, 64, 253, 217, 61, 181, 228, 212, 190, 2, 13, 192, 60, 48, 37, 102, 62, 230, 174, 141, 189, 10, 94, 153, 61, 73, 135, 45, 61, 31, 148, 13, 62, 79, 54, 192, 190, 218, 190, 121, 62, 68, 17, 112, 61, 130, 254, 129, 62, 16, 117, 132, 190, 114, 128, 42, 189, 222, 18, 159, 189, 202, 38, 115, 189, 69, 247, 102, 62, 166, 215, 253, 190, 183, 154, 63, 188, 154, 61, 27, 61, 128, 82, 59, 189, 97, 40, 211, 189, 61, 149, 219, 60, 151, 130, 241, 60, 87, 1, 141, 61, 187, 36, 43, 189, 197, 152, 228, 60, 16, 17, 114, 190, 11, 190, 250, 189, 126, 218, 162, 188, 180, 171, 238, 189, 125, 189, 33, 190, 180, 107, 203, 189, 119, 172, 186, 190, 102, 199, 97, 62, 157, 21, 98, 190, 115, 20, 162, 61, 104, 114, 5, 60, 65, 237, 131, 189, 151, 0, 158, 190, 135, 162, 131, 60, 80, 93, 156, 187, 26, 142, 100, 61, 221, 125, 34, 190, 225, 71, 151, 189, 135, 39, 42, 190, 152, 26, 38, 189, 119, 64, 167, 61, 103, 24, 133, 61, 61, 178, 244, 61, 52, 229, 9, 190, 53, 246, 138, 59, 75, 206, 33, 190, 39, 186, 23, 62, 9, 16, 39, 62, 156, 155, 26, 190, 170, 64, 22, 190, 166, 193, 0, 190, 195, 119, 208, 189, 130, 24, 36, 61, 47, 199, 25, 190, 103, 95, 43, 61, 142, 32, 31, 61, 161, 134, 157, 189, 15, 20, 239, 189, 206, 110, 233, 59, 222, 130, 226, 189, 65, 56, 208, 61, 57, 86, 189, 59, 205, 95, 239, 189, 219, 148, 177, 61, 44, 18, 146, 188, 6, 118, 255, 61, 7, 255, 159, 189, 232, 84, 57, 61, 157, 85, 17, 61, 210, 235, 4, 62, 84, 189, 3, 62, 22, 7, 40, 190, 146, 3, 42, 189, 240, 2, 171, 61, 22, 150, 15, 190, 140, 106, 27, 62, 139, 228, 70, 190, 218, 10, 1, 61, 122, 199, 100, 190, 12, 217, 104, 61, 229, 104, 161, 189, 242, 135, 243, 189, 77, 149, 29, 61, 183, 214, 156, 189, 47, 73, 194, 60, 81, 233, 225, 61, 17, 51, 251, 189, 71, 18, 183, 61, 184, 164, 41, 190, 182, 241, 26, 190, 68, 183, 35, 190, 32, 180, 179, 61, 16, 169, 183, 190, 62, 44, 218, 189, 31, 141, 44, 190, 116, 5, 184, 189, 44, 100, 9, 62, 140, 149, 254, 59, 1, 212, 8, 185, 97, 228, 18, 189, 162, 19, 24, 61, 162, 208, 71, 190, 208, 58, 33, 62, 131, 162, 130, 189, 109, 97, 228, 189, 43, 18, 208, 190, 114, 188, 63, 61, 162, 137, 65, 190, 152, 177, 93, 61, 216, 199, 143, 189, 187, 38, 135, 60, 109, 216, 208, 61, 3, 90, 68, 190, 232, 97, 248, 60, 25, 163, 16, 62, 45, 25, 131, 189, 56, 194, 96, 61, 35, 203, 32, 190, 138, 49, 66, 62, 245, 163, 163, 189, 26, 243, 2, 190, 117, 39, 138, 190, 149, 30, 104, 62, 52, 92, 182, 58, 15, 160, 18, 190, 29, 147, 12, 62, 85, 251, 210, 60, 86, 135, 248, 61, 17, 151, 66, 61, 44, 237, 21, 190, 41, 148, 76, 62, 26, 153, 37, 62, 249, 241, 115, 189, 206, 198, 163, 62, 55, 9, 37, 190, 246, 3, 197, 188, 254, 231, 67, 62, 41, 55, 152, 61, 57, 255, 168, 61, 114, 21, 88, 190, 148, 167, 98, 190, 246, 97, 140, 190, 66, 133, 88, 60, 125, 228, 222, 190, 222, 56, 69, 62, 162, 145, 143, 190, 103, 229, 165, 190, 158, 145, 186, 61, 140, 156, 255, 190, 226, 220, 173, 188, 190, 51, 49, 190, 8, 238, 31, 190, 194, 29, 72, 62, 228, 129, 66, 62, 123, 60, 165, 190, 97, 228, 180, 189, 167, 100, 161, 62, 58, 71, 116, 190, 170, 105, 87, 189, 74, 132, 132, 189, 123, 205, 215, 62, 89, 116, 28, 62, 246, 139, 165, 62, 243, 140, 18, 62, 199, 56, 79, 190, 155, 8, 173, 62, 249, 166, 66, 190, 172, 7, 253, 61, 199, 15, 179, 62, 104, 134, 201, 62, 43, 88, 26, 189, 112, 114, 233, 188, 102, 162, 41, 62, 117, 6, 14, 188, 189, 242, 213, 61, 180, 22, 134, 190, 30, 7, 160, 62, 170, 118, 135, 190, 248, 238, 196, 190, 56, 4, 181, 61, 96, 64, 183, 190, 195, 38, 154, 62, 56, 45, 133, 190, 213, 54, 148, 190, 106, 82, 53, 61, 188, 50, 180, 62, 11, 91, 5, 191, 138, 13, 144, 189, 139, 5, 131, 62, 81, 5, 96, 190, 183, 168, 100, 61, 92, 221, 182, 190, 68, 74, 59, 62, 189, 1, 136, 190, 117, 42, 53, 62, 134, 97, 243, 60, 184, 117, 222, 188, 123, 27, 86, 60, 54, 192, 147, 61, 116, 87, 40, 190, 212, 38, 138, 60, 13, 218, 56, 189, 194, 249, 167, 189, 148, 11, 177, 188, 91, 225, 208, 189, 47, 179, 29, 190, 194, 28, 145, 188, 233, 61, 220, 189, 157, 196, 46, 190, 48, 193, 216, 61, 248, 66, 208, 60, 164, 18, 40, 190, 28, 246, 240, 189, 241, 238, 90, 61, 174, 144, 19, 189, 229, 137, 22, 189, 137, 220, 146, 189, 113, 157, 140, 189, 147, 44, 12, 189, 130, 132, 152, 61, 183, 191, 172, 61, 196, 78, 14, 190, 86, 124, 249, 189, 36, 44, 84, 61, 105, 45, 13, 62, 181, 122, 172, 61, 207, 63, 105, 189, 186, 16, 197, 189, 70, 129, 147, 61, 172, 94, 77, 190, 184, 109, 23, 62, 136, 41, 77, 61, 181, 188, 22, 190, 154, 0, 146, 60, 36, 10, 40, 190, 130, 188, 153, 189, 249, 206, 156, 61, 163, 93, 52, 190, 120, 6, 199, 61, 191, 88, 45, 62, 231, 186, 52, 190, 202, 27, 98, 62, 131, 178, 249, 61, 104, 134, 96, 190, 208, 141, 230, 189, 124, 115, 178, 61, 249, 131, 72, 61, 117, 155, 150, 189, 171, 45, 55, 61, 72, 63, 74, 190, 208, 158, 6, 62, 181, 189, 163, 187, 76, 29, 196, 189, 159, 64, 73, 62, 102, 224, 29, 190, 133, 115, 216, 61, 228, 77, 117, 60, 148, 219, 39, 62, 60, 14, 99, 189, 55, 164, 177, 61, 38, 211, 226, 189, 181, 76, 56, 61, 169, 198, 45, 188, 222, 215, 219, 61, 14, 156, 211, 60, 48, 203, 76, 60, 220, 218, 239, 61, 111, 82, 19, 62, 51, 12, 114, 61, 68, 185, 173, 60, 89, 146, 96, 61, 249, 123, 60, 189, 125, 238, 35, 62, 86, 178, 133, 61, 174, 175, 81, 189, 139, 136, 63, 190, 250, 232, 178, 59, 16, 39, 155, 61, 48, 80, 108, 190, 212, 225, 60, 187, 118, 152, 210, 60, 110, 12, 151, 57, 75, 78, 91, 189, 98, 125, 40, 60, 76, 232, 136, 189, 0, 3, 82, 190, 1, 229, 249, 60, 180, 133, 127, 61, 134, 93, 243, 61, 131, 125, 56, 190, 185, 235, 91, 60, 50, 117, 137, 189, 133, 183, 190, 60, 19, 249, 230, 190, 165, 140, 134, 189, 139, 222, 96, 61, 150, 23, 37, 190, 43, 8, 109, 61, 255, 12, 99, 190, 79, 152, 53, 62, 208, 47, 182, 61, 253, 74, 160, 61, 111, 44, 135, 60, 7, 255, 163, 189, 228, 136, 222, 60, 86, 56, 167, 61, 159, 146, 89, 62, 95, 204, 20, 190, 196, 176, 123, 190, 236, 149, 39, 190, 40, 190, 63, 61, 151, 223, 175, 61, 32, 101, 201, 61, 222, 216, 158, 190, 193, 235, 223, 190, 159, 28, 43, 62, 123, 231, 190, 190, 178, 69, 35, 62, 99, 165, 196, 61, 91, 228, 84, 190, 74, 163, 229, 188, 49, 212, 182, 189, 118, 65, 140, 62, 174, 153, 67, 60, 40, 37, 192, 61, 245, 246, 153, 188, 66, 245, 206, 61, 27, 91, 181, 59, 194, 238, 21, 60, 55, 177, 71, 190, 17, 104, 137, 190, 179, 142, 30, 60, 167, 1, 202, 189, 167, 186, 56, 62, 84, 141, 17, 190, 211, 125, 134, 61, 49, 13, 212, 188, 200, 82, 204, 61, 87, 227, 32, 62, 237, 193, 246, 189, 187, 212, 227, 189, 21, 239, 108, 189, 9, 104, 32, 61, 240, 115, 181, 187, 106, 231, 105, 190, 224, 216, 48, 62, 3, 191, 160, 61, 78, 45, 84, 62, 236, 251, 138, 189, 30, 164, 147, 189, 81, 162, 101, 61, 69, 4, 124, 61, 89, 93, 90, 61, 123, 104, 91, 62, 144, 151, 225, 190, 7, 236, 96, 191, 11, 99, 136, 62, 206, 255, 156, 190, 129, 238, 32, 190, 48, 57, 145, 190, 93, 221, 108, 191, 138, 59, 167, 190, 58, 144, 190, 61, 218, 73, 133, 189, 183, 113, 131, 62, 152, 22, 185, 189, 216, 219, 76, 62, 164, 194, 46, 60, 94, 18, 128, 191, 220, 79, 9, 61, 252, 111, 44, 62, 94, 1, 21, 191, 30, 187, 197, 188, 202, 141, 195, 190, 69, 215, 251, 189, 111, 185, 114, 61, 149, 126, 37, 61, 186, 75, 181, 190, 208, 56, 21, 62, 139, 53, 116, 62, 85, 118, 126, 62, 63, 125, 180, 189, 137, 208, 1, 190, 249, 205, 211, 189, 149, 201, 91, 190, 231, 240, 13, 63, 221, 42, 249, 188, 127, 194, 31, 188, 223, 21, 130, 61, 61, 225, 20, 62, 123, 221, 149, 188, 34, 122, 12, 190, 22, 39, 27, 190, 233, 172, 219, 58, 0, 219, 51, 190, 243, 185, 48, 61, 227, 229, 167, 189, 138, 143, 42, 62, 198, 76, 220, 189, 22, 63, 152, 189, 178, 177, 241, 189, 84, 212, 246, 189, 219, 161, 121, 189, 140, 44, 108, 189, 170, 31, 78, 187, 212, 222, 24, 62, 192, 149, 8, 190, 138, 51, 238, 189, 18, 78, 43, 190, 56, 144, 128, 189, 13, 181, 176, 60, 225, 45, 23, 190, 224, 236, 238, 59, 236, 102, 253, 189, 110, 217, 230, 189, 51, 83, 16, 190, 246, 172, 206, 61, 61, 96, 162, 189, 139, 166, 205, 61, 252, 84, 54, 188, 11, 160, 95, 188, 190, 239, 232, 62, 121, 89, 92, 190, 115, 138, 3, 61, 232, 145, 50, 62, 191, 244, 209, 62, 254, 76, 130, 61, 165, 79, 147, 189, 80, 20, 183, 189, 192, 201, 177, 189, 99, 62, 65, 62, 75, 44, 105, 190, 40, 42, 107, 62, 240, 147, 125, 190, 199, 124, 120, 190, 48, 54, 145, 62, 116, 165, 72, 191, 61, 40, 56, 62, 111, 145, 17, 191, 41, 102, 25, 190, 236, 255, 203, 61, 137, 209, 64, 62, 10, 200, 69, 191, 154, 135, 138, 190, 202, 218, 70, 62, 135, 245, 213, 188, 10, 70, 127, 61, 225, 250, 165, 190, 91, 243, 198, 59, 13, 82, 184, 190, 17, 13, 201, 190, 52, 153, 44, 190, 158, 45, 96, 61, 249, 101, 122, 61, 146, 254, 130, 61, 37, 173, 39, 190, 246, 97, 176, 190, 229, 222, 88, 62, 138, 136, 91, 62, 193, 164, 43, 190, 58, 77, 180, 189, 178, 139, 132, 189, 191, 153, 49, 62, 69, 90, 184, 60, 103, 165, 147, 190, 199, 207, 53, 190, 242, 9, 162, 62, 83, 237, 121, 190, 145, 43, 159, 62, 107, 19, 162, 190, 177, 73, 148, 190, 21, 154, 184, 61, 175, 135, 143, 62, 155, 205, 187, 60, 78, 221, 215, 61, 78, 50, 171, 62, 127, 14, 8, 62, 235, 242, 136, 62, 182, 240, 68, 189, 196, 14, 182, 60, 233, 188, 48, 189, 238, 152, 31, 62, 35, 104, 221, 61, 126, 243, 32, 62, 200, 240, 28, 190, 28, 182, 147, 61, 115, 219, 243, 189, 129, 186, 152, 61, 95, 227, 250, 61, 102, 84, 140, 62, 51, 247, 135, 61, 36, 54, 21, 62, 241, 118, 44, 62, 99, 172, 188, 188, 192, 67, 138, 61, 75, 232, 2, 190, 91, 197, 131, 62, 68, 150, 47, 59, 235, 157, 68, 61, 163, 138, 70, 189, 91, 117, 165, 189, 231, 146, 33, 188, 161, 128, 236, 189, 110, 12, 127, 190, 247, 68, 4, 189, 57, 161, 113, 61, 137, 216, 45, 190, 81, 155, 231, 61, 230, 29, 228, 61, 142, 104, 5, 62, 1, 61, 40, 62, 68, 157, 18, 61, 217, 37, 80, 61, 61, 24, 147, 189, 205, 209, 107, 190, 243, 5, 4, 62, 181, 47, 0, 189, 153, 255, 139, 59, 88, 190, 72, 62, 173, 102, 116, 61, 112, 126, 117, 190, 35, 102, 249, 189, 222, 247, 143, 189, 185, 12, 252, 61, 50, 144, 121, 60, 243, 153, 229, 61, 20, 197, 34, 62, 69, 236, 175, 188, 11, 216, 9, 190, 101, 204, 68, 61, 140, 12, 0, 62, 86, 54, 201, 60, 232, 246, 186, 61, 147, 252, 16, 62, 72, 72, 166, 189, 194, 108, 143, 189, 28, 76, 213, 61, 37, 81, 144, 190, 50, 57, 6, 190, 230, 143, 74, 62, 140, 17, 173, 189, 67, 33, 63, 62, 68, 141, 167, 188, 75, 36, 206, 188, 135, 92, 137, 61, 46, 237, 94, 62, 54, 44, 8, 191, 208, 185, 171, 190, 208, 146, 33, 62, 176, 111, 82, 190, 34, 142, 49, 61, 132, 119, 141, 190, 159, 106, 222, 190, 154, 149, 44, 60, 104, 241, 21, 187, 80, 223, 71, 188, 74, 134, 59, 62, 247, 231, 108, 61, 87, 9, 103, 188, 128, 35, 113, 62, 3, 27, 104, 190, 240, 112, 116, 61, 213, 239, 156, 62, 205, 144, 79, 190, 126, 41, 2, 62, 127, 131, 70, 189, 240, 35, 210, 189, 175, 69, 7, 62, 137, 11, 164, 61, 93, 217, 159, 190, 166, 11, 25, 62, 150, 124, 129, 62, 31, 79, 213, 188, 113, 28, 85, 62, 223, 122, 197, 61, 142, 120, 32, 62, 9, 131, 221, 189, 45, 120, 20, 63, 87, 96, 255, 189, 139, 136, 39, 61, 14, 147, 130, 62, 137, 13, 8, 190, 109, 151, 35, 190, 55, 2, 171, 61, 146, 158, 141, 62, 25, 89, 159, 190, 194, 240, 222, 62, 254, 6, 172, 190, 201, 151, 251, 189, 211, 30, 130, 61, 21, 193, 220, 61, 30, 118, 202, 190, 157, 52, 223, 189, 188, 221, 160, 190, 165, 222, 60, 190, 179, 230, 154, 189, 245, 197, 233, 190, 195, 191, 125, 62, 96, 149, 155, 190, 84, 96, 207, 189, 216, 193, 2, 62, 240, 81, 122, 189, 172, 4, 188, 190, 47, 255, 31, 61, 1, 161, 140, 62, 236, 138, 154, 190, 239, 198, 212, 60, 122, 143, 120, 190, 238, 25, 242, 189, 49, 74, 66, 190, 116, 163, 7, 190, 199, 254, 88, 190, 148, 154, 32, 61, 69, 157, 130, 190, 246, 252, 79, 62, 113, 88, 134, 190, 136, 140, 32, 190, 99, 204, 33, 61, 57, 135, 233, 189, 232, 186, 25, 62, 114, 200, 8, 62, 141, 36, 28, 62, 129, 59, 193, 188, 211, 52, 109, 62, 202, 125, 17, 190, 48, 182, 246, 61, 49, 167, 62, 62, 36, 95, 145, 190, 141, 91, 82, 61, 182, 180, 155, 189, 138, 63, 77, 62, 173, 61, 87, 62, 114, 5, 1, 62, 128, 163, 160, 190, 66, 136, 124, 189, 62, 225, 161, 61, 20, 26, 135, 189, 21, 78, 39, 62, 42, 122, 138, 189, 221, 53, 176, 189, 70, 56, 126, 189, 35, 34, 130, 62, 15, 104, 3, 190, 204, 76, 5, 62, 203, 79, 212, 189, 108, 248, 199, 189, 154, 162, 170, 61, 46, 236, 136, 189, 202, 66, 29, 61, 142, 123, 79, 190, 150, 97, 150, 60, 217, 3, 2, 62, 246, 167, 185, 61, 60, 252, 219, 189, 187, 228, 150, 60, 247, 250, 141, 189, 160, 221, 108, 190, 113, 197, 254, 188, 185, 25, 207, 61, 21, 61, 125, 190, 201, 136, 101, 61, 114, 213, 238, 189, 189, 195, 72, 61, 125, 255, 6, 59, 92, 168, 149, 189, 243, 172, 242, 61, 107, 69, 24, 183, 176, 27, 239, 189, 195, 162, 203, 189, 216, 60, 245, 189, 20, 195, 50, 190, 233, 96, 52, 190, 150, 179, 199, 61, 174, 150, 111, 61, 63, 167, 165, 189, 149, 225, 251, 188, 205, 28, 132, 188, 186, 169, 47, 61, 201, 140, 135, 189, 244, 212, 15, 190, 106, 130, 70, 189, 192, 133, 61, 61, 177, 205, 185, 61, 192, 122, 146, 189, 135, 64, 14, 188, 137, 128, 186, 61, 68, 208, 38, 190, 9, 248, 245, 187, 246, 197, 105, 61, 40, 63, 1, 190, 0, 55, 168, 188, 166, 121, 26, 189, 204, 137, 181, 188, 72, 146, 34, 190, 108, 72, 255, 188, 89, 206, 11, 190, 173, 32, 148, 189, 138, 187, 30, 62, 198, 87, 220, 189, 159, 203, 45, 62, 215, 32, 121, 61, 219, 84, 168, 61, 161, 147, 32, 62, 197, 231, 47, 62, 23, 5, 5, 61, 114, 129, 142, 189, 41, 64, 191, 60, 61, 61, 90, 189, 94, 195, 201, 189, 221, 159, 31, 190, 136, 143, 194, 189, 17, 143, 161, 189, 188, 236, 0, 190, 121, 70, 123, 190, 10, 197, 211, 187, 181, 205, 161, 189, 44, 18, 154, 190, 147, 38, 204, 61, 209, 127, 130, 190, 238, 216, 9, 190, 142, 60, 200, 189, 117, 162, 143, 61, 38, 17, 41, 189, 225, 59, 169, 189, 7, 139, 47, 190, 117, 174, 73, 189, 34, 98, 143, 60, 12, 72, 2, 62, 114, 229, 32, 190, 10, 48, 33, 190, 103, 101, 177, 59, 173, 17, 166, 61, 46, 186, 83, 190, 134, 22, 31, 62, 228, 157, 81, 61, 46, 224, 244, 60, 12, 129, 10, 62, 197, 149, 15, 190, 101, 161, 205, 189, 187, 164, 162, 61, 100, 64, 134, 189, 218, 0, 158, 62, 196, 98, 30, 61, 115, 103, 11, 189, 108, 49, 41, 62, 33, 177, 29, 62, 235, 9, 43, 62, 235, 62, 112, 190, 213, 3, 32, 190, 58, 59, 86, 190, 44, 60, 8, 189, 221, 229, 250, 189, 207, 179, 27, 62, 9, 168, 45, 189, 119, 179, 9, 190, 253, 224, 89, 60, 224, 205, 126, 189, 209, 86, 206, 188, 248, 114, 25, 190, 79, 184, 58, 190, 44, 95, 95, 62, 33, 123, 167, 61, 106, 73, 147, 189, 217, 128, 56, 190, 78, 30, 45, 62, 141, 231, 56, 190, 80, 249, 200, 60, 82, 113, 77, 190, 209, 175, 100, 62, 68, 210, 134, 62, 125, 190, 29, 188, 83, 154, 16, 190, 13, 91, 6, 62, 191, 158, 182, 60, 228, 233, 60, 189, 143, 212, 134, 188, 119, 159, 28, 60, 153, 61, 100, 61, 138, 214, 35, 61, 78, 214, 179, 61, 190, 153, 234, 189, 154, 75, 145, 189, 89, 228, 172, 61, 196, 159, 208, 60, 8, 126, 237, 60, 11, 22, 81, 190, 144, 209, 191, 61, 31, 205, 17, 61, 217, 91, 119, 61, 170, 61, 11, 62, 97, 47, 129, 190, 93, 119, 219, 189, 238, 92, 19, 62, 173, 90, 109, 189, 75, 123, 224, 187, 33, 175, 128, 60, 177, 234, 197, 59, 251, 2, 229, 61, 80, 42, 248, 189, 122, 193, 139, 189, 181, 177, 19, 190, 128, 211, 87, 190, 15, 16, 233, 187, 174, 130, 59, 60, 109, 14, 144, 189, 195, 133, 207, 189, 247, 30, 17, 62, 98, 74, 65, 61, 167, 11, 12, 189, 128, 85, 248, 190, 69, 154, 31, 189, 204, 34, 229, 189, 129, 114, 220, 61, 88, 89, 81, 62, 148, 197, 247, 188, 124, 217, 11, 190, 235, 144, 254, 189, 7, 228, 19, 189, 238, 9, 207, 189, 68, 198, 156, 189, 215, 182, 0, 62, 22, 131, 226, 61, 111, 176, 41, 62, 88, 136, 116, 190, 125, 130, 226, 189, 96, 112, 8, 62, 236, 238, 168, 61, 104, 119, 211, 61, 161, 18, 11, 62, 39, 36, 221, 189, 36, 37, 72, 189, 129, 246, 160, 60, 102, 158, 46, 61, 81, 94, 83, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 212, 109, 62, 110, 198, 38, 62, 198, 55, 127, 189, 142, 188, 48, 190, 0, 8, 99, 61, 112, 211, 224, 188, 216, 255, 132, 62, 150, 190, 59, 190, 181, 83, 140, 190, 144, 4, 2, 190, 243, 51, 181, 189, 118, 250, 166, 62, 173, 145, 41, 189, 97, 199, 17, 190, 193, 162, 28, 61, 165, 38, 135, 62, 240, 127, 185, 187, 189, 135, 218, 62, 92, 12, 18, 60, 61, 161, 247, 62, 103, 51, 82, 61, 5, 124, 75, 62, 120, 108, 146, 62, 191, 128, 131, 62, 127, 48, 68, 189, 147, 97, 43, 62, 31, 81, 24, 190, 101, 170, 57, 190, 53, 38, 103, 189, 166, 5, 160, 61, 77, 110, 127, 62, 25, 99, 183, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 254, 131, 190, 169, 27, 58, 190, 240, 235, 83, 190, 183, 161, 79, 62, 64, 217, 151, 61, 130, 53, 71, 62, 116, 195, 151, 190, 117, 149, 230, 60, 185, 28, 26, 61, 15, 124, 207, 61, 202, 7, 6, 191, 217, 89, 15, 63, 152, 14, 89, 61, 136, 113, 77, 190, 28, 223, 138, 60, 166, 214, 44, 190, 235, 188, 18, 190, 222, 120, 108, 191, 53, 233, 27, 190, 65, 136, 59, 63, 187, 148, 225, 190, 142, 200, 198, 61, 106, 241, 166, 189, 49, 168, 178, 190, 157, 234, 6, 63, 170, 77, 140, 190, 74, 105, 189, 187, 36, 46, 184, 61, 12, 146, 22, 62, 209, 244, 168, 190, 40, 73, 147, 188, 201, 206, 9, 62, 58, 243, 241, 188, 144, 58, 7, 62, 126, 121, 1, 62, 150, 181, 93, 190, 130, 139, 4, 190, 14, 194, 147, 61, 188, 232, 189, 190, 50, 188, 33, 190, 50, 5, 52, 62, 234, 248, 85, 61, 22, 63, 202, 61, 155, 116, 52, 61, 170, 4, 221, 61, 173, 85, 52, 62, 150, 135, 183, 187, 127, 209, 217, 189, 33, 219, 231, 61, 173, 219, 36, 190, 199, 252, 159, 188, 238, 13, 52, 190, 15, 97, 79, 189, 64, 154, 41, 190, 150, 230, 3, 190, 8, 13, 165, 61, 57, 80, 82, 60, 72, 145, 50, 189, 7, 239, 136, 61, 147, 100, 31, 190, 136, 109, 84, 61, 40, 43, 15, 189, 64, 38, 213, 189, 77, 254, 11, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 144, 23, 62, 124, 78, 100, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 47, 242, 190, 253, 0, 155, 191, 243, 222, 150, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {97, 117, 9, 64, 42, 217, 45, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0043/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}