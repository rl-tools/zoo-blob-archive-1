// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 102, 198, 62, 188, 57, 31, 189, 106, 60, 7, 191, 202, 35, 221, 190, 39, 48, 128, 190, 43, 207, 2, 63, 192, 122, 187, 190, 147, 28, 135, 63, 245, 146, 114, 62, 254, 54, 154, 62, 210, 227, 163, 191, 176, 52, 28, 190, 134, 99, 204, 62, 216, 146, 125, 63, 210, 189, 254, 62, 82, 25, 3, 191, 235, 8, 235, 63, 103, 157, 186, 62, 176, 229, 144, 191, 65, 57, 11, 190, 40, 191, 248, 62, 116, 181, 72, 63, 230, 196, 137, 191, 147, 229, 230, 189, 160, 129, 125, 191, 224, 229, 46, 62, 227, 188, 189, 61, 106, 141, 173, 61, 121, 164, 63, 191, 32, 97, 193, 189, 12, 24, 51, 189, 180, 137, 161, 62, 42, 243, 208, 190, 131, 171, 232, 189, 27, 164, 155, 63, 191, 18, 182, 62, 71, 53, 173, 190, 49, 249, 248, 62, 99, 135, 177, 190, 22, 68, 35, 62, 238, 179, 36, 190, 166, 187, 173, 190, 11, 178, 244, 190, 240, 48, 222, 190, 93, 143, 215, 62, 131, 42, 194, 190, 63, 143, 200, 61, 177, 52, 42, 191, 84, 144, 96, 63, 180, 221, 73, 63, 113, 166, 27, 63, 164, 24, 112, 191, 114, 72, 32, 191, 1, 205, 16, 63, 170, 217, 32, 190, 101, 53, 237, 191, 206, 97, 22, 191, 74, 248, 103, 191, 23, 220, 20, 63, 72, 4, 209, 62, 123, 56, 45, 191, 3, 114, 200, 189, 177, 129, 123, 190, 66, 31, 0, 63, 183, 106, 168, 190, 178, 241, 11, 63, 12, 115, 198, 190, 54, 178, 130, 191, 182, 58, 179, 187, 151, 176, 49, 63, 224, 69, 153, 191, 145, 40, 161, 190, 22, 65, 41, 191, 200, 32, 245, 190, 21, 115, 246, 190, 246, 83, 18, 63, 120, 128, 124, 63, 110, 35, 135, 62, 244, 97, 37, 191, 24, 208, 179, 190, 83, 194, 23, 189, 76, 6, 12, 63, 35, 145, 56, 190, 44, 140, 24, 63, 164, 52, 23, 62, 252, 232, 122, 191, 71, 87, 104, 190, 143, 171, 30, 63, 133, 54, 21, 61, 95, 130, 139, 62, 16, 98, 86, 63, 242, 148, 71, 191, 29, 110, 177, 190, 125, 233, 11, 191, 110, 3, 139, 190, 27, 218, 48, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 16, 108, 191, 250, 115, 16, 62, 128, 88, 21, 63, 199, 150, 12, 188, 149, 228, 101, 190, 221, 24, 39, 190, 225, 142, 143, 190, 5, 22, 131, 61, 82, 146, 142, 62, 244, 171, 18, 189, 105, 26, 191, 62, 229, 31, 167, 61, 99, 154, 248, 62, 11, 150, 167, 190, 129, 27, 142, 62, 92, 137, 51, 189, 152, 170, 15, 190, 149, 127, 48, 62, 99, 7, 77, 190, 213, 80, 64, 190, 10, 59, 157, 190, 152, 112, 49, 191, 58, 50, 11, 63, 153, 26, 155, 190, 62, 244, 40, 191, 212, 198, 32, 190, 248, 168, 34, 63, 18, 67, 155, 190, 243, 218, 161, 189, 216, 18, 128, 191, 107, 7, 84, 191, 70, 198, 31, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 199, 21, 190, 174, 35, 172, 190, 85, 202, 167, 187, 118, 220, 230, 60, 139, 92, 107, 62, 139, 101, 7, 62, 15, 217, 26, 191, 191, 89, 182, 61, 220, 132, 53, 190, 169, 87, 134, 62, 0, 31, 142, 190, 241, 135, 100, 62, 181, 95, 173, 190, 226, 87, 233, 61, 127, 166, 69, 190, 255, 147, 75, 189, 107, 69, 120, 62, 36, 69, 163, 190, 74, 125, 27, 63, 100, 25, 76, 190, 131, 181, 203, 60, 107, 55, 120, 61, 67, 226, 116, 62, 183, 121, 30, 190, 142, 152, 186, 62, 91, 94, 181, 189, 19, 1, 97, 62, 254, 198, 172, 61, 127, 217, 135, 62, 253, 196, 16, 189, 161, 156, 156, 190, 46, 10, 13, 61, 45, 226, 250, 189, 210, 122, 209, 61, 80, 113, 37, 190, 1, 145, 188, 190, 172, 126, 5, 62, 60, 22, 87, 190, 197, 81, 137, 60, 222, 153, 142, 190, 254, 116, 178, 190, 69, 186, 40, 188, 21, 220, 5, 191, 245, 184, 252, 189, 10, 224, 134, 190, 55, 172, 47, 190, 82, 159, 29, 190, 93, 221, 25, 62, 225, 17, 144, 61, 131, 121, 113, 190, 12, 254, 31, 190, 202, 249, 183, 61, 80, 19, 165, 60, 155, 246, 86, 62, 88, 126, 229, 189, 25, 185, 39, 191, 185, 137, 0, 62, 168, 70, 175, 62, 81, 192, 44, 191, 184, 4, 30, 62, 143, 195, 68, 61, 2, 218, 146, 61, 37, 200, 24, 189, 110, 212, 32, 62, 4, 225, 19, 190, 209, 131, 204, 61, 12, 113, 235, 62, 84, 213, 47, 191, 59, 230, 209, 189, 92, 101, 246, 190, 107, 191, 193, 188, 251, 202, 210, 190, 210, 200, 179, 62, 181, 195, 82, 190, 11, 201, 121, 62, 15, 83, 247, 189, 249, 114, 121, 62, 244, 42, 217, 187, 228, 73, 5, 190, 208, 89, 57, 189, 2, 49, 250, 61, 172, 79, 201, 60, 73, 200, 14, 190, 58, 198, 144, 190, 223, 99, 211, 189, 182, 170, 0, 61, 206, 114, 114, 190, 24, 225, 32, 191, 147, 171, 91, 61, 73, 129, 220, 62, 251, 175, 185, 189, 127, 138, 136, 189, 11, 52, 152, 190, 77, 222, 177, 189, 82, 37, 68, 191, 164, 40, 141, 63, 214, 188, 125, 61, 33, 75, 105, 190, 15, 128, 30, 191, 81, 208, 246, 190, 193, 13, 76, 62, 100, 177, 165, 191, 227, 18, 103, 190, 158, 232, 140, 190, 236, 107, 132, 61, 212, 171, 226, 61, 185, 237, 140, 62, 239, 53, 139, 190, 163, 120, 90, 62, 41, 244, 5, 62, 250, 172, 154, 188, 202, 67, 2, 62, 160, 233, 94, 190, 91, 38, 219, 190, 168, 138, 193, 62, 68, 149, 20, 190, 67, 41, 61, 62, 97, 148, 132, 190, 215, 117, 120, 190, 16, 128, 88, 189, 168, 249, 93, 59, 222, 241, 119, 190, 239, 65, 43, 190, 64, 211, 38, 189, 39, 202, 195, 189, 188, 51, 141, 61, 129, 8, 166, 61, 195, 47, 227, 62, 49, 3, 235, 188, 40, 210, 227, 60, 113, 35, 205, 189, 23, 107, 175, 61, 227, 105, 126, 190, 82, 182, 11, 191, 105, 245, 162, 188, 35, 227, 161, 62, 39, 198, 44, 190, 151, 236, 134, 62, 166, 198, 122, 62, 4, 45, 213, 190, 150, 178, 128, 62, 247, 208, 70, 188, 45, 134, 109, 62, 180, 168, 35, 190, 203, 198, 196, 189, 137, 199, 96, 62, 229, 188, 76, 191, 167, 217, 161, 189, 205, 128, 99, 190, 162, 248, 150, 189, 90, 177, 29, 62, 182, 85, 147, 61, 100, 158, 69, 191, 194, 10, 58, 190, 194, 230, 148, 61, 228, 152, 15, 61, 44, 1, 158, 61, 52, 70, 54, 190, 146, 220, 51, 62, 39, 16, 2, 61, 121, 39, 181, 62, 184, 40, 240, 59, 64, 2, 30, 61, 212, 191, 39, 63, 153, 137, 4, 190, 148, 252, 216, 62, 133, 250, 34, 62, 125, 220, 142, 62, 208, 154, 171, 62, 174, 187, 228, 61, 231, 136, 5, 188, 201, 72, 32, 189, 182, 174, 132, 61, 170, 84, 4, 190, 72, 104, 83, 62, 182, 231, 129, 190, 232, 101, 49, 190, 0, 137, 131, 189, 135, 245, 25, 192, 127, 107, 100, 62, 50, 129, 14, 62, 71, 52, 76, 188, 46, 186, 77, 189, 142, 187, 136, 62, 71, 230, 54, 191, 249, 175, 24, 190, 236, 30, 37, 62, 4, 203, 182, 189, 84, 26, 37, 62, 129, 115, 138, 190, 89, 6, 16, 63, 115, 170, 174, 190, 184, 197, 128, 62, 28, 23, 159, 61, 61, 166, 123, 62, 233, 142, 71, 190, 109, 49, 115, 189, 212, 105, 127, 191, 28, 177, 15, 189, 239, 103, 130, 62, 64, 236, 74, 191, 84, 42, 125, 189, 149, 144, 181, 61, 94, 5, 159, 190, 6, 218, 114, 189, 187, 159, 233, 61, 67, 229, 155, 60, 130, 222, 49, 62, 79, 231, 69, 187, 65, 60, 198, 61, 27, 12, 211, 190, 127, 180, 25, 190, 235, 196, 218, 60, 128, 75, 183, 59, 0, 247, 177, 190, 89, 39, 62, 191, 2, 47, 158, 190, 252, 86, 143, 62, 147, 69, 96, 190, 157, 84, 3, 62, 221, 48, 72, 190, 10, 213, 38, 62, 112, 227, 164, 191, 63, 13, 240, 190, 192, 8, 209, 188, 26, 142, 100, 61, 123, 152, 38, 190, 225, 71, 151, 189, 135, 39, 42, 190, 152, 26, 38, 189, 119, 64, 167, 61, 103, 24, 133, 61, 159, 25, 231, 61, 48, 65, 13, 190, 36, 198, 4, 189, 75, 206, 33, 190, 79, 104, 236, 61, 119, 228, 14, 62, 156, 155, 26, 190, 191, 121, 59, 190, 166, 193, 0, 190, 195, 119, 208, 189, 208, 24, 214, 60, 47, 199, 25, 190, 185, 75, 149, 60, 142, 32, 31, 61, 54, 206, 169, 189, 58, 90, 240, 189, 186, 150, 135, 188, 222, 130, 226, 189, 153, 207, 179, 61, 57, 86, 189, 59, 1, 112, 249, 189, 219, 148, 177, 61, 147, 20, 149, 188, 38, 177, 253, 61, 7, 255, 159, 189, 232, 84, 57, 61, 157, 85, 17, 61, 210, 235, 4, 62, 84, 189, 3, 62, 22, 7, 40, 190, 146, 3, 42, 189, 240, 2, 171, 61, 22, 150, 15, 190, 140, 106, 27, 62, 139, 228, 70, 190, 218, 10, 1, 61, 122, 199, 100, 190, 12, 217, 104, 61, 229, 104, 161, 189, 242, 135, 243, 189, 77, 149, 29, 61, 183, 214, 156, 189, 47, 73, 194, 60, 81, 233, 225, 61, 17, 51, 251, 189, 71, 18, 183, 61, 184, 164, 41, 190, 182, 241, 26, 190, 68, 183, 35, 190, 32, 180, 179, 61, 16, 169, 183, 190, 62, 44, 218, 189, 31, 141, 44, 190, 116, 5, 184, 189, 44, 100, 9, 62, 140, 149, 254, 59, 80, 243, 75, 62, 172, 5, 228, 188, 5, 15, 14, 191, 26, 205, 195, 191, 60, 154, 114, 62, 6, 66, 55, 191, 164, 184, 37, 189, 219, 110, 223, 189, 227, 50, 34, 191, 143, 255, 81, 190, 143, 188, 8, 62, 12, 144, 106, 189, 123, 123, 109, 61, 140, 195, 100, 62, 224, 75, 45, 190, 53, 212, 240, 61, 65, 71, 125, 62, 249, 194, 6, 189, 130, 192, 217, 188, 224, 106, 24, 190, 49, 5, 135, 62, 200, 84, 251, 188, 166, 59, 93, 191, 210, 139, 255, 189, 136, 87, 132, 62, 45, 109, 3, 63, 151, 110, 243, 190, 133, 81, 137, 62, 110, 209, 88, 61, 201, 125, 62, 62, 105, 248, 191, 62, 172, 33, 238, 189, 123, 76, 7, 190, 254, 19, 184, 61, 179, 45, 223, 62, 240, 46, 189, 62, 182, 45, 91, 189, 93, 108, 231, 62, 46, 129, 159, 60, 88, 211, 210, 61, 26, 162, 116, 62, 204, 119, 246, 189, 210, 231, 64, 190, 133, 4, 252, 61, 69, 97, 29, 62, 159, 13, 180, 191, 244, 35, 34, 61, 183, 14, 167, 190, 139, 52, 87, 191, 168, 111, 81, 190, 13, 156, 207, 189, 102, 196, 130, 62, 86, 159, 59, 191, 200, 201, 72, 189, 107, 255, 65, 62, 37, 57, 2, 63, 80, 88, 127, 190, 228, 6, 246, 190, 149, 100, 240, 62, 156, 29, 207, 190, 130, 126, 37, 62, 221, 150, 52, 191, 141, 164, 89, 63, 57, 40, 75, 62, 55, 106, 157, 62, 40, 223, 66, 62, 90, 119, 68, 190, 58, 198, 145, 62, 150, 235, 137, 190, 113, 37, 238, 62, 2, 107, 230, 62, 0, 158, 197, 62, 242, 35, 142, 62, 239, 109, 26, 190, 115, 72, 42, 62, 234, 223, 197, 61, 66, 95, 25, 61, 161, 234, 17, 190, 141, 219, 188, 62, 174, 60, 147, 190, 96, 173, 236, 190, 214, 66, 25, 62, 1, 188, 84, 191, 241, 6, 193, 62, 239, 252, 6, 190, 114, 182, 237, 190, 245, 209, 170, 60, 43, 78, 102, 62, 77, 138, 44, 191, 227, 20, 35, 190, 144, 167, 146, 62, 159, 251, 154, 190, 196, 208, 164, 189, 46, 73, 39, 191, 148, 244, 100, 61, 219, 23, 102, 190, 31, 171, 20, 62, 134, 97, 243, 60, 9, 159, 1, 189, 123, 27, 86, 60, 54, 192, 147, 61, 116, 87, 40, 190, 212, 38, 138, 60, 160, 222, 70, 189, 194, 249, 167, 189, 182, 47, 22, 189, 226, 242, 8, 190, 47, 179, 29, 190, 230, 132, 74, 189, 14, 159, 14, 190, 157, 196, 46, 190, 201, 188, 151, 61, 248, 66, 208, 60, 164, 18, 40, 190, 36, 130, 241, 189, 241, 238, 90, 61, 224, 147, 123, 189, 229, 137, 22, 189, 137, 220, 146, 189, 17, 39, 152, 189, 25, 199, 74, 189, 130, 132, 152, 61, 221, 17, 158, 61, 196, 78, 14, 190, 253, 205, 7, 190, 36, 44, 84, 61, 185, 46, 2, 62, 181, 122, 172, 61, 33, 128, 224, 189, 197, 90, 165, 190, 91, 144, 25, 63, 36, 235, 225, 190, 223, 222, 94, 62, 105, 189, 195, 62, 72, 192, 45, 191, 188, 132, 83, 190, 111, 114, 14, 190, 125, 36, 193, 190, 230, 2, 17, 62, 51, 68, 205, 61, 186, 155, 101, 62, 90, 103, 187, 61, 169, 114, 60, 191, 74, 206, 88, 62, 76, 233, 204, 61, 123, 160, 53, 191, 101, 41, 174, 190, 247, 153, 246, 61, 68, 189, 40, 188, 239, 203, 181, 190, 33, 227, 128, 191, 184, 37, 12, 191, 8, 167, 67, 61, 160, 30, 132, 62, 224, 191, 195, 189, 0, 47, 129, 190, 105, 177, 21, 191, 16, 20, 107, 189, 91, 224, 2, 191, 200, 224, 230, 189, 47, 145, 191, 61, 228, 19, 188, 187, 156, 181, 51, 191, 102, 152, 54, 191, 50, 127, 159, 189, 18, 36, 143, 191, 219, 127, 143, 189, 19, 18, 61, 61, 25, 27, 166, 190, 40, 198, 13, 62, 144, 252, 54, 62, 193, 215, 102, 190, 191, 218, 11, 62, 247, 58, 199, 61, 104, 27, 156, 61, 148, 21, 51, 62, 25, 27, 107, 190, 181, 132, 122, 190, 192, 119, 9, 190, 222, 200, 165, 59, 86, 85, 48, 190, 42, 169, 99, 187, 215, 227, 162, 190, 45, 82, 117, 61, 2, 182, 214, 188, 255, 102, 62, 62, 193, 164, 129, 190, 21, 218, 32, 189, 113, 53, 75, 61, 31, 29, 124, 61, 77, 21, 183, 62, 25, 108, 133, 190, 211, 70, 99, 189, 102, 158, 36, 189, 53, 248, 95, 61, 244, 181, 10, 191, 126, 153, 33, 190, 189, 228, 141, 191, 60, 85, 157, 189, 75, 237, 158, 189, 91, 16, 106, 190, 40, 126, 211, 60, 82, 94, 27, 62, 41, 174, 94, 190, 18, 112, 130, 61, 251, 38, 234, 186, 143, 247, 149, 61, 191, 213, 43, 62, 107, 80, 11, 62, 154, 147, 1, 189, 151, 167, 187, 190, 195, 14, 50, 190, 252, 1, 64, 62, 176, 131, 78, 62, 167, 55, 20, 190, 170, 174, 159, 191, 221, 245, 114, 190, 187, 131, 217, 61, 15, 11, 150, 190, 223, 60, 13, 62, 187, 26, 171, 190, 159, 95, 41, 61, 51, 175, 186, 191, 30, 80, 218, 190, 53, 213, 188, 62, 209, 244, 203, 188, 152, 178, 21, 190, 112, 245, 158, 62, 9, 66, 17, 62, 173, 218, 142, 190, 225, 246, 0, 189, 130, 46, 173, 61, 35, 116, 55, 191, 120, 227, 72, 62, 63, 168, 103, 190, 102, 194, 48, 62, 146, 83, 185, 190, 145, 92, 25, 61, 129, 210, 221, 188, 202, 238, 71, 61, 177, 7, 27, 62, 189, 48, 224, 189, 143, 86, 14, 62, 99, 91, 211, 189, 84, 41, 137, 188, 214, 224, 175, 61, 247, 208, 115, 190, 118, 206, 17, 63, 127, 132, 245, 189, 230, 152, 15, 62, 146, 57, 245, 190, 125, 15, 219, 188, 234, 45, 196, 62, 164, 18, 52, 62, 40, 71, 15, 63, 134, 8, 12, 62, 252, 105, 255, 190, 154, 237, 92, 191, 32, 59, 147, 62, 35, 1, 83, 61, 11, 175, 136, 190, 78, 35, 31, 191, 39, 131, 23, 191, 164, 23, 189, 190, 38, 200, 244, 59, 191, 128, 92, 58, 156, 151, 77, 62, 232, 45, 5, 191, 26, 204, 53, 62, 78, 115, 97, 189, 206, 234, 65, 191, 248, 183, 232, 60, 68, 221, 20, 62, 204, 43, 43, 190, 49, 10, 159, 62, 218, 119, 58, 190, 40, 60, 11, 190, 65, 164, 128, 190, 167, 50, 221, 62, 81, 222, 246, 190, 183, 186, 19, 62, 146, 169, 139, 62, 64, 255, 3, 63, 221, 174, 12, 190, 62, 121, 81, 189, 249, 205, 211, 189, 79, 120, 85, 191, 156, 43, 120, 63, 221, 42, 249, 188, 127, 194, 31, 188, 223, 21, 130, 61, 61, 225, 20, 62, 123, 221, 149, 188, 34, 122, 12, 190, 22, 39, 27, 190, 233, 172, 219, 58, 0, 219, 51, 190, 243, 185, 48, 61, 227, 229, 167, 189, 138, 143, 42, 62, 198, 76, 220, 189, 22, 63, 152, 189, 178, 177, 241, 189, 84, 212, 246, 189, 219, 161, 121, 189, 140, 44, 108, 189, 170, 31, 78, 187, 212, 222, 24, 62, 192, 149, 8, 190, 138, 51, 238, 189, 18, 78, 43, 190, 56, 144, 128, 189, 13, 181, 176, 60, 225, 45, 23, 190, 224, 236, 238, 59, 236, 102, 253, 189, 110, 217, 230, 189, 51, 83, 16, 190, 246, 172, 206, 61, 61, 96, 162, 189, 149, 142, 141, 62, 75, 128, 211, 187, 187, 61, 0, 190, 132, 245, 5, 63, 222, 62, 231, 190, 204, 246, 159, 189, 123, 51, 52, 62, 171, 54, 210, 62, 91, 244, 49, 62, 30, 17, 71, 190, 168, 192, 222, 189, 72, 239, 156, 190, 0, 10, 233, 61, 112, 140, 77, 61, 214, 174, 122, 62, 22, 118, 212, 190, 113, 183, 189, 190, 150, 131, 156, 62, 211, 170, 224, 191, 46, 216, 185, 61, 169, 166, 84, 62, 136, 204, 161, 190, 177, 9, 14, 62, 118, 17, 250, 61, 201, 218, 131, 191, 26, 57, 224, 190, 105, 172, 133, 62, 30, 168, 18, 190, 88, 130, 211, 189, 123, 217, 0, 191, 34, 63, 25, 190, 123, 205, 190, 190, 25, 141, 6, 190, 33, 252, 3, 188, 121, 11, 127, 189, 232, 135, 206, 190, 47, 82, 179, 61, 233, 84, 216, 190, 72, 132, 138, 190, 203, 96, 105, 189, 7, 253, 100, 62, 232, 220, 7, 191, 47, 100, 167, 190, 126, 77, 13, 190, 43, 130, 174, 188, 68, 27, 73, 190, 8, 73, 247, 189, 174, 244, 88, 190, 161, 250, 151, 62, 224, 23, 145, 189, 167, 233, 32, 62, 42, 206, 161, 190, 77, 87, 199, 190, 109, 96, 112, 62, 246, 13, 143, 62, 17, 134, 250, 190, 205, 80, 110, 62, 228, 92, 125, 62, 76, 103, 77, 60, 224, 226, 130, 62, 128, 113, 111, 191, 130, 5, 9, 62, 250, 18, 233, 190, 96, 75, 205, 62, 116, 240, 208, 61, 122, 154, 88, 62, 233, 155, 17, 190, 239, 204, 85, 189, 10, 89, 2, 190, 89, 61, 98, 61, 215, 180, 208, 61, 195, 210, 175, 62, 146, 232, 110, 61, 55, 103, 37, 62, 190, 222, 184, 62, 56, 62, 84, 189, 255, 243, 130, 62, 228, 190, 124, 189, 159, 1, 153, 62, 167, 224, 126, 61, 68, 100, 22, 62, 58, 17, 153, 188, 127, 150, 233, 190, 252, 39, 162, 189, 100, 32, 40, 190, 63, 205, 83, 190, 125, 85, 62, 189, 127, 123, 110, 59, 45, 140, 143, 190, 74, 213, 151, 62, 44, 81, 113, 61, 147, 133, 27, 62, 34, 108, 134, 61, 151, 33, 34, 62, 218, 170, 68, 62, 12, 115, 57, 189, 219, 49, 42, 190, 223, 139, 166, 61, 237, 221, 167, 61, 158, 239, 182, 190, 143, 231, 111, 61, 47, 151, 83, 189, 166, 124, 172, 190, 60, 63, 180, 190, 128, 72, 47, 190, 186, 87, 39, 187, 47, 88, 15, 62, 3, 66, 134, 61, 42, 191, 147, 62, 45, 196, 20, 61, 215, 28, 83, 190, 43, 111, 9, 62, 216, 99, 139, 188, 184, 65, 11, 189, 242, 244, 167, 189, 75, 111, 212, 61, 146, 117, 1, 190, 193, 94, 236, 189, 99, 201, 238, 189, 136, 59, 75, 191, 141, 108, 92, 190, 122, 204, 84, 62, 128, 188, 26, 190, 117, 35, 173, 189, 198, 58, 125, 190, 150, 234, 65, 60, 255, 0, 102, 190, 98, 133, 98, 62, 94, 220, 23, 191, 57, 13, 145, 190, 163, 137, 54, 62, 188, 130, 148, 190, 111, 186, 33, 61, 221, 47, 140, 191, 166, 246, 214, 190, 241, 82, 60, 190, 176, 251, 2, 62, 72, 47, 134, 189, 144, 233, 205, 61, 179, 64, 129, 190, 242, 40, 154, 189, 190, 82, 50, 62, 176, 52, 125, 190, 48, 76, 99, 61, 213, 170, 169, 62, 62, 225, 38, 190, 216, 86, 185, 62, 229, 40, 205, 189, 165, 7, 140, 189, 188, 110, 56, 62, 196, 160, 58, 62, 84, 225, 41, 191, 59, 218, 151, 62, 130, 43, 146, 62, 130, 113, 242, 61, 208, 133, 1, 62, 158, 32, 145, 61, 126, 114, 142, 62, 168, 29, 62, 191, 14, 145, 204, 62, 53, 23, 135, 190, 166, 202, 152, 190, 90, 41, 15, 62, 39, 135, 188, 190, 23, 203, 203, 189, 176, 98, 52, 190, 47, 242, 8, 60, 74, 45, 62, 189, 54, 117, 29, 190, 177, 3, 14, 191, 223, 124, 109, 189, 46, 90, 203, 188, 39, 135, 124, 61, 8, 83, 195, 61, 91, 133, 184, 190, 147, 94, 157, 189, 128, 215, 15, 189, 54, 246, 111, 190, 188, 191, 107, 191, 63, 212, 16, 190, 40, 14, 131, 190, 186, 116, 214, 189, 217, 40, 224, 189, 192, 137, 190, 190, 154, 16, 24, 191, 99, 2, 149, 62, 27, 61, 46, 190, 200, 126, 64, 190, 164, 5, 3, 190, 223, 12, 150, 190, 222, 182, 168, 189, 220, 226, 175, 190, 136, 110, 28, 190, 149, 122, 63, 189, 225, 162, 153, 61, 46, 211, 6, 191, 173, 61, 13, 62, 136, 55, 18, 191, 161, 131, 118, 188, 167, 70, 70, 190, 67, 103, 142, 188, 35, 218, 76, 189, 53, 150, 194, 61, 22, 15, 119, 60, 199, 113, 142, 189, 125, 180, 51, 62, 0, 115, 164, 61, 38, 173, 126, 61, 223, 12, 8, 62, 69, 171, 148, 189, 234, 147, 238, 189, 18, 159, 8, 189, 202, 113, 49, 62, 60, 45, 150, 62, 154, 167, 52, 62, 160, 72, 95, 191, 78, 99, 157, 189, 253, 65, 166, 188, 213, 207, 122, 189, 161, 4, 29, 62, 156, 162, 236, 190, 60, 9, 134, 189, 228, 33, 81, 191, 0, 168, 63, 63, 15, 104, 3, 190, 204, 76, 5, 62, 203, 79, 212, 189, 108, 248, 199, 189, 154, 162, 170, 61, 46, 236, 136, 189, 202, 66, 29, 61, 142, 123, 79, 190, 150, 97, 150, 60, 217, 3, 2, 62, 246, 167, 185, 61, 60, 252, 219, 189, 187, 228, 150, 60, 247, 250, 141, 189, 160, 221, 108, 190, 113, 197, 254, 188, 185, 25, 207, 61, 21, 61, 125, 190, 201, 136, 101, 61, 114, 213, 238, 189, 189, 195, 72, 61, 125, 255, 6, 59, 92, 168, 149, 189, 243, 172, 242, 61, 107, 69, 24, 183, 176, 27, 239, 189, 195, 162, 203, 189, 216, 60, 245, 189, 20, 195, 50, 190, 233, 96, 52, 190, 150, 179, 199, 61, 174, 150, 111, 61, 63, 167, 165, 189, 227, 45, 22, 189, 197, 77, 154, 188, 92, 94, 165, 60, 80, 116, 140, 189, 244, 212, 15, 190, 106, 130, 70, 189, 17, 76, 103, 60, 177, 205, 185, 61, 70, 189, 162, 189, 36, 81, 109, 188, 204, 66, 182, 61, 244, 95, 47, 190, 9, 248, 245, 187, 78, 189, 62, 61, 40, 63, 1, 190, 151, 19, 231, 188, 143, 44, 60, 189, 29, 187, 11, 189, 72, 146, 34, 190, 108, 72, 255, 188, 118, 113, 16, 190, 216, 18, 186, 189, 97, 35, 11, 62, 198, 87, 220, 189, 100, 99, 41, 62, 20, 211, 80, 61, 50, 139, 118, 61, 122, 178, 22, 62, 197, 231, 47, 62, 115, 246, 230, 60, 114, 129, 142, 189, 41, 64, 191, 60, 61, 61, 90, 189, 94, 195, 201, 189, 221, 159, 31, 190, 136, 143, 194, 189, 17, 143, 161, 189, 188, 236, 0, 190, 121, 70, 123, 190, 10, 197, 211, 187, 181, 205, 161, 189, 44, 18, 154, 190, 147, 38, 204, 61, 209, 127, 130, 190, 238, 216, 9, 190, 142, 60, 200, 189, 117, 162, 143, 61, 38, 17, 41, 189, 225, 59, 169, 189, 7, 139, 47, 190, 117, 174, 73, 189, 34, 98, 143, 60, 12, 72, 2, 62, 114, 229, 32, 190, 10, 48, 33, 190, 103, 101, 177, 59, 173, 17, 166, 61, 46, 186, 83, 190, 134, 22, 31, 62, 228, 157, 81, 61, 46, 224, 244, 60, 12, 129, 10, 62, 197, 149, 15, 190, 67, 205, 20, 62, 36, 42, 12, 190, 125, 26, 173, 62, 64, 112, 155, 62, 192, 184, 131, 62, 12, 243, 138, 62, 237, 52, 143, 190, 83, 238, 87, 62, 73, 65, 218, 61, 45, 8, 23, 190, 86, 174, 31, 188, 45, 142, 145, 61, 181, 253, 63, 62, 209, 63, 175, 190, 254, 6, 64, 190, 73, 205, 176, 59, 203, 94, 185, 189, 1, 100, 249, 190, 198, 159, 118, 62, 57, 118, 130, 61, 169, 75, 92, 191, 20, 14, 113, 190, 194, 215, 13, 62, 4, 8, 116, 62, 174, 255, 5, 191, 222, 189, 158, 61, 130, 37, 154, 62, 227, 243, 152, 190, 231, 171, 128, 61, 16, 111, 50, 191, 169, 183, 31, 63, 251, 155, 196, 62, 49, 223, 72, 190, 105, 8, 176, 189, 173, 78, 28, 190, 133, 236, 223, 60, 135, 230, 138, 190, 206, 1, 62, 191, 169, 3, 89, 61, 19, 102, 129, 61, 139, 157, 159, 61, 76, 210, 27, 62, 156, 62, 21, 191, 174, 124, 29, 191, 91, 42, 226, 189, 17, 86, 103, 189, 163, 204, 218, 61, 33, 222, 2, 191, 166, 126, 149, 61, 229, 47, 201, 61, 43, 160, 153, 61, 17, 99, 12, 189, 42, 44, 160, 190, 79, 8, 152, 189, 129, 155, 170, 62, 120, 49, 250, 190, 203, 175, 124, 60, 195, 133, 22, 190, 133, 73, 33, 62, 6, 177, 236, 61, 249, 94, 194, 190, 133, 128, 14, 61, 245, 186, 169, 191, 127, 211, 175, 189, 133, 99, 246, 59, 185, 185, 160, 190, 92, 214, 152, 190, 156, 36, 24, 191, 67, 49, 138, 62, 133, 109, 78, 190, 253, 100, 0, 191, 119, 103, 35, 191, 172, 118, 85, 190, 90, 12, 237, 189, 150, 56, 48, 62, 95, 178, 24, 62, 157, 191, 101, 60, 41, 79, 80, 189, 102, 183, 226, 190, 141, 23, 30, 61, 9, 210, 21, 61, 112, 67, 246, 190, 217, 15, 66, 62, 1, 250, 172, 190, 60, 196, 76, 62, 252, 80, 139, 190, 100, 245, 219, 189, 189, 143, 5, 62, 95, 195, 26, 62, 172, 205, 153, 62, 215, 167, 243, 61, 173, 101, 29, 189, 191, 248, 7, 188, 208, 66, 14, 186, 119, 229, 129, 62, 190, 173, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 91, 251, 61, 165, 240, 122, 60, 176, 194, 212, 61, 124, 234, 191, 189, 11, 50, 60, 62, 114, 95, 253, 188, 161, 253, 150, 62, 93, 228, 73, 190, 181, 83, 140, 190, 107, 88, 141, 190, 147, 210, 223, 188, 11, 24, 170, 62, 134, 167, 130, 189, 216, 94, 12, 188, 121, 154, 178, 60, 60, 16, 97, 62, 180, 85, 159, 190, 211, 200, 243, 62, 92, 12, 18, 60, 3, 75, 232, 62, 186, 143, 7, 190, 79, 14, 200, 62, 131, 185, 174, 62, 70, 46, 117, 62, 135, 121, 23, 190, 109, 38, 227, 61, 31, 81, 24, 190, 92, 210, 82, 190, 53, 38, 103, 189, 19, 38, 150, 62, 42, 27, 41, 62, 15, 3, 162, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 150, 133, 190, 182, 55, 137, 190, 46, 110, 16, 191, 78, 134, 134, 62, 94, 110, 243, 61, 163, 206, 38, 63, 187, 95, 16, 191, 195, 93, 221, 60, 185, 28, 26, 61, 150, 92, 28, 63, 233, 20, 147, 191, 172, 135, 61, 63, 64, 233, 88, 61, 43, 4, 134, 191, 70, 149, 82, 62, 224, 242, 63, 191, 47, 72, 243, 190, 6, 189, 108, 191, 53, 233, 27, 190, 13, 15, 131, 63, 194, 225, 142, 190, 159, 159, 146, 61, 89, 113, 65, 190, 250, 78, 209, 190, 165, 75, 7, 63, 83, 157, 176, 190, 74, 105, 189, 187, 121, 251, 181, 61, 12, 146, 22, 62, 148, 92, 2, 191, 33, 228, 131, 62, 211, 83, 170, 62, 173, 5, 171, 61, 170, 36, 88, 187, 115, 253, 147, 62, 98, 138, 47, 190, 88, 250, 7, 191, 55, 119, 223, 188, 33, 50, 241, 190, 241, 169, 33, 190, 50, 5, 52, 62, 89, 172, 82, 190, 84, 6, 109, 62, 178, 95, 131, 61, 38, 248, 220, 61, 227, 130, 135, 62, 73, 75, 191, 190, 254, 254, 214, 62, 146, 246, 153, 62, 9, 250, 255, 189, 199, 252, 159, 188, 222, 194, 18, 190, 32, 121, 101, 190, 151, 10, 226, 190, 70, 1, 233, 189, 220, 127, 27, 62, 19, 211, 27, 62, 130, 242, 168, 189, 7, 239, 136, 61, 90, 170, 31, 190, 136, 109, 84, 61, 88, 146, 19, 191, 123, 98, 187, 190, 206, 226, 49, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 192, 49, 62, 172, 166, 33, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {36, 63, 186, 191, 238, 201, 148, 63, 246, 86, 14, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {128, 17, 116, 188, 16, 213, 112, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0043/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}