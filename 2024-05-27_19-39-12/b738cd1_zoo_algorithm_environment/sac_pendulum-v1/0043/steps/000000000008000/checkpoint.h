// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 207, 169, 62, 187, 153, 251, 189, 202, 136, 15, 191, 121, 106, 224, 190, 209, 99, 247, 187, 20, 55, 14, 63, 108, 55, 151, 190, 169, 254, 63, 63, 213, 139, 102, 62, 250, 56, 221, 62, 207, 224, 93, 191, 164, 190, 13, 190, 204, 210, 233, 62, 57, 116, 72, 63, 178, 69, 243, 62, 33, 169, 29, 191, 243, 193, 193, 63, 69, 110, 161, 62, 133, 23, 42, 191, 10, 90, 150, 189, 33, 236, 18, 63, 17, 122, 103, 63, 197, 213, 102, 191, 48, 100, 39, 190, 6, 30, 45, 191, 132, 175, 117, 62, 9, 15, 180, 61, 63, 27, 185, 61, 164, 103, 180, 190, 155, 190, 159, 190, 239, 129, 51, 61, 254, 240, 72, 62, 197, 135, 3, 191, 201, 96, 98, 189, 74, 146, 109, 63, 0, 116, 196, 62, 40, 125, 104, 189, 211, 75, 147, 62, 46, 138, 192, 190, 92, 219, 236, 189, 192, 39, 36, 62, 94, 203, 217, 190, 94, 196, 221, 190, 234, 71, 5, 191, 253, 202, 207, 62, 234, 187, 196, 190, 215, 39, 72, 62, 51, 87, 45, 191, 184, 182, 102, 63, 243, 150, 38, 63, 145, 231, 19, 63, 17, 146, 227, 190, 23, 148, 44, 191, 57, 162, 36, 63, 150, 241, 160, 190, 204, 173, 162, 191, 112, 66, 178, 190, 105, 34, 5, 191, 162, 152, 0, 63, 124, 112, 1, 63, 184, 61, 156, 190, 89, 26, 165, 61, 72, 54, 185, 190, 58, 87, 252, 62, 140, 215, 155, 190, 36, 221, 14, 63, 96, 238, 167, 190, 49, 51, 54, 191, 79, 195, 88, 188, 203, 63, 50, 63, 32, 210, 114, 191, 219, 238, 145, 190, 218, 60, 93, 191, 74, 118, 22, 190, 66, 219, 235, 190, 28, 52, 38, 63, 228, 192, 39, 63, 179, 167, 114, 62, 240, 99, 253, 190, 129, 253, 135, 190, 97, 65, 93, 189, 204, 49, 60, 63, 10, 127, 169, 190, 172, 160, 27, 63, 242, 87, 91, 61, 93, 153, 9, 191, 144, 2, 175, 190, 181, 70, 152, 62, 133, 227, 248, 60, 141, 249, 164, 62, 226, 168, 65, 63, 153, 164, 18, 191, 65, 92, 166, 190, 4, 240, 238, 190, 24, 88, 35, 191, 224, 149, 25, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 19, 81, 191, 60, 220, 129, 62, 120, 131, 43, 63, 85, 104, 253, 187, 89, 149, 84, 190, 98, 118, 154, 61, 191, 225, 105, 190, 130, 86, 214, 61, 62, 4, 67, 62, 105, 46, 158, 61, 238, 30, 224, 62, 104, 167, 22, 62, 49, 59, 56, 63, 214, 186, 154, 190, 37, 182, 159, 62, 124, 93, 190, 61, 199, 226, 137, 189, 163, 178, 79, 62, 62, 37, 234, 189, 194, 228, 66, 189, 215, 195, 183, 190, 8, 178, 5, 191, 52, 147, 6, 63, 77, 54, 161, 190, 161, 249, 233, 190, 169, 218, 4, 189, 86, 28, 28, 63, 8, 57, 152, 61, 170, 63, 220, 189, 244, 1, 76, 191, 158, 107, 72, 191, 7, 157, 232, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 207, 221, 189, 221, 73, 96, 190, 121, 187, 6, 61, 150, 212, 79, 190, 89, 117, 128, 62, 228, 224, 166, 61, 71, 108, 164, 190, 140, 150, 26, 61, 172, 147, 224, 189, 209, 251, 212, 61, 116, 251, 241, 189, 45, 8, 35, 62, 83, 154, 105, 190, 122, 130, 27, 62, 86, 46, 252, 189, 247, 242, 73, 189, 161, 227, 173, 62, 0, 64, 42, 190, 27, 231, 141, 62, 89, 134, 109, 190, 37, 192, 154, 60, 207, 106, 141, 61, 109, 140, 40, 189, 194, 20, 135, 190, 12, 10, 163, 62, 209, 217, 211, 59, 235, 177, 34, 188, 132, 96, 251, 61, 204, 32, 212, 60, 1, 67, 201, 60, 211, 142, 58, 190, 200, 242, 192, 62, 45, 226, 250, 189, 221, 23, 21, 62, 187, 191, 77, 189, 101, 173, 73, 190, 171, 125, 10, 62, 84, 107, 133, 189, 71, 195, 142, 61, 116, 250, 105, 190, 63, 114, 34, 190, 240, 25, 134, 61, 57, 81, 146, 190, 0, 223, 155, 189, 108, 149, 93, 189, 55, 172, 47, 190, 230, 120, 250, 189, 166, 140, 29, 62, 115, 165, 78, 61, 30, 161, 82, 190, 61, 254, 31, 190, 219, 5, 22, 62, 80, 19, 165, 60, 65, 177, 53, 62, 252, 31, 229, 189, 18, 35, 161, 190, 185, 137, 0, 62, 240, 50, 142, 62, 224, 140, 234, 190, 129, 220, 8, 62, 184, 110, 92, 61, 75, 43, 1, 189, 37, 200, 24, 189, 242, 177, 95, 62, 235, 229, 222, 189, 52, 163, 11, 62, 38, 105, 212, 62, 120, 27, 209, 190, 33, 175, 103, 189, 34, 232, 211, 190, 50, 198, 21, 188, 211, 51, 189, 190, 189, 200, 159, 62, 133, 244, 142, 189, 166, 64, 54, 62, 60, 79, 149, 189, 97, 60, 10, 62, 212, 110, 90, 61, 99, 59, 187, 189, 24, 41, 195, 187, 172, 137, 26, 62, 41, 103, 61, 61, 116, 164, 179, 190, 67, 42, 145, 190, 17, 100, 141, 189, 135, 160, 195, 61, 249, 25, 8, 190, 25, 139, 250, 190, 69, 124, 68, 189, 131, 122, 191, 62, 13, 164, 194, 189, 202, 17, 134, 60, 179, 80, 69, 59, 87, 56, 169, 189, 38, 54, 161, 190, 46, 188, 137, 63, 78, 72, 193, 61, 32, 31, 129, 190, 152, 61, 232, 190, 169, 198, 18, 191, 200, 87, 74, 62, 67, 51, 32, 191, 182, 182, 38, 190, 163, 25, 22, 191, 22, 154, 16, 190, 201, 134, 188, 61, 100, 249, 115, 62, 121, 9, 188, 188, 170, 2, 48, 62, 201, 63, 8, 62, 255, 25, 229, 189, 207, 132, 214, 61, 126, 106, 255, 189, 249, 58, 138, 190, 188, 122, 105, 62, 211, 139, 252, 189, 167, 217, 94, 62, 97, 148, 132, 190, 28, 23, 250, 190, 88, 149, 83, 190, 103, 192, 14, 189, 246, 238, 237, 190, 94, 216, 139, 190, 64, 211, 38, 189, 48, 137, 21, 190, 188, 51, 141, 61, 145, 117, 56, 189, 97, 140, 196, 62, 125, 125, 23, 189, 252, 75, 75, 189, 147, 66, 203, 61, 251, 6, 175, 61, 112, 210, 195, 188, 117, 251, 147, 189, 1, 218, 32, 189, 96, 2, 177, 62, 233, 17, 12, 190, 29, 144, 26, 62, 251, 172, 228, 61, 79, 123, 78, 190, 208, 144, 36, 62, 67, 37, 108, 189, 110, 17, 7, 62, 19, 161, 62, 190, 13, 192, 73, 188, 132, 231, 252, 61, 183, 145, 203, 190, 12, 178, 18, 60, 203, 248, 143, 189, 168, 187, 30, 190, 212, 197, 139, 187, 194, 230, 227, 61, 153, 216, 184, 190, 62, 231, 132, 189, 76, 138, 5, 61, 131, 216, 152, 61, 38, 229, 246, 60, 9, 100, 107, 190, 155, 215, 207, 189, 97, 6, 243, 189, 16, 78, 170, 62, 229, 37, 252, 59, 20, 157, 155, 59, 104, 163, 18, 63, 191, 105, 216, 189, 146, 206, 87, 62, 226, 165, 2, 62, 193, 20, 108, 62, 133, 102, 53, 62, 67, 19, 219, 61, 231, 191, 164, 189, 18, 75, 236, 189, 41, 57, 8, 61, 239, 47, 216, 189, 123, 153, 102, 62, 123, 91, 133, 190, 88, 65, 50, 190, 169, 1, 3, 189, 160, 159, 130, 191, 164, 69, 49, 62, 53, 169, 91, 58, 163, 172, 21, 61, 96, 96, 83, 61, 13, 127, 50, 62, 69, 79, 69, 191, 46, 137, 250, 189, 89, 26, 127, 62, 0, 197, 113, 189, 190, 167, 176, 61, 43, 0, 212, 189, 236, 63, 75, 62, 39, 227, 179, 190, 227, 228, 105, 62, 80, 36, 169, 60, 57, 244, 68, 62, 5, 10, 53, 190, 112, 128, 170, 189, 134, 172, 34, 191, 146, 75, 125, 189, 186, 186, 126, 62, 161, 91, 24, 191, 13, 246, 184, 58, 251, 190, 144, 61, 139, 161, 144, 190, 50, 212, 148, 189, 218, 132, 165, 61, 50, 233, 52, 189, 149, 233, 241, 61, 161, 168, 123, 188, 87, 149, 135, 187, 27, 82, 43, 190, 117, 71, 47, 190, 23, 68, 105, 61, 192, 178, 181, 189, 163, 141, 134, 190, 164, 251, 32, 191, 20, 48, 73, 190, 252, 143, 133, 62, 96, 23, 120, 190, 31, 84, 5, 62, 66, 63, 36, 189, 110, 107, 171, 61, 183, 101, 139, 191, 237, 149, 151, 190, 80, 93, 156, 187, 26, 142, 100, 61, 104, 186, 36, 190, 225, 71, 151, 189, 135, 39, 42, 190, 152, 26, 38, 189, 119, 64, 167, 61, 103, 24, 133, 61, 107, 1, 239, 61, 251, 234, 11, 190, 76, 107, 21, 58, 75, 206, 33, 190, 207, 185, 18, 62, 193, 140, 37, 62, 156, 155, 26, 190, 111, 110, 25, 190, 166, 193, 0, 190, 195, 119, 208, 189, 174, 168, 25, 61, 47, 199, 25, 190, 152, 108, 38, 61, 142, 32, 31, 61, 89, 174, 162, 189, 15, 20, 239, 189, 196, 68, 167, 59, 222, 130, 226, 189, 79, 200, 200, 61, 57, 86, 189, 59, 113, 211, 240, 189, 219, 148, 177, 61, 23, 34, 146, 188, 38, 177, 253, 61, 7, 255, 159, 189, 232, 84, 57, 61, 157, 85, 17, 61, 210, 235, 4, 62, 84, 189, 3, 62, 22, 7, 40, 190, 146, 3, 42, 189, 240, 2, 171, 61, 22, 150, 15, 190, 140, 106, 27, 62, 139, 228, 70, 190, 218, 10, 1, 61, 122, 199, 100, 190, 12, 217, 104, 61, 229, 104, 161, 189, 242, 135, 243, 189, 77, 149, 29, 61, 183, 214, 156, 189, 47, 73, 194, 60, 81, 233, 225, 61, 17, 51, 251, 189, 71, 18, 183, 61, 184, 164, 41, 190, 182, 241, 26, 190, 68, 183, 35, 190, 32, 180, 179, 61, 16, 169, 183, 190, 62, 44, 218, 189, 31, 141, 44, 190, 116, 5, 184, 189, 44, 100, 9, 62, 140, 149, 254, 59, 245, 87, 48, 62, 42, 63, 103, 189, 70, 88, 185, 190, 238, 23, 72, 191, 9, 19, 34, 62, 129, 30, 161, 190, 175, 162, 239, 189, 1, 143, 36, 190, 50, 17, 238, 190, 236, 249, 251, 189, 57, 36, 187, 61, 235, 104, 152, 189, 78, 95, 52, 60, 39, 207, 59, 62, 228, 35, 77, 190, 157, 125, 176, 61, 121, 51, 35, 62, 195, 186, 143, 189, 195, 151, 178, 59, 9, 165, 66, 190, 56, 204, 132, 62, 161, 70, 146, 189, 90, 189, 53, 191, 230, 46, 251, 188, 54, 241, 106, 62, 34, 163, 103, 61, 28, 202, 214, 190, 5, 203, 44, 62, 116, 253, 218, 61, 15, 225, 250, 61, 89, 28, 189, 62, 136, 73, 24, 190, 121, 167, 251, 62, 135, 68, 18, 62, 200, 116, 134, 62, 133, 129, 142, 62, 32, 235, 150, 189, 209, 169, 147, 62, 89, 87, 158, 61, 73, 154, 6, 61, 43, 240, 104, 62, 37, 120, 89, 190, 106, 22, 116, 189, 45, 169, 42, 189, 242, 108, 99, 62, 71, 232, 81, 191, 221, 186, 177, 61, 64, 105, 134, 190, 243, 231, 196, 190, 16, 52, 199, 188, 184, 121, 190, 190, 67, 194, 121, 61, 254, 177, 225, 190, 152, 123, 101, 190, 198, 137, 23, 62, 209, 133, 130, 62, 206, 194, 138, 190, 133, 217, 172, 189, 78, 176, 231, 62, 172, 196, 170, 190, 107, 241, 109, 187, 122, 251, 162, 190, 41, 73, 55, 63, 52, 66, 193, 60, 131, 241, 179, 62, 22, 109, 52, 62, 172, 178, 113, 190, 209, 176, 202, 62, 130, 29, 105, 190, 14, 38, 76, 62, 109, 203, 199, 62, 135, 59, 254, 62, 171, 129, 228, 60, 127, 132, 133, 186, 131, 8, 37, 62, 90, 62, 209, 187, 239, 27, 102, 61, 186, 203, 21, 190, 176, 227, 188, 62, 119, 173, 119, 190, 91, 156, 210, 190, 81, 140, 6, 62, 14, 202, 246, 190, 97, 9, 169, 62, 21, 18, 56, 190, 49, 240, 174, 190, 61, 99, 233, 61, 204, 144, 206, 62, 3, 108, 21, 191, 80, 130, 20, 190, 38, 237, 137, 62, 7, 52, 64, 190, 165, 90, 178, 61, 172, 192, 235, 190, 156, 97, 232, 61, 60, 63, 104, 190, 117, 42, 53, 62, 134, 97, 243, 60, 184, 117, 222, 188, 123, 27, 86, 60, 54, 192, 147, 61, 116, 87, 40, 190, 212, 38, 138, 60, 13, 218, 56, 189, 194, 249, 167, 189, 148, 11, 177, 188, 91, 225, 208, 189, 47, 179, 29, 190, 194, 28, 145, 188, 233, 61, 220, 189, 157, 196, 46, 190, 48, 193, 216, 61, 248, 66, 208, 60, 164, 18, 40, 190, 28, 246, 240, 189, 241, 238, 90, 61, 174, 144, 19, 189, 229, 137, 22, 189, 137, 220, 146, 189, 113, 157, 140, 189, 147, 44, 12, 189, 130, 132, 152, 61, 183, 191, 172, 61, 196, 78, 14, 190, 86, 124, 249, 189, 36, 44, 84, 61, 105, 45, 13, 62, 181, 122, 172, 61, 73, 146, 14, 190, 44, 115, 202, 189, 104, 161, 201, 62, 188, 157, 129, 190, 73, 207, 89, 62, 234, 100, 131, 62, 217, 41, 159, 190, 62, 144, 22, 190, 236, 182, 150, 189, 108, 65, 44, 190, 208, 39, 30, 61, 100, 83, 103, 60, 131, 156, 213, 61, 221, 163, 130, 61, 59, 64, 158, 190, 230, 37, 39, 62, 48, 92, 16, 62, 163, 7, 194, 190, 97, 26, 47, 190, 132, 174, 248, 61, 4, 37, 130, 189, 224, 177, 85, 190, 25, 160, 244, 188, 35, 133, 184, 190, 191, 64, 113, 61, 23, 230, 57, 62, 195, 204, 213, 188, 46, 60, 1, 189, 1, 237, 126, 190, 205, 241, 177, 189, 15, 227, 197, 189, 200, 224, 230, 189, 151, 222, 36, 61, 228, 19, 188, 187, 92, 217, 182, 190, 51, 59, 180, 190, 250, 59, 226, 188, 126, 145, 34, 189, 219, 127, 143, 189, 47, 19, 157, 189, 17, 120, 57, 190, 179, 44, 42, 62, 210, 210, 222, 61, 15, 207, 30, 189, 112, 213, 150, 61, 244, 195, 35, 61, 104, 27, 156, 61, 117, 69, 245, 61, 194, 0, 11, 190, 181, 132, 122, 190, 184, 223, 240, 189, 222, 200, 165, 59, 205, 228, 59, 190, 42, 169, 99, 187, 141, 93, 130, 190, 170, 232, 86, 61, 160, 62, 138, 189, 103, 198, 63, 189, 56, 86, 87, 190, 250, 80, 89, 190, 109, 164, 132, 61, 31, 29, 124, 61, 192, 215, 137, 62, 25, 108, 133, 190, 108, 104, 47, 189, 188, 90, 176, 189, 140, 196, 6, 188, 181, 75, 172, 190, 83, 218, 39, 190, 36, 27, 3, 191, 238, 205, 18, 190, 4, 113, 92, 61, 228, 49, 151, 190, 119, 107, 67, 62, 103, 52, 12, 62, 193, 98, 50, 190, 175, 237, 113, 61, 167, 65, 136, 188, 45, 81, 142, 60, 139, 164, 15, 62, 141, 134, 72, 62, 220, 235, 5, 190, 80, 208, 124, 190, 144, 57, 113, 190, 106, 154, 241, 61, 241, 191, 8, 62, 250, 82, 188, 61, 23, 196, 105, 191, 29, 118, 146, 190, 9, 156, 40, 62, 192, 198, 177, 190, 109, 15, 78, 62, 183, 101, 177, 60, 239, 197, 12, 189, 95, 131, 95, 191, 170, 19, 150, 190, 75, 128, 169, 62, 209, 161, 165, 60, 131, 182, 65, 189, 187, 12, 85, 62, 216, 82, 11, 62, 112, 73, 23, 190, 96, 196, 240, 187, 201, 250, 187, 60, 106, 192, 13, 191, 124, 91, 244, 58, 230, 101, 39, 190, 245, 80, 38, 62, 106, 52, 118, 190, 125, 190, 200, 60, 251, 61, 22, 187, 118, 6, 135, 61, 154, 203, 79, 62, 124, 108, 183, 189, 123, 194, 214, 189, 231, 156, 193, 189, 156, 83, 4, 186, 117, 209, 178, 61, 66, 176, 133, 190, 40, 191, 135, 62, 63, 98, 163, 188, 17, 164, 91, 62, 4, 137, 174, 190, 111, 113, 125, 188, 60, 225, 192, 61, 77, 239, 151, 61, 16, 159, 141, 62, 237, 132, 89, 62, 200, 41, 236, 190, 102, 109, 65, 191, 181, 171, 58, 62, 230, 0, 29, 190, 173, 179, 166, 190, 12, 154, 55, 191, 125, 155, 80, 191, 143, 148, 209, 190, 188, 21, 78, 60, 163, 111, 203, 188, 168, 138, 132, 62, 151, 231, 242, 190, 112, 16, 83, 62, 209, 192, 213, 187, 200, 143, 86, 191, 119, 161, 9, 61, 115, 251, 20, 62, 251, 25, 173, 190, 114, 241, 130, 61, 33, 192, 11, 191, 94, 216, 247, 189, 19, 187, 159, 187, 216, 203, 33, 62, 252, 245, 8, 191, 0, 125, 27, 62, 7, 113, 147, 62, 123, 225, 146, 62, 131, 125, 46, 190, 110, 120, 4, 190, 249, 205, 211, 189, 236, 154, 255, 190, 12, 213, 100, 63, 221, 42, 249, 188, 127, 194, 31, 188, 223, 21, 130, 61, 61, 225, 20, 62, 123, 221, 149, 188, 34, 122, 12, 190, 22, 39, 27, 190, 233, 172, 219, 58, 0, 219, 51, 190, 243, 185, 48, 61, 227, 229, 167, 189, 138, 143, 42, 62, 198, 76, 220, 189, 22, 63, 152, 189, 178, 177, 241, 189, 84, 212, 246, 189, 219, 161, 121, 189, 140, 44, 108, 189, 170, 31, 78, 187, 212, 222, 24, 62, 192, 149, 8, 190, 138, 51, 238, 189, 18, 78, 43, 190, 56, 144, 128, 189, 13, 181, 176, 60, 225, 45, 23, 190, 224, 236, 238, 59, 236, 102, 253, 189, 110, 217, 230, 189, 51, 83, 16, 190, 246, 172, 206, 61, 61, 96, 162, 189, 20, 222, 14, 62, 203, 77, 226, 187, 153, 255, 4, 60, 191, 128, 7, 63, 205, 121, 140, 190, 161, 138, 34, 62, 160, 117, 90, 62, 95, 123, 239, 62, 115, 85, 3, 62, 234, 85, 251, 189, 224, 220, 57, 190, 22, 210, 195, 189, 168, 132, 61, 61, 126, 130, 134, 61, 101, 134, 96, 62, 213, 119, 185, 190, 43, 70, 156, 190, 29, 127, 143, 62, 153, 218, 163, 191, 248, 237, 92, 62, 165, 197, 151, 190, 235, 248, 134, 190, 204, 105, 35, 61, 36, 248, 135, 62, 57, 74, 152, 191, 211, 3, 177, 190, 37, 3, 33, 62, 34, 27, 155, 189, 251, 161, 20, 60, 212, 155, 201, 190, 250, 166, 236, 189, 193, 189, 186, 190, 66, 213, 251, 189, 216, 11, 6, 187, 223, 30, 148, 59, 211, 121, 231, 189, 72, 250, 153, 61, 23, 13, 149, 190, 46, 212, 87, 190, 233, 46, 4, 62, 106, 166, 168, 62, 20, 192, 162, 190, 106, 88, 34, 190, 27, 73, 235, 189, 31, 188, 219, 61, 88, 225, 209, 189, 157, 54, 219, 189, 48, 8, 83, 190, 193, 191, 163, 62, 155, 1, 98, 189, 151, 3, 69, 62, 130, 16, 141, 190, 246, 83, 217, 190, 12, 168, 70, 62, 212, 68, 171, 62, 227, 70, 59, 190, 238, 58, 90, 61, 132, 10, 140, 62, 155, 104, 207, 61, 4, 87, 152, 62, 240, 190, 136, 190, 47, 5, 39, 61, 177, 13, 151, 61, 216, 187, 6, 63, 132, 160, 200, 61, 15, 170, 55, 62, 222, 158, 253, 189, 151, 29, 167, 60, 95, 249, 255, 189, 91, 246, 178, 61, 128, 217, 41, 62, 190, 101, 178, 62, 11, 161, 9, 62, 250, 41, 13, 62, 155, 3, 77, 62, 229, 63, 93, 189, 119, 12, 211, 61, 169, 155, 184, 189, 185, 7, 146, 62, 94, 155, 21, 60, 247, 241, 217, 61, 188, 129, 211, 188, 99, 241, 79, 190, 16, 57, 68, 60, 169, 165, 223, 189, 87, 167, 140, 190, 236, 53, 19, 189, 194, 36, 25, 61, 165, 152, 75, 190, 124, 148, 90, 62, 34, 26, 5, 62, 104, 90, 42, 62, 56, 218, 232, 61, 138, 241, 44, 61, 29, 205, 157, 188, 159, 28, 61, 188, 174, 179, 124, 190, 217, 96, 218, 61, 248, 195, 130, 61, 120, 141, 213, 189, 186, 66, 63, 62, 94, 253, 152, 61, 101, 214, 137, 190, 22, 22, 116, 190, 106, 227, 87, 188, 228, 87, 170, 61, 16, 158, 67, 61, 215, 126, 165, 61, 149, 24, 91, 62, 224, 135, 253, 188, 63, 151, 76, 190, 230, 168, 141, 61, 91, 45, 7, 62, 248, 242, 29, 189, 45, 101, 215, 61, 192, 163, 24, 62, 107, 52, 153, 189, 35, 166, 253, 189, 159, 133, 211, 60, 167, 117, 31, 191, 45, 27, 142, 189, 215, 231, 131, 62, 42, 114, 153, 189, 87, 49, 243, 61, 130, 243, 196, 189, 0, 75, 18, 189, 36, 0, 166, 190, 2, 99, 39, 62, 36, 40, 9, 191, 137, 251, 103, 190, 226, 90, 51, 62, 248, 40, 184, 190, 73, 68, 128, 59, 5, 131, 18, 191, 88, 16, 196, 190, 142, 166, 89, 190, 166, 121, 69, 62, 69, 182, 77, 60, 116, 120, 78, 62, 143, 252, 24, 190, 11, 72, 75, 60, 225, 178, 114, 62, 119, 205, 64, 190, 47, 29, 199, 61, 214, 78, 154, 62, 234, 156, 0, 190, 199, 110, 120, 62, 159, 130, 225, 189, 96, 178, 141, 189, 154, 156, 58, 62, 123, 83, 46, 62, 83, 105, 38, 191, 47, 21, 128, 62, 64, 196, 148, 62, 177, 8, 109, 61, 88, 6, 249, 61, 186, 173, 178, 61, 193, 31, 112, 62, 70, 152, 199, 190, 85, 133, 30, 63, 251, 79, 148, 190, 2, 214, 79, 190, 10, 87, 84, 62, 215, 91, 34, 190, 4, 198, 252, 189, 112, 196, 175, 189, 165, 43, 20, 61, 167, 40, 160, 61, 98, 158, 140, 61, 206, 188, 237, 190, 118, 127, 0, 189, 170, 143, 225, 59, 191, 99, 222, 61, 150, 107, 59, 189, 143, 82, 148, 190, 247, 141, 46, 190, 116, 27, 45, 189, 71, 87, 129, 190, 188, 191, 107, 191, 210, 239, 255, 187, 139, 174, 77, 190, 86, 48, 185, 189, 178, 229, 244, 188, 200, 172, 37, 190, 125, 255, 23, 191, 158, 120, 143, 62, 40, 115, 40, 61, 143, 130, 18, 190, 38, 226, 214, 188, 223, 12, 150, 190, 36, 46, 241, 189, 220, 226, 175, 190, 194, 141, 96, 190, 154, 123, 147, 189, 59, 57, 212, 61, 97, 86, 136, 190, 32, 11, 244, 61, 133, 219, 223, 190, 27, 40, 187, 188, 106, 166, 92, 189, 68, 159, 151, 61, 212, 193, 165, 61, 19, 220, 245, 61, 254, 26, 180, 60, 37, 235, 194, 188, 25, 241, 31, 62, 65, 201, 78, 61, 251, 65, 140, 61, 86, 78, 11, 62, 85, 185, 231, 189, 215, 67, 94, 189, 88, 221, 79, 189, 52, 47, 226, 61, 108, 241, 135, 62, 145, 186, 148, 62, 152, 20, 12, 191, 129, 234, 23, 190, 120, 238, 8, 188, 174, 105, 182, 60, 45, 68, 55, 62, 244, 197, 64, 190, 7, 156, 226, 189, 137, 28, 176, 190, 155, 75, 71, 63, 15, 104, 3, 190, 204, 76, 5, 62, 203, 79, 212, 189, 108, 248, 199, 189, 154, 162, 170, 61, 46, 236, 136, 189, 202, 66, 29, 61, 142, 123, 79, 190, 150, 97, 150, 60, 217, 3, 2, 62, 246, 167, 185, 61, 60, 252, 219, 189, 187, 228, 150, 60, 247, 250, 141, 189, 160, 221, 108, 190, 113, 197, 254, 188, 185, 25, 207, 61, 21, 61, 125, 190, 201, 136, 101, 61, 114, 213, 238, 189, 189, 195, 72, 61, 125, 255, 6, 59, 92, 168, 149, 189, 243, 172, 242, 61, 107, 69, 24, 183, 176, 27, 239, 189, 195, 162, 203, 189, 216, 60, 245, 189, 20, 195, 50, 190, 233, 96, 52, 190, 150, 179, 199, 61, 174, 150, 111, 61, 63, 167, 165, 189, 207, 218, 13, 189, 197, 77, 154, 188, 236, 22, 12, 61, 80, 116, 140, 189, 244, 212, 15, 190, 106, 130, 70, 189, 229, 234, 3, 61, 177, 205, 185, 61, 77, 209, 149, 189, 92, 55, 47, 188, 204, 66, 182, 61, 77, 40, 43, 190, 9, 248, 245, 187, 154, 255, 76, 61, 40, 63, 1, 190, 151, 19, 231, 188, 17, 235, 51, 189, 204, 137, 181, 188, 72, 146, 34, 190, 108, 72, 255, 188, 118, 113, 16, 190, 88, 51, 164, 189, 197, 33, 24, 62, 198, 87, 220, 189, 100, 99, 41, 62, 110, 78, 105, 61, 201, 13, 136, 61, 189, 122, 31, 62, 197, 231, 47, 62, 115, 56, 1, 61, 114, 129, 142, 189, 41, 64, 191, 60, 61, 61, 90, 189, 94, 195, 201, 189, 221, 159, 31, 190, 136, 143, 194, 189, 17, 143, 161, 189, 188, 236, 0, 190, 121, 70, 123, 190, 10, 197, 211, 187, 181, 205, 161, 189, 44, 18, 154, 190, 147, 38, 204, 61, 209, 127, 130, 190, 238, 216, 9, 190, 142, 60, 200, 189, 117, 162, 143, 61, 38, 17, 41, 189, 225, 59, 169, 189, 7, 139, 47, 190, 117, 174, 73, 189, 34, 98, 143, 60, 12, 72, 2, 62, 114, 229, 32, 190, 10, 48, 33, 190, 103, 101, 177, 59, 173, 17, 166, 61, 46, 186, 83, 190, 134, 22, 31, 62, 228, 157, 81, 61, 46, 224, 244, 60, 12, 129, 10, 62, 197, 149, 15, 190, 22, 57, 221, 60, 231, 156, 221, 188, 93, 4, 130, 62, 224, 239, 44, 62, 68, 60, 96, 62, 65, 142, 178, 62, 214, 210, 157, 189, 20, 129, 167, 61, 167, 47, 90, 62, 126, 186, 182, 190, 225, 156, 114, 189, 237, 246, 168, 61, 177, 194, 0, 62, 247, 80, 204, 190, 117, 134, 7, 190, 165, 252, 130, 189, 54, 18, 188, 189, 213, 243, 155, 190, 191, 66, 189, 189, 193, 26, 68, 61, 128, 197, 211, 190, 99, 203, 187, 190, 6, 133, 187, 188, 91, 245, 149, 61, 97, 254, 102, 190, 39, 182, 46, 61, 102, 149, 62, 62, 164, 155, 195, 190, 27, 84, 163, 189, 106, 106, 212, 190, 204, 188, 224, 62, 193, 200, 11, 190, 227, 118, 47, 190, 43, 152, 29, 190, 137, 66, 178, 61, 82, 209, 19, 59, 21, 170, 62, 190, 136, 143, 122, 190, 42, 26, 133, 61, 50, 222, 102, 62, 130, 232, 25, 62, 242, 76, 203, 60, 253, 167, 218, 189, 216, 1, 203, 190, 104, 100, 12, 62, 70, 119, 26, 189, 77, 160, 247, 60, 12, 88, 154, 190, 75, 139, 46, 62, 176, 248, 17, 61, 125, 225, 126, 61, 6, 216, 139, 61, 147, 238, 124, 190, 163, 251, 32, 190, 188, 124, 54, 62, 19, 193, 0, 190, 147, 133, 9, 62, 65, 135, 232, 61, 240, 154, 23, 61, 143, 132, 253, 61, 155, 13, 211, 190, 62, 120, 162, 189, 41, 131, 86, 191, 181, 13, 251, 189, 107, 8, 132, 61, 208, 248, 123, 190, 90, 209, 7, 190, 73, 117, 1, 191, 219, 109, 103, 62, 247, 48, 159, 189, 192, 46, 161, 190, 37, 163, 20, 191, 226, 158, 110, 190, 61, 159, 189, 189, 236, 247, 69, 62, 148, 229, 56, 62, 42, 30, 19, 61, 52, 105, 40, 189, 22, 38, 174, 190, 126, 167, 30, 61, 21, 252, 98, 61, 77, 145, 166, 190, 152, 197, 83, 61, 244, 206, 252, 189, 36, 81, 89, 62, 92, 54, 108, 190, 37, 173, 158, 190, 63, 12, 28, 62, 81, 39, 172, 61, 74, 18, 129, 62, 67, 229, 30, 61, 125, 213, 23, 60, 225, 56, 229, 188, 149, 107, 98, 188, 3, 26, 108, 62, 186, 151, 252, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 161, 23, 62, 124, 27, 227, 61, 230, 9, 26, 61, 53, 106, 92, 190, 187, 82, 40, 62, 16, 13, 78, 189, 13, 237, 133, 62, 105, 38, 63, 190, 181, 83, 140, 190, 63, 248, 150, 190, 129, 229, 147, 61, 71, 241, 190, 62, 173, 145, 41, 189, 99, 165, 142, 189, 221, 202, 4, 189, 238, 169, 142, 62, 140, 71, 77, 190, 161, 25, 224, 62, 92, 12, 18, 60, 56, 3, 234, 62, 197, 219, 74, 188, 179, 13, 156, 62, 10, 190, 170, 62, 213, 91, 131, 62, 253, 89, 136, 189, 164, 222, 72, 62, 31, 81, 24, 190, 75, 174, 69, 190, 53, 38, 103, 189, 31, 224, 67, 62, 107, 112, 150, 62, 53, 40, 255, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 85, 85, 190, 2, 211, 36, 190, 118, 46, 243, 190, 68, 229, 161, 62, 70, 117, 251, 61, 195, 136, 176, 62, 131, 10, 0, 191, 177, 160, 230, 60, 185, 28, 26, 61, 134, 174, 223, 62, 67, 106, 58, 191, 154, 194, 51, 63, 152, 14, 89, 61, 18, 224, 210, 190, 48, 236, 12, 62, 248, 253, 251, 190, 146, 71, 114, 190, 6, 57, 132, 191, 53, 233, 27, 190, 143, 138, 123, 63, 168, 205, 149, 190, 151, 225, 223, 61, 33, 163, 234, 189, 122, 254, 3, 191, 240, 161, 157, 62, 19, 245, 168, 190, 74, 105, 189, 187, 244, 180, 183, 61, 12, 146, 22, 62, 247, 30, 13, 191, 177, 128, 245, 61, 146, 32, 175, 62, 58, 239, 255, 188, 96, 26, 229, 61, 190, 222, 122, 62, 117, 111, 60, 190, 153, 141, 20, 190, 58, 40, 123, 62, 220, 219, 56, 191, 243, 184, 33, 190, 50, 5, 52, 62, 142, 78, 196, 58, 4, 166, 55, 61, 239, 88, 202, 61, 170, 4, 221, 61, 181, 5, 63, 62, 36, 140, 153, 187, 90, 176, 184, 189, 185, 169, 159, 62, 142, 98, 235, 188, 199, 252, 159, 188, 39, 206, 129, 189, 146, 178, 66, 190, 152, 0, 100, 190, 63, 148, 29, 190, 22, 90, 189, 61, 180, 24, 150, 62, 248, 62, 161, 188, 7, 239, 136, 61, 231, 102, 31, 190, 136, 109, 84, 61, 84, 121, 90, 190, 152, 209, 172, 190, 116, 223, 207, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 228, 53, 62, 144, 246, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {251, 248, 21, 63, 126, 89, 242, 190, 218, 218, 18, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {153, 149, 23, 64, 0, 228, 93, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0043/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}