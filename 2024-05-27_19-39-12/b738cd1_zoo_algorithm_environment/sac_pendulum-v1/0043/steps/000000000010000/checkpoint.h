// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 197, 158, 62, 219, 197, 152, 189, 12, 3, 9, 191, 40, 43, 203, 190, 223, 16, 147, 61, 159, 237, 255, 62, 61, 67, 150, 190, 162, 6, 78, 63, 6, 190, 103, 62, 95, 231, 196, 62, 177, 12, 126, 191, 116, 117, 15, 190, 190, 234, 227, 62, 29, 19, 92, 63, 178, 138, 238, 62, 4, 3, 228, 190, 7, 73, 213, 63, 54, 206, 166, 62, 94, 137, 67, 191, 84, 237, 94, 187, 69, 62, 11, 63, 188, 55, 99, 63, 108, 149, 113, 191, 61, 60, 254, 189, 234, 194, 57, 191, 168, 27, 110, 62, 18, 34, 177, 61, 106, 161, 196, 61, 113, 193, 187, 190, 140, 39, 145, 190, 48, 38, 95, 61, 24, 41, 89, 62, 78, 177, 3, 191, 206, 103, 187, 189, 150, 165, 117, 63, 25, 212, 202, 62, 28, 184, 73, 189, 185, 176, 155, 62, 149, 204, 168, 190, 82, 71, 206, 187, 15, 16, 216, 61, 218, 244, 208, 190, 142, 90, 251, 190, 239, 75, 212, 190, 234, 128, 200, 62, 60, 166, 135, 190, 34, 215, 76, 62, 252, 150, 49, 191, 237, 128, 107, 63, 19, 46, 50, 63, 164, 91, 15, 63, 58, 129, 17, 191, 32, 247, 24, 191, 236, 163, 26, 63, 88, 180, 163, 190, 118, 146, 196, 191, 181, 249, 187, 190, 44, 144, 17, 191, 82, 39, 5, 63, 246, 213, 248, 62, 213, 247, 244, 190, 62, 8, 164, 61, 187, 35, 178, 190, 176, 245, 243, 62, 225, 91, 156, 190, 9, 27, 13, 63, 154, 164, 179, 190, 32, 19, 57, 191, 97, 103, 24, 189, 40, 87, 47, 63, 198, 252, 123, 191, 19, 156, 139, 190, 42, 79, 71, 191, 102, 225, 242, 190, 22, 22, 233, 190, 34, 213, 37, 63, 80, 64, 64, 63, 61, 18, 103, 62, 115, 172, 18, 191, 121, 106, 145, 190, 190, 113, 64, 189, 44, 198, 70, 63, 52, 230, 164, 190, 26, 65, 23, 63, 153, 3, 167, 61, 207, 245, 31, 191, 170, 60, 145, 190, 111, 164, 203, 62, 139, 90, 139, 60, 151, 130, 162, 62, 146, 246, 75, 63, 28, 94, 14, 191, 212, 1, 163, 190, 53, 212, 35, 191, 102, 232, 4, 191, 88, 171, 48, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 221, 107, 191, 125, 88, 145, 62, 123, 105, 38, 63, 136, 48, 237, 58, 150, 212, 97, 190, 238, 93, 82, 189, 15, 97, 100, 190, 46, 213, 198, 61, 201, 101, 92, 62, 186, 71, 19, 61, 93, 210, 229, 62, 50, 162, 159, 61, 220, 103, 54, 63, 115, 51, 187, 190, 253, 81, 180, 62, 150, 148, 213, 61, 226, 78, 140, 189, 98, 27, 136, 62, 196, 243, 208, 189, 205, 30, 73, 189, 169, 25, 157, 190, 93, 1, 25, 191, 214, 22, 12, 63, 52, 101, 171, 190, 50, 248, 2, 191, 220, 61, 101, 189, 66, 161, 30, 63, 45, 176, 145, 188, 52, 240, 209, 189, 142, 249, 95, 191, 203, 12, 86, 191, 42, 16, 236, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 168, 240, 189, 67, 232, 101, 190, 157, 201, 7, 60, 238, 61, 143, 189, 91, 2, 99, 62, 191, 164, 67, 61, 80, 26, 187, 190, 135, 158, 226, 61, 149, 78, 52, 190, 204, 96, 17, 62, 238, 241, 0, 190, 255, 231, 14, 62, 47, 228, 119, 190, 177, 70, 2, 62, 52, 64, 7, 190, 181, 81, 95, 189, 177, 124, 164, 62, 105, 127, 58, 190, 242, 244, 191, 62, 221, 77, 133, 190, 22, 25, 181, 187, 249, 17, 84, 61, 121, 245, 162, 61, 72, 21, 51, 190, 214, 64, 161, 62, 123, 66, 112, 188, 79, 209, 48, 61, 231, 197, 229, 61, 1, 157, 182, 61, 48, 102, 150, 189, 78, 204, 49, 190, 221, 204, 183, 62, 45, 226, 250, 189, 158, 220, 3, 62, 58, 238, 224, 189, 70, 200, 106, 190, 146, 74, 4, 62, 120, 238, 33, 190, 198, 46, 65, 61, 48, 252, 74, 190, 232, 57, 120, 190, 155, 26, 133, 61, 67, 21, 217, 190, 250, 178, 228, 189, 64, 23, 46, 190, 55, 172, 47, 190, 246, 128, 6, 190, 93, 221, 25, 62, 38, 13, 121, 61, 214, 107, 88, 190, 12, 254, 31, 190, 56, 43, 238, 61, 80, 19, 165, 60, 77, 220, 80, 62, 237, 204, 194, 189, 173, 115, 163, 190, 185, 137, 0, 62, 141, 143, 146, 62, 30, 192, 13, 191, 204, 111, 30, 62, 184, 110, 92, 61, 43, 216, 48, 60, 37, 200, 24, 189, 194, 235, 89, 62, 209, 1, 223, 189, 112, 124, 0, 62, 119, 247, 216, 62, 171, 241, 6, 191, 233, 28, 129, 189, 131, 225, 221, 190, 90, 219, 175, 188, 80, 7, 204, 190, 157, 44, 151, 62, 129, 125, 144, 189, 186, 215, 67, 62, 123, 128, 152, 189, 193, 91, 26, 62, 90, 249, 71, 61, 149, 229, 218, 189, 61, 69, 60, 188, 126, 17, 14, 62, 182, 200, 6, 61, 16, 9, 159, 190, 72, 139, 146, 190, 68, 192, 186, 189, 50, 91, 140, 61, 50, 159, 57, 190, 230, 38, 11, 191, 200, 161, 206, 189, 98, 23, 207, 62, 10, 91, 15, 190, 81, 32, 107, 188, 67, 187, 184, 188, 146, 64, 167, 189, 38, 121, 229, 190, 139, 18, 142, 63, 73, 157, 230, 61, 0, 8, 130, 190, 35, 133, 3, 191, 216, 175, 1, 191, 200, 87, 74, 62, 88, 242, 116, 191, 182, 182, 38, 190, 128, 148, 2, 191, 10, 242, 29, 189, 169, 51, 12, 62, 64, 60, 138, 62, 156, 74, 153, 189, 6, 255, 79, 62, 14, 172, 33, 62, 124, 52, 236, 61, 46, 229, 11, 62, 142, 122, 4, 190, 255, 131, 100, 190, 32, 179, 157, 62, 211, 139, 252, 189, 81, 156, 116, 62, 97, 148, 132, 190, 220, 191, 164, 190, 141, 138, 5, 190, 56, 243, 3, 60, 141, 174, 199, 190, 14, 139, 72, 190, 64, 211, 38, 189, 203, 179, 200, 189, 188, 51, 141, 61, 147, 216, 9, 61, 70, 252, 211, 62, 238, 173, 182, 188, 70, 195, 32, 189, 167, 74, 155, 61, 239, 176, 209, 61, 113, 21, 154, 189, 146, 116, 128, 189, 123, 48, 159, 188, 235, 189, 178, 62, 135, 84, 16, 190, 229, 209, 25, 62, 239, 222, 0, 62, 227, 147, 113, 190, 86, 53, 64, 62, 254, 32, 95, 189, 247, 82, 27, 62, 57, 242, 61, 190, 149, 117, 33, 189, 109, 129, 15, 62, 227, 47, 18, 191, 49, 60, 79, 60, 86, 13, 246, 189, 35, 241, 12, 190, 76, 33, 187, 60, 54, 69, 222, 61, 213, 13, 235, 190, 89, 34, 7, 190, 32, 86, 55, 61, 196, 56, 162, 61, 211, 171, 174, 60, 57, 238, 133, 190, 25, 249, 138, 189, 174, 239, 109, 189, 126, 181, 215, 62, 28, 104, 168, 59, 156, 93, 4, 61, 83, 224, 31, 63, 102, 6, 245, 189, 55, 66, 159, 62, 163, 94, 235, 61, 65, 72, 124, 62, 113, 61, 134, 62, 83, 117, 150, 61, 248, 133, 184, 189, 46, 93, 224, 189, 112, 223, 255, 60, 23, 24, 148, 189, 209, 207, 91, 62, 251, 201, 73, 190, 28, 173, 63, 190, 3, 129, 105, 189, 70, 104, 181, 191, 155, 165, 53, 62, 4, 102, 16, 62, 92, 246, 176, 59, 19, 37, 138, 61, 148, 45, 51, 62, 57, 58, 28, 191, 66, 217, 25, 190, 2, 205, 161, 62, 117, 243, 142, 189, 216, 73, 133, 61, 91, 164, 66, 190, 142, 51, 139, 62, 250, 226, 215, 190, 105, 225, 82, 62, 120, 125, 76, 61, 55, 222, 93, 62, 154, 92, 70, 190, 36, 30, 136, 189, 52, 28, 48, 191, 121, 91, 219, 188, 210, 23, 123, 62, 66, 141, 239, 190, 255, 166, 74, 60, 170, 223, 180, 61, 73, 215, 134, 190, 81, 18, 104, 189, 91, 195, 152, 61, 25, 55, 241, 188, 126, 14, 0, 62, 28, 98, 233, 187, 36, 142, 160, 60, 199, 194, 39, 190, 22, 193, 2, 190, 55, 21, 129, 61, 45, 129, 130, 189, 1, 92, 154, 190, 26, 168, 41, 191, 50, 134, 57, 190, 136, 177, 141, 62, 12, 223, 102, 190, 175, 194, 252, 61, 175, 183, 76, 189, 47, 12, 31, 62, 24, 18, 161, 191, 88, 206, 185, 190, 80, 93, 156, 187, 26, 142, 100, 61, 104, 186, 36, 190, 225, 71, 151, 189, 135, 39, 42, 190, 152, 26, 38, 189, 119, 64, 167, 61, 103, 24, 133, 61, 107, 1, 239, 61, 251, 234, 11, 190, 76, 107, 21, 58, 75, 206, 33, 190, 207, 185, 18, 62, 193, 140, 37, 62, 156, 155, 26, 190, 111, 110, 25, 190, 166, 193, 0, 190, 195, 119, 208, 189, 174, 168, 25, 61, 47, 199, 25, 190, 152, 108, 38, 61, 142, 32, 31, 61, 89, 174, 162, 189, 15, 20, 239, 189, 196, 68, 167, 59, 222, 130, 226, 189, 79, 200, 200, 61, 57, 86, 189, 59, 113, 211, 240, 189, 219, 148, 177, 61, 23, 34, 146, 188, 38, 177, 253, 61, 7, 255, 159, 189, 232, 84, 57, 61, 157, 85, 17, 61, 210, 235, 4, 62, 84, 189, 3, 62, 22, 7, 40, 190, 146, 3, 42, 189, 240, 2, 171, 61, 22, 150, 15, 190, 140, 106, 27, 62, 139, 228, 70, 190, 218, 10, 1, 61, 122, 199, 100, 190, 12, 217, 104, 61, 229, 104, 161, 189, 242, 135, 243, 189, 77, 149, 29, 61, 183, 214, 156, 189, 47, 73, 194, 60, 81, 233, 225, 61, 17, 51, 251, 189, 71, 18, 183, 61, 184, 164, 41, 190, 182, 241, 26, 190, 68, 183, 35, 190, 32, 180, 179, 61, 16, 169, 183, 190, 62, 44, 218, 189, 31, 141, 44, 190, 116, 5, 184, 189, 44, 100, 9, 62, 140, 149, 254, 59, 245, 249, 33, 62, 42, 63, 103, 189, 216, 223, 226, 190, 22, 146, 90, 191, 9, 19, 34, 62, 248, 44, 8, 191, 175, 162, 239, 189, 39, 29, 46, 190, 56, 124, 46, 191, 83, 120, 17, 190, 128, 83, 150, 61, 235, 104, 152, 189, 244, 13, 4, 188, 60, 165, 41, 62, 228, 35, 77, 190, 141, 19, 129, 61, 121, 51, 35, 62, 195, 186, 143, 189, 89, 172, 27, 189, 9, 165, 66, 190, 104, 130, 102, 62, 161, 70, 146, 189, 49, 102, 71, 191, 205, 101, 13, 189, 169, 216, 66, 62, 135, 47, 137, 62, 184, 72, 245, 190, 5, 203, 44, 62, 90, 158, 163, 61, 15, 225, 250, 61, 248, 114, 200, 62, 136, 73, 24, 190, 239, 112, 211, 62, 21, 60, 35, 62, 198, 238, 134, 62, 199, 71, 134, 62, 174, 40, 229, 189, 192, 117, 141, 62, 33, 12, 196, 61, 251, 86, 157, 57, 135, 196, 126, 62, 21, 21, 129, 190, 62, 247, 25, 190, 136, 199, 82, 189, 112, 217, 7, 62, 64, 56, 101, 191, 198, 53, 222, 61, 192, 95, 178, 190, 216, 80, 233, 190, 22, 134, 193, 58, 243, 61, 125, 190, 135, 123, 144, 61, 15, 112, 8, 191, 232, 224, 158, 190, 96, 122, 64, 62, 180, 47, 109, 62, 138, 43, 150, 190, 62, 111, 26, 190, 16, 240, 246, 62, 213, 77, 201, 190, 225, 54, 56, 188, 200, 199, 1, 191, 44, 141, 43, 63, 222, 238, 1, 62, 141, 169, 183, 62, 0, 129, 52, 62, 2, 71, 72, 190, 238, 181, 195, 62, 220, 98, 95, 190, 96, 34, 162, 62, 158, 105, 195, 62, 186, 88, 249, 62, 10, 218, 152, 61, 119, 38, 123, 189, 149, 82, 17, 62, 74, 118, 195, 60, 227, 4, 68, 61, 71, 30, 23, 190, 111, 77, 184, 62, 1, 8, 131, 190, 91, 162, 209, 190, 136, 95, 234, 61, 147, 60, 47, 191, 181, 39, 175, 62, 21, 79, 71, 190, 37, 121, 187, 190, 91, 153, 109, 61, 246, 151, 178, 62, 176, 115, 42, 191, 22, 218, 15, 190, 234, 55, 125, 62, 26, 38, 72, 190, 217, 127, 28, 60, 222, 88, 6, 191, 52, 105, 163, 61, 158, 80, 151, 190, 117, 42, 53, 62, 134, 97, 243, 60, 184, 117, 222, 188, 123, 27, 86, 60, 54, 192, 147, 61, 116, 87, 40, 190, 212, 38, 138, 60, 13, 218, 56, 189, 194, 249, 167, 189, 148, 11, 177, 188, 91, 225, 208, 189, 47, 179, 29, 190, 194, 28, 145, 188, 233, 61, 220, 189, 157, 196, 46, 190, 48, 193, 216, 61, 248, 66, 208, 60, 164, 18, 40, 190, 28, 246, 240, 189, 241, 238, 90, 61, 174, 144, 19, 189, 229, 137, 22, 189, 137, 220, 146, 189, 113, 157, 140, 189, 147, 44, 12, 189, 130, 132, 152, 61, 183, 191, 172, 61, 196, 78, 14, 190, 86, 124, 249, 189, 36, 44, 84, 61, 105, 45, 13, 62, 181, 122, 172, 61, 137, 71, 26, 190, 159, 176, 43, 190, 185, 178, 217, 62, 216, 127, 130, 190, 150, 136, 101, 62, 225, 122, 144, 62, 118, 173, 232, 190, 36, 2, 14, 190, 212, 18, 94, 190, 67, 4, 47, 190, 130, 180, 131, 61, 21, 24, 58, 61, 60, 197, 5, 62, 180, 35, 112, 61, 64, 114, 242, 190, 84, 64, 46, 62, 131, 117, 38, 62, 167, 17, 0, 191, 78, 22, 136, 190, 208, 52, 155, 61, 202, 196, 153, 189, 103, 239, 78, 190, 170, 51, 155, 190, 197, 3, 206, 190, 129, 193, 198, 59, 103, 195, 116, 62, 86, 21, 19, 190, 56, 89, 37, 189, 53, 244, 141, 190, 194, 9, 216, 189, 161, 218, 126, 190, 200, 224, 230, 189, 169, 106, 112, 61, 228, 19, 188, 187, 251, 247, 18, 191, 121, 188, 154, 190, 108, 53, 226, 188, 29, 57, 159, 190, 219, 127, 143, 189, 12, 117, 94, 60, 198, 54, 230, 190, 84, 2, 53, 62, 109, 91, 214, 61, 48, 211, 132, 189, 4, 12, 126, 61, 114, 67, 30, 61, 104, 27, 156, 61, 70, 143, 224, 61, 118, 98, 156, 190, 181, 132, 122, 190, 94, 81, 3, 190, 222, 200, 165, 59, 134, 126, 86, 190, 42, 169, 99, 187, 50, 237, 147, 190, 167, 172, 21, 62, 39, 254, 197, 189, 202, 88, 197, 189, 82, 237, 141, 190, 153, 155, 56, 190, 82, 151, 158, 61, 31, 29, 124, 61, 180, 165, 200, 62, 25, 108, 133, 190, 201, 24, 153, 189, 41, 214, 119, 189, 197, 93, 17, 60, 158, 29, 189, 190, 43, 31, 31, 190, 0, 119, 39, 191, 225, 197, 250, 189, 125, 108, 24, 61, 213, 213, 77, 190, 156, 60, 55, 62, 153, 245, 11, 62, 124, 38, 38, 190, 57, 223, 96, 61, 207, 167, 223, 188, 5, 179, 23, 61, 205, 78, 17, 62, 146, 214, 72, 62, 118, 66, 211, 189, 54, 150, 140, 190, 43, 178, 86, 190, 62, 12, 249, 61, 227, 230, 45, 62, 213, 159, 29, 61, 131, 147, 125, 191, 205, 184, 140, 190, 26, 68, 43, 62, 16, 16, 176, 190, 60, 40, 71, 62, 196, 114, 5, 188, 85, 169, 49, 61, 129, 164, 141, 191, 132, 51, 208, 190, 4, 110, 184, 62, 38, 126, 64, 61, 52, 208, 133, 189, 0, 40, 7, 62, 200, 188, 61, 62, 111, 62, 75, 190, 37, 180, 255, 59, 4, 104, 16, 189, 47, 195, 25, 191, 67, 72, 178, 58, 190, 204, 41, 190, 30, 147, 71, 62, 53, 151, 134, 190, 200, 200, 99, 61, 154, 178, 172, 60, 108, 198, 187, 61, 156, 23, 118, 62, 78, 97, 114, 189, 227, 20, 209, 189, 112, 8, 153, 189, 206, 54, 53, 61, 252, 83, 30, 62, 142, 251, 150, 190, 178, 182, 103, 62, 28, 161, 123, 60, 25, 107, 115, 62, 113, 230, 213, 190, 151, 238, 157, 60, 235, 212, 208, 61, 121, 214, 49, 62, 128, 167, 144, 62, 225, 16, 59, 62, 19, 61, 245, 190, 12, 176, 55, 191, 139, 30, 86, 62, 207, 12, 60, 189, 86, 169, 177, 190, 60, 118, 35, 191, 35, 170, 62, 191, 165, 139, 186, 190, 6, 185, 183, 188, 199, 12, 145, 59, 52, 5, 139, 62, 27, 174, 232, 190, 135, 125, 98, 62, 199, 194, 188, 188, 208, 136, 77, 191, 255, 129, 18, 61, 252, 171, 14, 62, 185, 233, 148, 190, 251, 115, 37, 62, 137, 18, 1, 191, 17, 218, 7, 190, 57, 176, 29, 190, 186, 161, 116, 62, 160, 224, 238, 190, 44, 3, 20, 62, 131, 252, 148, 62, 147, 227, 174, 62, 34, 236, 67, 190, 91, 243, 184, 189, 249, 205, 211, 189, 161, 237, 22, 191, 142, 94, 108, 63, 221, 42, 249, 188, 127, 194, 31, 188, 223, 21, 130, 61, 61, 225, 20, 62, 123, 221, 149, 188, 34, 122, 12, 190, 22, 39, 27, 190, 233, 172, 219, 58, 0, 219, 51, 190, 243, 185, 48, 61, 227, 229, 167, 189, 138, 143, 42, 62, 198, 76, 220, 189, 22, 63, 152, 189, 178, 177, 241, 189, 84, 212, 246, 189, 219, 161, 121, 189, 140, 44, 108, 189, 170, 31, 78, 187, 212, 222, 24, 62, 192, 149, 8, 190, 138, 51, 238, 189, 18, 78, 43, 190, 56, 144, 128, 189, 13, 181, 176, 60, 225, 45, 23, 190, 224, 236, 238, 59, 236, 102, 253, 189, 110, 217, 230, 189, 51, 83, 16, 190, 246, 172, 206, 61, 61, 96, 162, 189, 118, 187, 131, 62, 212, 6, 150, 188, 193, 156, 194, 188, 61, 130, 26, 63, 255, 101, 158, 190, 96, 244, 20, 62, 189, 48, 66, 62, 113, 158, 252, 62, 40, 21, 213, 61, 239, 58, 244, 189, 183, 83, 64, 190, 4, 235, 15, 190, 20, 41, 74, 61, 185, 134, 237, 61, 18, 189, 98, 62, 220, 196, 163, 190, 118, 39, 163, 190, 50, 204, 139, 62, 98, 179, 179, 191, 137, 220, 61, 62, 204, 192, 201, 189, 68, 71, 134, 190, 132, 142, 202, 61, 18, 12, 140, 62, 85, 137, 141, 191, 170, 97, 198, 190, 101, 217, 72, 62, 37, 181, 128, 189, 239, 88, 57, 61, 104, 88, 224, 190, 3, 181, 104, 189, 113, 111, 210, 190, 105, 179, 251, 189, 232, 255, 0, 188, 255, 234, 169, 187, 252, 185, 86, 190, 79, 9, 156, 61, 189, 244, 179, 190, 35, 243, 102, 190, 183, 54, 158, 61, 239, 113, 172, 62, 98, 125, 183, 190, 184, 121, 57, 190, 52, 157, 5, 190, 42, 248, 199, 61, 208, 37, 248, 189, 150, 61, 241, 189, 140, 36, 74, 190, 177, 105, 162, 62, 243, 248, 136, 189, 186, 236, 42, 62, 35, 245, 145, 190, 89, 18, 207, 190, 210, 29, 68, 62, 2, 97, 165, 62, 189, 154, 123, 190, 207, 56, 7, 62, 92, 89, 141, 62, 155, 224, 171, 61, 22, 156, 145, 62, 207, 212, 205, 190, 132, 138, 101, 61, 220, 133, 153, 60, 40, 66, 6, 63, 26, 127, 160, 61, 146, 156, 51, 62, 141, 245, 241, 189, 32, 133, 113, 189, 79, 203, 10, 190, 251, 157, 187, 61, 24, 66, 45, 62, 125, 73, 159, 62, 252, 219, 23, 62, 16, 117, 219, 61, 83, 42, 76, 62, 148, 238, 130, 189, 58, 196, 226, 61, 68, 98, 190, 189, 54, 99, 140, 62, 18, 123, 77, 186, 101, 247, 208, 61, 223, 110, 2, 189, 146, 219, 184, 190, 207, 15, 28, 60, 128, 132, 2, 190, 219, 251, 138, 190, 17, 207, 233, 189, 108, 38, 203, 188, 192, 49, 112, 190, 200, 33, 71, 62, 192, 94, 179, 61, 104, 86, 40, 62, 234, 37, 93, 61, 85, 113, 227, 60, 94, 0, 88, 188, 99, 57, 75, 188, 159, 203, 127, 190, 194, 160, 234, 61, 162, 58, 112, 61, 94, 247, 243, 189, 153, 12, 56, 62, 49, 115, 136, 60, 96, 10, 136, 190, 126, 250, 105, 190, 57, 102, 74, 189, 250, 116, 171, 61, 112, 59, 86, 61, 215, 204, 132, 61, 253, 85, 93, 62, 111, 196, 197, 188, 87, 119, 59, 190, 137, 190, 124, 61, 254, 225, 9, 62, 84, 133, 129, 188, 31, 144, 129, 61, 38, 3, 18, 62, 101, 175, 164, 189, 117, 37, 230, 189, 249, 16, 187, 60, 173, 45, 35, 191, 118, 227, 204, 189, 23, 176, 132, 62, 120, 115, 201, 189, 231, 201, 2, 62, 167, 178, 3, 190, 135, 84, 9, 189, 162, 244, 214, 190, 139, 125, 111, 62, 30, 43, 12, 191, 156, 203, 86, 190, 200, 134, 61, 62, 68, 144, 171, 190, 90, 156, 36, 188, 228, 114, 57, 191, 38, 49, 191, 190, 36, 233, 71, 190, 3, 248, 118, 62, 149, 0, 180, 60, 181, 108, 78, 62, 84, 32, 61, 190, 47, 141, 119, 60, 77, 79, 99, 62, 247, 51, 47, 190, 171, 101, 191, 61, 227, 125, 148, 62, 70, 128, 229, 189, 215, 92, 158, 62, 140, 10, 214, 189, 89, 87, 179, 189, 116, 167, 57, 62, 203, 29, 79, 62, 32, 98, 35, 191, 147, 231, 124, 62, 89, 6, 147, 62, 217, 222, 203, 61, 134, 118, 194, 61, 160, 40, 206, 61, 240, 120, 124, 62, 175, 203, 234, 190, 34, 44, 26, 63, 120, 134, 152, 190, 188, 131, 118, 190, 114, 199, 77, 62, 45, 74, 125, 190, 121, 202, 113, 189, 220, 107, 239, 189, 72, 65, 27, 60, 196, 9, 50, 61, 179, 3, 6, 189, 115, 240, 9, 191, 60, 193, 93, 189, 87, 131, 203, 60, 163, 181, 182, 61, 102, 116, 23, 189, 252, 0, 162, 190, 211, 91, 57, 190, 72, 192, 137, 60, 48, 66, 133, 190, 188, 191, 107, 191, 207, 8, 147, 189, 138, 178, 94, 190, 145, 55, 23, 189, 12, 193, 131, 189, 196, 73, 138, 190, 154, 16, 24, 191, 124, 33, 169, 62, 101, 223, 253, 188, 184, 94, 196, 189, 9, 1, 183, 189, 223, 12, 150, 190, 94, 136, 21, 190, 220, 226, 175, 190, 77, 10, 74, 190, 203, 186, 134, 189, 180, 53, 165, 61, 1, 33, 170, 190, 84, 64, 1, 62, 35, 62, 3, 191, 201, 7, 130, 188, 178, 176, 151, 189, 192, 210, 152, 60, 224, 237, 180, 61, 209, 85, 237, 61, 196, 78, 69, 60, 121, 79, 41, 189, 64, 185, 44, 62, 87, 40, 110, 61, 49, 241, 108, 61, 36, 46, 16, 62, 28, 153, 206, 189, 232, 211, 107, 189, 22, 127, 69, 189, 93, 40, 212, 61, 230, 122, 136, 62, 223, 21, 119, 62, 132, 222, 21, 191, 146, 65, 50, 190, 175, 77, 52, 60, 44, 28, 75, 189, 174, 19, 46, 62, 35, 239, 82, 190, 145, 121, 187, 189, 100, 5, 238, 190, 43, 158, 80, 63, 15, 104, 3, 190, 204, 76, 5, 62, 203, 79, 212, 189, 108, 248, 199, 189, 154, 162, 170, 61, 46, 236, 136, 189, 202, 66, 29, 61, 142, 123, 79, 190, 150, 97, 150, 60, 217, 3, 2, 62, 246, 167, 185, 61, 60, 252, 219, 189, 187, 228, 150, 60, 247, 250, 141, 189, 160, 221, 108, 190, 113, 197, 254, 188, 185, 25, 207, 61, 21, 61, 125, 190, 201, 136, 101, 61, 114, 213, 238, 189, 189, 195, 72, 61, 125, 255, 6, 59, 92, 168, 149, 189, 243, 172, 242, 61, 107, 69, 24, 183, 176, 27, 239, 189, 195, 162, 203, 189, 216, 60, 245, 189, 20, 195, 50, 190, 233, 96, 52, 190, 150, 179, 199, 61, 174, 150, 111, 61, 63, 167, 165, 189, 207, 218, 13, 189, 197, 77, 154, 188, 236, 22, 12, 61, 80, 116, 140, 189, 244, 212, 15, 190, 106, 130, 70, 189, 229, 234, 3, 61, 177, 205, 185, 61, 77, 209, 149, 189, 92, 55, 47, 188, 204, 66, 182, 61, 77, 40, 43, 190, 9, 248, 245, 187, 154, 255, 76, 61, 40, 63, 1, 190, 151, 19, 231, 188, 17, 235, 51, 189, 204, 137, 181, 188, 72, 146, 34, 190, 108, 72, 255, 188, 118, 113, 16, 190, 88, 51, 164, 189, 197, 33, 24, 62, 198, 87, 220, 189, 100, 99, 41, 62, 110, 78, 105, 61, 201, 13, 136, 61, 189, 122, 31, 62, 197, 231, 47, 62, 115, 56, 1, 61, 114, 129, 142, 189, 41, 64, 191, 60, 61, 61, 90, 189, 94, 195, 201, 189, 221, 159, 31, 190, 136, 143, 194, 189, 17, 143, 161, 189, 188, 236, 0, 190, 121, 70, 123, 190, 10, 197, 211, 187, 181, 205, 161, 189, 44, 18, 154, 190, 147, 38, 204, 61, 209, 127, 130, 190, 238, 216, 9, 190, 142, 60, 200, 189, 117, 162, 143, 61, 38, 17, 41, 189, 225, 59, 169, 189, 7, 139, 47, 190, 117, 174, 73, 189, 34, 98, 143, 60, 12, 72, 2, 62, 114, 229, 32, 190, 10, 48, 33, 190, 103, 101, 177, 59, 173, 17, 166, 61, 46, 186, 83, 190, 134, 22, 31, 62, 228, 157, 81, 61, 46, 224, 244, 60, 12, 129, 10, 62, 197, 149, 15, 190, 29, 176, 145, 61, 190, 77, 207, 60, 128, 0, 130, 62, 91, 58, 43, 62, 200, 81, 99, 62, 26, 218, 156, 62, 246, 216, 182, 187, 170, 62, 180, 61, 44, 188, 62, 62, 175, 77, 163, 190, 187, 70, 122, 189, 217, 125, 166, 61, 177, 38, 226, 61, 140, 15, 185, 190, 38, 55, 178, 189, 168, 232, 204, 189, 102, 89, 196, 189, 23, 76, 87, 190, 40, 198, 65, 61, 14, 121, 162, 61, 200, 74, 11, 191, 98, 26, 197, 190, 145, 6, 228, 188, 171, 197, 180, 61, 103, 182, 173, 190, 122, 126, 87, 61, 227, 139, 44, 62, 38, 169, 201, 190, 44, 151, 123, 189, 252, 94, 254, 190, 29, 0, 244, 62, 71, 156, 112, 62, 48, 30, 70, 190, 68, 11, 7, 190, 188, 131, 162, 61, 218, 118, 123, 188, 75, 88, 90, 190, 196, 2, 130, 190, 102, 174, 215, 61, 241, 246, 72, 62, 220, 47, 12, 62, 108, 109, 217, 58, 26, 82, 208, 189, 98, 138, 214, 190, 29, 83, 17, 62, 1, 236, 238, 188, 175, 107, 62, 61, 62, 174, 158, 190, 1, 64, 40, 62, 56, 149, 107, 61, 204, 120, 233, 189, 120, 36, 199, 61, 31, 39, 107, 190, 1, 218, 238, 189, 118, 237, 49, 62, 223, 10, 53, 190, 103, 148, 210, 61, 85, 133, 116, 61, 1, 220, 232, 60, 194, 58, 13, 62, 218, 233, 239, 190, 239, 94, 114, 189, 230, 172, 102, 191, 105, 204, 145, 189, 45, 62, 166, 61, 116, 43, 138, 190, 100, 220, 68, 190, 116, 112, 5, 191, 227, 218, 151, 62, 52, 73, 45, 190, 9, 53, 184, 190, 75, 6, 40, 191, 86, 32, 132, 190, 59, 178, 133, 189, 122, 136, 76, 62, 13, 123, 71, 62, 249, 206, 32, 61, 138, 10, 161, 188, 121, 158, 177, 190, 98, 254, 99, 61, 84, 205, 218, 61, 221, 230, 181, 190, 105, 47, 11, 62, 95, 97, 68, 190, 239, 103, 111, 62, 124, 45, 91, 190, 142, 85, 40, 190, 59, 35, 37, 62, 1, 111, 11, 62, 35, 213, 142, 62, 232, 255, 177, 61, 50, 26, 117, 61, 239, 26, 118, 60, 105, 57, 96, 188, 158, 246, 147, 62, 140, 214, 225, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 42, 48, 62, 73, 66, 155, 61, 138, 215, 42, 61, 216, 90, 34, 190, 161, 84, 45, 62, 42, 99, 11, 189, 157, 131, 137, 62, 105, 38, 63, 190, 181, 83, 140, 190, 148, 92, 164, 190, 160, 163, 107, 61, 155, 239, 193, 62, 173, 145, 41, 189, 139, 245, 81, 189, 192, 170, 98, 189, 181, 150, 137, 62, 68, 0, 131, 190, 68, 52, 239, 62, 92, 12, 18, 60, 160, 245, 238, 62, 39, 227, 11, 189, 199, 124, 149, 62, 171, 44, 176, 62, 217, 53, 136, 62, 95, 166, 155, 189, 90, 65, 50, 62, 31, 81, 24, 190, 75, 174, 69, 190, 53, 38, 103, 189, 7, 19, 73, 62, 7, 91, 138, 62, 220, 158, 254, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 58, 99, 190, 127, 114, 82, 190, 204, 232, 7, 191, 83, 60, 171, 62, 175, 110, 42, 62, 26, 167, 11, 63, 253, 244, 14, 191, 177, 160, 230, 60, 185, 28, 26, 61, 181, 59, 234, 62, 223, 153, 73, 191, 203, 134, 66, 63, 152, 14, 89, 61, 59, 223, 34, 191, 157, 185, 87, 62, 31, 223, 18, 191, 22, 165, 185, 190, 49, 7, 130, 191, 53, 233, 27, 190, 152, 180, 136, 63, 202, 245, 155, 190, 214, 157, 205, 61, 104, 252, 214, 189, 172, 2, 4, 191, 98, 183, 181, 62, 193, 52, 177, 190, 74, 105, 189, 187, 244, 180, 183, 61, 12, 146, 22, 62, 170, 127, 0, 191, 168, 73, 247, 61, 206, 198, 193, 62, 193, 193, 250, 188, 252, 122, 230, 61, 181, 205, 99, 62, 27, 160, 217, 189, 247, 120, 38, 190, 119, 44, 82, 62, 163, 63, 33, 191, 243, 184, 33, 190, 50, 5, 52, 62, 163, 139, 31, 61, 209, 11, 179, 61, 167, 72, 215, 61, 170, 4, 221, 61, 96, 123, 44, 62, 139, 175, 27, 189, 33, 140, 6, 61, 48, 44, 159, 62, 158, 86, 168, 189, 199, 252, 159, 188, 59, 154, 139, 189, 74, 34, 61, 190, 115, 217, 102, 190, 80, 70, 9, 190, 144, 151, 192, 61, 8, 72, 171, 62, 216, 181, 92, 189, 7, 239, 136, 61, 231, 102, 31, 190, 136, 109, 84, 61, 175, 182, 65, 190, 148, 75, 149, 190, 0, 233, 12, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 186, 40, 62, 23, 36, 195, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {102, 84, 205, 191, 27, 111, 131, 190, 193, 58, 73, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {228, 161, 33, 192, 12, 64, 246, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0043/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}