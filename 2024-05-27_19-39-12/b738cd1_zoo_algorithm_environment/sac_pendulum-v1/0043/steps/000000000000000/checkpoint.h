// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 17, 170, 62, 164, 202, 149, 190, 247, 211, 188, 190, 82, 175, 30, 62, 157, 61, 254, 190, 75, 198, 218, 62, 184, 210, 220, 190, 82, 42, 221, 62, 255, 121, 209, 62, 225, 71, 200, 60, 218, 160, 46, 190, 165, 110, 100, 190, 11, 179, 62, 190, 199, 234, 218, 62, 220, 96, 2, 63, 126, 184, 166, 190, 155, 85, 245, 62, 168, 212, 1, 63, 39, 79, 186, 190, 193, 17, 6, 191, 164, 16, 161, 62, 67, 85, 208, 62, 253, 205, 3, 191, 166, 164, 45, 61, 94, 81, 243, 190, 89, 230, 4, 190, 185, 111, 136, 189, 198, 216, 128, 190, 252, 212, 249, 61, 49, 82, 251, 190, 85, 81, 158, 190, 89, 159, 175, 62, 196, 78, 208, 190, 77, 112, 178, 190, 235, 150, 172, 62, 47, 131, 252, 62, 143, 30, 176, 190, 20, 122, 133, 62, 200, 212, 13, 191, 242, 231, 238, 190, 222, 227, 181, 62, 134, 93, 77, 190, 158, 92, 108, 187, 3, 71, 18, 191, 204, 229, 66, 62, 232, 242, 177, 190, 119, 51, 128, 62, 67, 187, 8, 191, 20, 235, 138, 62, 1, 187, 120, 62, 142, 130, 17, 63, 33, 200, 150, 190, 213, 154, 10, 191, 200, 208, 237, 62, 207, 166, 172, 190, 254, 249, 97, 190, 159, 65, 152, 189, 101, 45, 175, 190, 187, 196, 250, 59, 188, 250, 229, 62, 149, 18, 152, 60, 76, 84, 106, 62, 20, 231, 117, 190, 113, 96, 108, 62, 104, 245, 250, 189, 53, 51, 247, 62, 194, 38, 238, 190, 196, 140, 141, 190, 1, 150, 206, 188, 53, 191, 198, 61, 86, 36, 17, 191, 25, 167, 163, 190, 68, 250, 11, 191, 15, 230, 206, 62, 218, 159, 131, 190, 74, 247, 208, 61, 214, 101, 34, 62, 34, 206, 204, 62, 147, 66, 205, 190, 45, 144, 101, 190, 57, 214, 87, 189, 132, 8, 0, 63, 134, 50, 9, 191, 157, 48, 251, 62, 123, 211, 181, 190, 243, 231, 250, 187, 245, 24, 5, 191, 211, 70, 36, 190, 22, 139, 121, 189, 12, 46, 141, 62, 59, 50, 247, 190, 14, 147, 217, 190, 37, 70, 160, 190, 28, 104, 158, 190, 120, 119, 137, 190, 204, 155, 132, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 179, 19, 191, 45, 187, 137, 189, 15, 1, 230, 62, 55, 190, 147, 61, 100, 153, 16, 61, 132, 113, 26, 190, 234, 212, 158, 190, 86, 201, 103, 190, 82, 179, 98, 61, 234, 179, 198, 62, 90, 147, 218, 62, 60, 63, 69, 62, 155, 147, 19, 63, 40, 95, 51, 189, 37, 124, 220, 189, 121, 41, 180, 62, 177, 129, 207, 189, 15, 104, 110, 62, 31, 84, 182, 190, 247, 27, 229, 189, 139, 209, 179, 189, 186, 169, 175, 190, 36, 192, 12, 63, 252, 215, 130, 189, 234, 211, 217, 190, 227, 41, 39, 62, 134, 227, 155, 62, 29, 100, 149, 60, 219, 124, 232, 189, 83, 0, 11, 191, 180, 190, 18, 191, 175, 172, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 201, 42, 62, 240, 7, 43, 190, 8, 255, 137, 61, 67, 42, 38, 61, 67, 128, 45, 62, 102, 70, 44, 62, 238, 83, 31, 190, 225, 228, 48, 62, 189, 14, 70, 187, 110, 113, 243, 61, 85, 93, 213, 189, 150, 68, 40, 62, 30, 68, 39, 190, 129, 73, 43, 188, 13, 72, 216, 59, 217, 217, 169, 189, 204, 218, 47, 62, 159, 53, 188, 189, 77, 184, 0, 62, 117, 37, 19, 190, 41, 97, 248, 186, 69, 102, 239, 188, 157, 94, 153, 189, 7, 93, 131, 60, 219, 124, 209, 61, 59, 2, 36, 190, 70, 3, 136, 61, 128, 49, 218, 60, 204, 179, 96, 61, 208, 121, 86, 189, 135, 163, 110, 189, 161, 163, 18, 62, 170, 4, 6, 190, 114, 99, 32, 62, 132, 25, 182, 189, 228, 114, 123, 61, 172, 133, 192, 61, 35, 204, 181, 189, 76, 39, 137, 61, 29, 141, 33, 190, 179, 41, 197, 61, 24, 160, 41, 62, 40, 224, 32, 190, 248, 131, 3, 190, 45, 29, 7, 190, 122, 229, 25, 190, 2, 81, 4, 190, 10, 10, 33, 62, 186, 1, 111, 188, 53, 226, 40, 190, 236, 34, 47, 189, 171, 64, 17, 62, 244, 125, 7, 61, 156, 186, 50, 62, 58, 179, 121, 61, 211, 101, 40, 188, 17, 144, 17, 62, 171, 83, 50, 62, 199, 4, 51, 190, 66, 202, 8, 62, 12, 141, 170, 61, 190, 73, 172, 189, 49, 116, 239, 188, 56, 35, 43, 62, 10, 121, 105, 189, 9, 101, 2, 62, 228, 140, 246, 61, 175, 105, 117, 189, 224, 116, 154, 189, 156, 214, 133, 189, 74, 195, 15, 62, 252, 253, 189, 188, 143, 240, 50, 62, 163, 167, 127, 188, 137, 121, 166, 61, 214, 125, 84, 61, 177, 174, 67, 61, 6, 251, 147, 60, 3, 187, 204, 189, 171, 63, 52, 189, 17, 136, 199, 60, 64, 71, 72, 189, 21, 152, 13, 190, 255, 192, 182, 189, 154, 250, 135, 187, 38, 70, 194, 189, 164, 81, 21, 190, 101, 57, 68, 61, 226, 59, 246, 61, 239, 184, 47, 62, 31, 4, 17, 190, 176, 204, 36, 189, 25, 108, 5, 62, 59, 116, 30, 189, 174, 99, 156, 59, 172, 217, 48, 189, 167, 9, 203, 61, 126, 114, 115, 189, 130, 60, 17, 190, 87, 151, 245, 189, 128, 6, 29, 62, 165, 234, 7, 190, 212, 74, 228, 61, 251, 18, 57, 60, 70, 59, 192, 187, 90, 16, 53, 61, 68, 0, 14, 62, 123, 1, 82, 61, 163, 55, 207, 61, 124, 58, 92, 189, 179, 202, 206, 60, 192, 139, 43, 187, 119, 199, 28, 190, 245, 221, 139, 189, 169, 242, 38, 62, 137, 62, 187, 61, 94, 218, 174, 61, 61, 201, 9, 190, 93, 138, 43, 190, 98, 4, 39, 190, 62, 17, 43, 190, 11, 7, 52, 190, 50, 40, 37, 190, 84, 1, 46, 189, 3, 64, 42, 190, 44, 2, 33, 62, 93, 155, 41, 190, 222, 3, 219, 61, 111, 117, 85, 188, 97, 20, 246, 189, 117, 174, 11, 61, 147, 75, 40, 61, 237, 167, 145, 61, 103, 16, 3, 189, 186, 133, 22, 189, 147, 28, 193, 60, 175, 214, 13, 190, 181, 3, 15, 62, 167, 2, 139, 61, 217, 217, 250, 189, 173, 33, 250, 61, 225, 18, 129, 188, 136, 216, 99, 186, 221, 47, 230, 189, 167, 27, 102, 187, 15, 140, 255, 60, 67, 152, 246, 188, 106, 62, 72, 60, 240, 85, 65, 186, 205, 14, 173, 188, 13, 15, 172, 189, 76, 156, 172, 61, 99, 107, 28, 190, 159, 144, 51, 190, 250, 68, 212, 59, 187, 231, 160, 188, 16, 185, 204, 61, 168, 190, 151, 188, 248, 91, 31, 62, 19, 64, 50, 188, 52, 123, 160, 189, 84, 239, 33, 188, 105, 29, 95, 61, 193, 203, 26, 62, 96, 9, 52, 61, 155, 28, 42, 62, 249, 10, 67, 61, 239, 45, 6, 190, 94, 7, 110, 188, 48, 73, 6, 62, 191, 112, 192, 187, 129, 57, 129, 189, 66, 204, 48, 62, 53, 134, 43, 190, 213, 242, 211, 61, 105, 244, 240, 189, 3, 212, 153, 60, 17, 216, 253, 189, 89, 56, 57, 189, 116, 128, 6, 62, 139, 149, 246, 58, 103, 59, 28, 62, 135, 42, 149, 189, 49, 167, 11, 190, 39, 252, 82, 189, 118, 96, 253, 61, 27, 106, 205, 61, 193, 141, 143, 57, 148, 162, 183, 59, 105, 97, 18, 62, 208, 150, 36, 62, 210, 149, 176, 189, 114, 147, 8, 62, 248, 23, 214, 61, 179, 143, 37, 62, 157, 160, 32, 189, 136, 22, 152, 189, 24, 12, 150, 189, 123, 191, 106, 61, 143, 23, 31, 62, 37, 164, 29, 190, 99, 219, 152, 189, 10, 104, 163, 188, 58, 132, 167, 189, 191, 19, 237, 189, 28, 113, 169, 60, 24, 57, 184, 61, 128, 238, 35, 61, 56, 190, 31, 190, 213, 203, 154, 61, 131, 52, 200, 60, 24, 11, 166, 189, 12, 89, 64, 189, 176, 104, 254, 189, 121, 109, 174, 189, 112, 51, 184, 61, 244, 241, 16, 190, 146, 205, 130, 61, 45, 138, 86, 61, 211, 244, 7, 189, 229, 233, 41, 61, 145, 139, 181, 187, 53, 176, 6, 190, 190, 190, 242, 61, 80, 93, 156, 187, 26, 142, 100, 61, 121, 103, 29, 190, 225, 71, 151, 189, 135, 39, 42, 190, 152, 26, 38, 189, 119, 64, 167, 61, 103, 24, 133, 61, 180, 250, 0, 62, 168, 44, 4, 190, 240, 144, 86, 60, 75, 206, 33, 190, 185, 206, 35, 62, 117, 196, 42, 62, 156, 155, 26, 190, 104, 183, 14, 190, 166, 193, 0, 190, 195, 119, 208, 189, 218, 59, 55, 61, 47, 199, 25, 190, 130, 146, 56, 61, 142, 32, 31, 61, 182, 227, 145, 189, 80, 249, 238, 189, 156, 160, 56, 60, 222, 130, 226, 189, 73, 194, 224, 61, 57, 86, 189, 59, 60, 234, 234, 189, 219, 148, 177, 61, 148, 10, 140, 188, 128, 30, 0, 62, 7, 255, 159, 189, 184, 255, 166, 61, 62, 172, 226, 61, 215, 204, 31, 62, 239, 53, 30, 62, 78, 190, 254, 189, 96, 164, 169, 186, 202, 141, 43, 62, 103, 53, 237, 60, 179, 107, 52, 62, 236, 237, 209, 189, 13, 156, 145, 61, 12, 66, 114, 189, 220, 46, 17, 62, 60, 233, 68, 189, 7, 146, 225, 189, 150, 129, 85, 61, 229, 118, 0, 189, 47, 73, 194, 60, 74, 222, 24, 62, 199, 202, 2, 190, 141, 41, 152, 61, 34, 45, 196, 188, 100, 241, 13, 190, 161, 44, 34, 190, 126, 62, 250, 61, 106, 12, 28, 190, 96, 6, 198, 189, 31, 141, 44, 190, 23, 87, 11, 190, 44, 100, 9, 62, 52, 196, 82, 61, 167, 242, 235, 60, 203, 202, 131, 61, 122, 119, 28, 61, 223, 126, 225, 188, 23, 155, 42, 62, 221, 168, 207, 60, 212, 121, 39, 60, 39, 114, 223, 188, 145, 64, 4, 62, 0, 158, 26, 190, 88, 197, 121, 61, 50, 222, 150, 189, 59, 130, 34, 61, 118, 100, 129, 60, 40, 228, 86, 189, 50, 83, 164, 59, 27, 107, 13, 62, 166, 164, 10, 61, 108, 191, 190, 60, 151, 219, 30, 189, 30, 62, 237, 61, 139, 77, 156, 189, 152, 37, 115, 188, 43, 58, 45, 190, 206, 22, 170, 61, 123, 192, 109, 60, 249, 18, 124, 189, 202, 200, 44, 62, 203, 55, 148, 61, 38, 76, 8, 62, 201, 231, 4, 62, 44, 180, 21, 189, 79, 80, 119, 61, 135, 122, 198, 61, 97, 156, 62, 59, 21, 143, 189, 61, 98, 57, 62, 188, 67, 104, 213, 60, 228, 25, 10, 62, 225, 201, 15, 61, 33, 189, 157, 189, 78, 69, 6, 190, 108, 52, 202, 189, 169, 100, 52, 190, 50, 205, 28, 190, 131, 90, 168, 189, 208, 218, 175, 61, 184, 163, 57, 189, 133, 149, 51, 190, 69, 173, 60, 61, 97, 190, 183, 189, 227, 13, 158, 59, 5, 56, 212, 61, 88, 166, 173, 188, 37, 241, 236, 61, 12, 244, 141, 189, 18, 216, 77, 60, 9, 173, 178, 61, 193, 156, 0, 62, 56, 199, 17, 190, 192, 139, 50, 190, 239, 72, 235, 61, 124, 236, 246, 61, 203, 78, 52, 62, 211, 165, 184, 60, 117, 151, 50, 62, 73, 88, 146, 189, 188, 17, 17, 61, 249, 118, 0, 190, 34, 116, 183, 61, 66, 69, 184, 61, 198, 240, 155, 61, 180, 164, 5, 190, 202, 50, 97, 189, 8, 166, 13, 62, 92, 138, 157, 189, 255, 90, 168, 61, 82, 58, 144, 189, 241, 51, 174, 61, 200, 101, 42, 190, 91, 58, 18, 190, 32, 200, 6, 190, 254, 164, 96, 186, 211, 94, 190, 61, 91, 246, 141, 189, 158, 247, 123, 189, 136, 215, 204, 189, 188, 169, 209, 61, 5, 5, 11, 190, 144, 246, 189, 61, 174, 36, 253, 61, 81, 11, 71, 189, 155, 109, 197, 188, 110, 220, 248, 61, 97, 139, 40, 62, 89, 2, 8, 62, 167, 139, 51, 62, 6, 128, 233, 60, 117, 114, 249, 187, 55, 26, 47, 61, 54, 192, 147, 61, 116, 87, 40, 190, 222, 180, 107, 60, 154, 9, 30, 189, 24, 61, 92, 189, 8, 207, 134, 188, 172, 24, 204, 189, 106, 183, 18, 190, 165, 181, 146, 188, 21, 2, 247, 189, 138, 54, 37, 190, 73, 26, 202, 61, 101, 142, 57, 61, 29, 101, 42, 190, 59, 27, 205, 189, 241, 238, 90, 61, 150, 177, 19, 189, 229, 137, 22, 189, 169, 121, 48, 189, 126, 136, 70, 189, 190, 170, 70, 189, 66, 175, 224, 61, 94, 145, 210, 61, 62, 16, 10, 190, 118, 248, 252, 189, 36, 44, 84, 61, 225, 72, 28, 62, 181, 122, 172, 61, 150, 163, 124, 61, 103, 233, 229, 60, 191, 148, 97, 61, 219, 64, 143, 60, 90, 40, 206, 61, 223, 209, 180, 61, 247, 207, 43, 61, 99, 46, 243, 59, 6, 233, 152, 189, 68, 236, 211, 189, 255, 65, 208, 188, 229, 234, 52, 190, 111, 237, 162, 61, 241, 106, 138, 189, 18, 130, 18, 61, 60, 48, 249, 61, 48, 17, 186, 60, 113, 209, 195, 189, 32, 207, 183, 189, 68, 101, 51, 62, 20, 120, 44, 61, 248, 149, 1, 190, 17, 130, 151, 61, 52, 177, 183, 189, 96, 231, 150, 61, 87, 136, 202, 189, 126, 15, 27, 189, 167, 253, 15, 62, 54, 161, 46, 190, 79, 105, 54, 61, 133, 150, 50, 60, 124, 148, 109, 61, 90, 82, 152, 189, 206, 113, 5, 62, 78, 85, 217, 188, 62, 84, 108, 189, 194, 179, 152, 61, 201, 205, 39, 62, 243, 170, 226, 186, 32, 209, 150, 189, 80, 121, 215, 61, 193, 52, 51, 62, 180, 131, 233, 61, 114, 6, 178, 61, 128, 164, 181, 61, 21, 136, 156, 61, 69, 243, 252, 61, 61, 131, 10, 62, 44, 194, 146, 61, 186, 189, 52, 190, 192, 125, 22, 62, 217, 96, 207, 61, 59, 128, 22, 190, 152, 251, 190, 61, 131, 124, 211, 59, 72, 51, 138, 189, 109, 125, 86, 61, 237, 193, 237, 61, 143, 18, 192, 189, 8, 190, 225, 189, 99, 182, 100, 61, 55, 2, 14, 62, 168, 120, 52, 62, 224, 110, 170, 60, 155, 97, 36, 190, 250, 62, 28, 189, 75, 118, 2, 190, 137, 51, 42, 190, 132, 1, 212, 189, 210, 69, 8, 58, 75, 241, 208, 189, 64, 78, 27, 61, 68, 232, 33, 62, 192, 127, 186, 61, 111, 38, 167, 188, 177, 4, 127, 60, 195, 3, 222, 188, 5, 126, 238, 189, 219, 130, 152, 61, 78, 4, 41, 60, 255, 195, 14, 62, 214, 175, 2, 190, 220, 253, 9, 61, 64, 123, 51, 190, 229, 130, 25, 189, 72, 208, 8, 62, 44, 39, 237, 61, 200, 178, 214, 189, 92, 6, 51, 190, 169, 204, 3, 61, 149, 207, 2, 190, 5, 228, 244, 61, 102, 128, 222, 61, 221, 240, 9, 190, 40, 206, 246, 61, 62, 178, 182, 189, 225, 226, 47, 62, 40, 164, 148, 61, 72, 169, 146, 61, 186, 164, 176, 61, 122, 172, 129, 61, 254, 62, 186, 188, 153, 43, 168, 61, 55, 222, 51, 190, 157, 173, 152, 188, 28, 187, 8, 60, 133, 238, 203, 189, 62, 227, 22, 62, 249, 140, 223, 189, 216, 247, 40, 60, 148, 27, 183, 61, 174, 242, 162, 61, 16, 36, 206, 61, 24, 48, 72, 189, 5, 243, 246, 189, 26, 247, 2, 189, 102, 215, 121, 60, 251, 14, 13, 189, 54, 135, 13, 189, 36, 128, 35, 62, 157, 215, 160, 61, 232, 61, 19, 62, 51, 41, 31, 62, 181, 217, 171, 189, 52, 252, 217, 60, 156, 69, 155, 188, 35, 222, 33, 188, 168, 143, 252, 61, 173, 242, 10, 61, 75, 237, 15, 190, 13, 150, 34, 62, 79, 50, 165, 189, 188, 172, 44, 190, 232, 184, 41, 189, 129, 73, 171, 61, 144, 250, 88, 189, 149, 52, 154, 189, 1, 190, 0, 190, 13, 216, 6, 62, 89, 154, 30, 189, 35, 188, 206, 61, 9, 177, 253, 189, 26, 211, 20, 62, 85, 33, 238, 188, 177, 90, 94, 61, 153, 200, 16, 190, 243, 178, 231, 189, 81, 29, 27, 189, 59, 183, 165, 189, 239, 113, 42, 62, 29, 211, 13, 190, 44, 223, 118, 60, 186, 70, 207, 61, 250, 91, 156, 61, 68, 223, 253, 61, 84, 240, 158, 189, 13, 158, 162, 189, 187, 200, 12, 62, 178, 167, 252, 189, 171, 234, 41, 62, 221, 42, 249, 188, 134, 244, 24, 61, 228, 4, 115, 61, 34, 71, 28, 62, 60, 182, 227, 188, 163, 8, 13, 190, 223, 235, 173, 189, 233, 172, 219, 58, 220, 40, 237, 189, 5, 18, 80, 61, 241, 14, 126, 189, 60, 73, 34, 62, 13, 121, 101, 189, 29, 255, 156, 189, 66, 11, 78, 189, 103, 192, 221, 189, 67, 208, 152, 189, 170, 185, 138, 188, 170, 31, 78, 187, 43, 207, 47, 62, 60, 77, 5, 190, 21, 193, 212, 189, 21, 71, 5, 190, 187, 207, 128, 189, 116, 154, 228, 60, 141, 93, 30, 190, 232, 81, 113, 61, 195, 157, 208, 189, 110, 217, 230, 189, 2, 49, 11, 190, 150, 222, 206, 61, 25, 120, 164, 189, 80, 194, 144, 189, 173, 163, 2, 189, 118, 139, 125, 189, 223, 250, 19, 62, 169, 40, 213, 189, 103, 37, 174, 61, 226, 71, 153, 61, 250, 96, 25, 189, 28, 63, 244, 188, 145, 50, 245, 189, 222, 96, 27, 190, 165, 119, 110, 189, 204, 203, 14, 62, 144, 145, 154, 60, 39, 116, 154, 188, 230, 180, 202, 189, 132, 122, 85, 189, 14, 38, 20, 62, 174, 170, 39, 190, 93, 109, 6, 62, 129, 132, 37, 190, 232, 45, 76, 61, 209, 75, 242, 189, 66, 223, 242, 188, 126, 110, 3, 190, 63, 59, 45, 190, 230, 152, 102, 60, 210, 58, 194, 60, 90, 177, 11, 61, 85, 173, 178, 61, 156, 169, 10, 62, 170, 107, 106, 61, 69, 78, 99, 61, 188, 87, 192, 60, 196, 209, 83, 61, 182, 19, 242, 61, 50, 126, 143, 186, 111, 87, 117, 188, 243, 107, 94, 61, 146, 80, 10, 62, 39, 46, 174, 59, 115, 80, 226, 189, 142, 56, 43, 189, 151, 57, 98, 189, 121, 218, 44, 62, 117, 237, 20, 62, 77, 153, 219, 189, 100, 106, 175, 189, 146, 25, 233, 61, 229, 72, 8, 190, 173, 193, 161, 61, 124, 35, 6, 190, 53, 238, 82, 189, 81, 76, 212, 187, 14, 158, 161, 59, 113, 102, 39, 62, 7, 71, 184, 61, 18, 7, 8, 62, 75, 129, 103, 189, 160, 9, 143, 61, 252, 208, 63, 61, 233, 151, 132, 61, 206, 180, 212, 189, 44, 164, 184, 189, 52, 106, 226, 61, 156, 50, 36, 62, 212, 36, 22, 190, 93, 24, 105, 189, 32, 49, 186, 189, 151, 7, 135, 61, 27, 147, 184, 61, 245, 112, 198, 61, 120, 96, 75, 61, 56, 195, 254, 61, 129, 145, 34, 62, 126, 88, 153, 188, 27, 120, 89, 61, 83, 254, 9, 189, 190, 1, 44, 62, 205, 79, 30, 61, 126, 193, 242, 61, 156, 137, 178, 189, 78, 192, 79, 189, 247, 140, 45, 189, 27, 252, 140, 189, 8, 40, 47, 190, 28, 63, 233, 189, 235, 67, 29, 188, 251, 99, 215, 189, 180, 216, 30, 62, 196, 1, 112, 61, 56, 39, 43, 62, 92, 164, 46, 62, 163, 83, 33, 62, 150, 29, 221, 61, 162, 70, 34, 62, 106, 65, 192, 189, 97, 52, 31, 62, 96, 195, 151, 189, 29, 162, 240, 61, 138, 143, 47, 62, 235, 60, 7, 61, 215, 175, 36, 190, 44, 88, 213, 189, 59, 48, 195, 188, 71, 198, 246, 61, 122, 238, 69, 60, 186, 57, 209, 61, 220, 119, 38, 62, 139, 101, 102, 187, 243, 39, 47, 189, 8, 83, 122, 61, 20, 13, 156, 61, 127, 199, 142, 61, 41, 41, 71, 61, 153, 129, 24, 62, 114, 90, 118, 189, 227, 168, 57, 189, 74, 69, 195, 61, 0, 38, 36, 190, 13, 143, 216, 189, 175, 28, 233, 61, 242, 92, 8, 189, 86, 168, 15, 62, 81, 26, 135, 60, 2, 116, 131, 187, 62, 129, 215, 61, 12, 159, 155, 61, 249, 205, 62, 189, 139, 150, 31, 190, 211, 1, 20, 62, 104, 79, 63, 188, 149, 191, 223, 188, 246, 25, 13, 190, 165, 25, 10, 190, 11, 3, 157, 188, 189, 72, 52, 189, 145, 249, 247, 189, 125, 162, 22, 61, 170, 2, 172, 61, 244, 12, 3, 190, 45, 177, 151, 61, 119, 101, 207, 59, 8, 80, 52, 189, 128, 219, 236, 61, 30, 70, 101, 189, 69, 83, 5, 61, 17, 19, 251, 61, 150, 107, 100, 189, 106, 75, 190, 185, 134, 0, 184, 189, 113, 38, 191, 59, 120, 148, 221, 61, 233, 164, 164, 61, 25, 13, 249, 189, 87, 125, 48, 61, 246, 28, 220, 61, 150, 181, 130, 61, 46, 75, 27, 188, 13, 60, 25, 62, 139, 132, 250, 189, 106, 127, 231, 60, 231, 193, 1, 62, 37, 123, 175, 189, 232, 197, 142, 189, 147, 57, 42, 59, 11, 225, 43, 62, 243, 128, 130, 61, 96, 100, 145, 61, 40, 238, 155, 189, 102, 81, 14, 190, 92, 153, 77, 61, 41, 215, 78, 61, 45, 241, 34, 190, 210, 195, 214, 189, 234, 232, 101, 188, 175, 21, 209, 188, 223, 217, 215, 189, 128, 113, 181, 189, 4, 161, 19, 62, 69, 44, 21, 62, 151, 33, 252, 60, 143, 173, 5, 61, 204, 88, 31, 62, 122, 156, 14, 62, 206, 26, 43, 62, 32, 91, 167, 61, 68, 130, 16, 190, 77, 73, 29, 62, 7, 222, 189, 189, 93, 159, 53, 189, 123, 88, 52, 61, 199, 96, 0, 62, 234, 224, 201, 189, 160, 154, 212, 60, 60, 42, 202, 189, 126, 29, 26, 62, 131, 126, 44, 190, 31, 228, 191, 61, 214, 249, 18, 61, 97, 246, 163, 189, 218, 49, 116, 61, 18, 178, 221, 60, 198, 24, 45, 62, 203, 101, 210, 189, 65, 157, 240, 61, 33, 198, 129, 60, 199, 199, 190, 60, 25, 46, 231, 60, 73, 133, 47, 190, 137, 179, 168, 189, 5, 151, 119, 61, 179, 215, 45, 62, 234, 26, 240, 61, 27, 243, 163, 61, 38, 84, 40, 190, 84, 111, 2, 190, 2, 194, 149, 189, 199, 210, 46, 189, 27, 38, 72, 60, 14, 242, 200, 189, 211, 222, 194, 189, 225, 42, 185, 189, 175, 212, 78, 188, 218, 128, 236, 189, 108, 138, 8, 62, 106, 76, 247, 189, 243, 174, 141, 189, 169, 153, 217, 61, 63, 247, 86, 189, 68, 141, 87, 61, 129, 251, 251, 189, 173, 185, 237, 60, 48, 213, 51, 62, 56, 78, 22, 62, 189, 231, 240, 189, 131, 77, 146, 61, 235, 96, 223, 188, 94, 206, 176, 189, 175, 184, 131, 60, 160, 207, 4, 62, 25, 65, 47, 190, 25, 233, 62, 61, 114, 213, 238, 189, 64, 139, 205, 61, 125, 255, 6, 59, 225, 244, 223, 188, 26, 125, 17, 62, 80, 30, 152, 60, 255, 161, 196, 189, 50, 202, 108, 189, 45, 244, 69, 189, 87, 162, 21, 190, 233, 96, 52, 190, 253, 192, 178, 61, 202, 37, 111, 61, 63, 167, 165, 189, 195, 33, 232, 188, 241, 83, 96, 188, 87, 8, 51, 61, 136, 159, 132, 189, 244, 212, 15, 190, 106, 130, 70, 189, 61, 46, 72, 61, 177, 205, 185, 61, 192, 122, 146, 189, 135, 64, 14, 188, 180, 14, 190, 61, 68, 208, 38, 190, 9, 248, 245, 187, 52, 14, 113, 61, 40, 63, 1, 190, 132, 145, 138, 188, 200, 97, 15, 189, 204, 137, 181, 188, 72, 146, 34, 190, 108, 72, 255, 188, 15, 65, 10, 190, 111, 40, 146, 189, 44, 236, 30, 62, 198, 87, 220, 189, 27, 125, 48, 62, 45, 238, 122, 61, 49, 114, 180, 61, 161, 147, 32, 62, 197, 231, 47, 62, 23, 5, 5, 61, 114, 129, 142, 189, 41, 64, 191, 60, 20, 197, 138, 189, 235, 250, 205, 188, 115, 177, 204, 189, 120, 131, 186, 189, 14, 105, 202, 189, 198, 200, 195, 189, 232, 100, 41, 190, 54, 206, 128, 61, 245, 180, 156, 189, 95, 125, 23, 190, 94, 254, 1, 62, 188, 220, 200, 189, 195, 75, 243, 189, 216, 91, 210, 189, 101, 200, 169, 61, 103, 137, 197, 188, 170, 62, 207, 189, 7, 139, 47, 190, 198, 154, 198, 189, 91, 177, 197, 60, 189, 16, 139, 61, 76, 65, 198, 188, 11, 141, 36, 190, 103, 101, 177, 59, 94, 252, 255, 61, 107, 242, 99, 189, 43, 76, 50, 62, 228, 157, 81, 61, 60, 195, 165, 189, 12, 129, 10, 62, 89, 55, 141, 189, 237, 81, 130, 189, 224, 115, 181, 60, 3, 52, 140, 188, 101, 43, 22, 62, 178, 222, 254, 61, 39, 104, 171, 188, 62, 28, 248, 61, 238, 156, 100, 60, 79, 56, 224, 61, 172, 174, 50, 190, 245, 190, 58, 187, 149, 16, 38, 190, 34, 74, 189, 189, 153, 185, 205, 61, 75, 238, 150, 61, 122, 107, 251, 61, 28, 55, 76, 189, 241, 121, 238, 188, 206, 38, 82, 61, 115, 157, 251, 187, 100, 112, 14, 188, 96, 174, 202, 189, 243, 224, 32, 62, 11, 76, 50, 190, 186, 22, 49, 189, 40, 137, 186, 189, 98, 57, 148, 61, 45, 115, 45, 190, 66, 47, 21, 189, 217, 103, 19, 190, 175, 45, 129, 188, 96, 63, 13, 62, 66, 217, 156, 61, 229, 224, 209, 189, 34, 107, 10, 62, 100, 160, 116, 189, 240, 5, 254, 188, 116, 68, 207, 188, 196, 74, 179, 61, 219, 12, 248, 189, 29, 154, 0, 62, 123, 9, 44, 61, 192, 101, 6, 190, 67, 76, 107, 189, 228, 100, 129, 61, 136, 55, 33, 62, 205, 85, 150, 61, 245, 134, 45, 190, 105, 152, 224, 61, 5, 175, 158, 61, 9, 111, 219, 61, 106, 170, 20, 62, 78, 203, 38, 190, 180, 23, 48, 189, 189, 224, 219, 61, 29, 85, 203, 189, 92, 44, 236, 61, 146, 44, 91, 188, 6, 134, 222, 60, 153, 149, 204, 61, 179, 232, 193, 189, 228, 189, 175, 60, 200, 61, 136, 189, 175, 214, 9, 190, 70, 52, 50, 61, 113, 217, 146, 61, 134, 241, 12, 190, 26, 192, 141, 188, 172, 0, 30, 62, 69, 96, 88, 187, 68, 108, 141, 60, 172, 219, 243, 189, 199, 60, 245, 189, 208, 146, 0, 190, 224, 111, 148, 61, 58, 61, 39, 62, 185, 18, 159, 189, 48, 182, 248, 189, 23, 49, 42, 58, 241, 135, 70, 189, 97, 64, 34, 189, 58, 64, 170, 188, 61, 222, 146, 60, 16, 93, 189, 61, 188, 80, 28, 62, 232, 118, 244, 189, 100, 223, 21, 190, 91, 223, 27, 62, 96, 125, 20, 61, 213, 41, 248, 61, 165, 160, 196, 61, 221, 8, 107, 60, 155, 138, 170, 188, 113, 28, 4, 62, 241, 98, 254, 59, 254, 98, 131, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 83, 38, 62, 168, 159, 39, 62, 2, 222, 175, 189, 47, 87, 49, 190, 24, 166, 222, 189, 74, 166, 133, 189, 64, 210, 121, 61, 233, 188, 51, 190, 36, 63, 215, 189, 128, 170, 36, 61, 102, 175, 28, 190, 8, 25, 41, 62, 224, 142, 199, 187, 25, 160, 44, 190, 78, 141, 222, 61, 79, 40, 27, 59, 15, 17, 236, 61, 211, 3, 254, 61, 35, 117, 227, 60, 244, 85, 19, 62, 134, 186, 2, 190, 101, 88, 129, 61, 180, 27, 6, 62, 234, 178, 159, 61, 95, 92, 1, 190, 111, 224, 161, 60, 187, 123, 30, 189, 240, 253, 52, 190, 82, 146, 155, 61, 53, 247, 81, 61, 74, 62, 112, 61, 65, 149, 255, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 168, 44, 190, 191, 235, 8, 190, 32, 222, 222, 189, 4, 216, 41, 189, 118, 91, 124, 189, 103, 37, 138, 61, 123, 31, 19, 190, 97, 248, 226, 60, 153, 65, 250, 60, 60, 13, 154, 61, 50, 171, 153, 189, 192, 233, 18, 61, 184, 208, 128, 60, 169, 248, 51, 190, 182, 117, 91, 61, 165, 51, 52, 59, 252, 156, 208, 189, 107, 4, 180, 189, 7, 149, 49, 190, 114, 137, 189, 60, 165, 42, 68, 189, 180, 71, 238, 61, 162, 250, 68, 189, 13, 210, 16, 189, 52, 208, 174, 61, 89, 8, 219, 189, 231, 134, 15, 189, 219, 4, 184, 61, 62, 83, 8, 62, 128, 20, 251, 189, 196, 77, 31, 60, 27, 172, 153, 61, 231, 55, 131, 60, 241, 226, 33, 62, 195, 64, 211, 61, 83, 56, 45, 190, 186, 243, 27, 190, 10, 148, 147, 61, 239, 68, 42, 190, 76, 27, 34, 190, 223, 201, 48, 62, 238, 14, 8, 61, 168, 86, 191, 60, 194, 151, 230, 61, 254, 207, 27, 62, 55, 62, 229, 61, 199, 227, 15, 61, 179, 146, 125, 188, 5, 205, 195, 61, 37, 169, 84, 189, 245, 249, 14, 189, 136, 225, 0, 190, 110, 60, 203, 188, 178, 251, 1, 190, 3, 27, 172, 189, 22, 110, 95, 61, 84, 101, 246, 60, 111, 74, 137, 189, 16, 196, 188, 61, 181, 123, 31, 190, 23, 69, 199, 61, 106, 141, 7, 62, 59, 106, 160, 189, 45, 66, 49, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 125, 25, 62, 174, 167, 213, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {221, 73, 135, 63, 108, 166, 174, 63, 61, 108, 150, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 223, 24, 188, 34, 221, 192, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0043/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}