// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 160, 165, 190, 191, 248, 185, 189, 231, 85, 196, 190, 142, 92, 78, 190, 76, 104, 17, 63, 87, 30, 85, 62, 119, 202, 34, 63, 220, 233, 88, 191, 182, 6, 231, 190, 241, 248, 202, 62, 173, 191, 166, 190, 82, 52, 7, 63, 116, 177, 190, 62, 138, 254, 225, 190, 100, 62, 160, 190, 91, 117, 135, 190, 210, 119, 211, 62, 135, 253, 8, 190, 134, 79, 226, 61, 198, 252, 29, 62, 216, 76, 153, 61, 110, 235, 121, 189, 156, 192, 146, 63, 93, 23, 77, 191, 231, 213, 206, 62, 37, 27, 214, 190, 55, 214, 17, 63, 186, 118, 13, 63, 213, 127, 20, 190, 14, 68, 151, 62, 111, 166, 230, 61, 26, 223, 147, 191, 96, 177, 227, 62, 237, 46, 229, 62, 252, 165, 64, 63, 126, 238, 252, 62, 167, 161, 56, 190, 61, 222, 60, 63, 115, 96, 214, 189, 203, 221, 212, 61, 84, 173, 212, 190, 120, 97, 210, 190, 143, 77, 255, 62, 90, 156, 4, 63, 132, 48, 223, 62, 19, 129, 206, 61, 51, 162, 90, 63, 148, 237, 228, 190, 15, 179, 253, 190, 144, 9, 141, 191, 76, 103, 17, 189, 243, 123, 96, 62, 124, 44, 36, 63, 76, 104, 31, 191, 162, 201, 226, 190, 240, 106, 135, 63, 3, 188, 229, 189, 73, 97, 179, 62, 103, 148, 102, 191, 146, 134, 26, 63, 171, 255, 88, 63, 178, 38, 106, 190, 119, 94, 219, 189, 11, 107, 191, 62, 161, 238, 53, 191, 107, 20, 50, 190, 216, 19, 162, 190, 187, 135, 106, 190, 6, 183, 208, 189, 35, 154, 174, 60, 123, 6, 76, 63, 215, 159, 27, 62, 63, 28, 183, 61, 185, 244, 77, 191, 255, 209, 51, 63, 212, 229, 247, 62, 197, 121, 19, 63, 215, 86, 246, 190, 215, 194, 246, 190, 140, 155, 221, 62, 193, 35, 3, 190, 120, 20, 141, 190, 237, 193, 145, 190, 242, 65, 4, 191, 194, 117, 195, 189, 93, 83, 48, 190, 12, 13, 161, 61, 141, 85, 107, 62, 206, 25, 65, 62, 28, 111, 153, 190, 86, 234, 3, 61, 175, 172, 105, 191, 195, 165, 192, 62, 154, 102, 244, 190, 77, 249, 103, 191, 188, 189, 106, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 221, 172, 190, 87, 82, 1, 191, 205, 161, 207, 61, 163, 250, 244, 60, 101, 19, 13, 191, 77, 74, 15, 63, 37, 106, 230, 62, 19, 45, 179, 62, 102, 8, 119, 62, 47, 33, 254, 62, 100, 125, 176, 61, 130, 108, 26, 190, 191, 181, 62, 62, 157, 135, 225, 62, 217, 129, 179, 189, 52, 199, 60, 62, 254, 71, 187, 62, 97, 184, 13, 63, 139, 80, 4, 63, 116, 244, 34, 60, 63, 109, 152, 62, 124, 19, 184, 61, 170, 189, 12, 63, 130, 235, 150, 62, 65, 16, 250, 188, 40, 207, 35, 62, 152, 17, 201, 190, 88, 99, 128, 190, 94, 196, 204, 62, 187, 242, 140, 62, 41, 23, 63, 190, 8, 146, 241, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 61, 2, 190, 196, 34, 178, 188, 103, 216, 87, 190, 37, 207, 108, 62, 179, 193, 191, 188, 186, 65, 136, 61, 135, 120, 24, 61, 251, 51, 190, 62, 22, 216, 134, 61, 205, 42, 161, 189, 209, 255, 35, 191, 8, 74, 100, 62, 230, 123, 11, 62, 119, 25, 55, 62, 100, 140, 153, 62, 222, 158, 92, 190, 246, 174, 181, 189, 211, 151, 4, 62, 36, 99, 64, 62, 123, 47, 190, 62, 205, 19, 134, 61, 147, 14, 44, 190, 31, 203, 78, 62, 55, 189, 108, 62, 141, 189, 174, 189, 110, 225, 163, 190, 221, 209, 94, 62, 121, 177, 81, 190, 221, 155, 133, 188, 0, 90, 106, 190, 81, 136, 93, 62, 52, 200, 13, 190, 18, 180, 194, 61, 254, 66, 155, 190, 240, 159, 46, 189, 195, 86, 28, 189, 202, 236, 59, 62, 130, 11, 99, 190, 133, 192, 229, 61, 96, 88, 90, 190, 131, 101, 136, 59, 241, 218, 74, 62, 202, 97, 203, 61, 85, 105, 40, 61, 240, 136, 202, 190, 188, 173, 17, 62, 174, 80, 41, 62, 62, 205, 42, 189, 97, 29, 67, 62, 221, 183, 193, 61, 5, 244, 191, 190, 232, 188, 94, 62, 142, 58, 25, 62, 124, 219, 232, 61, 223, 118, 61, 188, 137, 158, 185, 190, 3, 20, 37, 62, 50, 198, 149, 61, 122, 254, 139, 190, 202, 37, 32, 190, 115, 155, 42, 189, 144, 243, 33, 62, 187, 58, 2, 62, 59, 78, 11, 62, 61, 161, 100, 188, 66, 25, 127, 187, 34, 162, 1, 62, 131, 191, 42, 62, 210, 170, 41, 189, 177, 1, 105, 59, 96, 173, 211, 59, 144, 119, 184, 62, 159, 96, 214, 188, 78, 252, 255, 189, 24, 97, 237, 190, 198, 116, 44, 62, 192, 228, 43, 62, 49, 126, 172, 189, 83, 232, 136, 62, 116, 62, 140, 190, 23, 144, 181, 189, 138, 193, 97, 62, 161, 53, 12, 62, 170, 240, 136, 62, 17, 130, 249, 61, 240, 140, 233, 60, 183, 77, 7, 62, 234, 5, 238, 61, 105, 24, 26, 190, 242, 113, 175, 61, 231, 5, 141, 61, 51, 39, 98, 187, 148, 217, 213, 189, 183, 145, 251, 189, 174, 166, 138, 62, 71, 223, 28, 189, 232, 48, 197, 61, 2, 47, 187, 190, 62, 205, 181, 190, 14, 125, 146, 190, 51, 254, 225, 188, 205, 186, 148, 62, 68, 29, 191, 61, 36, 184, 6, 62, 158, 228, 77, 191, 178, 4, 129, 190, 222, 23, 62, 191, 35, 199, 158, 190, 97, 5, 185, 62, 219, 242, 164, 188, 214, 141, 63, 189, 252, 41, 133, 190, 83, 28, 44, 62, 201, 197, 60, 62, 126, 70, 192, 62, 236, 70, 156, 189, 83, 13, 205, 62, 73, 47, 164, 190, 54, 251, 174, 189, 163, 67, 55, 189, 172, 159, 105, 191, 188, 21, 25, 190, 198, 114, 70, 62, 46, 16, 187, 190, 27, 123, 58, 62, 65, 28, 169, 189, 198, 252, 65, 190, 212, 64, 91, 191, 19, 204, 75, 190, 183, 114, 91, 188, 240, 151, 172, 61, 30, 242, 62, 61, 53, 62, 240, 189, 230, 237, 119, 62, 120, 81, 136, 62, 217, 233, 206, 187, 203, 201, 64, 62, 152, 169, 147, 58, 105, 158, 131, 62, 148, 196, 104, 62, 119, 162, 138, 189, 93, 78, 25, 62, 59, 1, 240, 188, 187, 93, 224, 189, 138, 76, 107, 62, 49, 239, 141, 61, 109, 24, 217, 59, 137, 200, 136, 189, 179, 91, 220, 62, 6, 160, 134, 189, 105, 199, 17, 62, 180, 225, 90, 61, 214, 115, 9, 62, 161, 187, 167, 61, 144, 44, 181, 189, 240, 82, 4, 60, 215, 35, 149, 62, 174, 185, 40, 60, 178, 183, 93, 189, 29, 168, 183, 189, 163, 42, 242, 189, 96, 232, 8, 190, 190, 67, 55, 190, 235, 117, 87, 190, 56, 115, 41, 62, 174, 214, 252, 61, 141, 188, 133, 189, 57, 179, 45, 190, 57, 241, 41, 62, 121, 17, 113, 189, 32, 110, 138, 62, 40, 100, 58, 189, 25, 104, 146, 62, 3, 126, 144, 190, 136, 190, 158, 189, 250, 177, 144, 61, 157, 125, 31, 190, 181, 97, 239, 189, 23, 212, 94, 62, 138, 14, 134, 190, 115, 151, 158, 190, 83, 95, 15, 189, 163, 245, 209, 189, 4, 30, 146, 62, 181, 152, 22, 62, 148, 188, 54, 62, 254, 208, 199, 188, 9, 13, 177, 61, 249, 222, 30, 189, 90, 178, 30, 62, 0, 238, 58, 190, 186, 2, 158, 62, 66, 145, 75, 189, 198, 43, 27, 62, 142, 128, 63, 190, 56, 239, 148, 188, 169, 206, 243, 189, 117, 13, 60, 190, 217, 145, 210, 189, 191, 115, 208, 59, 106, 207, 72, 61, 65, 43, 39, 190, 33, 203, 236, 189, 169, 136, 212, 189, 37, 57, 60, 190, 243, 182, 49, 190, 180, 227, 223, 188, 77, 109, 186, 188, 39, 44, 210, 59, 184, 32, 241, 61, 63, 120, 152, 60, 35, 237, 23, 189, 160, 114, 164, 189, 228, 84, 16, 189, 227, 88, 129, 189, 170, 193, 216, 61, 225, 11, 191, 189, 54, 121, 78, 61, 179, 60, 219, 61, 170, 79, 2, 62, 26, 97, 236, 61, 16, 192, 237, 61, 126, 9, 245, 189, 201, 226, 213, 61, 240, 3, 114, 188, 213, 65, 179, 61, 138, 245, 54, 62, 12, 237, 199, 61, 102, 191, 32, 62, 11, 19, 19, 190, 173, 1, 40, 190, 22, 23, 19, 190, 167, 198, 156, 59, 198, 48, 55, 61, 180, 223, 152, 62, 9, 114, 7, 190, 27, 92, 38, 190, 62, 179, 1, 62, 20, 186, 230, 61, 28, 67, 170, 61, 131, 206, 73, 62, 216, 240, 215, 189, 94, 35, 21, 191, 234, 46, 110, 61, 239, 61, 39, 190, 137, 112, 200, 62, 133, 59, 14, 190, 20, 99, 72, 189, 151, 111, 143, 62, 175, 218, 81, 61, 253, 246, 226, 190, 212, 4, 234, 188, 133, 35, 54, 62, 230, 158, 4, 189, 230, 185, 169, 62, 114, 197, 226, 62, 79, 163, 82, 61, 221, 136, 218, 189, 82, 146, 138, 62, 89, 106, 122, 190, 109, 196, 208, 62, 66, 78, 197, 189, 205, 173, 199, 189, 1, 49, 62, 190, 76, 242, 92, 190, 233, 183, 231, 189, 155, 239, 112, 189, 129, 45, 13, 188, 167, 164, 203, 190, 163, 208, 51, 60, 234, 210, 30, 190, 131, 71, 30, 190, 84, 200, 51, 189, 155, 64, 239, 60, 164, 205, 5, 191, 207, 176, 144, 190, 86, 17, 148, 62, 228, 226, 148, 62, 196, 68, 254, 189, 51, 130, 157, 189, 122, 12, 253, 60, 9, 193, 50, 58, 197, 241, 149, 190, 112, 40, 30, 62, 11, 51, 56, 61, 91, 152, 178, 189, 181, 2, 40, 190, 152, 184, 162, 189, 59, 230, 130, 188, 90, 216, 66, 62, 162, 239, 188, 61, 51, 227, 143, 61, 94, 140, 26, 62, 156, 159, 175, 189, 27, 239, 190, 60, 233, 118, 168, 62, 37, 187, 248, 60, 57, 49, 87, 190, 53, 47, 14, 191, 251, 52, 136, 61, 112, 69, 127, 62, 219, 170, 145, 61, 2, 204, 23, 62, 208, 121, 164, 190, 43, 136, 143, 61, 192, 112, 86, 61, 92, 166, 70, 62, 164, 203, 62, 62, 38, 150, 142, 62, 12, 136, 89, 62, 111, 203, 218, 61, 148, 4, 148, 61, 38, 177, 227, 190, 155, 114, 162, 61, 90, 209, 27, 62, 227, 114, 212, 189, 243, 194, 208, 189, 124, 96, 60, 190, 164, 92, 154, 62, 68, 162, 103, 190, 222, 171, 249, 60, 125, 18, 209, 189, 87, 96, 207, 61, 69, 4, 167, 189, 164, 5, 13, 190, 21, 66, 166, 61, 9, 19, 218, 60, 244, 2, 112, 61, 160, 185, 0, 60, 65, 103, 9, 190, 224, 60, 3, 189, 6, 4, 8, 62, 67, 141, 7, 190, 54, 83, 129, 189, 191, 7, 3, 62, 120, 202, 138, 189, 217, 28, 71, 190, 95, 192, 72, 189, 188, 221, 248, 189, 62, 100, 72, 61, 124, 141, 30, 190, 86, 97, 134, 61, 243, 31, 159, 61, 174, 12, 181, 189, 62, 90, 150, 189, 42, 12, 37, 190, 135, 130, 182, 61, 219, 206, 62, 61, 97, 169, 14, 61, 135, 116, 146, 189, 136, 68, 188, 61, 130, 252, 139, 188, 28, 214, 228, 189, 149, 64, 162, 62, 16, 136, 124, 188, 104, 90, 6, 62, 88, 200, 235, 189, 184, 107, 228, 59, 117, 56, 42, 189, 28, 228, 37, 62, 198, 90, 83, 61, 22, 175, 249, 189, 19, 23, 1, 190, 209, 101, 236, 61, 176, 98, 2, 62, 127, 162, 233, 189, 158, 74, 145, 62, 33, 217, 98, 61, 115, 24, 185, 189, 9, 103, 12, 61, 240, 196, 85, 62, 2, 49, 255, 61, 231, 249, 89, 61, 63, 105, 36, 190, 221, 65, 80, 190, 138, 202, 32, 61, 81, 37, 204, 60, 201, 163, 171, 190, 57, 46, 1, 61, 244, 255, 57, 189, 139, 7, 229, 60, 199, 152, 114, 190, 61, 43, 206, 61, 24, 5, 111, 190, 46, 189, 198, 189, 89, 34, 74, 190, 53, 184, 18, 62, 16, 231, 218, 190, 174, 17, 68, 60, 234, 237, 154, 189, 198, 175, 227, 187, 59, 23, 128, 190, 16, 199, 153, 190, 87, 215, 180, 189, 28, 73, 131, 62, 28, 196, 110, 190, 24, 254, 49, 189, 167, 153, 242, 189, 49, 248, 116, 190, 116, 230, 169, 62, 89, 230, 182, 189, 74, 194, 98, 190, 149, 167, 215, 189, 90, 20, 213, 190, 52, 219, 143, 189, 74, 232, 162, 190, 177, 185, 14, 187, 161, 246, 12, 62, 24, 254, 206, 62, 235, 109, 252, 188, 140, 60, 208, 190, 131, 226, 174, 61, 208, 250, 11, 62, 123, 222, 235, 61, 81, 67, 178, 190, 7, 249, 178, 62, 143, 44, 202, 189, 119, 121, 57, 62, 163, 64, 3, 62, 231, 182, 102, 60, 223, 198, 103, 190, 7, 209, 129, 62, 31, 184, 70, 61, 148, 104, 130, 189, 159, 101, 33, 61, 63, 202, 12, 62, 215, 49, 16, 62, 160, 176, 163, 60, 119, 71, 123, 189, 48, 240, 216, 58, 155, 161, 8, 62, 48, 104, 76, 190, 229, 36, 129, 61, 70, 145, 182, 61, 155, 208, 96, 61, 97, 153, 40, 62, 168, 237, 216, 62, 171, 102, 104, 60, 217, 204, 124, 189, 114, 214, 5, 62, 42, 22, 38, 61, 26, 129, 109, 61, 228, 163, 63, 190, 133, 94, 37, 61, 98, 75, 134, 62, 82, 182, 212, 61, 91, 162, 153, 60, 179, 227, 45, 62, 37, 123, 139, 188, 244, 3, 15, 190, 56, 155, 171, 189, 128, 121, 187, 189, 89, 109, 21, 62, 130, 188, 32, 189, 73, 219, 43, 190, 195, 252, 67, 189, 146, 46, 20, 62, 119, 65, 237, 60, 40, 239, 164, 189, 109, 130, 12, 190, 214, 29, 14, 61, 152, 104, 8, 62, 41, 252, 43, 190, 90, 182, 12, 189, 77, 153, 229, 188, 114, 216, 245, 189, 135, 1, 42, 190, 211, 125, 162, 189, 118, 200, 224, 61, 191, 143, 25, 190, 185, 178, 130, 61, 220, 253, 206, 189, 20, 136, 13, 62, 117, 23, 254, 61, 201, 145, 51, 189, 65, 44, 140, 188, 68, 76, 20, 190, 156, 199, 40, 190, 93, 230, 215, 189, 151, 167, 10, 190, 86, 231, 120, 190, 3, 135, 34, 60, 52, 253, 199, 61, 54, 140, 44, 62, 52, 211, 173, 190, 71, 198, 140, 189, 4, 163, 88, 61, 87, 83, 164, 60, 94, 25, 185, 189, 163, 83, 77, 62, 105, 18, 71, 62, 31, 236, 157, 61, 29, 244, 193, 189, 99, 0, 224, 61, 143, 7, 65, 61, 106, 40, 19, 189, 225, 196, 72, 62, 73, 175, 22, 62, 239, 34, 119, 62, 193, 57, 215, 61, 104, 26, 155, 62, 197, 147, 69, 61, 65, 161, 61, 62, 87, 68, 151, 60, 58, 147, 186, 60, 16, 13, 46, 61, 28, 216, 157, 61, 236, 133, 150, 189, 160, 199, 238, 60, 215, 171, 211, 189, 104, 254, 200, 61, 95, 157, 141, 61, 156, 37, 155, 61, 196, 198, 78, 189, 24, 195, 54, 62, 5, 83, 155, 189, 251, 237, 56, 62, 103, 134, 113, 190, 20, 247, 129, 189, 211, 125, 172, 188, 132, 52, 178, 190, 60, 124, 37, 190, 123, 180, 47, 61, 114, 38, 36, 190, 244, 155, 235, 190, 34, 238, 11, 62, 46, 13, 54, 190, 27, 251, 139, 190, 124, 128, 177, 189, 164, 30, 240, 189, 39, 80, 8, 191, 42, 52, 51, 190, 143, 131, 253, 61, 116, 133, 111, 62, 18, 22, 59, 190, 125, 244, 23, 190, 29, 145, 144, 190, 194, 162, 13, 61, 248, 1, 249, 190, 194, 186, 41, 62, 91, 29, 21, 61, 27, 114, 166, 61, 153, 34, 33, 190, 158, 38, 242, 189, 207, 142, 16, 61, 99, 151, 150, 62, 252, 117, 58, 190, 243, 242, 187, 61, 23, 219, 232, 189, 11, 97, 156, 61, 224, 136, 153, 189, 172, 199, 7, 62, 56, 99, 61, 62, 251, 234, 8, 61, 152, 210, 134, 60, 209, 75, 140, 62, 78, 4, 233, 189, 115, 21, 246, 189, 188, 185, 176, 62, 224, 181, 145, 62, 84, 165, 154, 61, 7, 56, 81, 62, 206, 155, 142, 60, 135, 18, 177, 62, 156, 70, 42, 190, 132, 164, 93, 190, 197, 2, 51, 190, 154, 155, 221, 61, 51, 29, 83, 61, 113, 217, 33, 62, 92, 91, 130, 190, 146, 61, 234, 188, 248, 3, 39, 190, 16, 244, 183, 59, 164, 179, 186, 62, 193, 176, 131, 62, 131, 124, 207, 61, 181, 202, 34, 62, 241, 52, 202, 189, 185, 13, 69, 61, 211, 59, 2, 61, 244, 210, 45, 62, 25, 180, 35, 190, 192, 3, 75, 62, 31, 192, 131, 62, 127, 242, 171, 61, 248, 151, 139, 190, 70, 3, 78, 62, 65, 186, 92, 62, 95, 133, 237, 60, 149, 48, 99, 62, 24, 89, 183, 62, 134, 88, 126, 190, 176, 128, 182, 62, 23, 59, 20, 62, 60, 156, 142, 62, 178, 109, 9, 62, 92, 142, 158, 61, 160, 200, 194, 189, 135, 165, 8, 188, 235, 104, 143, 190, 69, 180, 131, 62, 43, 8, 31, 189, 160, 63, 228, 61, 249, 137, 97, 60, 240, 3, 114, 62, 216, 218, 94, 62, 8, 226, 207, 190, 87, 200, 144, 190, 150, 25, 33, 62, 113, 62, 79, 62, 55, 188, 188, 61, 205, 47, 222, 189, 223, 235, 199, 61, 7, 158, 216, 61, 202, 156, 197, 62, 65, 16, 59, 62, 228, 35, 79, 189, 225, 98, 108, 190, 160, 176, 137, 62, 110, 0, 29, 62, 138, 251, 234, 186, 136, 214, 138, 61, 250, 115, 97, 190, 203, 19, 51, 59, 22, 125, 239, 62, 56, 3, 150, 189, 254, 58, 165, 62, 112, 38, 78, 62, 34, 43, 156, 62, 176, 234, 155, 189, 194, 165, 6, 62, 241, 56, 72, 61, 176, 19, 97, 61, 43, 51, 3, 61, 185, 18, 2, 189, 197, 225, 143, 62, 255, 241, 192, 189, 166, 201, 163, 62, 88, 86, 36, 189, 156, 105, 82, 61, 238, 254, 45, 190, 152, 17, 231, 61, 100, 157, 39, 190, 88, 22, 147, 62, 34, 7, 88, 61, 43, 185, 42, 189, 25, 119, 233, 61, 195, 124, 197, 189, 57, 173, 14, 190, 70, 95, 70, 62, 40, 68, 190, 190, 86, 216, 236, 61, 71, 138, 240, 189, 62, 15, 104, 190, 206, 13, 130, 61, 31, 27, 96, 60, 75, 209, 225, 61, 127, 219, 26, 190, 236, 27, 251, 60, 83, 140, 224, 59, 215, 52, 86, 60, 238, 112, 24, 62, 179, 164, 127, 190, 178, 16, 255, 61, 118, 205, 21, 62, 32, 130, 196, 62, 36, 29, 87, 61, 151, 12, 37, 62, 183, 63, 150, 187, 19, 146, 76, 62, 153, 68, 106, 189, 250, 127, 154, 190, 117, 24, 199, 190, 79, 230, 196, 61, 15, 114, 214, 188, 253, 95, 233, 189, 197, 38, 137, 189, 192, 207, 46, 61, 182, 197, 44, 191, 11, 198, 239, 189, 14, 149, 58, 62, 230, 169, 174, 62, 127, 5, 76, 189, 14, 214, 2, 190, 172, 162, 80, 190, 49, 201, 27, 190, 194, 157, 38, 62, 193, 26, 216, 189, 99, 12, 242, 190, 34, 214, 124, 61, 86, 74, 24, 191, 128, 226, 53, 62, 175, 222, 52, 189, 192, 138, 9, 62, 165, 113, 252, 61, 218, 21, 146, 62, 174, 23, 206, 189, 175, 234, 79, 190, 123, 9, 109, 60, 133, 129, 1, 62, 107, 33, 154, 61, 95, 98, 132, 190, 10, 80, 128, 62, 73, 143, 209, 61, 33, 206, 27, 189, 192, 117, 21, 190, 39, 88, 185, 60, 216, 56, 24, 188, 147, 92, 51, 189, 136, 116, 8, 61, 203, 30, 160, 60, 115, 216, 47, 59, 126, 250, 65, 61, 222, 117, 187, 189, 227, 88, 233, 61, 151, 173, 195, 189, 199, 153, 118, 61, 124, 143, 20, 190, 5, 173, 170, 61, 35, 155, 72, 186, 49, 93, 35, 190, 169, 5, 44, 189, 4, 78, 180, 61, 62, 226, 93, 188, 171, 39, 146, 61, 13, 106, 11, 190, 167, 161, 240, 189, 219, 65, 31, 190, 100, 42, 251, 189, 76, 24, 37, 189, 219, 203, 203, 61, 122, 17, 34, 61, 86, 58, 246, 61, 49, 87, 67, 61, 25, 33, 8, 190, 216, 145, 26, 190, 124, 50, 204, 189, 52, 249, 31, 62, 141, 14, 110, 60, 1, 151, 189, 189, 181, 163, 1, 62, 46, 255, 174, 58, 228, 85, 148, 190, 105, 167, 113, 62, 219, 206, 253, 188, 234, 167, 5, 63, 12, 48, 52, 190, 218, 15, 27, 190, 240, 6, 26, 58, 195, 254, 96, 189, 135, 191, 247, 61, 107, 95, 43, 190, 89, 155, 169, 60, 240, 146, 175, 189, 220, 7, 4, 190, 211, 219, 177, 60, 168, 44, 56, 189, 140, 95, 7, 189, 55, 135, 80, 61, 206, 69, 136, 61, 242, 103, 32, 62, 193, 26, 188, 190, 218, 97, 92, 62, 231, 178, 44, 62, 193, 142, 92, 62, 74, 206, 106, 190, 72, 96, 136, 61, 134, 254, 18, 190, 209, 162, 55, 62, 15, 206, 149, 190, 168, 67, 4, 62, 123, 189, 32, 190, 140, 191, 71, 62, 2, 193, 147, 61, 202, 172, 87, 62, 43, 42, 25, 61, 86, 132, 207, 60, 178, 224, 85, 191, 154, 108, 45, 62, 48, 177, 132, 62, 63, 77, 33, 188, 223, 247, 6, 62, 99, 82, 112, 190, 109, 231, 251, 187, 5, 99, 152, 62, 109, 210, 114, 62, 48, 84, 196, 62, 91, 7, 121, 61, 123, 52, 115, 190, 132, 11, 10, 188, 97, 145, 203, 188, 85, 101, 204, 190, 46, 45, 135, 190, 173, 192, 98, 61, 95, 58, 104, 61, 4, 198, 63, 59, 68, 45, 135, 190, 22, 54, 124, 62, 4, 122, 79, 190, 68, 224, 147, 190, 60, 202, 221, 189, 109, 29, 250, 61, 209, 76, 162, 190, 162, 23, 166, 61, 148, 84, 49, 189, 209, 223, 193, 61, 211, 125, 130, 191, 83, 160, 22, 189, 210, 113, 162, 62, 219, 119, 51, 63, 105, 105, 232, 190, 197, 93, 164, 60, 61, 24, 20, 190, 177, 214, 124, 190, 160, 64, 45, 62, 193, 131, 138, 61, 123, 74, 36, 191, 76, 245, 31, 190, 230, 171, 146, 190, 47, 81, 208, 62, 218, 103, 30, 188, 8, 155, 56, 62, 231, 43, 214, 189, 146, 182, 133, 62, 6, 208, 205, 62, 166, 78, 173, 188, 192, 196, 14, 190, 100, 84, 199, 61, 53, 208, 62, 62, 97, 130, 167, 190, 58, 145, 180, 62, 29, 39, 1, 62, 65, 139, 225, 189, 243, 123, 172, 189, 101, 254, 3, 62, 204, 89, 26, 190, 252, 109, 38, 190, 244, 216, 143, 189, 25, 250, 197, 60, 95, 232, 102, 189, 46, 244, 60, 61, 58, 18, 96, 188, 64, 92, 62, 189, 28, 83, 206, 189, 166, 19, 56, 189, 214, 236, 1, 190, 182, 83, 37, 62, 44, 12, 125, 59, 184, 112, 34, 190, 208, 234, 51, 186, 242, 73, 7, 62, 141, 44, 37, 190, 209, 87, 2, 61, 31, 9, 191, 189, 206, 244, 176, 189, 170, 56, 31, 190, 176, 183, 28, 62, 194, 249, 239, 61, 74, 165, 159, 61, 148, 229, 4, 190, 109, 222, 51, 190, 174, 142, 3, 189, 248, 91, 120, 61, 158, 100, 32, 188, 58, 49, 171, 190, 213, 145, 179, 60, 3, 82, 185, 190, 204, 45, 108, 188, 153, 225, 130, 189, 171, 115, 2, 189, 0, 9, 184, 189, 242, 129, 27, 190, 75, 118, 113, 190, 97, 32, 198, 62, 15, 115, 223, 189, 52, 53, 29, 190, 134, 125, 49, 189, 22, 78, 195, 190, 152, 254, 158, 62, 143, 191, 26, 188, 219, 234, 51, 190, 3, 112, 140, 61, 100, 225, 157, 190, 78, 216, 95, 190, 62, 65, 175, 190, 11, 51, 145, 189, 139, 171, 178, 189, 39, 240, 48, 62, 231, 148, 224, 61, 17, 65, 141, 189, 244, 237, 134, 189, 18, 113, 146, 189, 162, 64, 169, 60, 88, 97, 14, 191, 51, 244, 12, 63, 248, 240, 29, 190, 163, 2, 45, 190, 78, 156, 51, 62, 229, 71, 25, 62, 170, 42, 244, 188, 28, 159, 142, 61, 187, 91, 48, 189, 254, 164, 106, 60, 171, 174, 96, 189, 160, 211, 123, 189, 228, 228, 232, 62, 0, 29, 211, 59, 119, 255, 2, 60, 150, 170, 61, 61, 229, 149, 89, 190, 11, 170, 232, 61, 139, 140, 238, 61, 30, 213, 4, 62, 68, 188, 38, 188, 234, 157, 232, 189, 31, 212, 37, 61, 93, 233, 67, 190, 8, 192, 174, 61, 87, 229, 195, 60, 18, 204, 55, 60, 239, 80, 40, 62, 180, 174, 155, 190, 213, 197, 19, 62, 63, 155, 76, 189, 231, 130, 66, 62, 114, 69, 189, 190, 113, 197, 29, 62, 79, 120, 41, 190, 219, 237, 76, 190, 222, 107, 52, 62, 37, 169, 161, 190, 168, 251, 195, 189, 204, 87, 4, 189, 14, 48, 10, 62, 214, 245, 177, 191, 196, 104, 8, 61, 208, 156, 26, 189, 194, 212, 233, 62, 2, 15, 220, 190, 77, 127, 61, 189, 45, 231, 229, 190, 223, 27, 37, 190, 240, 250, 32, 190, 65, 119, 112, 189, 201, 126, 141, 191, 212, 66, 21, 62, 41, 101, 202, 190, 114, 189, 124, 62, 53, 78, 210, 61, 208, 42, 51, 62, 19, 98, 130, 189, 220, 245, 136, 62, 33, 208, 189, 60, 157, 62, 32, 190, 21, 101, 46, 190, 248, 65, 88, 62, 144, 130, 160, 61, 225, 245, 187, 190, 19, 192, 81, 62, 144, 246, 55, 190, 16, 99, 23, 190, 221, 38, 214, 60, 173, 72, 97, 189, 193, 99, 7, 62, 248, 78, 190, 189, 21, 212, 27, 190, 167, 238, 73, 189, 130, 227, 83, 189, 183, 66, 73, 189, 49, 134, 148, 61, 247, 241, 48, 187, 196, 35, 253, 189, 176, 22, 100, 61, 234, 65, 66, 61, 187, 231, 74, 190, 192, 164, 157, 188, 42, 164, 22, 190, 101, 180, 219, 188, 100, 153, 20, 190, 218, 153, 34, 190, 148, 223, 92, 61, 89, 134, 98, 61, 102, 234, 124, 189, 125, 135, 209, 189, 179, 77, 23, 62, 179, 120, 237, 189, 68, 21, 106, 189, 18, 146, 243, 189, 229, 247, 59, 190, 41, 27, 23, 190, 120, 74, 116, 61, 46, 236, 28, 190, 46, 98, 140, 190, 193, 223, 111, 189, 229, 6, 159, 187, 72, 62, 78, 190, 57, 93, 170, 61, 229, 166, 216, 188, 50, 206, 138, 190, 185, 56, 62, 61, 95, 226, 46, 62, 197, 200, 11, 63, 146, 206, 99, 188, 125, 54, 235, 189, 188, 244, 55, 189, 185, 179, 67, 189, 126, 200, 18, 62, 143, 85, 12, 190, 225, 158, 159, 188, 160, 205, 155, 189, 222, 228, 36, 190, 152, 45, 7, 62, 252, 5, 10, 190, 192, 237, 206, 61, 59, 218, 120, 189, 210, 64, 23, 62, 38, 196, 35, 62, 74, 80, 227, 190, 47, 240, 61, 62, 145, 92, 231, 187, 175, 112, 174, 61, 250, 1, 133, 190, 46, 181, 162, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {28, 165, 192, 188, 185, 141, 22, 61, 120, 43, 225, 61, 176, 100, 95, 62, 143, 60, 221, 188, 12, 190, 18, 189, 45, 56, 93, 187, 69, 187, 250, 189, 88, 110, 175, 189, 229, 203, 39, 62, 95, 247, 149, 61, 221, 237, 42, 190, 227, 224, 30, 62, 180, 41, 163, 62, 156, 92, 38, 190, 215, 109, 91, 62, 35, 214, 233, 61, 226, 74, 79, 190, 32, 211, 68, 188, 109, 141, 94, 61, 251, 231, 63, 61, 108, 235, 140, 60, 15, 207, 170, 61, 25, 137, 233, 61, 171, 4, 18, 62, 113, 38, 5, 62, 245, 245, 224, 59, 144, 25, 253, 61, 28, 170, 181, 61, 79, 11, 43, 62, 107, 193, 136, 189, 40, 120, 138, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 121, 178, 190, 59, 120, 12, 190, 141, 116, 129, 190, 236, 46, 74, 191, 97, 19, 199, 187, 152, 177, 158, 62, 83, 186, 12, 190, 178, 67, 144, 190, 167, 130, 129, 190, 55, 110, 170, 190, 36, 27, 184, 60, 208, 227, 10, 62, 233, 232, 185, 62, 134, 207, 53, 58, 116, 201, 188, 61, 150, 163, 173, 188, 191, 155, 195, 190, 161, 244, 118, 190, 182, 123, 251, 62, 238, 54, 55, 190, 176, 166, 193, 189, 127, 8, 224, 62, 246, 59, 167, 189, 61, 97, 68, 62, 83, 32, 215, 190, 131, 145, 73, 63, 241, 124, 176, 59, 247, 33, 153, 62, 176, 38, 3, 62, 181, 17, 146, 63, 102, 177, 19, 190, 96, 9, 105, 62, 193, 28, 44, 187, 42, 230, 45, 190, 104, 226, 101, 189, 143, 33, 62, 62, 168, 26, 130, 190, 240, 37, 59, 189, 174, 126, 158, 189, 161, 109, 99, 62, 148, 73, 142, 62, 164, 20, 191, 189, 222, 190, 16, 61, 151, 56, 218, 62, 149, 17, 17, 62, 25, 40, 139, 190, 51, 46, 208, 189, 6, 94, 68, 190, 95, 66, 38, 62, 35, 9, 128, 62, 221, 97, 26, 61, 190, 208, 155, 190, 248, 29, 102, 62, 247, 212, 131, 189, 135, 139, 68, 61, 117, 41, 84, 190, 135, 88, 25, 61, 220, 32, 24, 62, 96, 61, 238, 187, 204, 211, 78, 62, 47, 62, 49, 190, 21, 104, 142, 62, 55, 154, 206, 189, 115, 15, 125, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 166, 118, 190, 78, 220, 89, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 184, 175, 190, 181, 226, 248, 62, 198, 214, 192, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {162, 44, 232, 191, 71, 253, 47, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0078/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}