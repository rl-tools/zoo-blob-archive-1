// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 147, 35, 191, 123, 23, 159, 191, 219, 97, 166, 190, 2, 124, 43, 190, 65, 111, 134, 63, 208, 249, 164, 62, 231, 62, 68, 63, 10, 224, 163, 191, 107, 9, 156, 190, 95, 137, 175, 62, 7, 95, 60, 189, 117, 131, 13, 63, 146, 151, 102, 63, 37, 251, 118, 191, 145, 159, 144, 190, 237, 30, 168, 190, 8, 246, 206, 62, 63, 32, 40, 189, 19, 170, 139, 190, 208, 244, 167, 62, 146, 142, 79, 61, 49, 200, 246, 189, 4, 8, 38, 63, 234, 184, 89, 191, 112, 15, 35, 62, 162, 48, 108, 62, 150, 60, 58, 63, 158, 70, 28, 63, 222, 150, 174, 61, 32, 45, 61, 62, 116, 61, 65, 62, 77, 169, 150, 191, 61, 114, 157, 62, 159, 193, 34, 63, 175, 75, 186, 63, 239, 138, 177, 62, 183, 190, 101, 190, 17, 64, 91, 63, 24, 164, 172, 189, 93, 130, 177, 62, 158, 100, 209, 191, 16, 183, 224, 190, 16, 60, 0, 63, 75, 114, 185, 63, 3, 78, 144, 62, 253, 255, 51, 189, 129, 21, 50, 63, 68, 76, 251, 190, 60, 206, 26, 191, 161, 68, 181, 191, 202, 169, 60, 190, 87, 209, 172, 62, 34, 69, 22, 61, 54, 185, 24, 191, 221, 14, 6, 191, 210, 6, 133, 63, 160, 180, 50, 190, 93, 253, 230, 62, 12, 66, 112, 191, 37, 249, 15, 63, 50, 214, 179, 63, 92, 131, 185, 190, 20, 244, 81, 62, 210, 193, 226, 62, 144, 122, 137, 191, 183, 106, 126, 190, 13, 202, 39, 191, 119, 106, 51, 190, 132, 43, 43, 189, 22, 32, 23, 61, 48, 88, 182, 63, 227, 203, 11, 62, 110, 38, 68, 190, 245, 47, 80, 190, 255, 112, 56, 63, 190, 92, 211, 62, 144, 75, 208, 62, 219, 165, 12, 191, 243, 160, 155, 191, 83, 219, 175, 61, 35, 139, 225, 189, 57, 103, 148, 190, 216, 115, 103, 191, 45, 50, 206, 190, 91, 100, 132, 190, 126, 35, 188, 188, 116, 70, 43, 60, 121, 227, 57, 62, 5, 115, 13, 190, 166, 47, 119, 190, 146, 170, 213, 61, 232, 131, 109, 191, 80, 202, 177, 62, 8, 130, 9, 191, 228, 146, 63, 190, 25, 67, 117, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 229, 236, 188, 200, 151, 76, 190, 234, 88, 219, 61, 32, 176, 65, 62, 207, 28, 200, 190, 110, 11, 213, 62, 34, 91, 204, 62, 240, 52, 224, 187, 148, 232, 93, 62, 190, 182, 22, 63, 32, 67, 222, 188, 119, 168, 12, 61, 227, 25, 42, 62, 125, 187, 154, 61, 69, 201, 95, 62, 243, 106, 249, 60, 106, 187, 128, 62, 246, 178, 182, 62, 44, 84, 12, 63, 100, 178, 228, 189, 89, 79, 166, 189, 50, 245, 151, 61, 162, 120, 50, 63, 172, 246, 157, 62, 245, 60, 142, 190, 186, 142, 164, 61, 68, 149, 165, 190, 169, 128, 169, 190, 27, 72, 194, 62, 40, 133, 117, 62, 62, 200, 34, 190, 147, 162, 14, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 245, 133, 61, 190, 110, 48, 61, 173, 126, 155, 190, 242, 151, 140, 62, 230, 100, 35, 190, 178, 71, 22, 62, 133, 247, 200, 60, 242, 7, 184, 62, 32, 61, 243, 61, 234, 108, 36, 190, 75, 64, 39, 191, 215, 5, 189, 62, 127, 161, 21, 62, 7, 98, 207, 61, 36, 63, 216, 62, 74, 131, 58, 190, 113, 156, 84, 190, 80, 86, 183, 61, 86, 212, 141, 62, 248, 226, 164, 62, 79, 171, 146, 62, 182, 49, 204, 190, 17, 179, 75, 62, 9, 248, 249, 61, 184, 234, 189, 188, 83, 180, 142, 190, 23, 53, 170, 62, 131, 56, 21, 190, 125, 211, 160, 187, 55, 10, 88, 190, 82, 203, 215, 61, 120, 31, 161, 189, 241, 54, 142, 62, 76, 119, 95, 190, 86, 150, 71, 62, 92, 186, 74, 190, 70, 89, 37, 190, 235, 20, 156, 190, 6, 246, 192, 61, 142, 211, 255, 190, 97, 108, 27, 190, 197, 87, 111, 62, 175, 19, 0, 62, 29, 31, 244, 61, 245, 77, 128, 191, 108, 213, 11, 62, 164, 118, 147, 62, 187, 48, 196, 189, 101, 52, 249, 60, 211, 199, 15, 62, 156, 2, 159, 191, 59, 138, 52, 61, 24, 43, 167, 62, 11, 92, 168, 62, 165, 64, 189, 190, 108, 114, 180, 190, 184, 92, 213, 189, 227, 200, 75, 61, 99, 133, 138, 191, 155, 99, 250, 189, 238, 53, 250, 189, 253, 77, 166, 62, 21, 157, 35, 189, 52, 151, 174, 61, 76, 87, 121, 62, 198, 112, 89, 61, 50, 77, 127, 186, 128, 168, 90, 62, 189, 178, 60, 190, 186, 49, 46, 61, 42, 253, 64, 189, 233, 98, 189, 62, 47, 101, 240, 60, 248, 142, 94, 190, 53, 236, 236, 190, 100, 227, 156, 62, 139, 4, 26, 62, 147, 161, 3, 190, 107, 4, 197, 62, 41, 39, 104, 190, 34, 167, 105, 190, 239, 247, 51, 62, 90, 63, 81, 62, 62, 180, 123, 62, 7, 51, 115, 62, 47, 78, 122, 190, 58, 194, 140, 61, 65, 33, 142, 60, 209, 119, 208, 189, 164, 73, 2, 62, 169, 21, 80, 62, 75, 177, 234, 61, 246, 161, 190, 189, 163, 138, 244, 189, 242, 182, 73, 62, 169, 58, 57, 60, 227, 198, 142, 61, 151, 76, 195, 190, 38, 25, 206, 190, 187, 207, 157, 61, 105, 23, 141, 190, 22, 247, 143, 62, 176, 233, 11, 61, 176, 182, 250, 61, 217, 113, 143, 191, 252, 151, 233, 190, 160, 144, 238, 190, 45, 99, 14, 62, 35, 142, 171, 62, 109, 163, 114, 189, 238, 33, 19, 63, 230, 205, 101, 190, 28, 163, 142, 62, 122, 20, 56, 62, 222, 92, 185, 62, 106, 214, 76, 191, 171, 56, 80, 63, 77, 62, 4, 191, 235, 87, 59, 60, 37, 248, 170, 190, 34, 183, 132, 191, 5, 228, 206, 189, 198, 212, 129, 62, 179, 226, 220, 190, 237, 92, 41, 62, 0, 153, 89, 189, 138, 154, 216, 62, 132, 1, 73, 191, 153, 202, 170, 190, 105, 128, 128, 189, 252, 182, 140, 189, 251, 244, 222, 188, 186, 158, 244, 190, 29, 47, 135, 62, 195, 250, 126, 62, 54, 87, 42, 60, 159, 70, 10, 62, 137, 190, 160, 188, 48, 40, 140, 62, 143, 125, 130, 62, 239, 88, 67, 189, 157, 136, 23, 190, 114, 151, 142, 60, 250, 124, 179, 188, 93, 59, 32, 190, 138, 111, 190, 188, 107, 116, 84, 61, 160, 219, 251, 189, 183, 243, 144, 62, 67, 144, 152, 190, 48, 176, 193, 61, 123, 17, 208, 61, 163, 243, 20, 61, 188, 85, 155, 61, 226, 215, 152, 189, 93, 46, 159, 189, 14, 132, 147, 62, 234, 50, 12, 189, 50, 112, 159, 189, 160, 169, 71, 190, 128, 26, 12, 191, 32, 91, 94, 61, 218, 109, 45, 191, 185, 17, 229, 189, 23, 15, 171, 190, 98, 60, 137, 61, 139, 109, 97, 59, 250, 140, 145, 190, 164, 31, 118, 62, 246, 23, 71, 61, 168, 182, 22, 62, 225, 65, 168, 62, 148, 1, 196, 62, 161, 177, 135, 191, 165, 51, 160, 62, 209, 249, 150, 60, 45, 92, 8, 191, 244, 166, 114, 190, 216, 39, 13, 62, 138, 248, 106, 190, 249, 50, 36, 191, 32, 196, 83, 191, 208, 209, 152, 190, 193, 9, 37, 63, 169, 179, 72, 62, 219, 50, 146, 189, 109, 20, 25, 191, 254, 227, 234, 190, 3, 9, 22, 190, 145, 73, 99, 61, 180, 162, 133, 190, 168, 40, 184, 62, 146, 227, 165, 189, 198, 43, 27, 62, 4, 6, 86, 190, 56, 239, 148, 188, 107, 221, 9, 190, 39, 122, 96, 190, 104, 173, 240, 189, 47, 197, 26, 189, 106, 207, 72, 61, 51, 78, 39, 190, 33, 203, 236, 189, 73, 222, 219, 189, 81, 94, 99, 190, 242, 170, 67, 190, 194, 131, 69, 189, 216, 207, 136, 189, 37, 237, 148, 59, 79, 217, 147, 61, 196, 67, 130, 188, 35, 237, 23, 189, 88, 237, 168, 189, 97, 169, 39, 189, 254, 34, 180, 189, 1, 106, 179, 61, 225, 11, 191, 189, 184, 186, 129, 59, 72, 150, 195, 61, 158, 4, 178, 61, 54, 52, 226, 61, 120, 81, 139, 61, 126, 9, 245, 189, 201, 226, 213, 61, 243, 90, 135, 62, 67, 35, 38, 62, 195, 179, 15, 191, 79, 136, 220, 188, 95, 171, 43, 191, 177, 47, 190, 189, 189, 43, 181, 190, 191, 226, 201, 190, 35, 108, 170, 189, 136, 40, 23, 190, 159, 117, 56, 62, 13, 99, 6, 190, 183, 185, 218, 62, 138, 242, 212, 62, 59, 58, 144, 61, 220, 141, 253, 189, 138, 73, 162, 190, 84, 247, 29, 190, 106, 251, 91, 60, 211, 70, 168, 189, 1, 231, 160, 190, 73, 89, 164, 190, 205, 38, 250, 190, 91, 87, 57, 190, 215, 182, 116, 62, 113, 28, 72, 190, 180, 7, 90, 190, 179, 147, 178, 189, 191, 214, 174, 189, 129, 66, 186, 60, 75, 224, 7, 62, 222, 175, 218, 62, 179, 228, 30, 62, 221, 136, 218, 189, 167, 27, 144, 62, 239, 234, 180, 61, 177, 148, 7, 63, 12, 56, 163, 190, 139, 220, 24, 191, 62, 46, 26, 190, 187, 139, 53, 190, 117, 221, 144, 191, 142, 214, 123, 62, 3, 45, 177, 190, 22, 209, 215, 190, 228, 126, 35, 186, 89, 26, 136, 191, 209, 51, 215, 189, 76, 220, 146, 189, 138, 206, 229, 188, 108, 145, 59, 191, 160, 89, 20, 61, 123, 225, 200, 62, 197, 244, 150, 62, 130, 226, 137, 190, 156, 88, 117, 191, 70, 107, 241, 61, 154, 230, 63, 189, 103, 137, 106, 191, 192, 220, 44, 62, 108, 92, 158, 190, 159, 60, 2, 190, 117, 43, 168, 61, 5, 96, 169, 190, 13, 189, 75, 62, 54, 210, 193, 61, 63, 123, 201, 60, 125, 46, 82, 62, 149, 211, 152, 60, 175, 39, 3, 190, 200, 122, 181, 187, 113, 191, 160, 62, 132, 159, 6, 62, 19, 161, 143, 190, 139, 218, 234, 190, 144, 162, 135, 62, 178, 233, 35, 62, 18, 77, 39, 60, 191, 164, 189, 62, 13, 222, 143, 190, 65, 230, 144, 62, 5, 87, 229, 188, 45, 205, 16, 62, 27, 37, 114, 62, 93, 92, 213, 62, 220, 170, 163, 61, 63, 170, 34, 62, 125, 168, 2, 189, 158, 122, 17, 191, 90, 169, 172, 61, 82, 171, 10, 62, 42, 91, 206, 188, 189, 98, 230, 188, 247, 68, 87, 190, 233, 115, 32, 62, 133, 52, 251, 190, 222, 171, 249, 60, 125, 18, 209, 189, 87, 96, 207, 61, 69, 4, 167, 189, 164, 5, 13, 190, 21, 66, 166, 61, 9, 19, 218, 60, 244, 2, 112, 61, 160, 185, 0, 60, 65, 103, 9, 190, 224, 60, 3, 189, 6, 4, 8, 62, 67, 141, 7, 190, 54, 83, 129, 189, 191, 7, 3, 62, 120, 202, 138, 189, 217, 28, 71, 190, 95, 192, 72, 189, 188, 221, 248, 189, 62, 100, 72, 61, 124, 141, 30, 190, 86, 97, 134, 61, 243, 31, 159, 61, 174, 12, 181, 189, 62, 90, 150, 189, 42, 12, 37, 190, 135, 130, 182, 61, 219, 206, 62, 61, 97, 169, 14, 61, 135, 116, 146, 189, 136, 68, 188, 61, 130, 252, 139, 188, 101, 219, 78, 190, 67, 65, 15, 62, 142, 226, 178, 190, 79, 226, 27, 62, 210, 231, 240, 189, 172, 68, 48, 190, 107, 157, 6, 190, 24, 228, 148, 62, 20, 223, 168, 60, 165, 79, 22, 59, 118, 100, 157, 189, 13, 148, 80, 62, 39, 102, 132, 189, 97, 132, 54, 191, 132, 203, 207, 62, 216, 89, 7, 62, 191, 231, 192, 190, 62, 169, 116, 62, 218, 201, 75, 189, 114, 245, 132, 62, 124, 120, 238, 62, 81, 114, 12, 191, 227, 11, 35, 191, 73, 132, 115, 189, 52, 202, 110, 188, 6, 80, 58, 190, 36, 250, 28, 62, 67, 14, 166, 190, 31, 230, 44, 190, 253, 167, 38, 189, 185, 238, 23, 62, 196, 107, 147, 190, 227, 175, 187, 190, 92, 197, 93, 191, 10, 117, 15, 62, 169, 18, 97, 191, 174, 17, 68, 60, 80, 120, 10, 188, 93, 116, 109, 60, 243, 161, 134, 190, 70, 16, 94, 191, 34, 64, 229, 190, 88, 89, 235, 61, 133, 108, 22, 191, 44, 82, 13, 62, 44, 233, 144, 191, 89, 199, 48, 191, 127, 197, 179, 62, 162, 141, 93, 190, 1, 17, 204, 190, 226, 161, 44, 60, 187, 122, 17, 191, 118, 181, 199, 189, 143, 54, 171, 190, 165, 75, 111, 60, 196, 215, 117, 62, 225, 120, 242, 61, 131, 151, 167, 190, 42, 107, 62, 60, 157, 187, 174, 190, 24, 55, 0, 62, 35, 157, 219, 59, 201, 76, 244, 190, 31, 150, 159, 189, 233, 115, 211, 61, 37, 111, 31, 62, 146, 197, 179, 61, 123, 35, 118, 189, 4, 30, 214, 190, 219, 138, 41, 62, 91, 226, 114, 189, 18, 23, 182, 188, 61, 169, 141, 188, 185, 114, 104, 61, 232, 35, 44, 62, 231, 217, 187, 60, 246, 197, 64, 190, 119, 69, 66, 189, 162, 195, 21, 62, 137, 170, 17, 190, 100, 242, 135, 61, 22, 8, 236, 56, 209, 188, 63, 189, 114, 21, 13, 62, 90, 149, 32, 62, 161, 89, 15, 189, 18, 218, 240, 189, 250, 253, 23, 62, 152, 176, 96, 189, 222, 96, 163, 60, 86, 105, 20, 190, 162, 51, 6, 62, 30, 226, 64, 62, 151, 22, 31, 61, 174, 71, 131, 61, 166, 64, 144, 61, 37, 123, 139, 188, 244, 3, 15, 190, 56, 155, 171, 189, 128, 121, 187, 189, 89, 109, 21, 62, 130, 188, 32, 189, 73, 219, 43, 190, 195, 252, 67, 189, 146, 46, 20, 62, 119, 65, 237, 60, 40, 239, 164, 189, 109, 130, 12, 190, 214, 29, 14, 61, 152, 104, 8, 62, 41, 252, 43, 190, 90, 182, 12, 189, 77, 153, 229, 188, 114, 216, 245, 189, 135, 1, 42, 190, 211, 125, 162, 189, 118, 200, 224, 61, 191, 143, 25, 190, 185, 178, 130, 61, 220, 253, 206, 189, 20, 136, 13, 62, 117, 23, 254, 61, 201, 145, 51, 189, 65, 44, 140, 188, 68, 76, 20, 190, 156, 199, 40, 190, 93, 230, 215, 189, 151, 167, 10, 190, 249, 100, 203, 190, 106, 152, 104, 189, 224, 200, 149, 189, 248, 140, 191, 61, 57, 114, 70, 191, 58, 156, 171, 189, 16, 244, 241, 60, 43, 35, 89, 60, 127, 166, 22, 190, 155, 125, 64, 62, 219, 24, 91, 62, 244, 62, 210, 61, 136, 195, 194, 189, 145, 100, 107, 190, 187, 101, 193, 61, 249, 186, 196, 60, 106, 206, 147, 189, 97, 46, 39, 61, 47, 10, 115, 62, 25, 208, 96, 61, 166, 177, 32, 62, 102, 75, 80, 190, 238, 219, 242, 61, 135, 58, 112, 61, 150, 119, 146, 189, 85, 19, 230, 60, 56, 209, 148, 60, 127, 60, 71, 190, 112, 59, 132, 60, 10, 8, 40, 190, 92, 209, 197, 61, 180, 40, 25, 189, 73, 89, 216, 188, 196, 198, 78, 189, 32, 22, 177, 61, 64, 178, 255, 189, 96, 165, 212, 61, 6, 233, 164, 190, 101, 137, 36, 190, 7, 112, 204, 189, 150, 247, 222, 190, 28, 254, 159, 190, 166, 215, 212, 188, 32, 205, 35, 190, 178, 220, 251, 190, 166, 157, 211, 60, 151, 81, 87, 190, 194, 49, 165, 190, 147, 231, 64, 190, 161, 149, 93, 190, 246, 193, 23, 191, 71, 236, 47, 190, 111, 72, 132, 61, 124, 19, 8, 62, 27, 0, 136, 190, 249, 201, 93, 190, 51, 104, 113, 190, 230, 118, 78, 189, 251, 192, 25, 191, 5, 127, 154, 61, 235, 55, 81, 189, 223, 1, 94, 188, 216, 247, 100, 190, 61, 25, 242, 189, 114, 68, 171, 62, 74, 198, 243, 61, 42, 6, 136, 190, 244, 47, 112, 61, 189, 82, 124, 190, 107, 175, 230, 60, 9, 204, 107, 190, 7, 57, 92, 62, 37, 131, 47, 62, 176, 131, 184, 189, 213, 212, 94, 59, 30, 61, 170, 62, 85, 4, 40, 190, 159, 112, 11, 190, 255, 224, 181, 62, 68, 210, 202, 62, 74, 104, 126, 59, 247, 56, 81, 62, 58, 65, 47, 61, 255, 212, 148, 62, 27, 69, 244, 61, 6, 169, 184, 190, 12, 158, 204, 190, 160, 219, 21, 190, 211, 144, 89, 61, 18, 140, 123, 62, 147, 123, 209, 189, 183, 232, 22, 62, 198, 195, 171, 190, 142, 92, 159, 61, 29, 23, 132, 62, 248, 48, 101, 62, 160, 34, 182, 189, 0, 216, 79, 191, 115, 74, 240, 188, 82, 176, 150, 189, 5, 235, 44, 62, 167, 211, 4, 62, 74, 184, 63, 190, 108, 64, 70, 62, 43, 118, 209, 61, 140, 118, 39, 62, 37, 40, 244, 189, 149, 32, 36, 190, 119, 165, 3, 62, 26, 98, 62, 61, 100, 50, 20, 190, 111, 219, 142, 62, 176, 88, 137, 190, 32, 116, 195, 62, 97, 109, 195, 61, 206, 175, 157, 62, 89, 135, 230, 61, 134, 31, 99, 62, 237, 26, 247, 189, 230, 90, 0, 190, 164, 145, 188, 190, 28, 36, 75, 62, 105, 208, 105, 60, 207, 170, 150, 60, 238, 199, 226, 188, 19, 65, 64, 62, 247, 31, 26, 63, 214, 157, 15, 191, 28, 185, 135, 189, 102, 132, 78, 62, 196, 25, 63, 62, 67, 177, 219, 61, 182, 32, 141, 190, 250, 154, 108, 61, 232, 167, 52, 61, 159, 237, 200, 62, 253, 75, 86, 62, 162, 152, 201, 189, 165, 184, 23, 190, 33, 51, 196, 62, 194, 173, 130, 61, 231, 184, 50, 188, 232, 179, 47, 62, 163, 64, 53, 190, 142, 254, 250, 60, 131, 151, 204, 62, 158, 234, 238, 189, 112, 192, 173, 62, 43, 195, 120, 62, 173, 93, 119, 62, 94, 223, 254, 189, 192, 33, 4, 62, 164, 109, 26, 61, 121, 64, 63, 61, 0, 213, 214, 188, 172, 217, 128, 61, 204, 110, 138, 62, 105, 214, 221, 189, 77, 11, 184, 62, 10, 51, 122, 189, 77, 42, 177, 190, 73, 146, 174, 190, 236, 174, 168, 62, 207, 246, 98, 190, 163, 164, 1, 63, 37, 206, 227, 60, 193, 126, 100, 189, 37, 93, 128, 61, 245, 187, 83, 190, 77, 42, 149, 189, 7, 45, 66, 62, 109, 84, 148, 191, 176, 71, 208, 61, 37, 140, 159, 61, 93, 126, 112, 191, 198, 89, 42, 189, 175, 233, 127, 189, 112, 79, 83, 62, 130, 91, 20, 190, 41, 44, 255, 61, 102, 228, 2, 63, 174, 182, 145, 62, 128, 148, 254, 60, 239, 7, 81, 191, 126, 226, 123, 61, 180, 57, 54, 62, 84, 106, 12, 62, 198, 226, 232, 189, 65, 153, 16, 62, 152, 199, 102, 61, 70, 182, 106, 62, 155, 95, 31, 190, 119, 145, 192, 190, 200, 94, 40, 191, 106, 12, 65, 62, 239, 207, 183, 189, 240, 169, 227, 189, 133, 115, 134, 189, 47, 121, 132, 189, 132, 88, 75, 190, 140, 243, 124, 190, 199, 16, 2, 60, 146, 246, 134, 62, 174, 196, 6, 190, 46, 252, 3, 188, 13, 50, 134, 191, 207, 241, 129, 190, 159, 0, 219, 62, 211, 1, 176, 190, 238, 165, 234, 190, 211, 209, 191, 61, 98, 78, 27, 191, 102, 85, 115, 62, 87, 112, 200, 61, 165, 243, 169, 61, 77, 124, 90, 61, 244, 236, 96, 62, 27, 155, 170, 190, 242, 96, 231, 62, 214, 38, 184, 190, 156, 198, 242, 60, 31, 98, 86, 62, 115, 122, 166, 190, 107, 89, 39, 62, 20, 36, 233, 62, 238, 211, 200, 190, 166, 219, 75, 61, 201, 50, 135, 190, 175, 232, 79, 62, 202, 195, 85, 190, 60, 95, 241, 189, 98, 5, 4, 60, 153, 8, 174, 190, 127, 18, 61, 189, 87, 127, 87, 62, 85, 255, 240, 188, 125, 233, 252, 190, 70, 115, 192, 62, 3, 245, 130, 190, 204, 78, 197, 61, 230, 102, 205, 62, 236, 160, 156, 189, 64, 125, 134, 190, 51, 31, 43, 189, 45, 3, 249, 189, 83, 192, 165, 62, 147, 12, 123, 188, 17, 241, 35, 191, 134, 17, 144, 190, 40, 20, 94, 189, 145, 163, 91, 61, 129, 90, 128, 62, 215, 45, 223, 61, 252, 75, 81, 62, 185, 109, 96, 62, 234, 73, 152, 188, 101, 255, 80, 191, 139, 224, 157, 190, 242, 139, 70, 62, 188, 16, 57, 189, 164, 89, 153, 189, 214, 6, 161, 61, 49, 20, 184, 61, 223, 0, 109, 190, 28, 102, 46, 62, 159, 92, 187, 60, 48, 140, 7, 63, 153, 195, 211, 190, 109, 190, 179, 190, 71, 83, 178, 189, 252, 46, 90, 190, 96, 215, 28, 62, 221, 127, 168, 189, 65, 58, 242, 59, 173, 24, 128, 190, 232, 185, 221, 189, 203, 226, 194, 61, 206, 7, 210, 61, 169, 159, 247, 61, 151, 181, 10, 60, 135, 78, 103, 187, 30, 122, 57, 62, 235, 48, 125, 191, 119, 167, 115, 188, 199, 140, 84, 62, 122, 168, 56, 62, 134, 111, 251, 189, 187, 154, 107, 59, 33, 117, 220, 190, 231, 11, 7, 189, 85, 127, 208, 190, 92, 70, 251, 61, 30, 132, 20, 191, 126, 130, 137, 62, 93, 133, 80, 62, 164, 95, 208, 61, 74, 2, 44, 60, 141, 255, 72, 62, 62, 110, 94, 191, 180, 63, 106, 62, 85, 201, 135, 62, 78, 220, 62, 190, 209, 174, 126, 62, 195, 211, 132, 190, 169, 48, 15, 62, 141, 9, 75, 62, 198, 161, 115, 62, 119, 224, 88, 62, 33, 99, 172, 62, 236, 92, 251, 190, 94, 49, 11, 62, 106, 235, 131, 189, 255, 166, 62, 191, 144, 219, 147, 190, 214, 206, 170, 60, 57, 80, 60, 190, 110, 29, 55, 62, 153, 254, 142, 190, 10, 28, 252, 61, 20, 133, 40, 191, 250, 39, 157, 191, 101, 215, 88, 190, 45, 160, 158, 62, 98, 195, 202, 190, 48, 124, 218, 62, 67, 171, 205, 60, 237, 178, 58, 62, 113, 217, 60, 191, 246, 210, 246, 189, 254, 59, 151, 62, 55, 62, 17, 63, 195, 57, 47, 191, 237, 83, 26, 60, 94, 113, 7, 190, 106, 33, 255, 190, 68, 243, 149, 62, 102, 67, 7, 190, 45, 167, 254, 190, 219, 206, 200, 190, 84, 119, 195, 190, 42, 180, 247, 62, 213, 249, 85, 62, 78, 112, 105, 62, 167, 241, 116, 188, 184, 225, 13, 62, 83, 197, 14, 63, 8, 81, 216, 190, 157, 74, 38, 190, 182, 154, 235, 61, 77, 113, 154, 62, 205, 231, 167, 190, 46, 159, 130, 62, 17, 15, 218, 61, 65, 139, 225, 189, 230, 141, 236, 189, 9, 213, 254, 61, 125, 62, 32, 190, 172, 58, 81, 190, 71, 93, 210, 189, 54, 112, 35, 59, 220, 242, 124, 189, 138, 52, 46, 61, 35, 71, 161, 188, 216, 2, 64, 189, 187, 253, 17, 190, 26, 132, 160, 189, 154, 82, 17, 190, 240, 101, 11, 62, 109, 35, 7, 187, 27, 4, 59, 190, 126, 59, 238, 188, 249, 181, 0, 62, 60, 62, 37, 190, 89, 4, 210, 60, 57, 158, 4, 190, 107, 79, 5, 190, 62, 41, 37, 190, 233, 237, 1, 62, 122, 131, 177, 61, 109, 149, 62, 61, 193, 105, 26, 190, 192, 36, 93, 190, 41, 184, 23, 189, 189, 231, 92, 61, 11, 221, 173, 190, 124, 240, 179, 191, 234, 118, 67, 60, 225, 244, 72, 191, 145, 5, 109, 188, 99, 97, 156, 187, 152, 11, 115, 188, 24, 190, 56, 190, 31, 34, 43, 191, 145, 215, 222, 190, 40, 77, 153, 62, 11, 113, 13, 191, 136, 200, 105, 188, 58, 41, 128, 191, 81, 23, 144, 191, 86, 13, 114, 62, 76, 213, 185, 189, 174, 84, 184, 190, 59, 146, 30, 62, 97, 131, 210, 190, 132, 50, 147, 190, 75, 181, 184, 190, 45, 237, 232, 188, 205, 77, 189, 188, 128, 221, 194, 189, 230, 108, 22, 190, 97, 191, 15, 62, 187, 114, 226, 190, 244, 118, 87, 189, 60, 232, 244, 189, 60, 85, 20, 191, 236, 210, 59, 62, 140, 70, 93, 190, 37, 215, 105, 190, 203, 32, 46, 62, 86, 245, 179, 61, 251, 228, 138, 188, 187, 226, 185, 188, 135, 10, 28, 189, 160, 75, 253, 185, 133, 107, 234, 189, 12, 136, 78, 189, 5, 245, 194, 62, 245, 242, 47, 190, 81, 36, 103, 190, 177, 121, 217, 188, 215, 178, 163, 190, 233, 58, 90, 61, 107, 65, 101, 61, 191, 245, 202, 61, 152, 178, 133, 190, 103, 182, 26, 190, 50, 165, 35, 190, 12, 21, 15, 190, 148, 163, 8, 62, 15, 205, 50, 62, 97, 206, 90, 189, 202, 177, 247, 61, 110, 223, 189, 190, 150, 39, 240, 61, 1, 50, 37, 189, 37, 119, 13, 62, 100, 163, 190, 190, 121, 243, 255, 61, 147, 214, 32, 191, 152, 176, 241, 189, 205, 97, 205, 62, 133, 47, 98, 190, 87, 199, 144, 190, 97, 152, 2, 189, 147, 0, 80, 62, 8, 65, 18, 191, 218, 74, 207, 61, 9, 135, 0, 190, 229, 152, 198, 62, 249, 10, 201, 190, 21, 255, 139, 62, 120, 33, 194, 191, 73, 64, 255, 189, 96, 78, 207, 62, 121, 142, 80, 190, 131, 79, 61, 191, 121, 157, 138, 62, 227, 52, 170, 190, 56, 163, 134, 190, 158, 16, 99, 63, 156, 125, 119, 62, 188, 62, 88, 62, 128, 177, 175, 62, 192, 112, 189, 62, 101, 104, 244, 190, 2, 35, 248, 190, 114, 135, 103, 62, 253, 108, 26, 63, 179, 171, 203, 190, 204, 29, 165, 62, 144, 246, 55, 190, 16, 99, 23, 190, 221, 38, 214, 60, 173, 72, 97, 189, 193, 99, 7, 62, 248, 78, 190, 189, 21, 212, 27, 190, 167, 238, 73, 189, 130, 227, 83, 189, 183, 66, 73, 189, 49, 134, 148, 61, 247, 241, 48, 187, 196, 35, 253, 189, 176, 22, 100, 61, 234, 65, 66, 61, 187, 231, 74, 190, 192, 164, 157, 188, 42, 164, 22, 190, 101, 180, 219, 188, 100, 153, 20, 190, 218, 153, 34, 190, 148, 223, 92, 61, 89, 134, 98, 61, 102, 234, 124, 189, 125, 135, 209, 189, 179, 77, 23, 62, 179, 120, 237, 189, 68, 21, 106, 189, 18, 146, 243, 189, 229, 247, 59, 190, 41, 27, 23, 190, 120, 74, 116, 61, 10, 167, 103, 191, 141, 89, 243, 190, 130, 178, 85, 61, 112, 85, 35, 189, 137, 227, 11, 190, 139, 55, 96, 61, 130, 151, 104, 61, 82, 109, 64, 190, 61, 170, 189, 187, 152, 126, 136, 62, 45, 154, 16, 63, 228, 94, 56, 190, 46, 183, 156, 190, 110, 188, 162, 189, 93, 218, 19, 190, 35, 101, 92, 62, 244, 116, 120, 189, 70, 194, 62, 61, 213, 244, 147, 190, 216, 107, 245, 189, 116, 212, 149, 62, 252, 160, 145, 61, 53, 110, 51, 62, 2, 107, 233, 189, 190, 6, 141, 61, 139, 196, 136, 62, 31, 86, 165, 191, 26, 108, 161, 189, 229, 139, 93, 60, 32, 235, 15, 62, 227, 199, 12, 190, 153, 255, 114, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 178, 152, 189, 125, 252, 32, 61, 140, 232, 88, 61, 191, 92, 97, 62, 237, 190, 51, 189, 62, 133, 48, 189, 154, 186, 16, 189, 72, 45, 19, 191, 108, 42, 152, 190, 168, 17, 45, 62, 95, 247, 149, 61, 224, 172, 145, 190, 5, 124, 29, 62, 75, 144, 136, 62, 156, 92, 38, 190, 165, 4, 91, 62, 27, 165, 212, 186, 163, 211, 189, 190, 206, 189, 178, 60, 130, 109, 24, 61, 146, 78, 26, 62, 167, 66, 98, 189, 76, 109, 105, 61, 230, 244, 128, 62, 254, 252, 129, 62, 249, 15, 146, 62, 217, 55, 34, 189, 249, 152, 9, 62, 0, 91, 2, 62, 156, 66, 109, 62, 107, 193, 136, 189, 24, 146, 115, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 34, 128, 190, 13, 104, 146, 190, 41, 114, 17, 190, 44, 105, 85, 191, 162, 80, 128, 189, 239, 16, 17, 63, 87, 229, 17, 190, 219, 17, 149, 190, 148, 204, 53, 191, 115, 137, 76, 190, 36, 27, 184, 60, 251, 252, 102, 190, 19, 69, 160, 63, 166, 158, 95, 188, 116, 201, 188, 61, 171, 125, 92, 189, 32, 239, 191, 190, 22, 154, 156, 190, 129, 134, 234, 62, 192, 220, 164, 189, 194, 90, 4, 63, 244, 247, 13, 63, 123, 77, 207, 190, 123, 98, 24, 62, 120, 32, 15, 191, 130, 130, 91, 63, 90, 208, 203, 186, 167, 183, 163, 63, 212, 42, 162, 188, 93, 74, 145, 63, 102, 177, 19, 190, 92, 144, 80, 62, 238, 6, 95, 188, 195, 10, 160, 190, 186, 76, 98, 189, 75, 178, 142, 62, 17, 89, 172, 189, 241, 216, 1, 190, 72, 239, 151, 189, 223, 142, 139, 62, 208, 88, 46, 190, 65, 95, 63, 190, 222, 190, 16, 61, 184, 110, 45, 63, 183, 193, 138, 189, 14, 224, 46, 190, 51, 46, 208, 189, 212, 7, 25, 190, 79, 32, 149, 62, 230, 229, 40, 62, 138, 253, 177, 189, 229, 83, 168, 190, 10, 162, 2, 63, 67, 92, 36, 190, 242, 1, 141, 188, 156, 245, 112, 190, 236, 189, 140, 187, 59, 96, 45, 62, 164, 90, 227, 60, 82, 54, 32, 188, 17, 28, 24, 190, 127, 71, 240, 62, 55, 154, 206, 189, 139, 169, 152, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 179, 72, 190, 195, 19, 93, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {227, 177, 151, 63, 20, 132, 88, 191, 190, 51, 91, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {69, 52, 47, 64, 213, 200, 77, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0078/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}