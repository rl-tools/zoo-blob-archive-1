// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 82, 247, 190, 246, 183, 117, 191, 192, 139, 183, 190, 12, 116, 46, 190, 65, 92, 125, 63, 13, 28, 188, 62, 31, 210, 77, 63, 75, 113, 131, 191, 66, 196, 188, 190, 192, 5, 191, 62, 223, 14, 136, 189, 217, 139, 11, 63, 114, 113, 99, 63, 2, 129, 95, 191, 76, 195, 152, 190, 179, 73, 93, 190, 48, 21, 214, 62, 6, 122, 138, 189, 236, 194, 63, 190, 102, 113, 143, 62, 118, 11, 223, 60, 190, 50, 75, 189, 136, 119, 64, 63, 27, 191, 89, 191, 127, 22, 106, 62, 254, 55, 252, 187, 23, 31, 42, 63, 14, 171, 30, 63, 38, 124, 156, 61, 245, 30, 87, 62, 76, 105, 35, 62, 54, 26, 139, 191, 118, 41, 204, 62, 163, 202, 35, 63, 20, 161, 165, 63, 65, 54, 169, 62, 208, 201, 70, 190, 157, 213, 66, 63, 74, 136, 134, 189, 238, 234, 182, 62, 216, 14, 194, 191, 242, 58, 8, 191, 160, 59, 4, 63, 217, 97, 164, 63, 136, 175, 141, 62, 0, 160, 132, 189, 39, 95, 98, 63, 44, 99, 232, 190, 184, 30, 8, 191, 121, 77, 186, 191, 216, 168, 32, 190, 95, 166, 213, 62, 77, 181, 92, 188, 37, 145, 47, 191, 138, 120, 23, 191, 85, 23, 125, 63, 190, 171, 60, 190, 68, 171, 241, 62, 29, 70, 119, 191, 248, 208, 18, 63, 44, 253, 186, 63, 201, 76, 254, 190, 31, 69, 204, 61, 125, 241, 0, 63, 11, 106, 106, 191, 10, 26, 89, 190, 134, 66, 42, 191, 184, 44, 52, 190, 224, 148, 128, 186, 208, 47, 146, 61, 60, 99, 158, 63, 89, 24, 222, 61, 46, 63, 54, 190, 95, 190, 61, 190, 0, 85, 64, 63, 102, 252, 220, 62, 104, 198, 216, 62, 255, 95, 13, 191, 175, 247, 114, 191, 86, 48, 177, 189, 249, 254, 58, 190, 139, 86, 0, 190, 54, 40, 25, 191, 232, 5, 247, 190, 138, 247, 86, 190, 197, 208, 28, 189, 196, 149, 132, 60, 193, 123, 69, 62, 198, 232, 27, 189, 113, 207, 139, 190, 71, 35, 50, 62, 211, 20, 123, 191, 243, 43, 186, 62, 171, 197, 0, 191, 85, 204, 91, 190, 139, 225, 124, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 88, 132, 190, 164, 242, 115, 189, 1, 61, 209, 61, 110, 169, 108, 62, 206, 198, 191, 190, 56, 91, 255, 62, 74, 103, 2, 63, 198, 248, 139, 61, 9, 123, 170, 62, 225, 223, 38, 63, 47, 6, 60, 189, 205, 249, 79, 61, 125, 103, 78, 62, 51, 157, 251, 60, 220, 200, 92, 62, 170, 102, 53, 61, 123, 140, 116, 62, 236, 62, 216, 62, 127, 193, 227, 62, 212, 135, 78, 189, 150, 107, 141, 189, 54, 198, 186, 61, 101, 182, 48, 63, 51, 198, 184, 62, 12, 221, 61, 190, 231, 127, 193, 61, 89, 105, 7, 191, 105, 134, 157, 190, 174, 90, 218, 62, 157, 160, 132, 62, 95, 241, 173, 189, 30, 73, 199, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 25, 155, 60, 10, 72, 196, 61, 48, 251, 137, 190, 84, 186, 143, 62, 190, 164, 1, 190, 183, 220, 18, 62, 17, 203, 162, 59, 116, 148, 184, 62, 22, 8, 226, 61, 68, 89, 33, 190, 138, 29, 43, 191, 72, 162, 183, 62, 16, 196, 29, 62, 37, 145, 69, 62, 74, 121, 208, 62, 131, 131, 74, 190, 103, 224, 93, 190, 52, 21, 5, 62, 61, 138, 138, 62, 205, 241, 172, 62, 136, 45, 152, 62, 221, 200, 183, 190, 185, 241, 27, 62, 180, 198, 15, 62, 119, 147, 12, 189, 10, 158, 141, 190, 128, 18, 135, 62, 47, 81, 46, 190, 253, 151, 69, 189, 46, 57, 68, 190, 203, 190, 234, 61, 218, 119, 145, 189, 127, 103, 132, 62, 186, 234, 162, 189, 226, 204, 123, 62, 8, 156, 104, 190, 33, 75, 208, 189, 84, 233, 134, 190, 167, 69, 243, 61, 89, 245, 1, 191, 201, 28, 76, 190, 84, 87, 111, 62, 129, 152, 254, 59, 100, 182, 159, 61, 223, 111, 133, 191, 166, 250, 140, 62, 226, 110, 133, 62, 55, 155, 11, 190, 105, 165, 237, 61, 33, 231, 103, 62, 6, 156, 145, 191, 94, 130, 19, 188, 137, 127, 169, 62, 161, 43, 191, 62, 188, 187, 160, 190, 244, 248, 173, 190, 208, 20, 106, 190, 62, 124, 203, 61, 35, 42, 89, 191, 4, 131, 204, 189, 222, 162, 253, 189, 129, 115, 201, 62, 50, 92, 14, 190, 181, 77, 25, 189, 11, 218, 239, 61, 85, 175, 214, 61, 8, 154, 182, 188, 92, 9, 107, 62, 138, 96, 90, 190, 162, 45, 38, 61, 229, 129, 42, 189, 143, 254, 165, 62, 14, 39, 33, 61, 80, 10, 103, 190, 47, 14, 232, 190, 14, 125, 145, 62, 101, 24, 36, 62, 13, 42, 10, 190, 196, 139, 182, 62, 230, 222, 143, 190, 46, 13, 102, 190, 112, 65, 41, 62, 2, 10, 74, 62, 204, 176, 141, 62, 72, 81, 112, 62, 214, 39, 135, 190, 218, 43, 136, 61, 50, 249, 248, 60, 202, 57, 157, 189, 130, 132, 167, 61, 21, 64, 242, 61, 64, 204, 252, 55, 35, 173, 244, 189, 227, 89, 27, 190, 231, 148, 114, 62, 142, 49, 106, 61, 120, 236, 56, 62, 147, 15, 254, 188, 239, 192, 221, 190, 98, 104, 7, 62, 173, 145, 127, 190, 108, 238, 138, 62, 7, 174, 108, 60, 185, 18, 252, 61, 6, 13, 137, 191, 8, 218, 212, 190, 235, 168, 50, 191, 124, 62, 108, 62, 224, 118, 169, 62, 222, 1, 2, 188, 210, 131, 16, 63, 248, 31, 116, 190, 179, 240, 99, 62, 62, 244, 50, 62, 3, 87, 182, 62, 9, 167, 54, 191, 167, 206, 85, 63, 126, 158, 12, 191, 24, 234, 135, 188, 78, 158, 191, 190, 169, 196, 146, 191, 207, 154, 233, 189, 245, 175, 177, 62, 7, 210, 206, 190, 151, 11, 7, 62, 244, 198, 145, 189, 8, 216, 158, 61, 200, 16, 144, 191, 202, 71, 102, 190, 247, 110, 129, 187, 235, 126, 206, 188, 137, 3, 163, 188, 64, 12, 208, 190, 72, 118, 132, 62, 38, 165, 112, 62, 19, 95, 154, 188, 50, 240, 10, 62, 243, 35, 219, 188, 235, 113, 129, 62, 134, 102, 105, 62, 135, 119, 140, 189, 5, 153, 129, 60, 94, 153, 138, 188, 107, 159, 167, 189, 154, 174, 146, 61, 30, 233, 194, 60, 84, 73, 194, 60, 6, 0, 230, 189, 122, 33, 147, 62, 181, 8, 131, 190, 66, 43, 242, 61, 235, 215, 160, 61, 164, 156, 96, 61, 215, 133, 146, 61, 109, 236, 149, 189, 105, 122, 95, 189, 33, 13, 137, 62, 27, 176, 5, 188, 17, 216, 155, 189, 40, 133, 17, 190, 32, 37, 149, 190, 150, 174, 18, 189, 64, 69, 223, 190, 110, 144, 13, 190, 197, 150, 100, 188, 179, 56, 184, 60, 181, 93, 70, 188, 231, 206, 42, 190, 136, 166, 96, 62, 22, 249, 136, 187, 70, 58, 77, 62, 225, 11, 73, 62, 135, 108, 175, 62, 209, 24, 115, 191, 92, 199, 56, 62, 247, 240, 231, 61, 47, 26, 208, 190, 36, 173, 13, 190, 171, 125, 21, 62, 143, 185, 99, 190, 120, 16, 78, 191, 185, 130, 120, 190, 128, 44, 83, 190, 111, 138, 5, 63, 232, 232, 72, 62, 50, 173, 52, 60, 243, 72, 63, 62, 119, 0, 130, 190, 245, 211, 186, 189, 200, 177, 36, 62, 41, 187, 100, 190, 129, 137, 183, 62, 146, 227, 165, 189, 198, 43, 27, 62, 4, 6, 86, 190, 56, 239, 148, 188, 107, 221, 9, 190, 39, 122, 96, 190, 104, 173, 240, 189, 47, 197, 26, 189, 106, 207, 72, 61, 51, 78, 39, 190, 33, 203, 236, 189, 73, 222, 219, 189, 81, 94, 99, 190, 242, 170, 67, 190, 194, 131, 69, 189, 216, 207, 136, 189, 37, 237, 148, 59, 79, 217, 147, 61, 196, 67, 130, 188, 35, 237, 23, 189, 88, 237, 168, 189, 97, 169, 39, 189, 254, 34, 180, 189, 1, 106, 179, 61, 225, 11, 191, 189, 184, 186, 129, 59, 72, 150, 195, 61, 158, 4, 178, 61, 54, 52, 226, 61, 120, 81, 139, 61, 126, 9, 245, 189, 201, 226, 213, 61, 102, 159, 239, 189, 12, 95, 206, 61, 249, 27, 148, 190, 88, 226, 251, 60, 66, 182, 4, 191, 165, 222, 139, 189, 207, 116, 179, 190, 191, 226, 201, 190, 49, 138, 38, 189, 95, 156, 134, 189, 44, 170, 126, 62, 218, 148, 61, 190, 237, 43, 168, 62, 107, 28, 234, 60, 123, 127, 175, 60, 220, 141, 253, 189, 134, 132, 56, 190, 84, 247, 29, 190, 64, 244, 101, 189, 240, 51, 73, 188, 78, 129, 12, 190, 189, 84, 196, 189, 112, 103, 215, 190, 213, 61, 37, 190, 207, 178, 138, 62, 113, 28, 72, 190, 228, 57, 195, 190, 179, 147, 178, 189, 15, 142, 255, 188, 129, 66, 186, 60, 150, 93, 84, 62, 196, 177, 231, 62, 199, 166, 167, 61, 221, 136, 218, 189, 46, 135, 138, 62, 196, 160, 192, 190, 94, 233, 10, 63, 0, 232, 129, 190, 134, 151, 11, 191, 203, 231, 16, 190, 178, 116, 201, 190, 25, 141, 154, 191, 179, 204, 50, 190, 96, 92, 77, 189, 75, 76, 252, 190, 204, 99, 232, 188, 158, 97, 35, 191, 49, 244, 182, 189, 195, 115, 83, 190, 30, 228, 226, 60, 71, 57, 50, 191, 193, 213, 133, 190, 195, 90, 185, 62, 127, 161, 133, 62, 86, 159, 228, 190, 239, 57, 121, 191, 123, 237, 49, 62, 224, 33, 123, 61, 214, 10, 94, 191, 196, 223, 51, 62, 46, 131, 236, 190, 18, 251, 178, 189, 4, 179, 165, 190, 85, 95, 160, 189, 135, 84, 226, 61, 50, 173, 88, 62, 163, 62, 56, 61, 85, 46, 82, 62, 52, 48, 23, 61, 88, 105, 215, 189, 34, 14, 218, 60, 144, 51, 144, 62, 126, 13, 0, 62, 214, 210, 138, 190, 128, 223, 15, 191, 73, 227, 130, 62, 255, 92, 60, 62, 162, 254, 156, 61, 119, 107, 182, 62, 52, 24, 169, 190, 134, 143, 83, 62, 130, 22, 153, 187, 190, 232, 27, 62, 199, 48, 94, 62, 160, 191, 219, 62, 159, 0, 202, 61, 53, 201, 35, 62, 159, 57, 168, 188, 36, 214, 26, 191, 31, 155, 144, 61, 135, 207, 31, 62, 152, 142, 222, 189, 146, 166, 46, 189, 16, 52, 80, 190, 209, 237, 127, 61, 167, 202, 251, 190, 222, 171, 249, 60, 125, 18, 209, 189, 87, 96, 207, 61, 69, 4, 167, 189, 164, 5, 13, 190, 21, 66, 166, 61, 9, 19, 218, 60, 244, 2, 112, 61, 160, 185, 0, 60, 65, 103, 9, 190, 224, 60, 3, 189, 6, 4, 8, 62, 67, 141, 7, 190, 54, 83, 129, 189, 191, 7, 3, 62, 120, 202, 138, 189, 217, 28, 71, 190, 95, 192, 72, 189, 188, 221, 248, 189, 62, 100, 72, 61, 124, 141, 30, 190, 86, 97, 134, 61, 243, 31, 159, 61, 174, 12, 181, 189, 62, 90, 150, 189, 42, 12, 37, 190, 135, 130, 182, 61, 219, 206, 62, 61, 97, 169, 14, 61, 135, 116, 146, 189, 136, 68, 188, 61, 130, 252, 139, 188, 156, 90, 113, 190, 26, 84, 83, 62, 83, 129, 231, 190, 135, 212, 249, 61, 178, 45, 52, 190, 42, 14, 26, 190, 73, 29, 214, 189, 254, 220, 162, 62, 206, 103, 183, 59, 191, 205, 16, 189, 101, 232, 218, 189, 154, 189, 96, 62, 202, 164, 24, 60, 186, 46, 6, 191, 122, 112, 218, 62, 26, 140, 53, 62, 4, 177, 149, 190, 198, 197, 56, 62, 136, 65, 243, 60, 18, 181, 78, 62, 243, 58, 169, 62, 26, 2, 7, 191, 126, 144, 28, 191, 41, 20, 8, 188, 64, 125, 134, 188, 104, 117, 81, 190, 171, 234, 168, 61, 20, 101, 150, 190, 23, 124, 45, 190, 163, 130, 225, 189, 216, 102, 249, 61, 249, 53, 153, 190, 87, 43, 181, 190, 215, 212, 93, 191, 10, 117, 15, 62, 169, 18, 97, 191, 174, 17, 68, 60, 132, 99, 128, 187, 207, 205, 163, 60, 216, 16, 133, 190, 70, 16, 94, 191, 34, 64, 229, 190, 88, 89, 235, 61, 133, 108, 22, 191, 59, 234, 16, 62, 44, 233, 144, 191, 89, 199, 48, 191, 87, 60, 181, 62, 127, 132, 87, 190, 216, 170, 202, 190, 233, 9, 128, 60, 187, 122, 17, 191, 118, 181, 199, 189, 143, 54, 171, 190, 202, 32, 168, 60, 1, 78, 121, 62, 225, 120, 242, 61, 102, 151, 167, 190, 136, 4, 177, 60, 59, 250, 172, 190, 1, 97, 6, 62, 80, 50, 24, 60, 201, 76, 244, 190, 31, 150, 159, 189, 63, 66, 68, 61, 4, 47, 55, 62, 68, 205, 236, 61, 233, 254, 77, 189, 29, 25, 192, 190, 161, 65, 129, 62, 210, 47, 206, 59, 42, 136, 34, 189, 169, 93, 93, 188, 158, 152, 229, 61, 221, 23, 250, 61, 143, 175, 39, 60, 63, 219, 3, 190, 73, 229, 233, 187, 105, 79, 12, 62, 77, 252, 39, 190, 225, 3, 183, 60, 89, 57, 188, 61, 3, 164, 119, 60, 220, 227, 1, 62, 166, 176, 119, 62, 149, 32, 76, 189, 101, 118, 25, 189, 123, 40, 255, 61, 228, 215, 70, 189, 133, 2, 147, 61, 66, 50, 27, 188, 198, 69, 190, 61, 51, 166, 131, 62, 30, 124, 3, 62, 26, 21, 242, 58, 121, 204, 221, 61, 37, 123, 139, 188, 244, 3, 15, 190, 56, 155, 171, 189, 128, 121, 187, 189, 89, 109, 21, 62, 130, 188, 32, 189, 73, 219, 43, 190, 195, 252, 67, 189, 146, 46, 20, 62, 119, 65, 237, 60, 40, 239, 164, 189, 109, 130, 12, 190, 214, 29, 14, 61, 152, 104, 8, 62, 41, 252, 43, 190, 90, 182, 12, 189, 77, 153, 229, 188, 114, 216, 245, 189, 135, 1, 42, 190, 211, 125, 162, 189, 118, 200, 224, 61, 191, 143, 25, 190, 185, 178, 130, 61, 220, 253, 206, 189, 20, 136, 13, 62, 117, 23, 254, 61, 201, 145, 51, 189, 65, 44, 140, 188, 68, 76, 20, 190, 156, 199, 40, 190, 93, 230, 215, 189, 151, 167, 10, 190, 23, 85, 146, 190, 10, 1, 110, 188, 161, 175, 100, 188, 72, 157, 193, 61, 232, 142, 43, 191, 153, 238, 135, 189, 210, 55, 0, 61, 215, 253, 247, 186, 36, 202, 29, 190, 62, 99, 62, 62, 94, 48, 51, 62, 29, 183, 140, 61, 93, 184, 228, 189, 249, 46, 45, 189, 157, 131, 95, 61, 190, 105, 191, 188, 52, 19, 174, 61, 159, 152, 212, 61, 197, 195, 109, 62, 71, 228, 92, 61, 101, 253, 54, 62, 41, 97, 25, 190, 50, 96, 59, 62, 34, 75, 203, 60, 209, 71, 152, 189, 76, 128, 11, 61, 62, 107, 197, 61, 35, 230, 22, 190, 13, 227, 169, 60, 183, 114, 237, 189, 171, 26, 145, 61, 56, 178, 236, 187, 68, 1, 154, 59, 196, 198, 78, 189, 199, 98, 240, 61, 64, 178, 255, 189, 221, 119, 10, 62, 68, 3, 162, 190, 214, 62, 32, 190, 1, 111, 146, 189, 150, 247, 222, 190, 75, 70, 148, 190, 99, 192, 124, 188, 32, 205, 35, 190, 178, 220, 251, 190, 186, 235, 104, 61, 151, 81, 87, 190, 84, 183, 163, 190, 160, 146, 33, 190, 125, 32, 62, 190, 246, 193, 23, 191, 206, 106, 46, 190, 170, 184, 195, 61, 211, 14, 40, 62, 73, 7, 127, 190, 249, 201, 93, 190, 51, 104, 113, 190, 221, 138, 163, 188, 251, 192, 25, 191, 245, 149, 215, 61, 146, 224, 33, 189, 40, 237, 138, 60, 105, 15, 94, 190, 61, 25, 242, 189, 95, 71, 66, 62, 175, 227, 98, 62, 151, 142, 107, 190, 105, 89, 48, 61, 26, 76, 39, 190, 49, 224, 223, 61, 79, 2, 42, 190, 125, 126, 47, 62, 253, 150, 26, 62, 208, 150, 167, 189, 241, 50, 55, 189, 253, 236, 167, 62, 79, 216, 251, 189, 120, 135, 186, 189, 181, 224, 180, 62, 238, 63, 183, 62, 88, 23, 133, 189, 238, 237, 116, 62, 23, 204, 149, 61, 48, 52, 135, 62, 252, 191, 12, 62, 114, 90, 166, 190, 6, 186, 191, 190, 79, 162, 152, 189, 153, 32, 45, 61, 68, 158, 128, 62, 19, 74, 110, 190, 93, 85, 23, 61, 58, 167, 163, 190, 208, 35, 206, 61, 16, 170, 104, 62, 194, 96, 114, 62, 203, 80, 198, 188, 237, 9, 47, 191, 229, 231, 26, 189, 142, 152, 102, 189, 35, 71, 39, 62, 176, 24, 16, 62, 236, 70, 62, 190, 73, 189, 109, 62, 88, 5, 12, 62, 127, 72, 53, 62, 220, 5, 237, 189, 254, 194, 158, 189, 10, 51, 40, 62, 56, 100, 66, 185, 149, 134, 120, 189, 30, 104, 174, 62, 15, 221, 162, 190, 10, 226, 199, 62, 220, 91, 215, 61, 130, 46, 155, 62, 37, 58, 244, 61, 59, 55, 83, 62, 168, 247, 22, 190, 14, 230, 129, 189, 193, 134, 154, 190, 120, 195, 121, 62, 174, 224, 176, 188, 213, 29, 196, 61, 219, 15, 51, 188, 75, 153, 88, 62, 33, 82, 21, 63, 129, 189, 250, 190, 62, 125, 21, 190, 175, 208, 103, 62, 87, 13, 45, 62, 61, 227, 195, 61, 156, 61, 147, 190, 192, 227, 217, 61, 88, 62, 150, 61, 186, 44, 185, 62, 16, 148, 68, 62, 82, 92, 192, 189, 173, 194, 88, 190, 190, 245, 174, 62, 6, 105, 212, 61, 176, 41, 214, 59, 108, 198, 3, 62, 239, 145, 95, 190, 217, 174, 160, 188, 102, 0, 227, 62, 97, 223, 154, 189, 87, 178, 161, 62, 46, 237, 134, 62, 146, 37, 72, 62, 130, 131, 153, 189, 13, 97, 192, 61, 129, 55, 0, 61, 58, 161, 84, 61, 115, 1, 182, 61, 71, 19, 47, 187, 140, 253, 142, 62, 53, 33, 161, 189, 237, 253, 151, 62, 216, 145, 21, 189, 186, 128, 117, 190, 96, 57, 47, 190, 205, 206, 158, 62, 198, 22, 78, 190, 26, 205, 249, 62, 177, 14, 99, 187, 81, 137, 165, 189, 232, 169, 180, 61, 19, 105, 43, 190, 219, 79, 176, 189, 27, 106, 136, 62, 68, 141, 137, 191, 163, 143, 174, 61, 133, 164, 36, 61, 210, 96, 91, 191, 14, 227, 122, 186, 43, 120, 195, 59, 103, 189, 59, 62, 177, 169, 34, 190, 242, 113, 29, 62, 55, 208, 249, 62, 53, 130, 139, 62, 154, 126, 1, 61, 121, 70, 66, 191, 64, 134, 31, 62, 245, 226, 73, 62, 98, 25, 9, 61, 187, 116, 8, 189, 26, 84, 28, 62, 99, 130, 54, 61, 95, 142, 144, 62, 119, 123, 84, 189, 223, 68, 180, 190, 200, 94, 40, 191, 106, 12, 65, 62, 239, 207, 183, 189, 240, 169, 227, 189, 216, 57, 122, 189, 249, 178, 114, 189, 61, 222, 71, 190, 140, 243, 124, 190, 199, 16, 2, 60, 146, 246, 134, 62, 174, 196, 6, 190, 253, 142, 147, 187, 13, 50, 134, 191, 207, 241, 129, 190, 89, 152, 220, 62, 106, 137, 172, 190, 255, 22, 233, 190, 48, 101, 202, 61, 98, 78, 27, 191, 102, 85, 115, 62, 87, 112, 200, 61, 126, 104, 182, 61, 232, 12, 102, 61, 244, 236, 96, 62, 27, 155, 170, 190, 124, 65, 237, 62, 219, 209, 182, 190, 234, 234, 17, 61, 165, 107, 89, 62, 115, 122, 166, 190, 107, 89, 39, 62, 169, 151, 146, 62, 88, 20, 157, 190, 180, 144, 159, 188, 79, 143, 193, 189, 175, 143, 242, 61, 152, 80, 185, 189, 166, 10, 195, 188, 221, 116, 201, 60, 161, 11, 27, 190, 96, 104, 115, 61, 11, 60, 132, 62, 57, 212, 154, 61, 221, 93, 142, 190, 15, 31, 110, 62, 25, 90, 70, 190, 72, 42, 210, 61, 211, 33, 87, 62, 251, 34, 5, 190, 70, 208, 35, 190, 202, 119, 208, 61, 173, 58, 15, 187, 99, 86, 114, 62, 94, 109, 127, 189, 54, 118, 184, 190, 253, 127, 173, 190, 251, 111, 233, 189, 156, 189, 108, 61, 188, 0, 23, 62, 29, 59, 199, 61, 108, 155, 43, 62, 104, 25, 156, 62, 7, 246, 78, 190, 195, 24, 78, 191, 48, 102, 122, 190, 245, 162, 31, 62, 150, 217, 17, 189, 184, 118, 246, 189, 64, 74, 254, 61, 254, 58, 244, 61, 142, 86, 100, 190, 196, 158, 63, 62, 161, 44, 91, 61, 108, 86, 255, 62, 209, 110, 154, 190, 32, 17, 104, 190, 208, 186, 50, 190, 100, 146, 235, 189, 57, 175, 89, 62, 49, 26, 113, 190, 177, 182, 212, 60, 136, 142, 66, 190, 26, 221, 8, 190, 51, 138, 233, 61, 90, 133, 56, 61, 66, 179, 46, 61, 59, 80, 140, 61, 246, 1, 47, 60, 217, 76, 117, 62, 91, 252, 127, 191, 235, 250, 138, 59, 137, 55, 97, 62, 85, 100, 88, 62, 85, 179, 58, 190, 157, 38, 190, 60, 174, 135, 73, 190, 86, 116, 164, 61, 72, 196, 186, 190, 207, 24, 221, 61, 239, 247, 4, 191, 67, 52, 128, 62, 185, 33, 56, 62, 127, 153, 16, 62, 74, 120, 157, 188, 144, 147, 66, 62, 197, 121, 113, 191, 114, 197, 97, 62, 39, 84, 105, 62, 23, 207, 219, 188, 79, 2, 103, 62, 136, 203, 129, 190, 129, 188, 203, 61, 165, 167, 133, 62, 108, 4, 109, 62, 76, 83, 81, 62, 22, 126, 174, 62, 86, 238, 226, 190, 115, 173, 193, 61, 64, 145, 239, 189, 122, 54, 51, 191, 29, 44, 128, 190, 42, 159, 219, 61, 217, 153, 174, 189, 157, 234, 9, 62, 70, 70, 130, 190, 197, 69, 2, 61, 222, 228, 0, 191, 225, 241, 73, 191, 102, 179, 16, 190, 31, 185, 137, 62, 232, 154, 198, 190, 30, 201, 192, 62, 74, 215, 112, 61, 155, 216, 99, 62, 188, 196, 77, 191, 60, 136, 191, 189, 93, 215, 154, 62, 56, 137, 24, 63, 106, 12, 30, 191, 193, 101, 60, 62, 44, 119, 98, 190, 85, 175, 226, 190, 247, 85, 171, 62, 232, 31, 229, 189, 51, 252, 9, 191, 79, 6, 83, 190, 81, 113, 195, 190, 119, 85, 242, 62, 93, 35, 42, 62, 191, 32, 177, 62, 239, 76, 227, 59, 159, 157, 70, 62, 207, 192, 11, 63, 239, 99, 156, 189, 198, 60, 65, 190, 212, 128, 55, 62, 135, 194, 142, 62, 250, 2, 165, 190, 146, 33, 159, 62, 87, 245, 254, 61, 65, 139, 225, 189, 248, 190, 174, 189, 30, 172, 0, 62, 116, 157, 26, 190, 139, 165, 39, 190, 172, 183, 145, 189, 146, 254, 157, 60, 30, 65, 119, 189, 233, 211, 50, 61, 2, 94, 145, 188, 16, 231, 62, 189, 189, 134, 208, 189, 192, 3, 65, 189, 81, 1, 2, 190, 115, 109, 34, 62, 91, 114, 132, 58, 93, 81, 38, 190, 238, 153, 37, 187, 151, 180, 2, 62, 215, 47, 37, 190, 157, 190, 252, 60, 9, 144, 194, 189, 225, 138, 177, 189, 193, 200, 35, 190, 236, 238, 25, 62, 248, 61, 237, 61, 147, 55, 155, 61, 108, 89, 6, 190, 189, 114, 53, 190, 198, 37, 17, 189, 114, 203, 99, 61, 243, 87, 165, 190, 192, 249, 179, 191, 234, 118, 67, 60, 225, 244, 72, 191, 145, 5, 109, 188, 137, 137, 203, 58, 110, 32, 233, 187, 51, 172, 52, 190, 31, 34, 43, 191, 145, 215, 222, 190, 40, 77, 153, 62, 11, 113, 13, 191, 68, 252, 21, 188, 58, 41, 128, 191, 81, 23, 144, 191, 85, 11, 118, 62, 24, 233, 170, 189, 126, 153, 182, 190, 65, 240, 37, 62, 97, 131, 210, 190, 132, 50, 147, 190, 75, 181, 184, 190, 47, 142, 167, 188, 91, 191, 145, 188, 128, 221, 194, 189, 230, 108, 22, 190, 240, 19, 28, 62, 61, 6, 225, 190, 73, 210, 53, 189, 176, 32, 238, 189, 60, 85, 20, 191, 236, 210, 59, 62, 44, 20, 98, 190, 187, 113, 105, 190, 174, 237, 26, 62, 25, 177, 4, 62, 99, 131, 35, 189, 215, 112, 36, 61, 177, 189, 197, 60, 187, 52, 250, 59, 140, 210, 144, 189, 102, 114, 19, 60, 176, 253, 225, 62, 144, 103, 237, 189, 120, 231, 198, 189, 205, 51, 87, 189, 42, 201, 137, 190, 191, 81, 171, 61, 85, 23, 163, 61, 247, 112, 237, 61, 97, 105, 25, 190, 63, 185, 225, 189, 38, 42, 206, 189, 212, 215, 51, 190, 130, 25, 52, 62, 121, 230, 25, 62, 192, 234, 143, 188, 84, 184, 19, 62, 58, 233, 103, 190, 49, 41, 212, 61, 213, 171, 156, 60, 243, 170, 26, 62, 231, 14, 169, 190, 107, 8, 35, 62, 107, 73, 139, 190, 55, 215, 253, 189, 210, 171, 200, 61, 186, 223, 129, 190, 40, 156, 161, 189, 36, 16, 128, 189, 172, 207, 84, 62, 250, 9, 18, 191, 254, 197, 150, 61, 47, 106, 20, 190, 139, 71, 183, 62, 68, 226, 194, 190, 242, 168, 101, 62, 133, 60, 150, 191, 149, 122, 1, 190, 13, 61, 188, 62, 6, 213, 154, 190, 17, 37, 57, 191, 100, 111, 126, 62, 194, 189, 190, 190, 26, 66, 239, 190, 77, 249, 4, 63, 103, 196, 109, 62, 183, 113, 57, 62, 22, 153, 163, 62, 136, 89, 170, 62, 254, 207, 195, 62, 116, 228, 226, 190, 92, 47, 101, 62, 8, 152, 38, 63, 125, 76, 225, 190, 17, 219, 151, 62, 144, 246, 55, 190, 16, 99, 23, 190, 221, 38, 214, 60, 173, 72, 97, 189, 193, 99, 7, 62, 248, 78, 190, 189, 21, 212, 27, 190, 167, 238, 73, 189, 130, 227, 83, 189, 183, 66, 73, 189, 49, 134, 148, 61, 247, 241, 48, 187, 196, 35, 253, 189, 176, 22, 100, 61, 234, 65, 66, 61, 187, 231, 74, 190, 192, 164, 157, 188, 42, 164, 22, 190, 101, 180, 219, 188, 100, 153, 20, 190, 218, 153, 34, 190, 148, 223, 92, 61, 89, 134, 98, 61, 102, 234, 124, 189, 125, 135, 209, 189, 179, 77, 23, 62, 179, 120, 237, 189, 68, 21, 106, 189, 18, 146, 243, 189, 229, 247, 59, 190, 41, 27, 23, 190, 120, 74, 116, 61, 252, 68, 98, 191, 128, 149, 213, 190, 124, 193, 1, 61, 124, 249, 69, 189, 153, 52, 43, 190, 59, 5, 230, 61, 102, 121, 200, 61, 216, 121, 33, 190, 104, 51, 91, 58, 97, 35, 138, 62, 214, 144, 7, 63, 61, 231, 253, 189, 71, 14, 46, 190, 15, 181, 8, 190, 166, 238, 189, 189, 141, 10, 145, 62, 99, 52, 64, 190, 172, 111, 167, 61, 227, 87, 69, 190, 170, 174, 33, 190, 94, 17, 145, 62, 41, 32, 236, 60, 46, 50, 45, 62, 5, 179, 149, 189, 142, 201, 187, 61, 239, 226, 173, 62, 136, 174, 165, 191, 245, 167, 10, 60, 130, 217, 53, 61, 144, 196, 62, 62, 70, 99, 78, 190, 181, 48, 138, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 206, 133, 189, 165, 242, 129, 61, 43, 147, 83, 61, 111, 238, 71, 62, 14, 57, 61, 189, 56, 178, 36, 189, 154, 186, 16, 189, 194, 61, 232, 190, 64, 208, 179, 190, 76, 249, 56, 62, 95, 247, 149, 61, 141, 251, 158, 190, 22, 10, 35, 62, 75, 97, 167, 62, 156, 92, 38, 190, 192, 204, 100, 62, 97, 189, 237, 60, 176, 92, 169, 190, 17, 58, 147, 60, 136, 54, 49, 61, 185, 46, 3, 62, 73, 62, 76, 189, 26, 53, 188, 61, 79, 32, 131, 62, 178, 21, 128, 62, 156, 26, 146, 62, 154, 202, 146, 59, 207, 70, 17, 62, 136, 160, 43, 62, 64, 173, 72, 62, 107, 193, 136, 189, 182, 213, 111, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 20, 162, 190, 85, 157, 167, 190, 242, 108, 66, 190, 231, 34, 113, 191, 202, 194, 92, 189, 211, 180, 2, 63, 87, 229, 17, 190, 61, 128, 147, 190, 18, 31, 78, 191, 126, 89, 127, 190, 36, 27, 184, 60, 235, 195, 238, 61, 135, 110, 160, 63, 235, 116, 239, 188, 116, 201, 188, 61, 139, 121, 78, 189, 118, 246, 191, 190, 135, 204, 143, 190, 163, 214, 250, 62, 202, 50, 212, 189, 137, 141, 216, 62, 113, 5, 14, 63, 255, 42, 57, 190, 56, 240, 56, 62, 35, 64, 10, 191, 197, 39, 94, 63, 179, 253, 128, 59, 8, 215, 163, 63, 198, 109, 73, 61, 27, 93, 155, 63, 102, 177, 19, 190, 16, 26, 117, 62, 13, 149, 177, 187, 172, 36, 202, 190, 181, 188, 117, 189, 223, 60, 144, 62, 83, 222, 176, 189, 1, 200, 34, 189, 72, 239, 151, 189, 125, 64, 83, 62, 182, 66, 247, 188, 204, 199, 47, 190, 222, 190, 16, 61, 124, 188, 56, 63, 77, 34, 135, 189, 120, 108, 45, 190, 51, 46, 208, 189, 125, 65, 221, 189, 6, 30, 149, 62, 75, 69, 41, 62, 93, 4, 62, 189, 192, 138, 147, 190, 195, 236, 231, 62, 249, 27, 36, 190, 127, 213, 76, 60, 241, 44, 115, 190, 7, 220, 128, 59, 51, 176, 173, 61, 34, 199, 243, 187, 108, 7, 18, 188, 101, 117, 15, 190, 135, 16, 220, 62, 55, 154, 206, 189, 154, 72, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 29, 72, 190, 21, 41, 43, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {41, 115, 19, 191, 197, 200, 59, 63, 200, 180, 207, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {8, 63, 227, 62, 94, 186, 39, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0078/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}