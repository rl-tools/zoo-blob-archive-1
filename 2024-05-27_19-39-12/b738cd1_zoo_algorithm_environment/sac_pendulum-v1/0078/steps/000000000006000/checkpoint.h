// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 224, 168, 190, 108, 22, 14, 190, 132, 38, 185, 190, 130, 227, 90, 190, 12, 121, 71, 63, 192, 245, 99, 62, 164, 5, 45, 63, 14, 192, 129, 191, 252, 141, 224, 190, 115, 49, 202, 62, 164, 182, 58, 190, 107, 102, 10, 63, 214, 216, 38, 63, 90, 234, 28, 191, 28, 151, 155, 190, 219, 213, 143, 190, 27, 128, 126, 62, 194, 195, 23, 190, 187, 27, 225, 61, 12, 45, 105, 62, 83, 204, 30, 61, 143, 232, 77, 61, 190, 59, 133, 63, 44, 60, 86, 191, 129, 62, 222, 62, 189, 203, 38, 190, 77, 147, 34, 63, 21, 165, 25, 63, 180, 237, 90, 190, 144, 220, 119, 62, 70, 101, 126, 62, 169, 136, 144, 191, 159, 157, 221, 62, 38, 102, 0, 63, 107, 227, 133, 63, 28, 205, 232, 62, 245, 104, 99, 190, 246, 180, 23, 63, 96, 246, 13, 190, 237, 9, 204, 61, 107, 141, 125, 191, 62, 120, 251, 190, 191, 115, 12, 63, 172, 196, 83, 63, 178, 254, 206, 62, 54, 96, 29, 61, 72, 105, 90, 63, 56, 12, 227, 190, 95, 33, 218, 190, 57, 108, 172, 191, 219, 211, 159, 189, 236, 148, 109, 62, 127, 253, 35, 62, 98, 139, 56, 191, 18, 48, 232, 190, 199, 183, 117, 63, 184, 32, 36, 190, 150, 144, 184, 62, 157, 133, 101, 191, 103, 10, 24, 63, 55, 211, 128, 63, 118, 133, 18, 190, 112, 168, 147, 189, 155, 111, 216, 62, 67, 19, 91, 191, 106, 236, 33, 190, 159, 40, 176, 190, 99, 175, 17, 190, 176, 251, 148, 189, 38, 141, 232, 186, 16, 233, 128, 63, 44, 175, 37, 62, 245, 15, 176, 61, 116, 55, 204, 190, 130, 23, 73, 63, 4, 150, 223, 62, 178, 103, 236, 62, 198, 83, 248, 190, 229, 170, 226, 190, 219, 131, 133, 62, 24, 218, 20, 190, 60, 10, 128, 190, 17, 227, 215, 190, 132, 253, 0, 191, 226, 27, 212, 189, 254, 80, 254, 189, 53, 131, 190, 61, 228, 163, 106, 62, 70, 123, 161, 60, 187, 31, 166, 190, 210, 104, 108, 189, 226, 45, 125, 191, 167, 105, 186, 62, 89, 178, 221, 190, 195, 116, 193, 190, 73, 242, 128, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 99, 157, 190, 219, 102, 246, 190, 131, 129, 147, 60, 120, 17, 249, 61, 224, 81, 9, 191, 203, 183, 15, 63, 229, 205, 239, 62, 31, 61, 71, 62, 200, 216, 152, 62, 139, 23, 26, 63, 226, 207, 43, 188, 59, 98, 183, 189, 68, 34, 82, 62, 40, 55, 243, 62, 61, 98, 246, 188, 83, 32, 77, 62, 99, 27, 138, 62, 20, 182, 6, 63, 93, 43, 3, 63, 219, 64, 57, 61, 158, 211, 127, 62, 170, 220, 107, 61, 43, 1, 20, 63, 107, 22, 176, 62, 72, 243, 133, 189, 244, 110, 91, 62, 157, 217, 234, 190, 77, 230, 71, 190, 87, 139, 204, 62, 155, 173, 140, 62, 44, 170, 207, 189, 74, 254, 4, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 234, 188, 189, 109, 147, 140, 60, 53, 209, 70, 190, 154, 23, 126, 62, 24, 116, 44, 189, 19, 209, 185, 61, 128, 154, 98, 61, 215, 213, 198, 62, 120, 120, 146, 61, 252, 234, 213, 189, 28, 143, 44, 191, 189, 5, 149, 62, 125, 108, 9, 62, 76, 116, 102, 62, 35, 235, 188, 62, 138, 205, 69, 190, 189, 108, 99, 189, 147, 146, 37, 62, 64, 108, 84, 62, 72, 132, 176, 62, 100, 19, 233, 61, 234, 105, 93, 190, 138, 233, 101, 62, 178, 0, 101, 62, 4, 88, 203, 189, 249, 158, 136, 190, 249, 50, 49, 62, 228, 132, 50, 190, 184, 68, 36, 188, 236, 59, 68, 190, 150, 162, 40, 62, 229, 210, 22, 190, 174, 75, 197, 187, 53, 86, 184, 190, 6, 18, 144, 189, 194, 192, 149, 189, 68, 61, 96, 61, 201, 14, 152, 190, 70, 156, 235, 61, 248, 99, 148, 190, 208, 109, 137, 188, 7, 115, 102, 62, 49, 3, 154, 61, 183, 51, 170, 60, 65, 246, 203, 190, 199, 92, 133, 61, 249, 217, 28, 62, 179, 248, 20, 189, 216, 203, 220, 61, 53, 76, 230, 60, 144, 72, 209, 190, 65, 37, 70, 62, 50, 79, 113, 62, 181, 41, 240, 61, 152, 147, 189, 189, 92, 234, 181, 190, 94, 232, 234, 61, 131, 191, 169, 61, 52, 82, 142, 190, 118, 86, 133, 190, 158, 140, 179, 189, 67, 120, 7, 62, 228, 213, 166, 61, 9, 40, 169, 61, 197, 141, 181, 188, 15, 43, 24, 61, 254, 182, 156, 61, 126, 133, 64, 62, 178, 150, 255, 189, 32, 219, 40, 60, 105, 96, 139, 60, 101, 240, 177, 62, 111, 220, 113, 188, 206, 195, 31, 190, 55, 4, 244, 190, 164, 195, 114, 62, 142, 131, 37, 62, 138, 60, 184, 189, 0, 54, 172, 62, 242, 188, 141, 190, 84, 102, 129, 189, 197, 93, 88, 62, 212, 145, 22, 62, 3, 96, 133, 62, 131, 14, 200, 61, 55, 119, 161, 189, 106, 32, 16, 62, 170, 152, 225, 61, 224, 214, 29, 190, 34, 84, 198, 61, 60, 39, 10, 60, 217, 130, 125, 188, 226, 99, 179, 189, 42, 55, 7, 190, 254, 91, 129, 62, 4, 36, 29, 189, 36, 254, 202, 61, 75, 207, 8, 191, 193, 42, 202, 190, 113, 21, 157, 189, 2, 119, 1, 190, 176, 113, 141, 62, 202, 152, 121, 60, 163, 49, 10, 62, 100, 158, 139, 191, 28, 50, 5, 191, 77, 84, 74, 191, 104, 12, 230, 189, 174, 45, 163, 62, 55, 200, 132, 60, 74, 187, 100, 62, 9, 90, 130, 190, 144, 28, 134, 62, 218, 27, 74, 62, 120, 69, 173, 62, 123, 103, 131, 190, 38, 240, 7, 63, 4, 89, 247, 190, 160, 164, 154, 189, 177, 17, 143, 190, 252, 197, 140, 191, 50, 82, 224, 189, 7, 163, 21, 62, 91, 246, 186, 190, 8, 103, 39, 62, 197, 214, 148, 189, 24, 232, 250, 189, 10, 238, 126, 191, 105, 15, 57, 190, 54, 195, 196, 60, 177, 122, 156, 61, 93, 51, 210, 60, 253, 45, 138, 190, 251, 147, 131, 62, 196, 90, 137, 62, 64, 208, 178, 188, 225, 202, 60, 62, 249, 42, 1, 60, 155, 243, 110, 62, 21, 70, 126, 62, 236, 163, 101, 189, 197, 165, 25, 62, 76, 134, 5, 188, 38, 61, 235, 189, 16, 112, 80, 62, 244, 205, 93, 61, 143, 151, 180, 60, 231, 70, 212, 189, 220, 142, 140, 62, 250, 191, 139, 189, 128, 82, 34, 62, 13, 49, 161, 61, 160, 212, 194, 61, 118, 84, 98, 61, 7, 248, 152, 189, 115, 123, 91, 60, 49, 185, 158, 62, 155, 51, 61, 187, 138, 137, 184, 189, 22, 148, 250, 189, 83, 86, 208, 189, 79, 188, 56, 190, 124, 84, 127, 190, 126, 80, 48, 190, 218, 211, 8, 62, 208, 243, 16, 62, 29, 193, 17, 189, 40, 180, 3, 190, 111, 186, 88, 62, 250, 187, 31, 189, 89, 216, 146, 62, 206, 100, 111, 189, 195, 200, 198, 62, 206, 41, 14, 191, 88, 126, 157, 189, 78, 32, 227, 61, 247, 196, 140, 190, 44, 252, 253, 189, 22, 161, 141, 62, 130, 223, 91, 190, 117, 132, 211, 190, 27, 245, 180, 190, 67, 158, 234, 189, 34, 227, 185, 62, 13, 50, 68, 62, 21, 199, 17, 62, 131, 86, 229, 61, 166, 157, 184, 61, 9, 6, 1, 189, 185, 19, 25, 62, 143, 255, 28, 190, 29, 126, 180, 62, 68, 189, 149, 189, 198, 43, 27, 62, 111, 67, 85, 190, 56, 239, 148, 188, 107, 221, 9, 190, 105, 39, 64, 190, 244, 55, 197, 189, 250, 27, 200, 187, 106, 207, 72, 61, 51, 78, 39, 190, 33, 203, 236, 189, 169, 136, 212, 189, 44, 228, 66, 190, 129, 120, 66, 190, 180, 227, 223, 188, 215, 177, 15, 189, 37, 237, 148, 59, 36, 193, 212, 61, 219, 77, 129, 60, 35, 237, 23, 189, 88, 237, 168, 189, 97, 169, 39, 189, 98, 53, 136, 189, 105, 106, 244, 61, 225, 11, 191, 189, 9, 26, 18, 61, 75, 50, 196, 61, 205, 207, 222, 61, 161, 54, 242, 61, 124, 60, 204, 61, 126, 9, 245, 189, 201, 226, 213, 61, 87, 13, 23, 190, 199, 241, 166, 61, 39, 158, 4, 62, 222, 83, 158, 61, 113, 219, 66, 62, 123, 203, 66, 190, 88, 185, 32, 190, 210, 55, 82, 190, 217, 16, 142, 59, 153, 157, 133, 61, 65, 31, 151, 62, 74, 77, 56, 190, 112, 57, 197, 189, 137, 183, 176, 187, 46, 190, 83, 61, 114, 124, 109, 61, 7, 73, 23, 62, 34, 86, 111, 190, 186, 10, 4, 191, 181, 159, 104, 61, 196, 234, 6, 190, 97, 104, 196, 62, 76, 36, 59, 190, 213, 85, 185, 188, 77, 178, 142, 62, 54, 127, 224, 60, 196, 3, 231, 190, 156, 215, 46, 190, 18, 208, 37, 62, 72, 49, 236, 189, 4, 154, 159, 62, 182, 222, 221, 62, 134, 236, 49, 61, 221, 136, 218, 189, 124, 86, 171, 62, 229, 214, 211, 190, 211, 156, 12, 63, 175, 162, 3, 190, 88, 224, 84, 190, 57, 162, 1, 190, 55, 251, 219, 190, 208, 1, 248, 190, 17, 29, 9, 190, 180, 116, 52, 189, 7, 140, 174, 190, 78, 52, 18, 61, 106, 68, 175, 190, 45, 146, 183, 189, 200, 40, 169, 189, 33, 25, 159, 61, 35, 84, 13, 191, 133, 19, 137, 190, 14, 16, 204, 62, 86, 245, 174, 62, 92, 133, 49, 190, 155, 179, 193, 190, 123, 237, 49, 62, 206, 126, 162, 61, 40, 13, 245, 190, 93, 58, 60, 62, 243, 130, 191, 189, 2, 48, 5, 189, 184, 59, 67, 190, 85, 95, 160, 189, 22, 148, 11, 189, 56, 50, 132, 62, 218, 118, 5, 61, 191, 15, 14, 62, 29, 13, 141, 61, 236, 221, 211, 189, 15, 175, 35, 60, 108, 240, 161, 62, 123, 73, 76, 61, 158, 193, 134, 190, 75, 126, 50, 191, 133, 212, 84, 62, 223, 179, 119, 62, 72, 0, 68, 61, 111, 70, 154, 62, 88, 127, 164, 190, 23, 225, 120, 61, 175, 128, 28, 61, 109, 132, 62, 62, 91, 20, 24, 62, 252, 49, 136, 62, 187, 197, 187, 61, 227, 137, 162, 61, 65, 16, 49, 61, 117, 219, 13, 191, 211, 89, 189, 61, 3, 40, 193, 61, 39, 125, 2, 190, 118, 89, 8, 190, 25, 141, 74, 190, 213, 208, 232, 61, 184, 46, 180, 190, 222, 171, 249, 60, 125, 18, 209, 189, 87, 96, 207, 61, 69, 4, 167, 189, 164, 5, 13, 190, 21, 66, 166, 61, 9, 19, 218, 60, 244, 2, 112, 61, 160, 185, 0, 60, 65, 103, 9, 190, 224, 60, 3, 189, 6, 4, 8, 62, 67, 141, 7, 190, 54, 83, 129, 189, 191, 7, 3, 62, 120, 202, 138, 189, 217, 28, 71, 190, 95, 192, 72, 189, 188, 221, 248, 189, 62, 100, 72, 61, 124, 141, 30, 190, 86, 97, 134, 61, 243, 31, 159, 61, 174, 12, 181, 189, 62, 90, 150, 189, 42, 12, 37, 190, 135, 130, 182, 61, 219, 206, 62, 61, 97, 169, 14, 61, 135, 116, 146, 189, 136, 68, 188, 61, 130, 252, 139, 188, 117, 49, 25, 190, 152, 237, 162, 62, 139, 2, 192, 189, 53, 147, 36, 62, 104, 96, 0, 190, 163, 254, 96, 189, 224, 1, 135, 189, 181, 134, 21, 62, 29, 108, 128, 61, 213, 170, 203, 189, 209, 181, 34, 190, 158, 17, 23, 62, 59, 224, 145, 61, 92, 48, 4, 190, 94, 9, 169, 62, 145, 217, 158, 60, 67, 20, 32, 190, 95, 205, 184, 60, 171, 93, 31, 62, 57, 132, 26, 62, 10, 93, 71, 62, 41, 201, 81, 190, 94, 74, 155, 190, 205, 221, 154, 60, 184, 246, 160, 60, 228, 59, 188, 190, 253, 248, 76, 61, 141, 101, 172, 189, 145, 28, 212, 188, 14, 104, 133, 190, 66, 122, 141, 61, 232, 153, 129, 190, 158, 211, 168, 189, 64, 195, 144, 190, 10, 117, 15, 62, 23, 159, 29, 191, 174, 17, 68, 60, 228, 3, 183, 187, 123, 91, 107, 61, 178, 94, 104, 190, 201, 120, 185, 190, 149, 109, 15, 190, 24, 23, 6, 62, 19, 210, 200, 190, 98, 237, 28, 62, 94, 216, 253, 190, 82, 56, 210, 190, 111, 27, 202, 62, 86, 182, 138, 190, 91, 174, 170, 190, 162, 165, 21, 61, 121, 117, 6, 191, 247, 140, 177, 189, 143, 54, 171, 190, 76, 175, 178, 186, 177, 104, 171, 62, 127, 250, 166, 62, 228, 160, 228, 189, 174, 141, 131, 190, 10, 115, 149, 61, 58, 29, 11, 62, 4, 58, 123, 61, 180, 180, 1, 191, 235, 219, 158, 62, 225, 73, 153, 189, 43, 154, 92, 62, 120, 242, 2, 62, 22, 40, 45, 188, 66, 187, 192, 190, 15, 78, 139, 62, 26, 118, 82, 61, 217, 253, 154, 189, 215, 32, 5, 61, 215, 132, 22, 62, 13, 228, 236, 61, 160, 173, 16, 61, 159, 125, 63, 189, 80, 140, 221, 59, 68, 26, 25, 62, 203, 6, 79, 190, 117, 111, 20, 61, 236, 17, 160, 61, 21, 207, 147, 61, 141, 39, 0, 62, 26, 220, 135, 62, 186, 62, 163, 60, 151, 33, 44, 189, 160, 145, 33, 62, 227, 148, 209, 185, 91, 112, 4, 61, 153, 117, 39, 190, 37, 231, 82, 61, 6, 104, 144, 62, 151, 1, 194, 61, 118, 225, 141, 188, 11, 0, 12, 62, 37, 123, 139, 188, 244, 3, 15, 190, 56, 155, 171, 189, 128, 121, 187, 189, 89, 109, 21, 62, 130, 188, 32, 189, 73, 219, 43, 190, 195, 252, 67, 189, 146, 46, 20, 62, 119, 65, 237, 60, 40, 239, 164, 189, 109, 130, 12, 190, 214, 29, 14, 61, 152, 104, 8, 62, 41, 252, 43, 190, 90, 182, 12, 189, 77, 153, 229, 188, 114, 216, 245, 189, 135, 1, 42, 190, 211, 125, 162, 189, 118, 200, 224, 61, 191, 143, 25, 190, 185, 178, 130, 61, 220, 253, 206, 189, 20, 136, 13, 62, 117, 23, 254, 61, 201, 145, 51, 189, 65, 44, 140, 188, 68, 76, 20, 190, 156, 199, 40, 190, 93, 230, 215, 189, 151, 167, 10, 190, 150, 160, 109, 190, 111, 124, 62, 61, 18, 237, 164, 61, 206, 228, 19, 62, 40, 166, 250, 190, 4, 133, 105, 189, 218, 249, 87, 61, 99, 140, 59, 59, 24, 133, 203, 189, 113, 73, 77, 62, 201, 25, 43, 62, 118, 158, 203, 61, 134, 34, 177, 189, 103, 212, 220, 61, 125, 47, 140, 61, 81, 96, 44, 189, 0, 83, 49, 62, 41, 253, 4, 62, 38, 133, 130, 62, 146, 136, 134, 61, 139, 119, 45, 62, 106, 191, 12, 61, 88, 237, 74, 62, 234, 19, 24, 61, 147, 162, 167, 188, 6, 122, 162, 60, 45, 93, 166, 61, 254, 48, 152, 189, 34, 31, 51, 61, 83, 125, 243, 189, 38, 149, 100, 61, 37, 188, 247, 60, 36, 232, 35, 60, 196, 198, 78, 189, 181, 93, 9, 62, 64, 178, 255, 189, 146, 125, 33, 62, 187, 252, 157, 190, 17, 86, 25, 190, 247, 33, 126, 189, 150, 247, 222, 190, 58, 230, 134, 190, 157, 217, 66, 188, 32, 205, 35, 190, 178, 220, 251, 190, 254, 122, 154, 61, 151, 81, 87, 190, 121, 197, 161, 190, 104, 187, 21, 190, 137, 8, 46, 190, 246, 193, 23, 191, 210, 192, 42, 190, 3, 50, 237, 61, 185, 139, 60, 62, 145, 7, 122, 190, 249, 201, 93, 190, 51, 104, 113, 190, 207, 178, 231, 187, 251, 192, 25, 191, 203, 166, 233, 61, 153, 223, 0, 189, 122, 147, 6, 61, 197, 57, 87, 190, 61, 25, 242, 189, 208, 197, 129, 58, 60, 3, 158, 62, 105, 97, 68, 190, 38, 215, 181, 61, 253, 213, 37, 190, 149, 16, 79, 61, 232, 136, 27, 189, 17, 26, 252, 61, 199, 23, 73, 62, 107, 132, 114, 61, 128, 20, 240, 60, 252, 120, 157, 62, 53, 190, 24, 190, 86, 220, 1, 190, 102, 144, 189, 62, 4, 185, 151, 62, 42, 4, 147, 61, 170, 21, 82, 62, 101, 103, 24, 187, 194, 2, 173, 62, 95, 195, 71, 189, 37, 174, 80, 190, 6, 9, 87, 190, 61, 224, 253, 61, 37, 101, 65, 61, 11, 5, 85, 62, 198, 124, 186, 190, 147, 69, 84, 189, 60, 212, 52, 190, 237, 43, 6, 61, 54, 215, 180, 62, 41, 216, 120, 62, 96, 27, 209, 61, 13, 140, 133, 61, 209, 236, 129, 189, 42, 158, 168, 189, 97, 220, 204, 61, 126, 138, 49, 62, 198, 51, 63, 190, 185, 173, 76, 62, 158, 176, 2, 62, 132, 250, 188, 61, 26, 137, 12, 190, 135, 51, 110, 59, 210, 49, 61, 62, 81, 202, 120, 61, 36, 135, 156, 60, 17, 23, 177, 62, 253, 23, 73, 190, 117, 23, 186, 62, 138, 53, 239, 61, 163, 186, 110, 62, 202, 94, 12, 62, 117, 107, 43, 62, 198, 248, 112, 189, 92, 177, 176, 189, 122, 69, 164, 190, 17, 51, 108, 62, 39, 205, 50, 60, 171, 20, 239, 61, 54, 146, 96, 61, 3, 192, 109, 62, 209, 17, 228, 62, 194, 236, 216, 190, 154, 126, 148, 190, 231, 28, 79, 62, 239, 220, 43, 62, 164, 160, 172, 61, 45, 17, 99, 190, 170, 254, 220, 61, 63, 24, 239, 61, 160, 210, 189, 62, 238, 2, 60, 62, 187, 150, 90, 189, 184, 174, 119, 190, 53, 160, 157, 62, 60, 168, 35, 62, 187, 42, 148, 187, 83, 149, 211, 61, 5, 162, 99, 190, 93, 5, 148, 59, 64, 21, 231, 62, 88, 217, 97, 189, 33, 139, 156, 62, 139, 38, 27, 62, 188, 238, 135, 62, 137, 236, 131, 189, 167, 2, 20, 62, 214, 155, 187, 60, 219, 84, 83, 61, 9, 189, 197, 59, 247, 202, 62, 189, 60, 130, 152, 62, 49, 125, 223, 189, 70, 4, 149, 62, 12, 30, 140, 189, 73, 164, 9, 189, 165, 47, 234, 190, 7, 46, 67, 61, 168, 182, 46, 190, 136, 187, 164, 62, 0, 250, 80, 61, 164, 158, 179, 188, 94, 1, 182, 61, 238, 185, 228, 189, 68, 246, 92, 190, 48, 133, 95, 62, 189, 98, 35, 191, 7, 19, 204, 61, 252, 176, 30, 190, 136, 218, 6, 191, 134, 146, 36, 61, 127, 153, 67, 61, 13, 198, 160, 61, 144, 34, 16, 190, 176, 63, 104, 61, 122, 69, 232, 61, 52, 64, 129, 189, 148, 220, 37, 62, 82, 240, 170, 190, 186, 141, 24, 62, 138, 53, 33, 62, 228, 24, 141, 62, 51, 66, 142, 188, 185, 125, 60, 62, 132, 124, 45, 189, 77, 249, 108, 62, 128, 40, 10, 189, 13, 210, 159, 190, 222, 159, 3, 191, 205, 97, 142, 61, 81, 162, 198, 188, 253, 95, 233, 189, 16, 138, 4, 189, 186, 136, 84, 61, 67, 93, 245, 190, 109, 220, 221, 189, 93, 68, 42, 62, 239, 59, 177, 62, 202, 139, 0, 190, 98, 47, 130, 187, 183, 107, 42, 191, 72, 112, 89, 190, 49, 106, 153, 62, 215, 238, 18, 190, 113, 80, 26, 191, 216, 57, 230, 61, 104, 54, 19, 191, 222, 18, 46, 62, 33, 66, 83, 190, 10, 217, 34, 62, 196, 29, 13, 62, 151, 219, 152, 62, 251, 132, 205, 189, 169, 91, 47, 190, 193, 122, 211, 187, 240, 224, 16, 62, 21, 129, 155, 61, 11, 77, 118, 190, 51, 27, 140, 62, 8, 115, 208, 61, 33, 206, 27, 189, 162, 0, 23, 190, 39, 88, 185, 60, 216, 56, 24, 188, 197, 228, 63, 189, 110, 148, 3, 61, 203, 30, 160, 60, 115, 216, 47, 59, 54, 92, 62, 61, 94, 132, 192, 189, 227, 88, 233, 61, 151, 173, 195, 189, 194, 60, 95, 61, 124, 143, 20, 190, 5, 173, 170, 61, 3, 94, 198, 187, 38, 150, 37, 190, 106, 226, 48, 189, 50, 205, 177, 61, 62, 226, 93, 188, 83, 139, 142, 61, 123, 68, 15, 190, 167, 161, 240, 189, 219, 65, 31, 190, 100, 42, 251, 189, 76, 24, 37, 189, 182, 213, 199, 61, 81, 183, 22, 61, 205, 196, 244, 61, 173, 186, 57, 61, 25, 33, 8, 190, 120, 75, 61, 190, 27, 11, 248, 189, 101, 102, 83, 62, 36, 150, 58, 60, 39, 16, 29, 190, 155, 4, 8, 62, 42, 236, 31, 61, 84, 110, 184, 190, 15, 42, 119, 62, 169, 1, 237, 59, 31, 117, 3, 63, 70, 237, 67, 190, 12, 225, 77, 190, 54, 215, 65, 59, 42, 246, 101, 189, 33, 127, 52, 61, 84, 16, 57, 190, 7, 101, 223, 186, 156, 43, 0, 190, 157, 148, 16, 190, 75, 214, 130, 61, 128, 188, 157, 60, 78, 170, 153, 188, 224, 105, 211, 61, 167, 72, 143, 61, 55, 68, 222, 61, 67, 144, 243, 190, 115, 15, 83, 62, 229, 233, 71, 62, 56, 248, 101, 62, 118, 146, 102, 190, 82, 84, 178, 61, 68, 159, 28, 190, 160, 242, 83, 62, 118, 33, 183, 190, 194, 202, 39, 62, 236, 217, 181, 190, 30, 3, 77, 62, 30, 9, 218, 61, 141, 131, 75, 62, 71, 14, 9, 61, 36, 34, 214, 61, 105, 138, 87, 191, 52, 181, 146, 62, 25, 197, 125, 62, 150, 124, 57, 60, 242, 226, 135, 62, 200, 18, 112, 190, 75, 175, 48, 61, 111, 107, 152, 62, 208, 162, 109, 62, 225, 84, 160, 62, 235, 139, 226, 61, 63, 249, 209, 190, 8, 223, 31, 59, 167, 19, 174, 189, 113, 107, 6, 191, 94, 108, 119, 190, 169, 185, 11, 61, 196, 150, 16, 61, 247, 136, 168, 60, 142, 150, 133, 190, 142, 98, 29, 62, 138, 248, 169, 190, 57, 221, 63, 190, 83, 184, 225, 189, 124, 125, 163, 62, 12, 189, 167, 190, 245, 15, 160, 62, 193, 222, 211, 60, 189, 218, 24, 62, 163, 172, 85, 191, 217, 239, 45, 189, 102, 170, 171, 62, 179, 228, 49, 63, 160, 156, 247, 190, 199, 134, 253, 61, 176, 178, 156, 189, 197, 63, 142, 190, 143, 138, 164, 62, 247, 89, 56, 61, 139, 179, 242, 190, 154, 93, 244, 189, 82, 27, 155, 190, 31, 246, 255, 62, 171, 39, 251, 61, 169, 129, 94, 62, 162, 223, 71, 189, 190, 223, 140, 62, 149, 247, 9, 63, 75, 61, 7, 188, 200, 147, 194, 184, 22, 186, 242, 61, 205, 36, 201, 62, 25, 198, 161, 190, 28, 240, 195, 62, 29, 39, 1, 62, 65, 139, 225, 189, 243, 123, 172, 189, 92, 119, 3, 62, 204, 89, 26, 190, 252, 109, 38, 190, 181, 11, 144, 189, 25, 250, 197, 60, 238, 142, 105, 189, 72, 51, 59, 61, 130, 113, 107, 188, 64, 92, 62, 189, 28, 83, 206, 189, 235, 62, 56, 189, 53, 245, 1, 190, 182, 83, 37, 62, 116, 68, 93, 59, 184, 112, 34, 190, 208, 234, 51, 186, 39, 129, 6, 62, 141, 44, 37, 190, 202, 211, 1, 61, 68, 106, 191, 189, 206, 244, 176, 189, 224, 253, 31, 190, 176, 183, 28, 62, 194, 249, 239, 61, 74, 165, 159, 61, 212, 40, 5, 190, 109, 222, 51, 190, 199, 242, 5, 189, 239, 1, 117, 61, 53, 137, 37, 188, 39, 235, 235, 190, 234, 118, 67, 60, 123, 255, 249, 190, 145, 5, 109, 188, 61, 26, 193, 59, 250, 218, 0, 61, 62, 254, 238, 189, 102, 110, 88, 190, 210, 220, 141, 190, 181, 25, 153, 62, 190, 64, 121, 190, 158, 241, 127, 60, 253, 237, 170, 190, 160, 58, 255, 190, 118, 180, 158, 62, 158, 18, 25, 190, 241, 174, 138, 190, 23, 11, 71, 62, 227, 7, 203, 190, 83, 181, 145, 190, 75, 181, 184, 190, 233, 59, 63, 189, 144, 226, 178, 61, 89, 176, 202, 61, 151, 170, 186, 60, 186, 247, 31, 60, 102, 27, 158, 189, 91, 30, 70, 189, 78, 126, 70, 189, 16, 84, 42, 191, 56, 94, 0, 63, 190, 205, 7, 190, 210, 200, 29, 190, 119, 105, 86, 62, 40, 86, 25, 62, 39, 98, 2, 189, 208, 53, 152, 61, 77, 182, 37, 189, 36, 211, 14, 187, 5, 51, 66, 189, 232, 131, 12, 189, 164, 19, 230, 62, 23, 41, 153, 188, 4, 198, 101, 60, 41, 224, 27, 61, 4, 200, 107, 190, 192, 61, 182, 61, 190, 218, 164, 61, 228, 135, 240, 61, 13, 224, 115, 188, 188, 229, 243, 189, 44, 191, 185, 187, 165, 77, 10, 190, 79, 49, 186, 61, 233, 86, 177, 61, 106, 51, 146, 60, 3, 250, 227, 61, 215, 83, 112, 190, 77, 6, 35, 62, 96, 229, 18, 189, 27, 91, 56, 62, 242, 170, 186, 190, 162, 240, 49, 62, 230, 29, 131, 190, 98, 102, 149, 190, 136, 215, 18, 62, 192, 24, 153, 190, 16, 240, 175, 189, 137, 119, 216, 187, 51, 220, 42, 62, 132, 245, 150, 191, 57, 210, 98, 61, 139, 230, 3, 189, 187, 138, 223, 62, 97, 1, 237, 190, 255, 12, 16, 62, 9, 1, 118, 191, 255, 222, 51, 190, 196, 88, 243, 61, 142, 120, 30, 190, 135, 38, 169, 191, 210, 137, 105, 62, 123, 217, 194, 190, 218, 58, 162, 62, 7, 198, 196, 189, 87, 229, 29, 62, 133, 139, 134, 60, 111, 205, 144, 62, 108, 76, 34, 61, 5, 106, 1, 190, 154, 0, 141, 190, 13, 177, 84, 62, 98, 124, 158, 61, 16, 242, 192, 190, 130, 1, 105, 62, 144, 246, 55, 190, 16, 99, 23, 190, 221, 38, 214, 60, 173, 72, 97, 189, 193, 99, 7, 62, 248, 78, 190, 189, 21, 212, 27, 190, 167, 238, 73, 189, 130, 227, 83, 189, 183, 66, 73, 189, 49, 134, 148, 61, 247, 241, 48, 187, 196, 35, 253, 189, 176, 22, 100, 61, 234, 65, 66, 61, 187, 231, 74, 190, 192, 164, 157, 188, 42, 164, 22, 190, 101, 180, 219, 188, 100, 153, 20, 190, 218, 153, 34, 190, 148, 223, 92, 61, 89, 134, 98, 61, 102, 234, 124, 189, 125, 135, 209, 189, 179, 77, 23, 62, 179, 120, 237, 189, 68, 21, 106, 189, 18, 146, 243, 189, 229, 247, 59, 190, 41, 27, 23, 190, 120, 74, 116, 61, 190, 204, 107, 190, 41, 164, 156, 190, 23, 250, 118, 61, 10, 115, 40, 188, 162, 86, 106, 190, 179, 162, 215, 61, 15, 120, 133, 60, 148, 56, 165, 190, 10, 2, 66, 61, 3, 251, 87, 62, 126, 126, 10, 63, 40, 14, 67, 189, 201, 32, 4, 190, 33, 99, 218, 187, 16, 70, 136, 189, 162, 122, 205, 61, 157, 98, 43, 190, 128, 210, 225, 60, 68, 200, 225, 189, 214, 121, 48, 190, 137, 42, 114, 62, 99, 99, 2, 189, 61, 56, 238, 61, 130, 61, 30, 189, 65, 148, 25, 62, 247, 108, 60, 62, 244, 45, 232, 190, 152, 205, 63, 62, 5, 196, 48, 60, 60, 38, 50, 62, 15, 66, 130, 190, 239, 118, 172, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 222, 6, 58, 163, 28, 206, 59, 251, 225, 250, 61, 231, 50, 81, 62, 196, 154, 44, 188, 107, 31, 208, 188, 103, 215, 128, 187, 17, 243, 24, 190, 249, 40, 27, 190, 126, 139, 23, 62, 95, 247, 149, 61, 6, 184, 89, 190, 0, 23, 53, 62, 27, 173, 172, 62, 156, 92, 38, 190, 112, 68, 105, 62, 58, 166, 54, 61, 87, 240, 69, 190, 137, 130, 28, 188, 188, 238, 147, 61, 40, 6, 112, 61, 161, 45, 25, 61, 121, 253, 160, 61, 17, 6, 24, 62, 7, 52, 52, 62, 22, 130, 63, 62, 184, 78, 214, 59, 38, 123, 34, 62, 94, 170, 189, 61, 191, 91, 51, 62, 107, 193, 136, 189, 186, 140, 221, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 194, 176, 190, 174, 96, 212, 189, 210, 157, 117, 190, 118, 121, 85, 191, 53, 124, 77, 188, 128, 79, 215, 62, 39, 233, 18, 190, 27, 52, 133, 190, 113, 170, 166, 190, 154, 237, 167, 190, 36, 27, 184, 60, 136, 178, 207, 61, 100, 135, 69, 63, 36, 11, 81, 59, 116, 201, 188, 61, 52, 97, 138, 188, 75, 187, 192, 190, 243, 226, 107, 190, 81, 120, 240, 62, 95, 49, 30, 190, 3, 76, 141, 189, 233, 26, 15, 63, 142, 245, 166, 189, 174, 3, 80, 62, 73, 64, 1, 191, 146, 188, 82, 63, 44, 4, 176, 59, 83, 64, 21, 63, 240, 246, 216, 61, 134, 4, 173, 63, 102, 177, 19, 190, 220, 123, 117, 62, 131, 29, 116, 187, 30, 193, 67, 190, 188, 114, 69, 189, 79, 40, 136, 62, 191, 184, 105, 190, 60, 133, 5, 190, 68, 250, 152, 189, 137, 136, 121, 62, 222, 168, 245, 62, 247, 44, 163, 189, 222, 190, 16, 61, 231, 243, 255, 62, 216, 241, 57, 62, 214, 24, 132, 190, 51, 46, 208, 189, 149, 181, 50, 190, 228, 125, 148, 62, 9, 255, 132, 62, 163, 166, 187, 60, 77, 1, 148, 190, 63, 170, 131, 62, 212, 49, 32, 190, 12, 229, 68, 61, 79, 27, 130, 190, 11, 75, 71, 61, 174, 95, 5, 62, 146, 66, 238, 187, 233, 196, 128, 62, 5, 227, 27, 190, 177, 246, 179, 62, 55, 154, 206, 189, 105, 217, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 228, 128, 190, 90, 114, 175, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {101, 225, 202, 190, 112, 208, 140, 190, 32, 21, 155, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {64, 254, 151, 63, 207, 184, 81, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0078/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}