// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 83, 134, 190, 95, 123, 236, 190, 58, 135, 177, 190, 220, 76, 197, 190, 135, 65, 65, 63, 223, 161, 175, 62, 5, 105, 66, 63, 186, 249, 130, 191, 80, 177, 189, 190, 216, 127, 195, 62, 147, 42, 114, 189, 96, 83, 18, 63, 238, 174, 93, 63, 174, 182, 61, 191, 64, 145, 144, 190, 189, 214, 110, 190, 57, 178, 164, 62, 88, 227, 247, 189, 181, 112, 79, 190, 227, 150, 25, 62, 157, 222, 195, 60, 185, 73, 5, 62, 14, 107, 84, 63, 207, 243, 83, 191, 229, 206, 10, 62, 67, 245, 32, 190, 196, 52, 44, 63, 176, 166, 14, 63, 184, 173, 84, 190, 136, 186, 107, 62, 148, 218, 52, 62, 228, 14, 135, 191, 176, 237, 227, 62, 148, 126, 20, 63, 190, 189, 152, 63, 54, 218, 184, 62, 37, 160, 158, 190, 173, 162, 38, 63, 21, 88, 191, 189, 97, 182, 220, 62, 127, 42, 180, 191, 7, 144, 238, 190, 8, 130, 11, 63, 88, 224, 154, 63, 35, 146, 99, 62, 0, 195, 167, 60, 229, 116, 96, 63, 57, 216, 235, 190, 111, 249, 18, 191, 12, 226, 196, 191, 33, 177, 234, 189, 220, 28, 231, 62, 114, 155, 178, 61, 43, 180, 44, 191, 77, 136, 252, 190, 102, 237, 123, 63, 191, 225, 31, 190, 167, 190, 231, 62, 143, 112, 120, 191, 122, 195, 18, 63, 48, 233, 164, 63, 80, 26, 176, 190, 151, 15, 221, 60, 55, 241, 254, 62, 67, 139, 85, 191, 142, 86, 36, 190, 208, 135, 44, 191, 34, 224, 78, 190, 133, 23, 47, 60, 159, 0, 109, 189, 27, 203, 141, 63, 32, 86, 98, 61, 200, 42, 21, 188, 112, 176, 198, 190, 34, 187, 60, 63, 6, 95, 235, 62, 208, 45, 2, 63, 213, 156, 239, 190, 63, 193, 15, 191, 184, 6, 120, 190, 232, 153, 103, 190, 219, 177, 66, 189, 161, 238, 233, 190, 129, 12, 233, 190, 232, 203, 89, 190, 178, 206, 221, 189, 70, 84, 40, 61, 44, 202, 21, 62, 97, 203, 20, 189, 18, 214, 154, 190, 114, 167, 153, 61, 138, 20, 135, 191, 215, 159, 173, 62, 186, 133, 19, 191, 70, 57, 182, 190, 42, 59, 120, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 93, 225, 190, 24, 235, 54, 190, 173, 135, 18, 61, 15, 88, 134, 62, 190, 25, 251, 190, 83, 19, 9, 63, 8, 204, 254, 62, 88, 118, 0, 62, 125, 224, 196, 62, 150, 33, 43, 63, 87, 219, 215, 60, 113, 176, 243, 61, 128, 115, 22, 62, 103, 122, 3, 62, 38, 107, 93, 62, 29, 165, 0, 62, 142, 149, 152, 62, 132, 17, 207, 62, 206, 198, 202, 62, 101, 15, 38, 61, 13, 219, 142, 189, 29, 215, 60, 61, 209, 170, 51, 63, 47, 226, 195, 62, 192, 186, 183, 189, 75, 204, 20, 62, 27, 213, 241, 190, 49, 104, 169, 190, 216, 187, 209, 62, 12, 118, 157, 62, 129, 64, 161, 189, 157, 167, 232, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 190, 54, 189, 29, 225, 178, 59, 76, 250, 59, 190, 106, 208, 142, 62, 23, 53, 244, 189, 254, 187, 202, 61, 70, 139, 204, 60, 156, 7, 188, 62, 77, 176, 213, 61, 102, 180, 23, 190, 41, 114, 43, 191, 130, 158, 154, 62, 196, 115, 2, 62, 252, 90, 121, 62, 178, 2, 194, 62, 190, 117, 91, 190, 174, 164, 43, 186, 251, 210, 30, 62, 31, 214, 81, 62, 16, 91, 178, 62, 179, 6, 137, 62, 100, 16, 120, 190, 80, 133, 87, 62, 89, 10, 33, 62, 224, 89, 105, 189, 206, 9, 143, 190, 51, 171, 16, 62, 40, 57, 18, 190, 61, 45, 122, 188, 110, 24, 55, 190, 38, 8, 17, 62, 176, 159, 229, 189, 165, 117, 135, 62, 193, 48, 9, 191, 241, 234, 46, 62, 236, 87, 104, 190, 119, 85, 140, 190, 250, 137, 75, 190, 226, 107, 55, 62, 162, 209, 250, 190, 17, 184, 87, 190, 144, 52, 99, 62, 106, 3, 68, 190, 76, 164, 138, 61, 69, 130, 16, 191, 160, 180, 118, 62, 114, 194, 117, 62, 153, 154, 37, 190, 50, 246, 66, 62, 11, 142, 97, 62, 35, 27, 14, 191, 98, 231, 151, 189, 80, 18, 148, 62, 143, 113, 150, 62, 194, 59, 116, 189, 146, 30, 156, 190, 47, 159, 61, 190, 125, 169, 86, 61, 6, 40, 194, 190, 97, 1, 80, 189, 163, 228, 135, 189, 171, 170, 193, 62, 93, 197, 145, 190, 221, 9, 23, 190, 233, 58, 7, 59, 165, 128, 240, 60, 245, 142, 98, 61, 185, 143, 103, 62, 2, 138, 94, 190, 178, 13, 36, 60, 69, 193, 57, 188, 15, 229, 161, 62, 83, 47, 243, 60, 33, 80, 85, 190, 239, 130, 232, 190, 146, 237, 110, 62, 243, 205, 25, 62, 3, 200, 214, 189, 110, 96, 170, 62, 4, 205, 155, 190, 42, 251, 51, 189, 41, 113, 62, 62, 12, 168, 18, 62, 208, 140, 144, 62, 47, 239, 95, 62, 54, 159, 33, 190, 68, 177, 253, 61, 134, 194, 84, 61, 57, 126, 201, 189, 179, 56, 154, 61, 39, 76, 208, 188, 199, 216, 66, 188, 230, 32, 169, 189, 118, 12, 16, 190, 103, 21, 135, 62, 43, 55, 169, 60, 254, 26, 3, 62, 38, 231, 1, 190, 89, 219, 209, 190, 58, 80, 136, 62, 191, 82, 158, 190, 191, 75, 121, 62, 47, 227, 104, 189, 129, 100, 15, 62, 114, 139, 107, 191, 143, 221, 12, 191, 78, 50, 153, 191, 42, 107, 49, 62, 142, 63, 155, 62, 78, 111, 216, 60, 24, 167, 8, 63, 102, 195, 117, 190, 123, 201, 140, 62, 152, 164, 76, 62, 193, 51, 163, 62, 226, 214, 3, 191, 50, 148, 43, 63, 176, 208, 5, 191, 227, 1, 19, 190, 95, 117, 190, 190, 11, 136, 147, 191, 123, 31, 202, 189, 101, 224, 18, 62, 62, 200, 173, 190, 214, 235, 140, 60, 219, 174, 124, 189, 208, 59, 196, 190, 30, 12, 152, 191, 43, 25, 52, 190, 157, 87, 20, 60, 189, 46, 129, 61, 47, 116, 193, 188, 189, 31, 159, 190, 125, 69, 113, 62, 113, 51, 101, 62, 208, 204, 9, 189, 144, 175, 2, 62, 113, 94, 208, 187, 107, 180, 105, 62, 192, 47, 91, 62, 62, 27, 147, 189, 133, 87, 227, 61, 93, 205, 207, 188, 68, 1, 226, 189, 238, 173, 212, 61, 99, 81, 65, 61, 81, 109, 130, 58, 180, 112, 2, 190, 61, 113, 162, 62, 223, 93, 7, 190, 85, 61, 213, 61, 139, 164, 146, 61, 212, 224, 46, 61, 83, 5, 134, 61, 39, 66, 28, 189, 94, 171, 10, 188, 25, 120, 129, 62, 243, 131, 109, 59, 60, 118, 171, 189, 182, 233, 27, 190, 86, 61, 32, 190, 38, 155, 6, 190, 180, 72, 199, 190, 162, 69, 67, 190, 55, 72, 1, 187, 180, 38, 233, 61, 147, 93, 219, 188, 124, 215, 16, 190, 125, 161, 50, 62, 241, 91, 182, 189, 241, 185, 66, 62, 186, 223, 33, 61, 211, 125, 208, 62, 140, 11, 86, 191, 26, 212, 86, 60, 84, 42, 12, 62, 116, 1, 234, 190, 24, 88, 28, 190, 57, 137, 145, 62, 225, 100, 132, 190, 31, 186, 23, 191, 200, 247, 100, 190, 14, 220, 12, 190, 121, 221, 214, 62, 142, 137, 25, 62, 180, 250, 38, 60, 25, 204, 209, 62, 3, 139, 199, 189, 64, 157, 142, 189, 167, 253, 19, 62, 164, 43, 125, 190, 83, 154, 157, 62, 146, 227, 165, 189, 198, 43, 27, 62, 4, 6, 86, 190, 56, 239, 148, 188, 107, 221, 9, 190, 39, 122, 96, 190, 104, 173, 240, 189, 47, 197, 26, 189, 106, 207, 72, 61, 51, 78, 39, 190, 33, 203, 236, 189, 73, 222, 219, 189, 81, 94, 99, 190, 242, 170, 67, 190, 194, 131, 69, 189, 216, 207, 136, 189, 37, 237, 148, 59, 79, 217, 147, 61, 196, 67, 130, 188, 35, 237, 23, 189, 88, 237, 168, 189, 97, 169, 39, 189, 254, 34, 180, 189, 1, 106, 179, 61, 225, 11, 191, 189, 184, 186, 129, 59, 72, 150, 195, 61, 158, 4, 178, 61, 54, 52, 226, 61, 120, 81, 139, 61, 126, 9, 245, 189, 201, 226, 213, 61, 4, 91, 247, 189, 135, 166, 50, 61, 122, 150, 125, 62, 89, 34, 131, 61, 178, 146, 247, 188, 183, 227, 63, 190, 210, 23, 87, 190, 238, 185, 201, 190, 185, 30, 102, 188, 101, 65, 81, 61, 246, 170, 131, 62, 177, 138, 34, 190, 120, 74, 111, 62, 41, 7, 171, 189, 218, 201, 172, 61, 170, 145, 3, 190, 219, 22, 170, 60, 201, 181, 30, 190, 4, 56, 167, 190, 105, 64, 64, 60, 99, 91, 140, 189, 70, 171, 161, 62, 211, 234, 167, 190, 241, 235, 74, 60, 76, 151, 133, 62, 154, 205, 52, 190, 69, 157, 203, 190, 81, 252, 203, 189, 215, 140, 162, 61, 92, 254, 157, 60, 245, 254, 110, 62, 240, 242, 215, 62, 23, 236, 155, 188, 221, 136, 218, 189, 72, 32, 144, 62, 70, 195, 128, 190, 32, 26, 5, 63, 248, 76, 46, 190, 42, 163, 103, 190, 204, 117, 7, 190, 131, 218, 188, 190, 94, 76, 59, 191, 118, 22, 105, 188, 20, 154, 231, 188, 195, 157, 165, 190, 232, 215, 5, 189, 113, 203, 223, 190, 214, 94, 138, 189, 239, 65, 116, 190, 39, 33, 75, 61, 151, 230, 1, 191, 59, 146, 54, 60, 187, 71, 237, 62, 47, 246, 138, 62, 32, 65, 164, 190, 20, 186, 34, 191, 123, 237, 49, 62, 111, 241, 179, 61, 147, 206, 63, 191, 184, 255, 8, 62, 78, 142, 109, 190, 109, 238, 122, 189, 177, 11, 196, 189, 85, 95, 160, 189, 192, 196, 83, 188, 63, 210, 142, 62, 179, 163, 208, 60, 104, 50, 62, 62, 250, 233, 6, 189, 173, 154, 224, 189, 149, 116, 101, 60, 65, 155, 144, 62, 99, 178, 217, 61, 33, 250, 153, 190, 82, 79, 59, 191, 179, 20, 95, 62, 100, 156, 92, 62, 140, 133, 110, 61, 219, 111, 172, 62, 79, 249, 177, 190, 185, 55, 12, 62, 130, 224, 51, 60, 201, 97, 40, 62, 49, 95, 30, 62, 137, 248, 196, 62, 45, 11, 159, 61, 45, 144, 233, 61, 133, 163, 120, 188, 63, 254, 7, 191, 214, 39, 142, 61, 204, 209, 139, 61, 60, 152, 3, 190, 203, 156, 188, 189, 250, 55, 83, 190, 172, 176, 129, 189, 128, 31, 187, 190, 222, 171, 249, 60, 125, 18, 209, 189, 87, 96, 207, 61, 69, 4, 167, 189, 164, 5, 13, 190, 21, 66, 166, 61, 9, 19, 218, 60, 244, 2, 112, 61, 160, 185, 0, 60, 65, 103, 9, 190, 224, 60, 3, 189, 6, 4, 8, 62, 67, 141, 7, 190, 54, 83, 129, 189, 191, 7, 3, 62, 120, 202, 138, 189, 217, 28, 71, 190, 95, 192, 72, 189, 188, 221, 248, 189, 62, 100, 72, 61, 124, 141, 30, 190, 86, 97, 134, 61, 243, 31, 159, 61, 174, 12, 181, 189, 62, 90, 150, 189, 42, 12, 37, 190, 135, 130, 182, 61, 219, 206, 62, 61, 97, 169, 14, 61, 135, 116, 146, 189, 136, 68, 188, 61, 130, 252, 139, 188, 58, 26, 213, 189, 229, 165, 103, 62, 39, 90, 218, 190, 54, 87, 11, 62, 25, 88, 66, 190, 33, 173, 90, 190, 127, 84, 11, 190, 62, 246, 157, 62, 252, 69, 151, 60, 21, 145, 116, 189, 76, 81, 51, 190, 65, 202, 81, 62, 59, 96, 237, 188, 184, 232, 84, 190, 224, 155, 208, 62, 138, 83, 11, 62, 207, 117, 37, 190, 215, 103, 211, 61, 255, 175, 173, 60, 10, 214, 44, 62, 132, 161, 105, 62, 118, 240, 25, 191, 24, 156, 43, 191, 242, 25, 191, 188, 21, 98, 196, 188, 208, 54, 142, 190, 41, 196, 151, 61, 5, 186, 111, 189, 63, 196, 84, 190, 78, 112, 81, 190, 51, 20, 210, 60, 123, 137, 172, 190, 16, 54, 98, 190, 56, 106, 101, 191, 10, 117, 15, 62, 20, 133, 95, 191, 174, 17, 68, 60, 73, 240, 247, 60, 215, 123, 97, 61, 102, 58, 90, 190, 153, 138, 71, 191, 145, 19, 206, 190, 28, 119, 223, 61, 182, 157, 23, 191, 79, 66, 43, 62, 166, 137, 129, 191, 124, 6, 55, 191, 37, 111, 200, 62, 56, 216, 33, 190, 42, 112, 171, 190, 249, 194, 68, 61, 187, 122, 17, 191, 118, 181, 199, 189, 143, 54, 171, 190, 250, 118, 109, 61, 114, 227, 131, 62, 207, 87, 50, 62, 185, 181, 141, 190, 151, 94, 205, 61, 218, 152, 85, 190, 33, 176, 45, 62, 103, 27, 106, 61, 190, 149, 249, 190, 144, 210, 253, 60, 7, 156, 142, 189, 76, 182, 71, 62, 134, 8, 244, 61, 138, 53, 144, 189, 0, 217, 196, 190, 41, 12, 129, 62, 121, 62, 62, 60, 34, 200, 165, 189, 83, 36, 14, 189, 237, 185, 17, 62, 234, 134, 222, 61, 164, 203, 8, 188, 89, 211, 126, 189, 144, 44, 237, 188, 78, 59, 2, 62, 44, 0, 67, 190, 81, 163, 46, 189, 29, 133, 157, 61, 183, 34, 63, 61, 124, 51, 206, 61, 124, 233, 150, 62, 15, 141, 220, 188, 160, 145, 161, 189, 127, 13, 27, 62, 4, 250, 133, 189, 66, 145, 85, 61, 67, 65, 190, 189, 59, 201, 203, 60, 0, 186, 112, 62, 138, 160, 216, 61, 205, 145, 152, 187, 0, 191, 199, 61, 37, 123, 139, 188, 244, 3, 15, 190, 56, 155, 171, 189, 128, 121, 187, 189, 89, 109, 21, 62, 130, 188, 32, 189, 73, 219, 43, 190, 195, 252, 67, 189, 146, 46, 20, 62, 119, 65, 237, 60, 40, 239, 164, 189, 109, 130, 12, 190, 214, 29, 14, 61, 152, 104, 8, 62, 41, 252, 43, 190, 90, 182, 12, 189, 77, 153, 229, 188, 114, 216, 245, 189, 135, 1, 42, 190, 211, 125, 162, 189, 118, 200, 224, 61, 191, 143, 25, 190, 185, 178, 130, 61, 220, 253, 206, 189, 20, 136, 13, 62, 117, 23, 254, 61, 201, 145, 51, 189, 65, 44, 140, 188, 68, 76, 20, 190, 156, 199, 40, 190, 93, 230, 215, 189, 151, 167, 10, 190, 68, 69, 94, 190, 98, 5, 173, 60, 154, 213, 164, 61, 126, 80, 177, 61, 79, 44, 5, 191, 239, 209, 170, 189, 42, 124, 138, 184, 185, 37, 24, 188, 102, 168, 40, 190, 104, 67, 53, 62, 191, 188, 26, 62, 48, 192, 117, 61, 84, 120, 219, 189, 36, 176, 156, 61, 56, 226, 62, 61, 221, 156, 34, 189, 250, 195, 183, 61, 233, 39, 0, 62, 228, 213, 103, 62, 154, 238, 1, 61, 180, 254, 83, 62, 239, 18, 77, 188, 42, 225, 20, 62, 183, 96, 114, 60, 132, 153, 168, 189, 148, 192, 240, 60, 234, 61, 13, 62, 132, 181, 181, 189, 69, 27, 149, 188, 149, 209, 222, 189, 73, 70, 95, 61, 210, 246, 11, 188, 36, 232, 35, 60, 196, 198, 78, 189, 181, 93, 9, 62, 64, 178, 255, 189, 146, 125, 33, 62, 187, 252, 157, 190, 17, 86, 25, 190, 247, 33, 126, 189, 150, 247, 222, 190, 58, 230, 134, 190, 157, 217, 66, 188, 32, 205, 35, 190, 178, 220, 251, 190, 254, 122, 154, 61, 151, 81, 87, 190, 121, 197, 161, 190, 104, 187, 21, 190, 137, 8, 46, 190, 246, 193, 23, 191, 210, 192, 42, 190, 3, 50, 237, 61, 185, 139, 60, 62, 145, 7, 122, 190, 249, 201, 93, 190, 51, 104, 113, 190, 207, 178, 231, 187, 251, 192, 25, 191, 203, 166, 233, 61, 153, 223, 0, 189, 122, 147, 6, 61, 197, 57, 87, 190, 61, 25, 242, 189, 223, 133, 93, 61, 11, 223, 61, 62, 126, 12, 66, 190, 22, 220, 106, 61, 120, 17, 61, 190, 89, 153, 110, 61, 165, 226, 251, 189, 129, 67, 17, 62, 73, 70, 39, 62, 116, 221, 154, 189, 23, 142, 52, 189, 196, 168, 144, 62, 223, 65, 13, 190, 118, 93, 1, 190, 77, 223, 171, 62, 133, 71, 160, 62, 242, 70, 186, 61, 25, 5, 100, 62, 218, 13, 124, 60, 2, 155, 142, 62, 19, 148, 184, 61, 102, 34, 134, 190, 28, 145, 144, 190, 78, 35, 124, 188, 86, 127, 47, 61, 77, 130, 91, 62, 112, 95, 214, 190, 11, 74, 10, 60, 147, 251, 137, 190, 145, 48, 147, 61, 219, 209, 128, 62, 213, 219, 99, 62, 176, 160, 124, 61, 49, 121, 75, 61, 211, 220, 151, 189, 125, 127, 110, 189, 252, 162, 90, 62, 58, 194, 42, 62, 83, 219, 43, 190, 7, 83, 96, 62, 168, 19, 23, 62, 92, 192, 46, 62, 32, 130, 228, 189, 142, 247, 54, 61, 164, 255, 82, 62, 73, 241, 215, 60, 151, 169, 222, 60, 68, 127, 185, 62, 184, 85, 173, 190, 158, 184, 189, 62, 238, 68, 19, 62, 50, 24, 136, 62, 220, 153, 203, 61, 30, 188, 29, 62, 175, 67, 8, 190, 207, 249, 217, 60, 40, 24, 146, 190, 244, 171, 123, 62, 35, 42, 18, 61, 94, 196, 179, 61, 68, 131, 166, 58, 225, 125, 90, 62, 154, 39, 11, 63, 223, 188, 204, 190, 183, 191, 137, 190, 126, 15, 68, 62, 4, 43, 62, 62, 25, 30, 128, 61, 210, 103, 168, 190, 87, 226, 181, 61, 52, 200, 149, 61, 22, 112, 174, 62, 60, 244, 30, 62, 102, 254, 188, 189, 243, 149, 133, 190, 224, 107, 150, 62, 204, 40, 17, 62, 219, 223, 164, 188, 205, 39, 203, 61, 89, 251, 117, 190, 228, 104, 1, 189, 91, 151, 226, 62, 52, 71, 154, 189, 58, 176, 139, 62, 79, 61, 129, 62, 205, 120, 110, 62, 177, 255, 221, 189, 1, 26, 224, 61, 198, 171, 109, 187, 72, 245, 30, 61, 239, 152, 59, 60, 74, 108, 71, 189, 46, 254, 128, 62, 194, 6, 196, 189, 106, 175, 136, 62, 121, 130, 150, 189, 51, 133, 165, 189, 168, 23, 116, 190, 127, 37, 73, 62, 62, 75, 82, 190, 66, 39, 206, 62, 116, 248, 37, 188, 153, 173, 14, 189, 154, 142, 153, 59, 245, 196, 54, 190, 254, 8, 233, 189, 18, 182, 38, 62, 65, 210, 16, 191, 18, 185, 56, 189, 79, 192, 131, 189, 236, 66, 235, 190, 144, 164, 140, 189, 154, 38, 234, 61, 246, 204, 150, 61, 227, 167, 139, 190, 150, 15, 119, 60, 249, 102, 217, 62, 22, 43, 34, 62, 61, 20, 12, 62, 30, 179, 34, 191, 108, 81, 118, 61, 203, 43, 194, 61, 128, 228, 252, 61, 130, 217, 12, 189, 212, 110, 100, 62, 211, 59, 6, 189, 1, 84, 23, 62, 158, 117, 15, 190, 224, 217, 160, 190, 87, 236, 25, 191, 106, 12, 65, 62, 206, 230, 150, 189, 240, 169, 227, 189, 60, 3, 255, 188, 112, 77, 177, 188, 133, 85, 55, 190, 104, 197, 81, 190, 5, 23, 65, 61, 143, 181, 136, 62, 206, 71, 246, 189, 102, 92, 236, 60, 161, 196, 133, 191, 205, 182, 105, 190, 30, 17, 232, 62, 199, 61, 174, 190, 96, 97, 221, 190, 229, 214, 10, 62, 162, 67, 27, 191, 102, 85, 115, 62, 87, 112, 200, 61, 50, 149, 245, 61, 152, 225, 194, 61, 11, 242, 116, 62, 35, 66, 142, 190, 28, 129, 212, 62, 131, 5, 136, 190, 144, 28, 147, 61, 187, 131, 85, 62, 103, 233, 165, 190, 180, 124, 73, 62, 117, 156, 18, 62, 79, 51, 81, 189, 20, 35, 119, 189, 128, 57, 88, 189, 114, 12, 150, 55, 121, 43, 174, 188, 185, 99, 25, 61, 189, 123, 201, 60, 1, 86, 226, 189, 3, 234, 86, 61, 159, 19, 204, 189, 167, 10, 198, 61, 53, 218, 46, 190, 242, 126, 45, 62, 54, 236, 31, 190, 61, 225, 149, 61, 163, 64, 224, 61, 52, 36, 215, 189, 74, 237, 223, 189, 67, 119, 20, 61, 66, 253, 220, 188, 136, 34, 47, 62, 181, 185, 157, 189, 235, 150, 79, 190, 46, 141, 180, 190, 203, 53, 219, 189, 78, 41, 177, 188, 253, 31, 16, 62, 57, 252, 196, 61, 118, 69, 52, 62, 75, 131, 40, 61, 31, 73, 172, 190, 254, 100, 235, 190, 128, 249, 8, 190, 110, 125, 45, 62, 11, 187, 191, 188, 154, 174, 50, 189, 101, 23, 59, 62, 218, 170, 5, 62, 48, 235, 155, 190, 41, 92, 79, 62, 77, 191, 152, 61, 5, 23, 8, 63, 12, 157, 92, 190, 39, 159, 104, 190, 224, 93, 163, 188, 221, 17, 124, 189, 236, 206, 15, 62, 50, 187, 44, 190, 178, 241, 36, 60, 194, 62, 19, 190, 169, 229, 251, 189, 123, 102, 36, 62, 86, 182, 135, 61, 38, 53, 135, 61, 134, 57, 184, 61, 186, 15, 225, 60, 66, 19, 75, 62, 225, 98, 80, 191, 94, 162, 236, 60, 206, 95, 132, 62, 210, 205, 113, 62, 18, 209, 45, 190, 52, 248, 78, 61, 83, 31, 13, 190, 35, 128, 89, 62, 195, 221, 173, 190, 91, 104, 68, 62, 249, 84, 6, 191, 64, 231, 100, 62, 70, 40, 29, 62, 214, 221, 55, 62, 82, 154, 167, 61, 203, 129, 31, 62, 185, 86, 80, 191, 148, 20, 115, 62, 140, 237, 127, 62, 227, 59, 74, 61, 195, 14, 116, 62, 191, 233, 124, 190, 227, 60, 68, 62, 99, 14, 151, 62, 250, 112, 116, 62, 28, 67, 155, 62, 241, 253, 153, 62, 90, 42, 208, 190, 87, 93, 161, 61, 166, 153, 0, 190, 133, 59, 237, 190, 49, 134, 122, 190, 245, 204, 181, 60, 100, 219, 40, 61, 226, 59, 213, 61, 192, 217, 119, 190, 94, 65, 45, 62, 78, 59, 144, 190, 81, 171, 175, 190, 12, 190, 81, 189, 8, 68, 135, 62, 15, 138, 212, 190, 48, 44, 212, 62, 35, 60, 35, 62, 99, 124, 96, 62, 156, 235, 74, 191, 223, 80, 227, 189, 117, 35, 140, 62, 211, 87, 38, 63, 233, 254, 28, 191, 172, 90, 132, 62, 37, 177, 130, 189, 18, 152, 230, 190, 72, 127, 183, 62, 204, 87, 211, 61, 155, 186, 0, 191, 204, 107, 169, 58, 115, 200, 187, 190, 144, 193, 235, 62, 46, 115, 33, 62, 120, 58, 230, 62, 85, 164, 43, 189, 170, 112, 84, 62, 127, 121, 12, 63, 105, 131, 30, 62, 68, 229, 146, 189, 78, 188, 105, 62, 218, 113, 177, 62, 104, 52, 150, 190, 71, 223, 177, 62, 29, 39, 1, 62, 65, 139, 225, 189, 243, 123, 172, 189, 30, 172, 0, 62, 204, 89, 26, 190, 252, 109, 38, 190, 239, 13, 145, 189, 25, 250, 197, 60, 30, 65, 119, 189, 233, 211, 50, 61, 2, 94, 145, 188, 16, 231, 62, 189, 28, 83, 206, 189, 227, 95, 56, 189, 81, 1, 2, 190, 182, 83, 37, 62, 252, 52, 181, 58, 184, 112, 34, 190, 208, 234, 51, 186, 151, 180, 2, 62, 215, 47, 37, 190, 43, 15, 0, 61, 192, 85, 193, 189, 206, 244, 176, 189, 193, 200, 35, 190, 176, 183, 28, 62, 194, 249, 239, 61, 74, 165, 159, 61, 151, 40, 6, 190, 109, 222, 51, 190, 198, 37, 17, 189, 114, 203, 99, 61, 149, 78, 73, 190, 224, 176, 175, 191, 234, 118, 67, 60, 67, 176, 68, 191, 145, 5, 109, 188, 54, 52, 99, 61, 184, 89, 86, 61, 145, 221, 1, 190, 93, 12, 31, 191, 71, 60, 221, 190, 30, 185, 160, 62, 188, 108, 13, 191, 42, 105, 26, 61, 48, 139, 95, 191, 112, 25, 127, 191, 21, 187, 146, 62, 202, 206, 2, 189, 222, 198, 154, 190, 149, 29, 94, 62, 97, 131, 210, 190, 132, 50, 147, 190, 75, 181, 184, 190, 49, 133, 19, 61, 178, 40, 191, 60, 193, 59, 35, 189, 163, 136, 247, 189, 1, 65, 98, 62, 244, 232, 183, 190, 50, 8, 115, 60, 224, 173, 129, 189, 220, 176, 17, 191, 249, 117, 138, 62, 77, 140, 85, 190, 27, 181, 64, 190, 133, 129, 23, 62, 108, 252, 221, 61, 109, 241, 225, 60, 89, 71, 112, 61, 161, 87, 129, 187, 193, 84, 88, 188, 0, 55, 188, 189, 179, 60, 17, 61, 236, 194, 234, 62, 135, 221, 128, 189, 97, 194, 0, 187, 240, 213, 3, 189, 190, 46, 122, 190, 175, 196, 184, 61, 65, 193, 0, 188, 178, 88, 180, 61, 6, 163, 19, 189, 153, 61, 237, 189, 59, 219, 185, 188, 8, 251, 52, 190, 39, 214, 198, 61, 142, 171, 23, 62, 246, 167, 35, 189, 11, 179, 251, 61, 139, 199, 76, 190, 163, 195, 154, 61, 22, 54, 149, 188, 181, 22, 13, 62, 172, 7, 164, 190, 239, 204, 2, 62, 225, 171, 2, 190, 209, 94, 21, 190, 76, 141, 12, 62, 239, 98, 129, 190, 16, 240, 175, 189, 171, 37, 117, 188, 79, 119, 51, 62, 136, 108, 30, 191, 102, 190, 163, 61, 64, 245, 16, 190, 32, 135, 190, 62, 36, 38, 200, 190, 152, 170, 81, 62, 185, 70, 161, 191, 101, 74, 29, 190, 168, 155, 143, 62, 115, 219, 223, 190, 75, 89, 74, 191, 246, 13, 148, 62, 172, 187, 183, 190, 240, 113, 109, 189, 219, 52, 71, 62, 7, 74, 69, 62, 150, 53, 207, 61, 204, 193, 168, 62, 0, 170, 137, 62, 124, 60, 239, 62, 4, 29, 176, 190, 186, 39, 76, 62, 136, 231, 24, 63, 55, 173, 223, 190, 47, 89, 155, 62, 144, 246, 55, 190, 16, 99, 23, 190, 221, 38, 214, 60, 173, 72, 97, 189, 193, 99, 7, 62, 248, 78, 190, 189, 21, 212, 27, 190, 167, 238, 73, 189, 130, 227, 83, 189, 183, 66, 73, 189, 49, 134, 148, 61, 247, 241, 48, 187, 196, 35, 253, 189, 176, 22, 100, 61, 234, 65, 66, 61, 187, 231, 74, 190, 192, 164, 157, 188, 42, 164, 22, 190, 101, 180, 219, 188, 100, 153, 20, 190, 218, 153, 34, 190, 148, 223, 92, 61, 89, 134, 98, 61, 102, 234, 124, 189, 125, 135, 209, 189, 179, 77, 23, 62, 179, 120, 237, 189, 68, 21, 106, 189, 18, 146, 243, 189, 229, 247, 59, 190, 41, 27, 23, 190, 120, 74, 116, 61, 14, 162, 16, 191, 141, 29, 160, 190, 14, 174, 224, 60, 111, 148, 58, 189, 16, 74, 220, 189, 205, 220, 37, 62, 245, 67, 209, 61, 126, 96, 132, 190, 18, 118, 19, 60, 181, 74, 141, 62, 2, 90, 16, 63, 200, 99, 133, 189, 195, 177, 55, 190, 107, 92, 154, 187, 254, 230, 131, 189, 36, 227, 72, 62, 103, 47, 3, 190, 108, 173, 62, 61, 80, 163, 19, 190, 161, 35, 26, 190, 151, 115, 162, 62, 86, 227, 6, 61, 200, 238, 93, 62, 151, 82, 148, 189, 105, 161, 224, 61, 163, 208, 142, 62, 71, 132, 137, 191, 174, 188, 220, 187, 225, 151, 172, 61, 246, 106, 70, 62, 252, 65, 66, 190, 113, 151, 154, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 179, 92, 188, 141, 105, 155, 61, 231, 200, 222, 61, 153, 123, 24, 62, 27, 43, 29, 189, 105, 108, 101, 189, 154, 186, 16, 189, 175, 22, 125, 190, 54, 31, 85, 190, 72, 1, 39, 62, 95, 247, 149, 61, 188, 128, 173, 190, 212, 243, 72, 62, 18, 129, 164, 62, 156, 92, 38, 190, 88, 130, 70, 62, 58, 166, 54, 61, 33, 94, 142, 190, 40, 107, 143, 187, 208, 103, 60, 61, 168, 212, 226, 61, 35, 89, 129, 188, 129, 188, 237, 61, 253, 79, 131, 62, 74, 231, 113, 62, 123, 123, 141, 62, 138, 161, 168, 59, 6, 200, 76, 62, 108, 21, 7, 62, 107, 75, 27, 62, 107, 193, 136, 189, 54, 247, 100, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 47, 146, 190, 221, 198, 117, 190, 222, 189, 61, 190, 24, 37, 85, 191, 10, 198, 4, 189, 149, 42, 231, 62, 87, 229, 17, 190, 71, 120, 115, 190, 170, 66, 230, 190, 156, 35, 129, 190, 36, 27, 184, 60, 249, 233, 138, 62, 71, 34, 154, 63, 203, 201, 210, 188, 116, 201, 188, 61, 194, 116, 129, 188, 75, 187, 192, 190, 3, 130, 99, 190, 19, 233, 246, 62, 53, 159, 0, 190, 211, 91, 42, 189, 229, 228, 10, 63, 168, 214, 188, 189, 100, 251, 45, 62, 120, 38, 246, 190, 3, 151, 105, 63, 232, 118, 145, 59, 179, 161, 156, 63, 48, 73, 66, 61, 215, 137, 165, 63, 102, 177, 19, 190, 220, 120, 111, 62, 1, 181, 67, 60, 168, 214, 172, 190, 160, 214, 69, 189, 123, 142, 138, 62, 161, 116, 224, 189, 15, 207, 159, 189, 72, 239, 151, 189, 157, 65, 57, 62, 205, 179, 201, 62, 219, 22, 63, 190, 222, 190, 16, 61, 1, 207, 57, 63, 193, 59, 118, 189, 181, 98, 72, 190, 51, 46, 208, 189, 0, 213, 213, 189, 228, 125, 148, 62, 179, 246, 83, 62, 59, 237, 128, 59, 225, 95, 133, 190, 207, 59, 178, 62, 96, 63, 18, 190, 128, 145, 232, 60, 104, 199, 131, 190, 250, 110, 114, 189, 107, 192, 193, 61, 119, 143, 235, 187, 76, 84, 34, 189, 5, 215, 214, 189, 102, 30, 222, 62, 55, 154, 206, 189, 194, 203, 156, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 35, 101, 190, 121, 204, 198, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {30, 164, 108, 63, 159, 122, 135, 191, 60, 115, 166, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {9, 3, 18, 64, 39, 133, 70, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0078/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}