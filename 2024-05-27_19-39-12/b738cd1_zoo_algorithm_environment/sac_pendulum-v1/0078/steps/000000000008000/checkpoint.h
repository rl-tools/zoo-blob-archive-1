// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 124, 179, 190, 204, 74, 160, 190, 172, 216, 180, 190, 237, 94, 171, 190, 225, 159, 69, 63, 89, 140, 141, 62, 43, 50, 44, 63, 8, 153, 135, 191, 75, 131, 208, 190, 207, 120, 166, 62, 224, 197, 155, 189, 168, 134, 16, 63, 5, 21, 80, 63, 191, 105, 17, 191, 8, 69, 162, 190, 164, 145, 184, 190, 177, 164, 120, 62, 194, 37, 22, 190, 38, 152, 110, 187, 250, 99, 56, 62, 230, 131, 200, 60, 183, 57, 4, 62, 143, 196, 99, 63, 72, 164, 82, 191, 137, 39, 141, 62, 85, 126, 186, 189, 206, 170, 43, 63, 34, 35, 24, 63, 15, 142, 140, 190, 243, 200, 126, 62, 169, 149, 99, 62, 213, 144, 153, 191, 7, 169, 219, 62, 136, 92, 253, 62, 168, 189, 155, 63, 182, 142, 205, 62, 233, 1, 170, 190, 100, 192, 17, 63, 167, 30, 12, 190, 44, 20, 137, 62, 78, 120, 168, 191, 123, 244, 5, 191, 59, 68, 18, 63, 68, 82, 143, 63, 55, 65, 134, 62, 90, 89, 217, 60, 10, 225, 95, 63, 210, 233, 232, 190, 65, 213, 4, 191, 70, 73, 204, 191, 84, 187, 37, 190, 193, 92, 196, 62, 157, 212, 43, 61, 161, 106, 47, 191, 35, 10, 1, 191, 88, 82, 117, 63, 152, 5, 35, 190, 239, 99, 183, 62, 16, 73, 109, 191, 118, 28, 18, 63, 0, 1, 176, 63, 155, 64, 50, 190, 223, 239, 6, 187, 144, 135, 219, 62, 122, 1, 82, 191, 210, 2, 65, 190, 134, 169, 5, 191, 91, 74, 87, 190, 200, 242, 32, 189, 255, 10, 83, 189, 52, 182, 154, 63, 164, 65, 44, 61, 223, 214, 212, 61, 72, 112, 216, 190, 112, 218, 65, 63, 120, 10, 239, 62, 176, 71, 16, 63, 57, 173, 242, 190, 47, 195, 225, 190, 45, 34, 202, 189, 200, 69, 79, 190, 10, 199, 9, 190, 229, 229, 229, 190, 161, 162, 243, 190, 122, 172, 9, 190, 59, 50, 255, 189, 187, 7, 34, 61, 176, 129, 2, 62, 250, 39, 83, 60, 125, 118, 167, 190, 168, 167, 139, 189, 123, 67, 132, 191, 62, 110, 168, 62, 179, 171, 247, 190, 45, 239, 191, 190, 195, 255, 125, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 11, 215, 190, 225, 10, 185, 190, 109, 218, 38, 61, 209, 247, 128, 62, 156, 65, 8, 191, 150, 32, 17, 63, 131, 66, 5, 63, 4, 89, 231, 61, 39, 218, 187, 62, 167, 114, 45, 63, 169, 50, 154, 60, 133, 183, 133, 61, 88, 223, 79, 62, 32, 241, 153, 62, 122, 128, 8, 62, 94, 61, 43, 62, 126, 111, 146, 62, 189, 113, 222, 62, 121, 96, 4, 63, 110, 253, 63, 61, 8, 187, 125, 61, 130, 250, 157, 61, 65, 226, 41, 63, 204, 152, 184, 62, 102, 98, 200, 189, 181, 243, 247, 61, 5, 161, 1, 191, 21, 9, 138, 190, 80, 79, 215, 62, 5, 129, 149, 62, 216, 255, 8, 190, 154, 96, 230, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 197, 196, 189, 126, 1, 45, 60, 45, 140, 86, 190, 20, 186, 106, 62, 116, 89, 199, 189, 116, 86, 183, 61, 22, 156, 58, 61, 249, 178, 193, 62, 81, 83, 128, 61, 143, 19, 76, 190, 132, 49, 56, 191, 25, 186, 131, 62, 182, 0, 9, 62, 67, 96, 84, 62, 221, 53, 175, 62, 160, 251, 75, 190, 26, 81, 200, 58, 125, 115, 30, 62, 77, 7, 87, 62, 200, 225, 158, 62, 70, 204, 87, 62, 33, 144, 127, 190, 220, 71, 117, 62, 211, 63, 64, 62, 94, 224, 206, 189, 247, 119, 135, 190, 182, 211, 201, 61, 81, 179, 59, 190, 231, 152, 42, 188, 25, 157, 64, 190, 142, 169, 248, 61, 138, 88, 5, 190, 49, 178, 116, 62, 4, 118, 1, 191, 79, 168, 220, 61, 14, 22, 25, 190, 211, 205, 138, 190, 109, 60, 134, 190, 102, 246, 23, 62, 150, 213, 238, 190, 206, 197, 211, 189, 120, 63, 123, 62, 212, 218, 18, 189, 118, 32, 53, 61, 35, 23, 189, 190, 161, 47, 51, 62, 1, 236, 77, 62, 155, 111, 252, 189, 103, 100, 59, 62, 17, 122, 23, 62, 223, 132, 204, 190, 220, 126, 130, 61, 101, 3, 133, 62, 98, 51, 120, 62, 139, 48, 191, 189, 241, 33, 143, 190, 232, 149, 250, 188, 152, 110, 10, 61, 53, 110, 124, 190, 38, 107, 152, 189, 38, 226, 197, 189, 43, 93, 148, 62, 130, 111, 57, 189, 103, 71, 150, 189, 125, 96, 37, 189, 31, 66, 28, 61, 134, 176, 210, 60, 110, 116, 62, 62, 92, 73, 94, 190, 129, 165, 44, 60, 28, 0, 131, 60, 247, 84, 167, 62, 55, 120, 113, 187, 172, 239, 130, 190, 4, 92, 247, 190, 31, 148, 74, 62, 203, 115, 37, 62, 169, 197, 8, 190, 191, 42, 154, 62, 103, 54, 148, 190, 194, 148, 86, 188, 154, 204, 62, 62, 147, 195, 30, 62, 248, 232, 129, 62, 43, 75, 29, 62, 228, 158, 40, 190, 119, 99, 45, 62, 101, 83, 182, 61, 9, 190, 6, 190, 252, 83, 177, 61, 41, 25, 135, 189, 111, 178, 52, 189, 176, 119, 127, 189, 239, 85, 23, 190, 160, 13, 135, 62, 139, 254, 13, 60, 230, 241, 247, 61, 1, 74, 213, 190, 204, 29, 201, 190, 29, 210, 27, 62, 130, 110, 114, 190, 177, 164, 135, 62, 201, 171, 171, 188, 248, 7, 13, 62, 58, 128, 137, 191, 165, 114, 24, 191, 51, 167, 153, 191, 8, 226, 3, 62, 213, 225, 154, 62, 34, 53, 47, 61, 64, 37, 254, 62, 58, 104, 128, 190, 110, 147, 207, 62, 82, 205, 83, 62, 167, 108, 163, 62, 128, 133, 25, 191, 86, 97, 42, 63, 182, 16, 241, 190, 123, 171, 169, 189, 227, 217, 202, 190, 192, 102, 151, 191, 162, 3, 212, 189, 205, 160, 13, 62, 190, 95, 177, 190, 16, 38, 205, 61, 173, 67, 98, 189, 109, 115, 216, 190, 163, 51, 145, 191, 184, 224, 80, 190, 171, 191, 42, 61, 253, 213, 4, 61, 243, 237, 196, 188, 158, 56, 160, 190, 210, 195, 130, 62, 202, 206, 136, 62, 156, 30, 248, 188, 215, 12, 15, 62, 27, 18, 249, 188, 188, 207, 101, 62, 139, 122, 86, 62, 48, 130, 80, 189, 51, 148, 214, 61, 144, 70, 7, 189, 230, 162, 222, 189, 165, 97, 20, 62, 187, 120, 25, 61, 15, 71, 241, 60, 21, 113, 12, 190, 54, 89, 144, 62, 9, 87, 16, 190, 25, 105, 30, 62, 174, 156, 1, 62, 166, 222, 80, 61, 34, 62, 128, 61, 170, 191, 188, 189, 21, 51, 169, 188, 76, 193, 152, 62, 131, 132, 111, 188, 171, 108, 175, 189, 140, 229, 18, 190, 80, 82, 97, 190, 74, 123, 58, 190, 233, 145, 146, 190, 76, 42, 50, 190, 165, 8, 5, 62, 43, 57, 26, 62, 248, 164, 7, 188, 241, 67, 60, 190, 249, 189, 75, 62, 20, 169, 230, 187, 180, 240, 111, 62, 170, 143, 151, 59, 174, 26, 220, 62, 115, 55, 72, 191, 1, 152, 182, 59, 40, 126, 205, 61, 186, 157, 224, 190, 38, 30, 100, 190, 119, 110, 160, 62, 215, 192, 109, 190, 116, 205, 157, 190, 51, 50, 51, 190, 42, 162, 30, 190, 116, 219, 214, 62, 172, 222, 31, 62, 188, 155, 130, 60, 147, 248, 139, 61, 180, 27, 61, 189, 220, 164, 78, 189, 193, 37, 94, 61, 8, 127, 95, 190, 81, 235, 151, 62, 68, 189, 149, 189, 198, 43, 27, 62, 111, 67, 85, 190, 56, 239, 148, 188, 107, 221, 9, 190, 105, 39, 64, 190, 244, 55, 197, 189, 250, 27, 200, 187, 106, 207, 72, 61, 51, 78, 39, 190, 33, 203, 236, 189, 169, 136, 212, 189, 44, 228, 66, 190, 129, 120, 66, 190, 180, 227, 223, 188, 215, 177, 15, 189, 37, 237, 148, 59, 36, 193, 212, 61, 219, 77, 129, 60, 35, 237, 23, 189, 88, 237, 168, 189, 97, 169, 39, 189, 98, 53, 136, 189, 105, 106, 244, 61, 225, 11, 191, 189, 9, 26, 18, 61, 75, 50, 196, 61, 205, 207, 222, 61, 161, 54, 242, 61, 124, 60, 204, 61, 126, 9, 245, 189, 201, 226, 213, 61, 238, 245, 8, 190, 147, 3, 127, 61, 106, 111, 183, 62, 213, 120, 50, 61, 189, 161, 44, 62, 226, 245, 157, 190, 199, 128, 94, 190, 154, 207, 179, 190, 165, 109, 242, 188, 130, 9, 222, 60, 255, 168, 134, 62, 251, 122, 120, 190, 151, 91, 163, 188, 224, 174, 200, 59, 99, 94, 4, 189, 3, 112, 241, 189, 214, 16, 204, 61, 5, 41, 218, 189, 173, 75, 2, 191, 140, 141, 38, 60, 166, 222, 79, 190, 193, 133, 250, 62, 63, 100, 138, 190, 78, 46, 19, 189, 74, 78, 127, 62, 186, 67, 153, 189, 94, 213, 219, 190, 122, 207, 242, 189, 95, 187, 207, 61, 193, 131, 79, 61, 146, 70, 133, 62, 32, 238, 215, 62, 35, 245, 193, 188, 221, 136, 218, 189, 85, 236, 139, 62, 85, 31, 147, 190, 126, 127, 253, 62, 54, 221, 53, 190, 181, 174, 84, 190, 189, 12, 43, 190, 123, 47, 194, 190, 57, 74, 50, 191, 231, 16, 104, 187, 186, 195, 60, 189, 113, 103, 177, 190, 149, 88, 5, 189, 170, 164, 160, 190, 240, 8, 233, 189, 226, 179, 60, 190, 16, 139, 225, 60, 136, 230, 13, 191, 59, 131, 234, 189, 48, 79, 211, 62, 118, 212, 138, 62, 8, 199, 123, 190, 171, 49, 249, 190, 123, 237, 49, 62, 192, 153, 70, 61, 180, 141, 48, 191, 149, 72, 249, 61, 146, 105, 9, 190, 21, 150, 164, 189, 21, 171, 86, 189, 85, 95, 160, 189, 78, 222, 68, 189, 113, 85, 132, 62, 73, 123, 93, 188, 19, 99, 56, 62, 14, 10, 226, 188, 6, 24, 217, 189, 11, 64, 157, 60, 156, 188, 151, 62, 166, 113, 194, 61, 80, 5, 167, 190, 52, 233, 59, 191, 149, 128, 97, 62, 94, 22, 113, 62, 39, 6, 133, 60, 206, 19, 173, 62, 88, 25, 170, 190, 252, 5, 170, 61, 48, 33, 140, 60, 84, 23, 64, 62, 252, 233, 47, 62, 218, 135, 192, 62, 176, 78, 241, 60, 237, 20, 180, 61, 220, 182, 148, 60, 153, 125, 4, 191, 80, 39, 170, 61, 87, 216, 173, 60, 104, 191, 25, 190, 162, 41, 240, 189, 142, 151, 86, 190, 15, 98, 248, 187, 132, 18, 160, 190, 222, 171, 249, 60, 125, 18, 209, 189, 87, 96, 207, 61, 69, 4, 167, 189, 164, 5, 13, 190, 21, 66, 166, 61, 9, 19, 218, 60, 244, 2, 112, 61, 160, 185, 0, 60, 65, 103, 9, 190, 224, 60, 3, 189, 6, 4, 8, 62, 67, 141, 7, 190, 54, 83, 129, 189, 191, 7, 3, 62, 120, 202, 138, 189, 217, 28, 71, 190, 95, 192, 72, 189, 188, 221, 248, 189, 62, 100, 72, 61, 124, 141, 30, 190, 86, 97, 134, 61, 243, 31, 159, 61, 174, 12, 181, 189, 62, 90, 150, 189, 42, 12, 37, 190, 135, 130, 182, 61, 219, 206, 62, 61, 97, 169, 14, 61, 135, 116, 146, 189, 136, 68, 188, 61, 130, 252, 139, 188, 28, 153, 25, 190, 139, 244, 144, 62, 184, 13, 175, 190, 255, 110, 41, 62, 209, 65, 252, 189, 51, 196, 58, 190, 116, 164, 198, 189, 6, 250, 107, 62, 100, 246, 90, 61, 17, 161, 96, 189, 112, 1, 78, 190, 236, 236, 104, 62, 110, 241, 215, 60, 254, 73, 48, 190, 233, 121, 219, 62, 8, 249, 165, 61, 207, 117, 37, 190, 41, 164, 222, 60, 198, 26, 172, 61, 214, 189, 25, 62, 114, 117, 248, 61, 65, 69, 250, 190, 156, 202, 22, 191, 168, 181, 148, 60, 117, 116, 157, 187, 164, 194, 180, 190, 159, 159, 77, 61, 108, 103, 174, 189, 225, 12, 40, 190, 184, 29, 146, 190, 0, 33, 158, 188, 65, 1, 164, 190, 247, 18, 128, 190, 65, 225, 239, 190, 10, 117, 15, 62, 169, 92, 75, 191, 174, 17, 68, 60, 226, 230, 216, 60, 190, 22, 136, 61, 51, 213, 106, 190, 95, 223, 0, 191, 130, 106, 130, 190, 73, 95, 235, 61, 19, 54, 6, 191, 136, 100, 65, 62, 74, 78, 88, 191, 209, 171, 10, 191, 239, 76, 210, 62, 164, 141, 163, 190, 68, 114, 196, 190, 106, 45, 139, 61, 49, 167, 17, 191, 118, 181, 199, 189, 143, 54, 171, 190, 118, 235, 249, 60, 188, 11, 178, 62, 219, 231, 62, 62, 58, 84, 79, 190, 203, 160, 61, 190, 129, 139, 5, 190, 250, 210, 27, 62, 108, 77, 87, 59, 28, 179, 2, 191, 68, 23, 54, 62, 41, 254, 165, 189, 206, 61, 110, 62, 113, 207, 184, 61, 105, 207, 126, 189, 163, 58, 204, 190, 72, 156, 146, 62, 130, 22, 103, 61, 222, 185, 139, 189, 130, 93, 109, 188, 187, 186, 246, 61, 39, 91, 227, 61, 188, 80, 132, 187, 163, 140, 228, 188, 45, 64, 209, 188, 104, 229, 0, 62, 146, 155, 55, 190, 123, 238, 75, 188, 84, 83, 151, 61, 63, 137, 187, 61, 8, 98, 195, 61, 232, 192, 132, 62, 6, 7, 62, 189, 194, 51, 6, 189, 121, 196, 92, 62, 209, 11, 65, 189, 130, 235, 96, 61, 122, 148, 18, 190, 98, 159, 252, 60, 215, 5, 142, 62, 207, 229, 193, 61, 253, 4, 221, 187, 119, 2, 228, 61, 37, 123, 139, 188, 244, 3, 15, 190, 56, 155, 171, 189, 128, 121, 187, 189, 89, 109, 21, 62, 130, 188, 32, 189, 73, 219, 43, 190, 195, 252, 67, 189, 146, 46, 20, 62, 119, 65, 237, 60, 40, 239, 164, 189, 109, 130, 12, 190, 214, 29, 14, 61, 152, 104, 8, 62, 41, 252, 43, 190, 90, 182, 12, 189, 77, 153, 229, 188, 114, 216, 245, 189, 135, 1, 42, 190, 211, 125, 162, 189, 118, 200, 224, 61, 191, 143, 25, 190, 185, 178, 130, 61, 220, 253, 206, 189, 20, 136, 13, 62, 117, 23, 254, 61, 201, 145, 51, 189, 65, 44, 140, 188, 68, 76, 20, 190, 156, 199, 40, 190, 93, 230, 215, 189, 151, 167, 10, 190, 1, 151, 123, 190, 186, 79, 118, 61, 32, 118, 77, 61, 254, 237, 188, 61, 47, 180, 4, 191, 133, 19, 101, 189, 120, 41, 74, 61, 244, 242, 32, 58, 192, 28, 22, 190, 158, 96, 33, 62, 50, 251, 29, 62, 219, 219, 114, 61, 145, 68, 162, 189, 43, 239, 150, 61, 22, 218, 43, 61, 167, 96, 253, 188, 4, 89, 254, 61, 213, 193, 247, 61, 0, 176, 134, 62, 155, 200, 232, 60, 102, 233, 54, 62, 116, 111, 186, 188, 146, 184, 72, 62, 34, 109, 165, 61, 113, 110, 137, 189, 102, 139, 9, 61, 187, 17, 146, 61, 227, 222, 200, 189, 59, 206, 244, 60, 51, 68, 250, 189, 37, 151, 102, 61, 129, 52, 200, 59, 36, 232, 35, 60, 196, 198, 78, 189, 181, 93, 9, 62, 64, 178, 255, 189, 146, 125, 33, 62, 187, 252, 157, 190, 17, 86, 25, 190, 247, 33, 126, 189, 150, 247, 222, 190, 58, 230, 134, 190, 157, 217, 66, 188, 32, 205, 35, 190, 178, 220, 251, 190, 254, 122, 154, 61, 151, 81, 87, 190, 121, 197, 161, 190, 104, 187, 21, 190, 137, 8, 46, 190, 246, 193, 23, 191, 210, 192, 42, 190, 3, 50, 237, 61, 185, 139, 60, 62, 145, 7, 122, 190, 249, 201, 93, 190, 51, 104, 113, 190, 207, 178, 231, 187, 251, 192, 25, 191, 203, 166, 233, 61, 153, 223, 0, 189, 122, 147, 6, 61, 197, 57, 87, 190, 61, 25, 242, 189, 134, 134, 92, 60, 43, 186, 128, 62, 199, 75, 44, 190, 113, 225, 67, 61, 169, 74, 48, 190, 46, 221, 41, 61, 123, 78, 157, 189, 123, 100, 4, 62, 95, 20, 34, 62, 204, 197, 126, 189, 251, 188, 47, 189, 31, 135, 136, 62, 107, 67, 24, 190, 105, 221, 249, 189, 36, 169, 166, 62, 22, 184, 155, 62, 149, 218, 249, 61, 41, 0, 100, 62, 105, 237, 134, 186, 148, 117, 141, 62, 249, 226, 101, 61, 79, 65, 69, 190, 63, 90, 105, 190, 105, 32, 40, 61, 50, 4, 210, 60, 37, 26, 94, 62, 171, 218, 228, 190, 216, 244, 224, 188, 132, 147, 103, 190, 221, 18, 130, 61, 230, 112, 142, 62, 25, 232, 108, 62, 202, 167, 192, 61, 221, 44, 31, 62, 84, 175, 184, 189, 30, 157, 30, 190, 75, 18, 49, 62, 10, 15, 47, 62, 117, 88, 77, 190, 240, 34, 86, 62, 148, 70, 144, 61, 216, 170, 182, 61, 0, 152, 159, 190, 208, 216, 95, 188, 196, 112, 73, 62, 146, 59, 8, 61, 244, 223, 12, 189, 28, 85, 180, 62, 33, 236, 164, 190, 118, 122, 182, 62, 210, 72, 8, 62, 208, 90, 166, 61, 208, 57, 222, 60, 215, 116, 233, 61, 165, 7, 195, 189, 249, 195, 206, 188, 89, 34, 207, 190, 217, 155, 110, 62, 215, 234, 157, 61, 73, 110, 219, 61, 24, 249, 25, 186, 121, 9, 87, 62, 236, 187, 173, 62, 94, 109, 206, 190, 104, 169, 154, 190, 247, 190, 93, 62, 172, 41, 33, 62, 63, 0, 43, 61, 200, 205, 154, 190, 50, 180, 209, 61, 164, 153, 221, 61, 35, 251, 182, 62, 38, 103, 23, 62, 104, 167, 9, 190, 5, 158, 142, 190, 226, 131, 137, 62, 205, 176, 41, 62, 230, 126, 2, 189, 165, 148, 149, 61, 87, 128, 101, 190, 134, 81, 98, 187, 8, 31, 227, 62, 139, 204, 60, 189, 19, 151, 128, 62, 222, 28, 81, 62, 199, 108, 106, 62, 100, 48, 134, 189, 108, 85, 39, 62, 71, 105, 72, 188, 203, 170, 85, 61, 123, 32, 53, 189, 6, 58, 132, 189, 216, 128, 144, 62, 247, 97, 216, 189, 1, 108, 132, 62, 190, 91, 152, 189, 56, 53, 46, 189, 152, 98, 153, 190, 241, 94, 238, 61, 252, 91, 65, 190, 134, 155, 168, 62, 13, 233, 23, 60, 171, 209, 137, 189, 145, 55, 56, 61, 239, 44, 10, 190, 216, 244, 123, 190, 68, 123, 15, 62, 237, 33, 33, 191, 182, 205, 28, 61, 80, 129, 2, 190, 204, 181, 15, 191, 74, 11, 165, 188, 161, 218, 96, 61, 100, 203, 145, 61, 248, 42, 71, 190, 226, 254, 130, 59, 185, 167, 137, 62, 10, 147, 24, 61, 18, 238, 5, 62, 154, 98, 12, 191, 181, 223, 222, 61, 101, 209, 231, 61, 147, 45, 84, 62, 53, 99, 83, 188, 184, 236, 38, 62, 0, 29, 52, 189, 98, 164, 5, 62, 184, 151, 150, 189, 43, 48, 177, 190, 228, 26, 6, 191, 217, 2, 65, 62, 14, 201, 14, 189, 120, 192, 227, 189, 14, 98, 81, 60, 78, 62, 55, 61, 246, 242, 49, 190, 213, 107, 4, 190, 35, 224, 0, 62, 90, 228, 175, 62, 210, 167, 42, 190, 149, 214, 130, 61, 110, 168, 113, 191, 132, 54, 132, 190, 147, 0, 242, 62, 23, 177, 162, 190, 101, 56, 241, 190, 92, 218, 45, 62, 194, 164, 15, 191, 209, 202, 128, 62, 165, 105, 201, 61, 206, 152, 66, 62, 159, 225, 16, 62, 76, 71, 146, 62, 193, 12, 43, 190, 34, 216, 192, 60, 103, 135, 252, 189, 84, 123, 18, 62, 211, 154, 28, 62, 216, 138, 128, 190, 99, 216, 132, 62, 8, 115, 208, 61, 33, 206, 27, 189, 162, 0, 23, 190, 39, 88, 185, 60, 216, 56, 24, 188, 197, 228, 63, 189, 110, 148, 3, 61, 203, 30, 160, 60, 115, 216, 47, 59, 54, 92, 62, 61, 94, 132, 192, 189, 227, 88, 233, 61, 151, 173, 195, 189, 194, 60, 95, 61, 124, 143, 20, 190, 5, 173, 170, 61, 3, 94, 198, 187, 38, 150, 37, 190, 106, 226, 48, 189, 50, 205, 177, 61, 62, 226, 93, 188, 83, 139, 142, 61, 123, 68, 15, 190, 167, 161, 240, 189, 219, 65, 31, 190, 100, 42, 251, 189, 76, 24, 37, 189, 182, 213, 199, 61, 81, 183, 22, 61, 205, 196, 244, 61, 173, 186, 57, 61, 25, 33, 8, 190, 127, 89, 163, 190, 219, 14, 233, 189, 56, 240, 17, 62, 98, 89, 196, 59, 110, 176, 12, 190, 70, 27, 90, 62, 178, 187, 1, 62, 87, 195, 176, 190, 195, 89, 111, 62, 43, 118, 179, 61, 86, 226, 11, 63, 255, 236, 42, 190, 56, 33, 88, 190, 65, 230, 77, 59, 142, 242, 123, 188, 99, 225, 183, 61, 62, 210, 47, 190, 127, 62, 176, 188, 39, 23, 238, 189, 240, 222, 234, 189, 108, 32, 43, 62, 114, 22, 45, 60, 3, 73, 94, 61, 114, 220, 227, 61, 144, 152, 115, 61, 55, 221, 18, 62, 27, 41, 10, 191, 64, 103, 237, 61, 182, 40, 133, 62, 9, 52, 84, 62, 116, 121, 49, 190, 12, 113, 136, 61, 71, 240, 29, 190, 141, 41, 31, 62, 140, 194, 187, 190, 244, 87, 36, 62, 14, 16, 232, 190, 249, 31, 97, 62, 8, 119, 12, 62, 252, 140, 81, 62, 174, 148, 53, 61, 12, 115, 218, 61, 84, 158, 110, 191, 202, 92, 122, 62, 252, 63, 132, 62, 91, 71, 22, 60, 73, 136, 125, 62, 156, 112, 100, 190, 138, 241, 8, 62, 136, 172, 157, 62, 183, 38, 126, 62, 101, 185, 145, 62, 192, 112, 151, 62, 47, 139, 228, 190, 99, 111, 17, 61, 142, 8, 5, 190, 74, 96, 2, 191, 44, 104, 96, 190, 98, 51, 32, 60, 180, 105, 246, 60, 164, 18, 59, 61, 22, 219, 116, 190, 130, 88, 29, 61, 14, 8, 155, 190, 65, 25, 155, 190, 83, 73, 203, 189, 112, 161, 154, 62, 224, 232, 188, 190, 107, 94, 217, 62, 237, 209, 19, 62, 136, 143, 61, 62, 212, 29, 67, 191, 206, 117, 156, 189, 86, 0, 167, 62, 38, 249, 54, 63, 184, 113, 17, 191, 35, 174, 57, 62, 58, 119, 9, 189, 159, 225, 197, 190, 132, 34, 198, 62, 113, 172, 19, 61, 122, 202, 232, 190, 126, 176, 125, 189, 110, 217, 155, 190, 74, 60, 11, 63, 13, 237, 32, 62, 180, 111, 170, 62, 199, 14, 169, 189, 218, 109, 134, 62, 244, 107, 23, 63, 70, 200, 85, 61, 219, 136, 90, 188, 13, 170, 55, 62, 160, 130, 206, 62, 236, 222, 133, 190, 251, 203, 192, 62, 29, 39, 1, 62, 65, 139, 225, 189, 243, 123, 172, 189, 30, 172, 0, 62, 204, 89, 26, 190, 252, 109, 38, 190, 239, 13, 145, 189, 25, 250, 197, 60, 30, 65, 119, 189, 233, 211, 50, 61, 2, 94, 145, 188, 16, 231, 62, 189, 28, 83, 206, 189, 227, 95, 56, 189, 81, 1, 2, 190, 182, 83, 37, 62, 33, 53, 181, 58, 184, 112, 34, 190, 208, 234, 51, 186, 151, 180, 2, 62, 215, 47, 37, 190, 43, 15, 0, 61, 192, 85, 193, 189, 206, 244, 176, 189, 193, 200, 35, 190, 176, 183, 28, 62, 194, 249, 239, 61, 74, 165, 159, 61, 151, 40, 6, 190, 109, 222, 51, 190, 198, 37, 17, 189, 114, 203, 99, 61, 178, 106, 24, 190, 153, 137, 80, 191, 234, 118, 67, 60, 52, 149, 54, 191, 145, 5, 109, 188, 79, 146, 27, 61, 211, 171, 39, 61, 7, 170, 251, 189, 211, 168, 207, 190, 79, 27, 198, 190, 165, 86, 152, 62, 10, 160, 248, 190, 69, 119, 52, 61, 222, 66, 38, 191, 71, 115, 61, 191, 153, 72, 160, 62, 69, 27, 48, 190, 159, 155, 161, 190, 221, 150, 98, 62, 64, 80, 210, 190, 132, 50, 147, 190, 75, 181, 184, 190, 100, 222, 5, 188, 17, 243, 186, 61, 73, 234, 216, 188, 116, 72, 82, 189, 151, 163, 69, 61, 30, 6, 124, 190, 175, 78, 185, 188, 213, 54, 187, 189, 45, 143, 35, 191, 120, 109, 189, 62, 31, 227, 37, 190, 149, 46, 64, 190, 88, 62, 29, 62, 21, 49, 248, 61, 250, 38, 175, 58, 255, 110, 156, 61, 101, 117, 3, 189, 33, 42, 153, 187, 171, 81, 157, 189, 48, 227, 151, 60, 120, 138, 242, 62, 214, 101, 107, 189, 251, 46, 238, 186, 50, 68, 211, 58, 172, 54, 130, 190, 185, 124, 190, 61, 56, 110, 83, 60, 254, 167, 189, 61, 151, 47, 1, 189, 116, 133, 221, 189, 33, 159, 46, 189, 227, 38, 66, 190, 235, 130, 178, 61, 50, 203, 1, 62, 254, 130, 69, 188, 107, 130, 237, 61, 8, 121, 56, 190, 151, 171, 251, 61, 109, 127, 230, 188, 246, 7, 21, 62, 41, 176, 164, 190, 211, 211, 14, 62, 23, 109, 58, 190, 38, 203, 128, 190, 76, 251, 18, 62, 69, 219, 148, 190, 16, 240, 175, 189, 126, 46, 249, 60, 176, 152, 47, 62, 162, 100, 39, 191, 24, 116, 72, 61, 169, 222, 204, 189, 162, 25, 192, 62, 168, 227, 237, 190, 164, 155, 90, 62, 115, 106, 158, 191, 175, 130, 67, 190, 84, 93, 143, 62, 54, 63, 189, 190, 35, 109, 96, 191, 180, 169, 151, 62, 94, 197, 191, 190, 177, 128, 173, 62, 167, 232, 13, 189, 71, 248, 38, 62, 1, 53, 140, 61, 132, 106, 148, 62, 65, 57, 129, 62, 35, 90, 193, 61, 21, 154, 141, 190, 194, 152, 72, 62, 172, 88, 12, 63, 52, 179, 229, 190, 137, 55, 120, 62, 144, 246, 55, 190, 16, 99, 23, 190, 221, 38, 214, 60, 173, 72, 97, 189, 193, 99, 7, 62, 248, 78, 190, 189, 21, 212, 27, 190, 167, 238, 73, 189, 130, 227, 83, 189, 183, 66, 73, 189, 49, 134, 148, 61, 247, 241, 48, 187, 196, 35, 253, 189, 176, 22, 100, 61, 234, 65, 66, 61, 187, 231, 74, 190, 192, 164, 157, 188, 42, 164, 22, 190, 101, 180, 219, 188, 100, 153, 20, 190, 218, 153, 34, 190, 148, 223, 92, 61, 89, 134, 98, 61, 102, 234, 124, 189, 125, 135, 209, 189, 179, 77, 23, 62, 179, 120, 237, 189, 68, 21, 106, 189, 18, 146, 243, 189, 229, 247, 59, 190, 41, 27, 23, 190, 120, 74, 116, 61, 249, 35, 205, 190, 108, 132, 154, 190, 252, 198, 230, 187, 153, 248, 133, 188, 180, 120, 91, 190, 146, 228, 50, 62, 125, 74, 175, 61, 187, 18, 168, 190, 167, 92, 32, 61, 192, 207, 147, 62, 118, 172, 19, 63, 27, 235, 248, 188, 15, 41, 65, 190, 125, 74, 15, 60, 190, 238, 20, 189, 138, 84, 230, 61, 248, 45, 20, 190, 240, 230, 117, 58, 217, 226, 13, 190, 20, 233, 17, 190, 212, 201, 169, 62, 127, 33, 8, 189, 207, 186, 69, 62, 57, 110, 155, 189, 127, 248, 16, 62, 193, 87, 79, 62, 223, 205, 51, 191, 63, 193, 183, 61, 80, 133, 158, 61, 158, 108, 25, 62, 186, 130, 74, 190, 62, 125, 162, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 214, 171, 187, 50, 172, 26, 61, 104, 15, 250, 61, 217, 176, 68, 62, 178, 35, 135, 188, 175, 103, 101, 188, 103, 215, 128, 187, 224, 22, 112, 190, 21, 107, 76, 190, 191, 185, 35, 62, 95, 247, 149, 61, 72, 125, 154, 190, 180, 134, 70, 62, 81, 190, 174, 62, 156, 92, 38, 190, 181, 46, 99, 62, 58, 166, 54, 61, 240, 186, 109, 190, 211, 141, 68, 189, 255, 177, 122, 61, 96, 241, 26, 61, 68, 41, 66, 61, 121, 253, 160, 61, 211, 29, 117, 62, 42, 10, 92, 62, 164, 171, 130, 62, 142, 161, 168, 59, 192, 173, 55, 62, 227, 75, 205, 61, 125, 217, 48, 62, 107, 193, 136, 189, 51, 22, 71, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 101, 156, 190, 93, 214, 42, 190, 48, 249, 90, 190, 13, 72, 117, 191, 48, 226, 185, 188, 172, 212, 224, 62, 39, 233, 18, 190, 23, 136, 134, 190, 93, 41, 181, 190, 241, 39, 161, 190, 36, 27, 184, 60, 179, 236, 148, 62, 3, 148, 138, 63, 109, 56, 255, 187, 116, 201, 188, 61, 113, 26, 166, 188, 75, 187, 192, 190, 109, 71, 78, 190, 72, 207, 240, 62, 182, 197, 10, 190, 23, 189, 191, 188, 198, 139, 33, 63, 142, 245, 166, 189, 241, 171, 84, 62, 19, 150, 7, 191, 202, 1, 106, 63, 234, 118, 145, 59, 148, 11, 117, 63, 52, 157, 149, 61, 90, 7, 177, 63, 102, 177, 19, 190, 175, 149, 137, 62, 162, 243, 8, 188, 163, 42, 99, 190, 151, 231, 108, 189, 26, 32, 135, 62, 249, 255, 65, 190, 99, 15, 4, 190, 68, 250, 152, 189, 112, 11, 121, 62, 235, 201, 194, 62, 234, 104, 184, 189, 222, 190, 16, 61, 166, 47, 71, 63, 199, 91, 20, 62, 5, 19, 117, 190, 51, 46, 208, 189, 237, 158, 28, 190, 228, 125, 148, 62, 114, 20, 114, 62, 91, 239, 96, 60, 159, 148, 139, 190, 252, 100, 134, 62, 70, 160, 155, 189, 12, 229, 68, 61, 105, 109, 128, 190, 110, 200, 10, 187, 0, 13, 27, 62, 119, 143, 235, 187, 140, 55, 84, 62, 116, 39, 9, 190, 49, 219, 217, 62, 55, 154, 206, 189, 194, 12, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 59, 111, 190, 246, 146, 200, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {57, 202, 16, 192, 55, 145, 44, 191, 93, 239, 193, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {87, 157, 71, 192, 195, 182, 137, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0078/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}