// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 207, 11, 191, 66, 163, 147, 191, 248, 181, 166, 190, 204, 24, 53, 190, 90, 245, 128, 63, 3, 120, 179, 62, 234, 108, 75, 63, 250, 144, 143, 191, 240, 248, 185, 190, 150, 115, 189, 62, 165, 41, 155, 189, 53, 142, 13, 63, 11, 2, 100, 63, 30, 202, 108, 191, 81, 119, 155, 190, 225, 64, 104, 190, 243, 3, 231, 62, 3, 196, 47, 189, 160, 198, 96, 190, 35, 63, 165, 62, 31, 1, 250, 60, 191, 83, 187, 189, 171, 78, 56, 63, 103, 17, 89, 191, 210, 237, 78, 62, 78, 175, 245, 61, 206, 207, 36, 63, 155, 110, 30, 63, 166, 174, 35, 62, 134, 248, 91, 62, 225, 177, 39, 62, 230, 216, 142, 191, 54, 35, 188, 62, 235, 232, 35, 63, 171, 191, 174, 63, 80, 184, 171, 62, 161, 200, 9, 190, 12, 172, 67, 63, 83, 236, 129, 189, 161, 55, 178, 62, 191, 135, 200, 191, 104, 4, 2, 191, 89, 191, 1, 63, 241, 109, 175, 63, 17, 221, 130, 62, 197, 197, 55, 189, 108, 167, 87, 63, 205, 34, 233, 190, 52, 113, 231, 190, 189, 137, 191, 191, 206, 131, 226, 189, 73, 214, 211, 62, 172, 169, 16, 188, 196, 142, 38, 191, 71, 116, 11, 191, 9, 228, 119, 63, 75, 204, 77, 190, 135, 140, 246, 62, 9, 170, 110, 191, 97, 233, 19, 63, 239, 60, 188, 63, 45, 241, 231, 190, 195, 186, 205, 61, 157, 78, 245, 62, 191, 255, 128, 191, 38, 218, 92, 190, 216, 187, 40, 191, 52, 198, 20, 190, 222, 53, 128, 188, 93, 65, 214, 60, 166, 206, 168, 63, 163, 25, 0, 62, 143, 222, 131, 190, 254, 246, 21, 190, 97, 49, 57, 63, 76, 118, 219, 62, 91, 149, 208, 62, 92, 11, 13, 191, 245, 189, 124, 191, 215, 133, 149, 189, 69, 207, 112, 190, 159, 212, 44, 190, 225, 78, 46, 191, 146, 211, 251, 190, 67, 234, 96, 190, 180, 58, 76, 188, 58, 116, 11, 60, 59, 186, 68, 62, 107, 196, 84, 189, 211, 20, 132, 190, 208, 108, 42, 62, 86, 49, 106, 191, 109, 180, 189, 62, 14, 91, 11, 191, 156, 115, 51, 190, 14, 75, 119, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 91, 109, 189, 216, 50, 13, 190, 32, 108, 191, 61, 255, 184, 90, 62, 11, 223, 189, 190, 214, 139, 239, 62, 68, 19, 241, 62, 210, 221, 10, 61, 9, 192, 171, 62, 123, 133, 31, 63, 122, 173, 55, 189, 247, 88, 21, 61, 12, 134, 115, 62, 62, 202, 94, 61, 95, 116, 95, 62, 75, 230, 144, 61, 136, 236, 159, 62, 164, 90, 224, 62, 158, 157, 12, 63, 127, 16, 102, 189, 22, 136, 129, 189, 102, 175, 160, 61, 33, 30, 48, 63, 184, 131, 175, 62, 0, 120, 74, 190, 241, 159, 178, 61, 174, 253, 219, 190, 221, 154, 146, 190, 24, 245, 212, 62, 228, 177, 118, 62, 220, 136, 235, 189, 196, 43, 198, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 159, 25, 61, 130, 6, 169, 61, 150, 13, 140, 190, 171, 113, 151, 62, 112, 151, 254, 189, 205, 183, 8, 62, 72, 222, 44, 187, 144, 136, 185, 62, 179, 116, 0, 62, 128, 122, 24, 190, 60, 106, 40, 191, 22, 47, 191, 62, 65, 115, 33, 62, 19, 191, 59, 62, 22, 227, 215, 62, 206, 141, 70, 190, 124, 138, 78, 190, 164, 195, 255, 61, 108, 160, 136, 62, 70, 73, 179, 62, 243, 150, 154, 62, 208, 28, 185, 190, 233, 119, 0, 62, 27, 90, 1, 62, 88, 36, 254, 188, 57, 68, 141, 190, 133, 22, 153, 62, 72, 5, 23, 190, 120, 173, 81, 189, 198, 81, 64, 190, 247, 192, 240, 61, 0, 241, 150, 189, 77, 16, 137, 62, 18, 28, 216, 189, 200, 185, 113, 62, 172, 93, 83, 190, 53, 95, 218, 189, 76, 33, 145, 190, 121, 226, 230, 61, 1, 36, 8, 191, 223, 245, 45, 190, 28, 86, 114, 62, 103, 190, 227, 61, 253, 247, 174, 61, 105, 53, 129, 191, 54, 173, 129, 62, 235, 38, 135, 62, 125, 101, 247, 189, 69, 42, 5, 62, 251, 189, 81, 62, 75, 74, 154, 191, 153, 189, 38, 61, 135, 47, 169, 62, 55, 23, 190, 62, 171, 92, 156, 190, 57, 117, 180, 190, 36, 218, 252, 189, 163, 172, 184, 61, 14, 24, 144, 191, 59, 47, 215, 189, 233, 90, 237, 189, 200, 217, 193, 62, 243, 156, 69, 189, 96, 137, 188, 61, 173, 166, 15, 62, 30, 172, 193, 61, 151, 252, 178, 188, 32, 61, 107, 62, 209, 126, 78, 190, 21, 144, 4, 61, 54, 31, 102, 189, 52, 103, 175, 62, 165, 111, 35, 61, 106, 112, 102, 190, 224, 188, 239, 190, 48, 47, 153, 62, 188, 96, 47, 62, 229, 145, 9, 190, 154, 60, 190, 62, 7, 120, 133, 190, 158, 207, 135, 190, 45, 21, 45, 62, 214, 215, 78, 62, 22, 122, 137, 62, 102, 165, 109, 62, 247, 179, 135, 190, 63, 63, 18, 60, 54, 176, 191, 60, 113, 110, 187, 189, 10, 179, 194, 61, 184, 5, 34, 62, 252, 58, 41, 61, 192, 206, 15, 190, 0, 156, 16, 190, 131, 201, 91, 62, 195, 32, 18, 61, 128, 89, 180, 61, 171, 203, 149, 190, 183, 251, 236, 190, 71, 143, 12, 62, 116, 254, 160, 190, 240, 250, 133, 62, 187, 46, 47, 60, 141, 118, 222, 61, 42, 139, 136, 191, 98, 117, 221, 190, 110, 183, 46, 191, 239, 160, 65, 62, 146, 212, 165, 62, 106, 249, 165, 189, 40, 106, 15, 63, 200, 203, 123, 190, 148, 251, 57, 62, 109, 186, 35, 62, 214, 222, 176, 62, 34, 103, 46, 191, 102, 100, 86, 63, 244, 91, 24, 191, 73, 172, 255, 188, 249, 227, 187, 190, 194, 78, 155, 191, 198, 62, 255, 189, 42, 153, 149, 62, 252, 91, 226, 190, 47, 100, 251, 61, 185, 48, 168, 189, 164, 58, 204, 61, 73, 36, 138, 191, 114, 183, 129, 190, 255, 91, 164, 187, 210, 221, 82, 189, 93, 164, 175, 188, 110, 137, 228, 190, 251, 37, 141, 62, 185, 180, 128, 62, 118, 108, 201, 59, 178, 57, 12, 62, 161, 210, 245, 188, 127, 130, 122, 62, 178, 44, 120, 62, 130, 255, 203, 188, 130, 239, 197, 188, 78, 170, 198, 58, 202, 188, 66, 189, 142, 145, 43, 61, 203, 182, 176, 60, 92, 182, 117, 61, 231, 9, 246, 189, 248, 75, 139, 62, 213, 90, 141, 190, 245, 12, 244, 61, 225, 195, 213, 61, 57, 12, 59, 61, 98, 151, 173, 61, 126, 136, 127, 189, 154, 184, 51, 189, 92, 48, 141, 62, 177, 181, 153, 187, 60, 25, 188, 189, 216, 83, 34, 190, 45, 237, 191, 190, 14, 171, 47, 187, 168, 45, 218, 190, 39, 171, 17, 190, 80, 247, 148, 189, 49, 13, 164, 61, 231, 8, 4, 61, 245, 184, 76, 190, 204, 152, 94, 62, 228, 39, 142, 60, 112, 54, 57, 62, 95, 138, 124, 62, 97, 18, 187, 62, 176, 166, 131, 191, 204, 55, 118, 62, 238, 209, 242, 61, 129, 155, 234, 190, 52, 229, 20, 190, 54, 238, 38, 62, 58, 122, 116, 190, 232, 192, 58, 191, 177, 54, 227, 190, 47, 71, 61, 190, 114, 8, 26, 63, 102, 6, 65, 62, 242, 102, 51, 60, 210, 120, 131, 189, 161, 130, 204, 190, 182, 19, 142, 189, 199, 147, 36, 62, 132, 150, 115, 190, 23, 251, 180, 62, 146, 227, 165, 189, 198, 43, 27, 62, 4, 6, 86, 190, 56, 239, 148, 188, 107, 221, 9, 190, 39, 122, 96, 190, 104, 173, 240, 189, 47, 197, 26, 189, 106, 207, 72, 61, 51, 78, 39, 190, 33, 203, 236, 189, 73, 222, 219, 189, 81, 94, 99, 190, 242, 170, 67, 190, 194, 131, 69, 189, 216, 207, 136, 189, 37, 237, 148, 59, 79, 217, 147, 61, 196, 67, 130, 188, 35, 237, 23, 189, 88, 237, 168, 189, 97, 169, 39, 189, 254, 34, 180, 189, 1, 106, 179, 61, 225, 11, 191, 189, 184, 186, 129, 59, 72, 150, 195, 61, 158, 4, 178, 61, 54, 52, 226, 61, 120, 81, 139, 61, 126, 9, 245, 189, 201, 226, 213, 61, 164, 216, 108, 62, 108, 108, 216, 61, 3, 4, 223, 190, 203, 249, 109, 60, 244, 156, 10, 191, 207, 230, 185, 189, 254, 58, 194, 190, 191, 226, 201, 190, 27, 217, 96, 189, 125, 1, 173, 189, 58, 237, 113, 62, 39, 220, 33, 190, 46, 159, 208, 62, 74, 0, 124, 62, 63, 156, 34, 61, 220, 141, 253, 189, 214, 182, 76, 190, 84, 247, 29, 190, 48, 203, 76, 187, 13, 213, 219, 188, 63, 91, 65, 190, 170, 24, 72, 190, 163, 181, 236, 190, 238, 245, 78, 190, 40, 56, 133, 62, 113, 28, 72, 190, 255, 234, 187, 190, 179, 147, 178, 189, 84, 87, 129, 189, 129, 66, 186, 60, 165, 160, 67, 62, 196, 57, 226, 62, 18, 9, 226, 61, 221, 136, 218, 189, 44, 65, 151, 62, 162, 36, 71, 190, 54, 222, 14, 63, 213, 183, 124, 190, 116, 254, 222, 190, 51, 6, 35, 190, 164, 208, 187, 190, 221, 76, 143, 191, 78, 92, 202, 60, 205, 207, 73, 189, 225, 181, 211, 190, 122, 219, 250, 186, 249, 238, 30, 191, 70, 220, 253, 189, 65, 157, 16, 190, 248, 223, 7, 61, 181, 234, 65, 191, 16, 200, 113, 190, 128, 89, 207, 62, 131, 206, 150, 62, 208, 115, 172, 190, 143, 240, 116, 191, 123, 237, 49, 62, 115, 126, 77, 61, 185, 158, 118, 191, 21, 198, 56, 62, 248, 117, 180, 190, 71, 174, 159, 189, 42, 138, 82, 190, 85, 95, 160, 189, 90, 18, 214, 61, 146, 163, 93, 62, 68, 56, 52, 61, 36, 232, 101, 62, 91, 169, 57, 61, 242, 144, 242, 189, 26, 2, 134, 60, 251, 122, 145, 62, 161, 167, 25, 62, 32, 48, 138, 190, 145, 109, 1, 191, 67, 195, 138, 62, 104, 71, 65, 62, 232, 192, 133, 61, 146, 173, 190, 62, 248, 124, 163, 190, 79, 89, 95, 62, 208, 47, 48, 188, 237, 128, 13, 62, 138, 9, 123, 62, 149, 58, 217, 62, 90, 42, 204, 61, 83, 84, 251, 61, 244, 174, 227, 187, 73, 40, 13, 191, 170, 154, 154, 61, 42, 28, 205, 61, 113, 146, 190, 189, 130, 172, 86, 189, 91, 154, 80, 190, 189, 78, 220, 61, 132, 166, 224, 190, 222, 171, 249, 60, 125, 18, 209, 189, 87, 96, 207, 61, 69, 4, 167, 189, 164, 5, 13, 190, 21, 66, 166, 61, 9, 19, 218, 60, 244, 2, 112, 61, 160, 185, 0, 60, 65, 103, 9, 190, 224, 60, 3, 189, 6, 4, 8, 62, 67, 141, 7, 190, 54, 83, 129, 189, 191, 7, 3, 62, 120, 202, 138, 189, 217, 28, 71, 190, 95, 192, 72, 189, 188, 221, 248, 189, 62, 100, 72, 61, 124, 141, 30, 190, 86, 97, 134, 61, 243, 31, 159, 61, 174, 12, 181, 189, 62, 90, 150, 189, 42, 12, 37, 190, 135, 130, 182, 61, 219, 206, 62, 61, 97, 169, 14, 61, 135, 116, 146, 189, 136, 68, 188, 61, 130, 252, 139, 188, 170, 183, 164, 190, 56, 212, 53, 62, 76, 62, 188, 190, 24, 121, 0, 62, 243, 73, 211, 189, 83, 79, 12, 190, 202, 187, 201, 189, 145, 139, 155, 62, 162, 69, 140, 59, 210, 144, 10, 188, 136, 66, 203, 189, 249, 156, 102, 62, 194, 67, 254, 187, 78, 56, 44, 191, 111, 77, 221, 62, 192, 58, 38, 62, 5, 182, 193, 190, 140, 81, 106, 62, 44, 119, 52, 60, 168, 244, 90, 62, 190, 208, 203, 62, 144, 227, 3, 191, 28, 214, 28, 191, 47, 250, 86, 188, 136, 197, 149, 188, 71, 91, 52, 190, 117, 128, 132, 60, 82, 240, 200, 190, 235, 245, 27, 190, 13, 177, 87, 189, 67, 132, 6, 62, 38, 84, 149, 190, 202, 134, 174, 190, 92, 197, 93, 191, 10, 117, 15, 62, 169, 18, 97, 191, 174, 17, 68, 60, 240, 130, 192, 186, 47, 101, 188, 60, 120, 58, 132, 190, 70, 16, 94, 191, 34, 64, 229, 190, 88, 89, 235, 61, 133, 108, 22, 191, 125, 235, 18, 62, 44, 233, 144, 191, 89, 199, 48, 191, 22, 10, 182, 62, 197, 118, 83, 190, 247, 238, 201, 190, 199, 130, 150, 60, 187, 122, 17, 191, 118, 181, 199, 189, 143, 54, 171, 190, 213, 198, 195, 60, 160, 240, 122, 62, 225, 120, 242, 61, 131, 151, 167, 190, 12, 114, 214, 60, 82, 255, 172, 190, 91, 213, 9, 62, 55, 123, 49, 60, 201, 76, 244, 190, 31, 150, 159, 189, 177, 148, 115, 61, 78, 52, 67, 62, 126, 103, 14, 62, 145, 20, 109, 189, 195, 21, 166, 190, 236, 94, 118, 62, 102, 68, 36, 187, 136, 178, 211, 188, 153, 31, 138, 188, 18, 158, 189, 61, 195, 135, 208, 61, 125, 200, 205, 60, 238, 129, 12, 190, 106, 243, 158, 60, 145, 61, 31, 62, 217, 58, 25, 190, 5, 5, 148, 60, 54, 199, 194, 61, 2, 9, 203, 187, 142, 109, 224, 61, 253, 238, 91, 62, 23, 84, 158, 187, 189, 114, 149, 189, 134, 120, 33, 62, 127, 71, 117, 189, 40, 15, 176, 61, 126, 115, 216, 189, 99, 84, 239, 61, 163, 203, 113, 62, 29, 46, 8, 62, 39, 130, 160, 188, 204, 132, 185, 61, 37, 123, 139, 188, 244, 3, 15, 190, 56, 155, 171, 189, 128, 121, 187, 189, 89, 109, 21, 62, 130, 188, 32, 189, 73, 219, 43, 190, 195, 252, 67, 189, 146, 46, 20, 62, 119, 65, 237, 60, 40, 239, 164, 189, 109, 130, 12, 190, 214, 29, 14, 61, 152, 104, 8, 62, 41, 252, 43, 190, 90, 182, 12, 189, 77, 153, 229, 188, 114, 216, 245, 189, 135, 1, 42, 190, 211, 125, 162, 189, 118, 200, 224, 61, 191, 143, 25, 190, 185, 178, 130, 61, 220, 253, 206, 189, 20, 136, 13, 62, 117, 23, 254, 61, 201, 145, 51, 189, 65, 44, 140, 188, 68, 76, 20, 190, 156, 199, 40, 190, 93, 230, 215, 189, 151, 167, 10, 190, 93, 11, 164, 190, 125, 155, 57, 188, 187, 206, 80, 189, 144, 6, 180, 61, 1, 119, 57, 191, 121, 94, 72, 189, 142, 184, 71, 61, 149, 244, 159, 60, 230, 136, 32, 190, 14, 113, 54, 62, 189, 199, 32, 62, 215, 197, 176, 61, 250, 50, 140, 189, 72, 109, 196, 189, 126, 124, 157, 61, 26, 190, 16, 60, 71, 29, 35, 61, 205, 68, 199, 61, 173, 5, 135, 62, 8, 53, 25, 61, 57, 215, 29, 62, 100, 206, 55, 190, 173, 75, 53, 62, 105, 125, 110, 61, 155, 76, 176, 189, 219, 232, 58, 61, 52, 253, 176, 61, 174, 232, 20, 190, 150, 168, 196, 60, 4, 178, 240, 189, 176, 117, 60, 61, 212, 221, 211, 188, 73, 89, 216, 188, 196, 198, 78, 189, 32, 22, 177, 61, 64, 178, 255, 189, 96, 165, 212, 61, 6, 233, 164, 190, 101, 137, 36, 190, 7, 112, 204, 189, 150, 247, 222, 190, 28, 254, 159, 190, 166, 215, 212, 188, 32, 205, 35, 190, 178, 220, 251, 190, 166, 157, 211, 60, 151, 81, 87, 190, 194, 49, 165, 190, 147, 231, 64, 190, 161, 149, 93, 190, 246, 193, 23, 191, 71, 236, 47, 190, 111, 72, 132, 61, 124, 19, 8, 62, 27, 0, 136, 190, 249, 201, 93, 190, 51, 104, 113, 190, 230, 118, 78, 189, 251, 192, 25, 191, 5, 127, 154, 61, 235, 55, 81, 189, 223, 1, 94, 188, 216, 247, 100, 190, 61, 25, 242, 189, 225, 76, 103, 62, 137, 67, 65, 62, 179, 225, 130, 190, 197, 44, 99, 61, 50, 104, 77, 190, 241, 35, 189, 61, 64, 133, 59, 190, 232, 68, 56, 62, 198, 254, 37, 62, 40, 140, 163, 189, 158, 17, 177, 188, 183, 152, 169, 62, 118, 7, 234, 189, 46, 157, 230, 189, 164, 238, 180, 62, 8, 150, 189, 62, 228, 216, 159, 188, 177, 222, 103, 62, 225, 248, 166, 61, 37, 167, 144, 62, 215, 138, 2, 62, 184, 56, 179, 190, 245, 4, 195, 190, 241, 57, 237, 189, 178, 69, 67, 61, 129, 167, 124, 62, 110, 69, 247, 189, 76, 243, 110, 61, 54, 74, 166, 190, 14, 242, 192, 61, 153, 150, 121, 62, 51, 41, 114, 62, 106, 55, 153, 188, 47, 212, 76, 191, 67, 61, 239, 188, 121, 112, 70, 189, 74, 129, 39, 62, 27, 125, 18, 62, 28, 66, 60, 190, 13, 108, 109, 62, 249, 57, 16, 62, 62, 9, 55, 62, 137, 158, 224, 189, 91, 183, 206, 189, 129, 94, 14, 62, 177, 207, 108, 60, 71, 124, 175, 189, 251, 224, 166, 62, 205, 152, 145, 190, 167, 226, 202, 62, 161, 192, 202, 61, 176, 66, 161, 62, 132, 57, 248, 61, 170, 169, 96, 62, 13, 214, 244, 189, 58, 42, 165, 189, 116, 163, 145, 190, 147, 32, 118, 62, 138, 244, 63, 187, 103, 168, 180, 61, 33, 131, 50, 187, 120, 237, 87, 62, 91, 40, 25, 63, 209, 32, 239, 190, 17, 224, 9, 190, 244, 17, 115, 62, 104, 251, 65, 62, 44, 181, 195, 61, 61, 59, 118, 190, 95, 135, 194, 61, 81, 198, 137, 61, 159, 29, 191, 62, 55, 85, 72, 62, 197, 26, 205, 189, 236, 186, 95, 190, 59, 15, 186, 62, 254, 221, 209, 61, 163, 175, 252, 60, 43, 223, 28, 62, 161, 237, 79, 190, 58, 154, 164, 188, 16, 141, 228, 62, 147, 175, 194, 189, 89, 45, 158, 62, 182, 138, 128, 62, 30, 163, 110, 62, 252, 51, 238, 189, 83, 247, 253, 61, 113, 106, 204, 60, 129, 88, 137, 61, 114, 133, 41, 188, 61, 78, 189, 60, 138, 113, 135, 62, 196, 163, 146, 189, 245, 13, 146, 62, 44, 228, 74, 189, 38, 190, 124, 190, 5, 26, 77, 190, 220, 18, 173, 62, 112, 44, 85, 190, 216, 75, 2, 63, 33, 141, 221, 60, 51, 68, 98, 189, 114, 148, 139, 61, 62, 110, 62, 190, 69, 153, 129, 189, 20, 168, 78, 62, 53, 143, 141, 191, 144, 135, 145, 61, 61, 236, 146, 61, 31, 22, 99, 191, 104, 229, 2, 189, 57, 21, 127, 60, 13, 9, 92, 62, 172, 164, 43, 190, 51, 30, 252, 61, 225, 149, 2, 63, 53, 225, 150, 62, 37, 75, 139, 61, 152, 66, 69, 191, 43, 59, 251, 61, 84, 199, 81, 62, 205, 182, 7, 62, 139, 15, 85, 189, 120, 174, 54, 62, 37, 246, 153, 61, 86, 181, 100, 62, 140, 255, 129, 189, 235, 68, 180, 190, 200, 94, 40, 191, 106, 12, 65, 62, 239, 207, 183, 189, 240, 169, 227, 189, 253, 57, 122, 189, 39, 179, 114, 189, 62, 222, 71, 190, 140, 243, 124, 190, 199, 16, 2, 60, 146, 246, 134, 62, 174, 196, 6, 190, 246, 143, 147, 187, 13, 50, 134, 191, 207, 241, 129, 190, 89, 152, 220, 62, 111, 137, 172, 190, 255, 22, 233, 190, 30, 101, 202, 61, 98, 78, 27, 191, 102, 85, 115, 62, 87, 112, 200, 61, 102, 104, 182, 61, 212, 12, 102, 61, 244, 236, 96, 62, 27, 155, 170, 190, 118, 65, 237, 62, 219, 209, 182, 190, 183, 234, 17, 61, 164, 107, 89, 62, 115, 122, 166, 190, 107, 89, 39, 62, 29, 17, 157, 62, 121, 184, 198, 190, 86, 249, 138, 188, 199, 39, 5, 190, 198, 93, 17, 62, 128, 66, 42, 190, 200, 20, 170, 189, 196, 28, 241, 60, 182, 17, 60, 190, 255, 118, 8, 61, 215, 50, 155, 62, 11, 37, 72, 61, 104, 134, 158, 190, 188, 55, 123, 62, 105, 126, 101, 190, 102, 128, 249, 61, 121, 155, 84, 62, 82, 71, 36, 190, 196, 139, 60, 190, 119, 133, 192, 61, 92, 52, 217, 188, 207, 11, 118, 62, 143, 76, 213, 189, 194, 98, 230, 190, 251, 250, 175, 190, 213, 12, 4, 190, 56, 3, 172, 60, 191, 160, 46, 62, 120, 103, 90, 61, 35, 27, 11, 62, 187, 76, 172, 62, 129, 244, 118, 190, 102, 248, 99, 191, 251, 119, 100, 190, 146, 118, 49, 62, 30, 31, 42, 189, 89, 40, 205, 189, 141, 107, 225, 61, 53, 2, 235, 61, 54, 169, 104, 190, 193, 78, 57, 62, 88, 188, 43, 61, 161, 178, 252, 62, 108, 89, 172, 190, 230, 211, 139, 190, 67, 105, 27, 190, 27, 55, 17, 190, 245, 43, 71, 62, 62, 3, 113, 190, 142, 193, 180, 60, 96, 12, 96, 190, 224, 12, 12, 190, 165, 70, 212, 61, 191, 198, 143, 61, 178, 199, 129, 61, 114, 70, 147, 61, 114, 117, 94, 60, 172, 52, 106, 62, 213, 67, 137, 191, 14, 85, 234, 188, 238, 74, 94, 62, 110, 255, 77, 62, 33, 171, 57, 190, 52, 124, 236, 60, 27, 220, 152, 190, 181, 108, 32, 61, 33, 191, 189, 190, 204, 131, 5, 62, 201, 200, 9, 191, 110, 101, 135, 62, 12, 255, 72, 62, 155, 59, 23, 62, 239, 209, 211, 59, 76, 20, 76, 62, 201, 59, 108, 191, 150, 91, 108, 62, 189, 212, 129, 62, 93, 133, 149, 189, 210, 98, 122, 62, 184, 236, 114, 190, 77, 1, 168, 61, 89, 238, 134, 62, 106, 110, 117, 62, 34, 13, 101, 62, 25, 237, 176, 62, 59, 196, 231, 190, 7, 96, 180, 61, 236, 43, 171, 189, 23, 139, 43, 191, 80, 173, 117, 190, 20, 227, 93, 61, 203, 133, 215, 189, 210, 194, 24, 62, 201, 51, 121, 190, 158, 213, 40, 61, 66, 188, 251, 190, 89, 117, 137, 191, 70, 7, 32, 190, 68, 149, 143, 62, 82, 165, 200, 190, 97, 223, 198, 62, 5, 185, 36, 61, 192, 13, 80, 62, 148, 134, 61, 191, 226, 112, 210, 189, 204, 19, 152, 62, 84, 165, 19, 63, 76, 215, 37, 191, 21, 48, 124, 61, 93, 80, 95, 190, 163, 99, 239, 190, 93, 231, 170, 62, 203, 234, 68, 190, 168, 237, 6, 191, 35, 68, 181, 190, 170, 189, 198, 190, 136, 84, 243, 62, 1, 43, 51, 62, 31, 90, 143, 62, 113, 211, 27, 59, 183, 127, 61, 62, 207, 110, 14, 63, 152, 143, 90, 190, 237, 167, 150, 190, 11, 79, 22, 62, 83, 48, 144, 62, 46, 74, 170, 190, 223, 48, 154, 62, 72, 225, 226, 61, 65, 139, 225, 189, 23, 241, 225, 189, 174, 246, 254, 61, 235, 110, 31, 190, 110, 252, 73, 190, 5, 89, 199, 189, 199, 171, 25, 60, 148, 166, 124, 189, 33, 134, 46, 61, 253, 113, 160, 188, 63, 218, 63, 189, 244, 253, 10, 190, 192, 126, 147, 189, 33, 218, 14, 190, 203, 107, 18, 62, 173, 235, 98, 186, 209, 229, 51, 190, 94, 21, 181, 188, 175, 208, 0, 62, 128, 61, 37, 190, 142, 91, 218, 60, 39, 244, 251, 189, 212, 244, 252, 189, 203, 22, 37, 190, 18, 243, 8, 62, 205, 40, 190, 61, 111, 55, 90, 61, 76, 215, 22, 190, 30, 253, 85, 190, 30, 96, 23, 189, 8, 68, 93, 61, 136, 21, 161, 190, 124, 240, 179, 191, 234, 118, 67, 60, 225, 244, 72, 191, 145, 5, 109, 188, 109, 38, 103, 59, 202, 81, 152, 187, 154, 106, 51, 190, 31, 34, 43, 191, 145, 215, 222, 190, 40, 77, 153, 62, 11, 113, 13, 191, 108, 8, 246, 187, 58, 41, 128, 191, 81, 23, 144, 191, 166, 82, 119, 62, 254, 75, 165, 189, 49, 19, 182, 190, 217, 69, 40, 62, 97, 131, 210, 190, 132, 50, 147, 190, 75, 181, 184, 190, 133, 211, 145, 188, 193, 151, 133, 188, 128, 221, 194, 189, 230, 108, 22, 190, 59, 108, 31, 62, 55, 13, 225, 190, 38, 195, 42, 189, 156, 205, 235, 189, 60, 85, 20, 191, 236, 210, 59, 62, 198, 132, 97, 190, 154, 164, 79, 190, 190, 160, 63, 62, 215, 211, 6, 62, 139, 134, 96, 58, 174, 138, 254, 60, 60, 43, 193, 60, 135, 169, 9, 60, 1, 239, 139, 189, 35, 145, 34, 187, 35, 142, 210, 62, 172, 139, 252, 189, 22, 140, 38, 190, 3, 207, 202, 188, 225, 144, 138, 190, 155, 27, 138, 61, 91, 118, 134, 61, 64, 129, 255, 61, 11, 17, 82, 190, 90, 102, 246, 189, 181, 162, 211, 189, 158, 44, 4, 190, 65, 12, 44, 62, 206, 13, 74, 62, 134, 175, 190, 188, 124, 122, 23, 62, 90, 20, 164, 190, 248, 98, 226, 61, 153, 246, 110, 60, 113, 64, 35, 62, 18, 100, 180, 190, 20, 19, 29, 62, 239, 63, 21, 191, 156, 11, 7, 190, 182, 196, 112, 62, 168, 195, 129, 190, 40, 156, 161, 189, 251, 27, 5, 189, 96, 76, 99, 62, 38, 178, 21, 191, 211, 118, 152, 61, 122, 198, 17, 190, 78, 85, 193, 62, 31, 34, 214, 190, 210, 14, 119, 62, 165, 46, 165, 191, 110, 26, 28, 190, 52, 177, 210, 62, 61, 46, 144, 190, 205, 85, 59, 191, 51, 35, 147, 62, 63, 131, 185, 190, 29, 233, 165, 190, 65, 202, 53, 63, 117, 185, 141, 62, 74, 209, 58, 62, 46, 122, 163, 62, 11, 188, 182, 62, 0, 21, 61, 61, 73, 154, 16, 191, 117, 237, 129, 62, 30, 234, 34, 63, 117, 128, 213, 190, 205, 141, 152, 62, 144, 246, 55, 190, 16, 99, 23, 190, 221, 38, 214, 60, 173, 72, 97, 189, 193, 99, 7, 62, 248, 78, 190, 189, 21, 212, 27, 190, 167, 238, 73, 189, 130, 227, 83, 189, 183, 66, 73, 189, 49, 134, 148, 61, 247, 241, 48, 187, 196, 35, 253, 189, 176, 22, 100, 61, 234, 65, 66, 61, 187, 231, 74, 190, 192, 164, 157, 188, 42, 164, 22, 190, 101, 180, 219, 188, 100, 153, 20, 190, 218, 153, 34, 190, 148, 223, 92, 61, 89, 134, 98, 61, 102, 234, 124, 189, 125, 135, 209, 189, 179, 77, 23, 62, 179, 120, 237, 189, 68, 21, 106, 189, 18, 146, 243, 189, 229, 247, 59, 190, 41, 27, 23, 190, 120, 74, 116, 61, 95, 200, 122, 191, 120, 62, 200, 190, 68, 230, 15, 61, 162, 121, 35, 189, 20, 204, 35, 190, 20, 227, 177, 61, 171, 158, 184, 61, 86, 185, 71, 190, 113, 45, 222, 59, 14, 230, 140, 62, 52, 102, 6, 63, 37, 126, 250, 189, 138, 43, 115, 190, 136, 2, 11, 190, 101, 191, 182, 189, 220, 112, 114, 62, 139, 115, 91, 190, 63, 177, 104, 61, 214, 225, 130, 190, 106, 243, 28, 190, 101, 20, 148, 62, 114, 226, 44, 61, 134, 117, 22, 62, 203, 11, 104, 189, 220, 104, 192, 61, 107, 222, 156, 62, 64, 201, 173, 191, 6, 1, 97, 189, 2, 97, 240, 60, 160, 0, 34, 62, 13, 172, 75, 190, 57, 190, 138, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 17, 139, 189, 113, 92, 128, 61, 232, 122, 37, 61, 139, 39, 64, 62, 234, 44, 51, 189, 154, 238, 86, 58, 154, 186, 16, 189, 23, 98, 254, 190, 71, 234, 146, 190, 229, 8, 52, 62, 95, 247, 149, 61, 18, 54, 144, 190, 45, 43, 38, 62, 9, 208, 164, 62, 156, 92, 38, 190, 215, 22, 100, 62, 27, 165, 212, 186, 56, 204, 176, 190, 167, 203, 215, 60, 69, 177, 48, 61, 32, 161, 30, 62, 119, 62, 76, 189, 23, 24, 96, 61, 62, 4, 129, 62, 235, 171, 133, 62, 63, 154, 141, 62, 49, 95, 3, 189, 222, 206, 19, 62, 251, 119, 54, 62, 171, 24, 112, 62, 107, 193, 136, 189, 0, 166, 108, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 39, 158, 190, 221, 177, 166, 190, 29, 47, 65, 190, 151, 174, 108, 191, 108, 15, 84, 189, 116, 137, 6, 63, 87, 229, 17, 190, 2, 186, 145, 190, 150, 44, 67, 191, 30, 11, 101, 190, 36, 27, 184, 60, 173, 237, 242, 61, 233, 112, 160, 63, 37, 48, 158, 188, 116, 201, 188, 61, 96, 93, 86, 189, 32, 239, 191, 190, 136, 24, 150, 190, 135, 83, 247, 62, 232, 202, 194, 189, 21, 244, 246, 62, 113, 5, 14, 63, 149, 74, 112, 190, 209, 250, 58, 62, 176, 24, 14, 191, 19, 42, 96, 63, 196, 136, 34, 59, 2, 207, 163, 63, 100, 167, 225, 60, 26, 9, 159, 63, 102, 177, 19, 190, 78, 136, 116, 62, 167, 190, 72, 188, 33, 150, 185, 190, 34, 211, 93, 189, 139, 61, 152, 62, 110, 137, 188, 189, 68, 13, 191, 189, 72, 239, 151, 189, 163, 69, 122, 62, 7, 103, 112, 190, 111, 179, 64, 190, 222, 190, 16, 61, 210, 65, 56, 63, 247, 2, 136, 189, 19, 196, 37, 190, 51, 46, 208, 189, 0, 120, 221, 189, 79, 32, 149, 62, 250, 98, 43, 62, 115, 220, 136, 189, 81, 119, 155, 190, 172, 92, 231, 62, 249, 27, 36, 190, 3, 46, 34, 60, 176, 178, 87, 190, 44, 66, 14, 187, 212, 36, 247, 61, 48, 128, 209, 60, 68, 62, 21, 188, 171, 145, 29, 190, 139, 8, 206, 62, 55, 154, 206, 189, 56, 136, 135, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 190, 63, 190, 27, 123, 65, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {211, 50, 196, 62, 239, 9, 46, 62, 223, 201, 2, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {180, 192, 153, 63, 145, 23, 76, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0078/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}