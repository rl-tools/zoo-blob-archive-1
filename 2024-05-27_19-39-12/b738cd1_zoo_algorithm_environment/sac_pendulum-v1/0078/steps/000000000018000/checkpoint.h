// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 76, 19, 191, 135, 21, 157, 191, 30, 247, 170, 190, 198, 36, 74, 190, 38, 194, 130, 63, 41, 204, 175, 62, 151, 171, 74, 63, 144, 113, 157, 191, 140, 57, 157, 190, 241, 148, 182, 62, 41, 174, 158, 189, 26, 124, 14, 63, 34, 0, 104, 63, 89, 158, 117, 191, 242, 209, 136, 190, 78, 193, 106, 190, 4, 217, 211, 62, 57, 173, 245, 188, 191, 225, 128, 190, 69, 168, 177, 62, 0, 38, 13, 61, 190, 86, 6, 190, 194, 128, 47, 63, 23, 91, 97, 191, 169, 129, 49, 62, 40, 7, 66, 62, 26, 91, 51, 63, 9, 88, 27, 63, 62, 163, 64, 62, 189, 135, 92, 62, 250, 129, 44, 62, 103, 134, 144, 191, 175, 108, 172, 62, 203, 176, 33, 63, 136, 38, 179, 63, 140, 233, 180, 62, 153, 104, 28, 190, 183, 139, 77, 63, 235, 178, 56, 189, 206, 207, 171, 62, 235, 151, 206, 191, 75, 170, 241, 190, 74, 122, 255, 62, 119, 186, 180, 63, 113, 244, 136, 62, 131, 144, 127, 60, 128, 220, 54, 63, 228, 18, 253, 190, 41, 96, 254, 190, 197, 168, 191, 191, 101, 251, 13, 190, 210, 201, 201, 62, 106, 84, 20, 61, 74, 222, 31, 191, 133, 117, 5, 191, 0, 232, 125, 63, 90, 36, 69, 190, 74, 136, 241, 62, 90, 206, 122, 191, 160, 101, 15, 63, 211, 133, 183, 63, 45, 73, 193, 190, 189, 192, 94, 62, 103, 210, 244, 62, 136, 234, 134, 191, 180, 133, 99, 190, 84, 89, 38, 191, 166, 174, 20, 190, 42, 95, 55, 189, 243, 181, 232, 187, 213, 120, 174, 63, 163, 17, 16, 62, 11, 30, 124, 190, 235, 252, 51, 190, 154, 2, 58, 63, 92, 25, 212, 62, 2, 85, 206, 62, 189, 201, 15, 191, 236, 11, 135, 191, 157, 184, 229, 189, 213, 227, 118, 190, 17, 34, 69, 190, 76, 98, 72, 191, 117, 32, 237, 190, 198, 229, 108, 190, 197, 227, 9, 60, 205, 104, 60, 59, 170, 229, 58, 62, 72, 148, 215, 189, 61, 107, 122, 190, 102, 232, 21, 62, 166, 220, 115, 191, 21, 162, 182, 62, 125, 11, 10, 191, 209, 226, 65, 190, 30, 241, 117, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 241, 16, 189, 219, 98, 55, 190, 156, 8, 228, 61, 146, 202, 75, 62, 70, 134, 187, 190, 150, 142, 244, 62, 153, 194, 223, 62, 198, 104, 197, 187, 155, 250, 151, 62, 170, 166, 22, 63, 36, 96, 29, 189, 75, 244, 2, 61, 105, 239, 100, 62, 27, 48, 86, 61, 151, 41, 89, 62, 193, 169, 201, 61, 162, 105, 149, 62, 51, 48, 216, 62, 83, 19, 20, 63, 199, 3, 184, 189, 122, 132, 115, 189, 176, 243, 183, 61, 133, 73, 49, 63, 74, 88, 160, 62, 82, 220, 60, 190, 164, 249, 155, 61, 235, 25, 188, 190, 216, 206, 143, 190, 253, 219, 204, 62, 188, 0, 112, 62, 72, 12, 40, 190, 240, 2, 216, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 94, 167, 61, 20, 32, 133, 61, 185, 14, 140, 190, 182, 187, 146, 62, 118, 60, 0, 190, 65, 32, 17, 62, 235, 184, 167, 59, 210, 226, 195, 62, 145, 37, 243, 61, 185, 72, 20, 190, 137, 36, 38, 191, 2, 118, 193, 62, 246, 4, 50, 62, 52, 83, 55, 62, 90, 136, 219, 62, 61, 40, 50, 190, 114, 254, 30, 190, 88, 25, 6, 62, 100, 36, 144, 62, 106, 241, 173, 62, 19, 129, 154, 62, 187, 194, 185, 190, 132, 179, 21, 62, 235, 158, 7, 62, 140, 85, 43, 189, 236, 89, 131, 190, 154, 226, 168, 62, 141, 200, 224, 189, 24, 106, 2, 189, 254, 16, 51, 190, 25, 204, 223, 61, 222, 187, 173, 189, 194, 65, 134, 62, 88, 160, 20, 190, 203, 141, 95, 62, 56, 181, 86, 190, 219, 29, 1, 190, 225, 184, 152, 190, 82, 235, 205, 61, 75, 180, 13, 191, 161, 88, 47, 190, 8, 98, 109, 62, 181, 184, 0, 62, 86, 140, 175, 61, 179, 250, 130, 191, 228, 78, 86, 62, 208, 238, 133, 62, 43, 166, 65, 190, 26, 142, 237, 61, 4, 213, 46, 62, 109, 98, 165, 191, 87, 57, 44, 61, 32, 127, 166, 62, 205, 125, 182, 62, 198, 247, 163, 190, 254, 213, 183, 190, 197, 148, 11, 190, 140, 53, 116, 61, 30, 60, 151, 191, 151, 18, 10, 190, 143, 237, 239, 189, 90, 93, 181, 62, 13, 39, 66, 189, 47, 167, 156, 61, 39, 183, 64, 62, 112, 140, 155, 61, 178, 162, 139, 188, 14, 242, 97, 62, 222, 192, 74, 190, 150, 211, 18, 61, 248, 142, 97, 189, 16, 215, 187, 62, 42, 167, 1, 61, 22, 76, 96, 190, 251, 136, 234, 190, 124, 4, 156, 62, 121, 143, 59, 62, 89, 164, 5, 190, 201, 81, 194, 62, 245, 42, 115, 190, 124, 117, 107, 190, 23, 217, 53, 62, 0, 150, 90, 62, 58, 13, 133, 62, 183, 74, 111, 62, 53, 45, 133, 190, 88, 127, 133, 60, 142, 195, 231, 60, 57, 171, 218, 189, 165, 93, 238, 61, 32, 140, 71, 62, 94, 128, 176, 61, 202, 201, 1, 190, 28, 185, 0, 190, 38, 145, 84, 62, 205, 148, 154, 60, 126, 218, 138, 61, 245, 35, 185, 190, 107, 72, 226, 190, 161, 159, 206, 61, 213, 154, 161, 190, 84, 171, 133, 62, 223, 53, 3, 60, 59, 162, 234, 61, 7, 100, 142, 191, 1, 68, 223, 190, 148, 80, 60, 191, 17, 63, 52, 62, 176, 85, 166, 62, 11, 26, 159, 189, 8, 127, 18, 63, 255, 250, 113, 190, 59, 1, 65, 62, 95, 4, 44, 62, 218, 189, 177, 62, 20, 131, 61, 191, 28, 76, 85, 63, 117, 55, 16, 191, 79, 229, 16, 189, 121, 183, 182, 190, 249, 110, 154, 191, 166, 118, 233, 189, 28, 11, 138, 62, 70, 131, 224, 190, 84, 196, 249, 61, 35, 120, 144, 189, 143, 147, 159, 61, 29, 168, 133, 191, 122, 177, 159, 190, 42, 123, 2, 189, 164, 70, 133, 189, 35, 100, 19, 189, 233, 141, 238, 190, 157, 74, 133, 62, 20, 96, 115, 62, 217, 82, 66, 60, 251, 202, 248, 61, 74, 95, 241, 188, 191, 79, 130, 62, 102, 196, 123, 62, 125, 140, 227, 188, 175, 195, 157, 189, 179, 65, 229, 59, 87, 201, 23, 189, 204, 10, 22, 189, 14, 55, 62, 59, 102, 253, 84, 61, 169, 216, 3, 190, 172, 46, 138, 62, 107, 238, 146, 190, 211, 225, 137, 61, 169, 166, 226, 61, 231, 65, 169, 60, 62, 164, 165, 61, 65, 19, 202, 189, 5, 160, 113, 189, 91, 10, 133, 62, 6, 242, 130, 188, 176, 4, 193, 189, 72, 223, 65, 190, 175, 68, 233, 190, 188, 117, 224, 60, 216, 95, 255, 190, 120, 95, 10, 190, 131, 208, 2, 190, 155, 135, 148, 61, 237, 202, 152, 60, 105, 34, 125, 190, 230, 165, 101, 62, 202, 220, 188, 59, 238, 60, 30, 62, 127, 210, 135, 62, 24, 111, 170, 62, 28, 153, 134, 191, 111, 248, 129, 62, 23, 87, 80, 61, 154, 97, 7, 191, 87, 230, 78, 190, 236, 21, 228, 61, 127, 22, 119, 190, 24, 128, 64, 191, 224, 217, 33, 191, 134, 30, 86, 190, 51, 194, 26, 63, 139, 65, 73, 62, 197, 217, 39, 189, 228, 218, 109, 190, 225, 11, 239, 190, 41, 173, 201, 189, 64, 0, 210, 61, 98, 19, 131, 190, 180, 42, 186, 62, 146, 227, 165, 189, 198, 43, 27, 62, 4, 6, 86, 190, 56, 239, 148, 188, 107, 221, 9, 190, 39, 122, 96, 190, 104, 173, 240, 189, 47, 197, 26, 189, 106, 207, 72, 61, 51, 78, 39, 190, 33, 203, 236, 189, 73, 222, 219, 189, 81, 94, 99, 190, 242, 170, 67, 190, 194, 131, 69, 189, 216, 207, 136, 189, 37, 237, 148, 59, 79, 217, 147, 61, 196, 67, 130, 188, 35, 237, 23, 189, 88, 237, 168, 189, 97, 169, 39, 189, 254, 34, 180, 189, 1, 106, 179, 61, 225, 11, 191, 189, 184, 186, 129, 59, 72, 150, 195, 61, 158, 4, 178, 61, 54, 52, 226, 61, 120, 81, 139, 61, 126, 9, 245, 189, 201, 226, 213, 61, 211, 187, 141, 62, 104, 159, 202, 61, 45, 81, 253, 190, 31, 217, 2, 187, 215, 81, 48, 191, 251, 52, 60, 190, 110, 189, 213, 190, 191, 226, 201, 190, 27, 102, 145, 189, 211, 47, 221, 189, 154, 80, 109, 62, 249, 230, 50, 190, 214, 169, 206, 62, 215, 55, 216, 62, 25, 111, 139, 60, 220, 141, 253, 189, 138, 160, 102, 190, 84, 247, 29, 190, 226, 185, 150, 188, 59, 15, 21, 189, 207, 67, 101, 190, 213, 218, 124, 190, 83, 194, 1, 191, 237, 228, 117, 190, 233, 240, 127, 62, 113, 28, 72, 190, 141, 36, 204, 190, 179, 147, 178, 189, 251, 5, 202, 189, 129, 66, 186, 60, 49, 90, 59, 62, 13, 71, 221, 62, 23, 205, 251, 61, 221, 136, 218, 189, 255, 76, 147, 62, 252, 229, 90, 60, 86, 143, 11, 63, 17, 134, 176, 190, 242, 78, 15, 191, 158, 94, 68, 190, 117, 69, 80, 190, 164, 3, 142, 191, 157, 203, 100, 62, 228, 190, 159, 190, 22, 209, 215, 190, 217, 121, 192, 187, 207, 204, 125, 191, 17, 109, 35, 190, 120, 214, 202, 189, 163, 102, 101, 188, 147, 135, 80, 191, 190, 26, 155, 188, 87, 250, 212, 62, 87, 209, 151, 62, 226, 31, 159, 190, 156, 88, 117, 191, 66, 90, 88, 62, 19, 67, 144, 188, 36, 149, 134, 191, 65, 16, 32, 62, 102, 102, 171, 190, 88, 181, 242, 189, 139, 11, 7, 61, 214, 62, 61, 190, 37, 211, 6, 62, 189, 55, 47, 62, 89, 143, 37, 61, 239, 104, 95, 62, 17, 105, 28, 61, 200, 65, 248, 189, 162, 148, 90, 59, 201, 65, 161, 62, 29, 102, 16, 62, 119, 184, 136, 190, 216, 142, 240, 190, 231, 195, 142, 62, 192, 189, 77, 62, 95, 72, 63, 61, 198, 89, 195, 62, 104, 89, 147, 190, 134, 25, 92, 62, 122, 162, 36, 188, 74, 48, 28, 62, 143, 190, 125, 62, 84, 188, 218, 62, 233, 186, 197, 61, 211, 177, 198, 61, 33, 11, 222, 186, 51, 206, 21, 191, 40, 16, 185, 61, 239, 125, 228, 61, 81, 216, 80, 189, 188, 24, 102, 189, 111, 227, 74, 190, 137, 15, 5, 62, 186, 250, 246, 190, 222, 171, 249, 60, 125, 18, 209, 189, 87, 96, 207, 61, 69, 4, 167, 189, 164, 5, 13, 190, 21, 66, 166, 61, 9, 19, 218, 60, 244, 2, 112, 61, 160, 185, 0, 60, 65, 103, 9, 190, 224, 60, 3, 189, 6, 4, 8, 62, 67, 141, 7, 190, 54, 83, 129, 189, 191, 7, 3, 62, 120, 202, 138, 189, 217, 28, 71, 190, 95, 192, 72, 189, 188, 221, 248, 189, 62, 100, 72, 61, 124, 141, 30, 190, 86, 97, 134, 61, 243, 31, 159, 61, 174, 12, 181, 189, 62, 90, 150, 189, 42, 12, 37, 190, 135, 130, 182, 61, 219, 206, 62, 61, 97, 169, 14, 61, 135, 116, 146, 189, 136, 68, 188, 61, 130, 252, 139, 188, 85, 249, 98, 190, 204, 96, 57, 62, 4, 1, 196, 190, 149, 129, 7, 62, 101, 1, 14, 190, 167, 233, 3, 190, 249, 40, 192, 189, 79, 240, 154, 62, 202, 254, 94, 60, 156, 56, 152, 188, 156, 118, 3, 190, 210, 10, 95, 62, 101, 215, 40, 188, 134, 70, 51, 191, 33, 85, 217, 62, 159, 225, 22, 62, 22, 215, 189, 190, 94, 90, 131, 62, 86, 8, 108, 59, 152, 11, 87, 62, 193, 121, 197, 62, 2, 141, 20, 191, 51, 192, 20, 191, 225, 216, 148, 188, 136, 62, 196, 187, 123, 224, 37, 190, 142, 233, 15, 62, 147, 46, 178, 190, 116, 25, 19, 190, 227, 255, 229, 188, 98, 242, 222, 61, 35, 197, 137, 190, 227, 175, 187, 190, 92, 197, 93, 191, 10, 117, 15, 62, 169, 18, 97, 191, 174, 17, 68, 60, 80, 120, 10, 188, 93, 116, 109, 60, 243, 161, 134, 190, 70, 16, 94, 191, 34, 64, 229, 190, 88, 89, 235, 61, 133, 108, 22, 191, 44, 82, 13, 62, 44, 233, 144, 191, 89, 199, 48, 191, 127, 197, 179, 62, 162, 141, 93, 190, 1, 17, 204, 190, 226, 161, 44, 60, 187, 122, 17, 191, 118, 181, 199, 189, 143, 54, 171, 190, 165, 75, 111, 60, 196, 215, 117, 62, 225, 120, 242, 61, 131, 151, 167, 190, 42, 107, 62, 60, 157, 187, 174, 190, 24, 55, 0, 62, 35, 157, 219, 59, 201, 76, 244, 190, 31, 150, 159, 189, 157, 174, 160, 61, 219, 123, 52, 62, 103, 253, 253, 61, 121, 99, 123, 189, 106, 102, 180, 190, 58, 60, 92, 62, 51, 249, 187, 188, 34, 209, 80, 60, 126, 53, 172, 188, 174, 15, 162, 61, 123, 223, 9, 62, 59, 29, 200, 60, 108, 214, 23, 190, 252, 223, 137, 59, 188, 21, 28, 62, 3, 126, 228, 189, 71, 1, 66, 60, 117, 17, 163, 61, 156, 92, 34, 188, 7, 16, 251, 61, 196, 254, 64, 62, 142, 119, 211, 187, 233, 91, 198, 189, 98, 185, 33, 62, 69, 115, 134, 189, 242, 152, 182, 61, 79, 146, 227, 189, 39, 105, 22, 62, 239, 83, 90, 62, 173, 243, 240, 61, 138, 71, 88, 60, 50, 149, 158, 61, 37, 123, 139, 188, 244, 3, 15, 190, 56, 155, 171, 189, 128, 121, 187, 189, 89, 109, 21, 62, 130, 188, 32, 189, 73, 219, 43, 190, 195, 252, 67, 189, 146, 46, 20, 62, 119, 65, 237, 60, 40, 239, 164, 189, 109, 130, 12, 190, 214, 29, 14, 61, 152, 104, 8, 62, 41, 252, 43, 190, 90, 182, 12, 189, 77, 153, 229, 188, 114, 216, 245, 189, 135, 1, 42, 190, 211, 125, 162, 189, 118, 200, 224, 61, 191, 143, 25, 190, 185, 178, 130, 61, 220, 253, 206, 189, 20, 136, 13, 62, 117, 23, 254, 61, 201, 145, 51, 189, 65, 44, 140, 188, 68, 76, 20, 190, 156, 199, 40, 190, 93, 230, 215, 189, 151, 167, 10, 190, 119, 202, 193, 190, 255, 154, 236, 188, 4, 147, 133, 189, 127, 233, 172, 61, 166, 135, 63, 191, 113, 38, 145, 189, 19, 148, 8, 61, 124, 221, 190, 60, 143, 227, 35, 190, 185, 27, 57, 62, 31, 236, 62, 62, 25, 154, 187, 61, 42, 145, 153, 189, 21, 226, 25, 190, 70, 200, 168, 61, 53, 199, 141, 60, 167, 191, 126, 188, 109, 36, 152, 61, 28, 205, 126, 62, 154, 182, 52, 61, 144, 20, 26, 62, 220, 100, 66, 190, 94, 88, 255, 61, 127, 17, 129, 61, 172, 104, 190, 189, 102, 120, 34, 61, 53, 100, 29, 61, 252, 182, 36, 190, 217, 238, 212, 59, 126, 3, 9, 190, 29, 138, 134, 61, 92, 243, 29, 189, 73, 89, 216, 188, 196, 198, 78, 189, 32, 22, 177, 61, 64, 178, 255, 189, 96, 165, 212, 61, 6, 233, 164, 190, 101, 137, 36, 190, 7, 112, 204, 189, 150, 247, 222, 190, 28, 254, 159, 190, 166, 215, 212, 188, 32, 205, 35, 190, 178, 220, 251, 190, 166, 157, 211, 60, 151, 81, 87, 190, 194, 49, 165, 190, 147, 231, 64, 190, 161, 149, 93, 190, 246, 193, 23, 191, 71, 236, 47, 190, 111, 72, 132, 61, 124, 19, 8, 62, 27, 0, 136, 190, 249, 201, 93, 190, 51, 104, 113, 190, 230, 118, 78, 189, 251, 192, 25, 191, 5, 127, 154, 61, 235, 55, 81, 189, 223, 1, 94, 188, 216, 247, 100, 190, 61, 25, 242, 189, 109, 37, 152, 62, 210, 132, 38, 62, 121, 105, 131, 190, 189, 85, 96, 61, 167, 57, 94, 190, 179, 156, 190, 61, 213, 109, 61, 190, 250, 212, 75, 62, 213, 64, 38, 62, 94, 136, 146, 189, 122, 71, 112, 188, 56, 116, 179, 62, 61, 244, 201, 189, 218, 199, 229, 189, 183, 148, 191, 62, 96, 21, 199, 62, 178, 228, 9, 61, 130, 228, 110, 62, 186, 179, 185, 61, 172, 171, 142, 62, 196, 207, 4, 62, 228, 56, 180, 190, 220, 37, 192, 190, 37, 66, 193, 189, 19, 62, 30, 61, 228, 147, 135, 62, 9, 55, 133, 189, 197, 132, 220, 61, 6, 146, 159, 190, 206, 94, 217, 61, 202, 95, 115, 62, 98, 112, 103, 62, 133, 99, 130, 189, 77, 51, 100, 191, 192, 98, 7, 189, 222, 186, 78, 189, 252, 157, 38, 62, 64, 228, 8, 62, 182, 148, 64, 190, 40, 47, 89, 62, 240, 112, 11, 62, 196, 145, 48, 62, 137, 53, 248, 189, 103, 137, 251, 189, 196, 49, 247, 61, 229, 65, 91, 60, 144, 74, 221, 189, 77, 135, 157, 62, 255, 235, 161, 190, 57, 24, 199, 62, 124, 212, 188, 61, 180, 250, 160, 62, 22, 45, 243, 61, 138, 51, 92, 62, 140, 240, 8, 190, 107, 111, 213, 189, 240, 40, 150, 190, 32, 99, 99, 62, 92, 43, 95, 188, 51, 233, 102, 61, 187, 170, 148, 188, 102, 212, 74, 62, 141, 134, 26, 63, 8, 9, 250, 190, 131, 113, 217, 189, 116, 21, 100, 62, 242, 54, 69, 62, 192, 76, 200, 61, 155, 159, 124, 190, 12, 130, 164, 61, 83, 40, 100, 61, 210, 123, 212, 62, 59, 85, 73, 62, 91, 79, 197, 189, 69, 7, 56, 190, 112, 16, 191, 62, 160, 255, 207, 61, 22, 95, 204, 60, 215, 93, 38, 62, 171, 101, 37, 190, 120, 143, 175, 188, 239, 20, 228, 62, 83, 48, 187, 189, 251, 120, 166, 62, 224, 62, 126, 62, 137, 183, 122, 62, 15, 163, 13, 190, 5, 73, 7, 62, 34, 189, 157, 60, 14, 181, 169, 61, 48, 243, 211, 187, 244, 65, 132, 61, 71, 248, 131, 62, 232, 174, 140, 189, 111, 135, 162, 62, 151, 115, 124, 189, 119, 188, 143, 190, 200, 237, 166, 190, 43, 188, 177, 62, 24, 163, 103, 190, 60, 123, 5, 63, 235, 55, 55, 61, 121, 117, 33, 189, 241, 45, 82, 61, 45, 176, 88, 190, 88, 53, 121, 189, 27, 240, 38, 62, 13, 239, 142, 191, 192, 92, 138, 61, 208, 72, 179, 61, 71, 188, 100, 191, 32, 216, 42, 189, 182, 66, 145, 188, 104, 29, 100, 62, 72, 131, 37, 190, 137, 195, 204, 61, 247, 7, 5, 63, 249, 129, 155, 62, 110, 77, 148, 61, 216, 158, 71, 191, 132, 222, 141, 61, 249, 197, 76, 62, 32, 252, 250, 61, 74, 120, 188, 189, 144, 139, 56, 62, 237, 21, 163, 61, 204, 114, 69, 62, 158, 139, 10, 190, 119, 145, 192, 190, 200, 94, 40, 191, 106, 12, 65, 62, 239, 207, 183, 189, 240, 169, 227, 189, 133, 115, 134, 189, 47, 121, 132, 189, 132, 88, 75, 190, 140, 243, 124, 190, 199, 16, 2, 60, 146, 246, 134, 62, 174, 196, 6, 190, 46, 252, 3, 188, 13, 50, 134, 191, 207, 241, 129, 190, 159, 0, 219, 62, 211, 1, 176, 190, 238, 165, 234, 190, 211, 209, 191, 61, 98, 78, 27, 191, 102, 85, 115, 62, 87, 112, 200, 61, 165, 243, 169, 61, 77, 124, 90, 61, 244, 236, 96, 62, 27, 155, 170, 190, 242, 96, 231, 62, 214, 38, 184, 190, 156, 198, 242, 60, 31, 98, 86, 62, 115, 122, 166, 190, 107, 89, 39, 62, 38, 210, 180, 62, 238, 211, 200, 190, 165, 116, 157, 59, 4, 42, 68, 190, 9, 168, 38, 62, 15, 208, 106, 190, 196, 10, 40, 190, 31, 54, 132, 61, 202, 210, 130, 190, 69, 135, 137, 188, 144, 245, 147, 62, 62, 111, 90, 189, 212, 235, 175, 190, 0, 145, 158, 62, 180, 223, 157, 190, 250, 231, 37, 62, 247, 210, 136, 62, 253, 253, 217, 189, 181, 53, 70, 190, 72, 25, 98, 61, 86, 233, 151, 189, 241, 17, 137, 62, 70, 148, 249, 189, 58, 206, 19, 191, 220, 9, 148, 190, 162, 236, 113, 189, 107, 177, 65, 61, 19, 229, 103, 62, 6, 234, 118, 60, 15, 132, 44, 62, 183, 215, 162, 62, 175, 101, 9, 190, 159, 232, 123, 191, 222, 115, 129, 190, 56, 117, 60, 62, 117, 185, 81, 189, 43, 214, 175, 189, 232, 186, 193, 61, 167, 34, 205, 61, 211, 128, 94, 190, 24, 39, 43, 62, 2, 208, 253, 60, 194, 179, 248, 62, 156, 11, 188, 190, 205, 117, 165, 190, 231, 16, 8, 190, 85, 16, 45, 190, 140, 100, 80, 62, 195, 86, 132, 190, 204, 55, 136, 60, 248, 129, 104, 190, 169, 142, 14, 190, 149, 40, 204, 61, 94, 207, 175, 61, 194, 165, 83, 61, 196, 234, 46, 61, 229, 6, 236, 187, 86, 44, 91, 62, 65, 118, 137, 191, 158, 251, 32, 189, 189, 71, 74, 62, 245, 80, 68, 62, 201, 69, 53, 190, 222, 230, 11, 58, 175, 152, 198, 190, 162, 143, 252, 59, 186, 169, 206, 190, 72, 207, 246, 61, 222, 194, 19, 191, 74, 42, 136, 62, 16, 245, 77, 62, 60, 126, 7, 62, 189, 87, 165, 59, 26, 229, 69, 62, 173, 223, 105, 191, 154, 165, 117, 62, 78, 176, 143, 62, 170, 79, 30, 190, 40, 229, 130, 62, 107, 66, 126, 190, 231, 9, 149, 59, 90, 63, 101, 62, 201, 207, 121, 62, 8, 155, 81, 62, 93, 91, 170, 62, 9, 28, 249, 190, 118, 58, 145, 61, 70, 69, 84, 189, 203, 59, 65, 191, 94, 133, 137, 190, 113, 239, 179, 187, 36, 27, 19, 190, 91, 51, 24, 62, 4, 104, 138, 190, 25, 138, 0, 61, 164, 205, 30, 191, 122, 74, 162, 191, 238, 9, 84, 190, 174, 164, 146, 62, 142, 195, 202, 190, 115, 234, 202, 62, 83, 254, 176, 60, 182, 143, 58, 62, 112, 23, 69, 191, 64, 117, 233, 189, 7, 192, 150, 62, 35, 83, 14, 63, 21, 174, 40, 191, 226, 70, 156, 59, 158, 238, 80, 190, 228, 168, 244, 190, 93, 235, 176, 62, 51, 217, 132, 190, 59, 143, 5, 191, 118, 157, 198, 190, 153, 33, 201, 190, 54, 238, 245, 62, 37, 104, 57, 62, 206, 131, 66, 62, 74, 200, 157, 188, 19, 60, 35, 62, 253, 192, 13, 63, 159, 135, 171, 190, 252, 12, 173, 190, 84, 152, 232, 61, 117, 99, 143, 62, 195, 34, 174, 190, 180, 226, 136, 62, 17, 15, 218, 61, 65, 139, 225, 189, 230, 141, 236, 189, 9, 213, 254, 61, 125, 62, 32, 190, 172, 58, 81, 190, 71, 93, 210, 189, 54, 112, 35, 59, 220, 242, 124, 189, 138, 52, 46, 61, 35, 71, 161, 188, 216, 2, 64, 189, 187, 253, 17, 190, 26, 132, 160, 189, 154, 82, 17, 190, 240, 101, 11, 62, 109, 35, 7, 187, 27, 4, 59, 190, 126, 59, 238, 188, 249, 181, 0, 62, 60, 62, 37, 190, 89, 4, 210, 60, 57, 158, 4, 190, 107, 79, 5, 190, 62, 41, 37, 190, 233, 237, 1, 62, 122, 131, 177, 61, 109, 149, 62, 61, 193, 105, 26, 190, 192, 36, 93, 190, 41, 184, 23, 189, 189, 231, 92, 61, 11, 221, 173, 190, 124, 240, 179, 191, 234, 118, 67, 60, 225, 244, 72, 191, 145, 5, 109, 188, 99, 97, 156, 187, 152, 11, 115, 188, 24, 190, 56, 190, 31, 34, 43, 191, 145, 215, 222, 190, 40, 77, 153, 62, 11, 113, 13, 191, 136, 200, 105, 188, 58, 41, 128, 191, 81, 23, 144, 191, 86, 13, 114, 62, 76, 213, 185, 189, 174, 84, 184, 190, 59, 146, 30, 62, 97, 131, 210, 190, 132, 50, 147, 190, 75, 181, 184, 190, 45, 237, 232, 188, 205, 77, 189, 188, 128, 221, 194, 189, 230, 108, 22, 190, 97, 191, 15, 62, 187, 114, 226, 190, 244, 118, 87, 189, 60, 232, 244, 189, 60, 85, 20, 191, 236, 210, 59, 62, 210, 217, 93, 190, 171, 221, 61, 190, 241, 156, 23, 62, 131, 126, 232, 61, 205, 94, 44, 189, 24, 135, 181, 60, 146, 15, 155, 60, 166, 144, 203, 60, 186, 161, 161, 189, 19, 183, 47, 189, 117, 244, 201, 62, 208, 181, 7, 190, 184, 234, 50, 190, 211, 12, 63, 189, 19, 43, 145, 190, 178, 81, 165, 61, 133, 230, 40, 61, 4, 54, 227, 61, 112, 221, 92, 190, 169, 125, 11, 190, 42, 251, 39, 190, 85, 150, 40, 190, 209, 71, 39, 62, 186, 96, 94, 62, 109, 183, 153, 188, 141, 64, 18, 62, 94, 91, 175, 190, 170, 66, 243, 61, 184, 88, 18, 188, 205, 222, 15, 62, 148, 170, 182, 190, 149, 181, 34, 62, 170, 200, 17, 191, 145, 231, 251, 189, 175, 69, 6, 63, 228, 132, 117, 190, 32, 140, 133, 189, 156, 239, 221, 57, 228, 189, 111, 62, 120, 193, 23, 191, 145, 170, 178, 61, 169, 6, 1, 190, 47, 139, 187, 62, 190, 23, 207, 190, 21, 22, 130, 62, 230, 14, 173, 191, 97, 75, 10, 190, 224, 156, 195, 62, 4, 150, 128, 190, 60, 225, 64, 191, 222, 201, 144, 62, 171, 156, 183, 190, 138, 95, 118, 190, 214, 192, 118, 63, 164, 23, 151, 62, 184, 84, 80, 62, 126, 233, 165, 62, 39, 137, 177, 62, 152, 101, 227, 189, 159, 89, 9, 191, 136, 89, 137, 62, 84, 34, 28, 63, 199, 158, 217, 190, 245, 181, 154, 62, 144, 246, 55, 190, 16, 99, 23, 190, 221, 38, 214, 60, 173, 72, 97, 189, 193, 99, 7, 62, 248, 78, 190, 189, 21, 212, 27, 190, 167, 238, 73, 189, 130, 227, 83, 189, 183, 66, 73, 189, 49, 134, 148, 61, 247, 241, 48, 187, 196, 35, 253, 189, 176, 22, 100, 61, 234, 65, 66, 61, 187, 231, 74, 190, 192, 164, 157, 188, 42, 164, 22, 190, 101, 180, 219, 188, 100, 153, 20, 190, 218, 153, 34, 190, 148, 223, 92, 61, 89, 134, 98, 61, 102, 234, 124, 189, 125, 135, 209, 189, 179, 77, 23, 62, 179, 120, 237, 189, 68, 21, 106, 189, 18, 146, 243, 189, 229, 247, 59, 190, 41, 27, 23, 190, 120, 74, 116, 61, 196, 194, 131, 191, 212, 103, 211, 190, 209, 204, 34, 61, 34, 167, 17, 189, 66, 42, 26, 190, 136, 10, 140, 61, 168, 236, 154, 61, 7, 16, 87, 190, 42, 14, 193, 59, 168, 190, 139, 62, 145, 1, 8, 63, 108, 59, 11, 190, 191, 54, 159, 190, 136, 111, 2, 190, 160, 112, 212, 189, 244, 173, 101, 62, 114, 141, 104, 190, 190, 70, 55, 61, 42, 248, 154, 190, 199, 143, 16, 190, 202, 73, 150, 62, 236, 232, 87, 61, 119, 149, 10, 62, 83, 109, 170, 189, 104, 174, 176, 61, 93, 119, 145, 62, 220, 150, 176, 191, 131, 176, 187, 189, 45, 73, 80, 60, 0, 77, 18, 62, 155, 98, 55, 190, 50, 227, 130, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 255, 132, 189, 142, 203, 77, 61, 226, 196, 48, 61, 67, 5, 68, 62, 2, 216, 87, 189, 116, 7, 21, 189, 154, 186, 16, 189, 106, 178, 11, 191, 252, 213, 149, 190, 75, 201, 47, 62, 95, 247, 149, 61, 175, 102, 147, 190, 5, 124, 29, 62, 127, 219, 153, 62, 156, 92, 38, 190, 37, 110, 89, 62, 27, 165, 212, 186, 164, 231, 175, 190, 177, 97, 205, 60, 110, 235, 31, 61, 234, 226, 45, 62, 167, 66, 98, 189, 131, 245, 13, 60, 133, 171, 125, 62, 4, 192, 126, 62, 239, 13, 140, 62, 217, 55, 34, 189, 249, 152, 9, 62, 21, 157, 18, 62, 63, 179, 133, 62, 107, 193, 136, 189, 143, 115, 109, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 204, 142, 190, 42, 198, 159, 190, 34, 219, 43, 190, 58, 76, 99, 191, 52, 220, 108, 189, 81, 27, 10, 63, 87, 229, 17, 190, 196, 112, 159, 190, 37, 107, 71, 191, 158, 170, 96, 190, 36, 27, 184, 60, 110, 211, 151, 60, 19, 69, 160, 63, 12, 149, 108, 188, 116, 201, 188, 61, 173, 169, 66, 189, 32, 239, 191, 190, 211, 72, 153, 190, 186, 65, 239, 62, 225, 62, 183, 189, 130, 203, 252, 62, 244, 247, 13, 63, 51, 147, 157, 190, 247, 251, 41, 62, 244, 194, 26, 191, 150, 96, 93, 63, 90, 208, 203, 186, 167, 183, 163, 63, 163, 54, 61, 60, 4, 253, 156, 63, 102, 177, 19, 190, 150, 195, 101, 62, 95, 83, 157, 188, 114, 49, 175, 190, 117, 22, 139, 189, 193, 7, 145, 62, 120, 165, 157, 189, 204, 245, 230, 189, 72, 239, 151, 189, 23, 160, 119, 62, 34, 80, 82, 190, 104, 234, 92, 190, 222, 190, 16, 61, 76, 69, 50, 63, 183, 193, 138, 189, 134, 36, 39, 190, 51, 46, 208, 189, 213, 61, 233, 189, 79, 32, 149, 62, 186, 82, 31, 62, 111, 208, 227, 189, 255, 174, 166, 190, 120, 201, 242, 62, 67, 92, 36, 190, 43, 163, 73, 60, 229, 123, 107, 190, 152, 194, 121, 188, 117, 138, 5, 62, 164, 90, 227, 60, 82, 54, 32, 188, 23, 240, 21, 190, 0, 74, 199, 62, 55, 154, 206, 189, 77, 59, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 254, 59, 190, 52, 246, 84, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {99, 231, 177, 191, 36, 58, 42, 63, 19, 80, 67, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {202, 55, 234, 191, 81, 172, 165, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0078/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}