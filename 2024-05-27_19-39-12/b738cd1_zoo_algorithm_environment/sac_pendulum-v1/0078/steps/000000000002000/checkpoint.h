// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 105, 20, 190, 79, 199, 216, 188, 171, 254, 185, 190, 104, 142, 153, 190, 212, 171, 210, 62, 205, 90, 90, 62, 175, 234, 171, 62, 183, 112, 55, 191, 137, 207, 2, 191, 243, 49, 212, 62, 173, 84, 148, 190, 53, 196, 233, 62, 225, 198, 248, 61, 187, 252, 204, 190, 129, 78, 189, 190, 95, 232, 136, 190, 209, 142, 138, 62, 43, 167, 141, 189, 68, 247, 188, 61, 205, 165, 213, 61, 246, 26, 12, 62, 72, 60, 1, 189, 37, 251, 129, 63, 83, 130, 232, 190, 193, 198, 203, 62, 160, 96, 117, 190, 64, 131, 11, 63, 195, 154, 171, 62, 154, 149, 49, 189, 171, 187, 149, 62, 49, 187, 68, 189, 174, 159, 146, 191, 178, 224, 254, 61, 31, 14, 148, 62, 205, 91, 16, 63, 176, 82, 3, 63, 88, 92, 83, 190, 98, 151, 38, 63, 15, 109, 228, 61, 34, 19, 135, 62, 116, 236, 130, 190, 59, 239, 200, 190, 209, 158, 219, 62, 220, 74, 150, 62, 130, 154, 214, 62, 107, 239, 215, 62, 3, 86, 56, 63, 57, 43, 198, 190, 65, 56, 9, 191, 16, 99, 66, 191, 194, 148, 159, 190, 217, 117, 173, 62, 5, 93, 177, 62, 101, 109, 136, 190, 13, 181, 216, 190, 217, 152, 133, 63, 188, 197, 178, 61, 20, 64, 237, 62, 131, 225, 59, 191, 18, 28, 6, 63, 46, 186, 67, 63, 228, 104, 199, 190, 109, 100, 36, 61, 255, 152, 231, 62, 179, 233, 252, 190, 224, 183, 54, 190, 49, 219, 196, 190, 195, 243, 147, 190, 141, 20, 174, 190, 119, 92, 103, 189, 175, 13, 55, 63, 208, 226, 140, 62, 210, 245, 222, 189, 177, 115, 251, 190, 113, 79, 207, 62, 236, 146, 25, 63, 199, 105, 47, 63, 151, 71, 237, 190, 69, 140, 14, 191, 231, 186, 186, 62, 109, 101, 199, 60, 166, 183, 11, 190, 109, 42, 135, 190, 218, 82, 6, 191, 188, 43, 235, 189, 13, 66, 60, 190, 119, 34, 36, 189, 111, 222, 175, 62, 49, 182, 187, 61, 1, 171, 148, 190, 211, 66, 39, 62, 244, 239, 25, 191, 239, 220, 161, 62, 158, 82, 33, 191, 192, 86, 49, 191, 112, 30, 30, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 147, 14, 191, 216, 100, 210, 190, 254, 201, 165, 62, 113, 122, 198, 61, 135, 249, 10, 191, 153, 100, 19, 63, 115, 128, 237, 62, 227, 67, 168, 62, 150, 228, 95, 62, 83, 167, 18, 63, 132, 175, 67, 62, 235, 39, 84, 59, 234, 54, 63, 62, 227, 201, 167, 62, 150, 185, 30, 60, 116, 161, 134, 188, 231, 68, 244, 62, 227, 110, 7, 63, 244, 72, 242, 62, 157, 96, 193, 59, 78, 130, 142, 61, 50, 240, 40, 61, 202, 8, 17, 63, 174, 60, 187, 62, 232, 60, 29, 62, 185, 225, 19, 61, 6, 99, 154, 190, 191, 37, 150, 190, 142, 58, 186, 62, 216, 41, 50, 62, 26, 193, 72, 190, 54, 216, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 148, 53, 190, 143, 56, 83, 189, 6, 249, 6, 190, 176, 127, 70, 62, 67, 2, 245, 61, 206, 30, 168, 61, 148, 92, 149, 61, 155, 0, 134, 62, 217, 85, 169, 61, 157, 139, 17, 189, 10, 232, 235, 190, 124, 97, 19, 62, 111, 87, 15, 62, 15, 86, 34, 62, 156, 82, 95, 62, 226, 253, 55, 190, 127, 164, 106, 189, 81, 106, 55, 61, 194, 36, 66, 62, 185, 133, 165, 62, 132, 144, 222, 61, 58, 123, 223, 61, 247, 57, 107, 62, 35, 125, 144, 62, 152, 172, 62, 61, 224, 149, 208, 190, 226, 12, 111, 62, 63, 23, 78, 190, 6, 10, 198, 60, 156, 102, 95, 190, 206, 201, 11, 62, 156, 165, 5, 189, 66, 77, 25, 62, 230, 165, 37, 190, 208, 207, 109, 189, 244, 149, 56, 189, 15, 79, 224, 61, 7, 181, 20, 190, 186, 53, 9, 62, 57, 198, 158, 189, 24, 99, 145, 58, 134, 149, 93, 62, 78, 52, 142, 188, 187, 61, 186, 61, 195, 200, 175, 189, 29, 236, 18, 62, 66, 160, 71, 62, 124, 99, 125, 61, 11, 135, 244, 61, 100, 9, 42, 62, 59, 244, 200, 189, 41, 174, 56, 62, 171, 74, 113, 62, 238, 167, 170, 61, 91, 240, 225, 188, 104, 78, 138, 190, 55, 198, 202, 61, 240, 51, 234, 61, 68, 111, 67, 61, 24, 29, 49, 190, 191, 247, 204, 189, 174, 31, 57, 62, 84, 90, 154, 60, 239, 229, 56, 61, 178, 248, 129, 60, 195, 102, 206, 188, 215, 157, 6, 62, 248, 72, 20, 62, 113, 110, 34, 189, 248, 117, 196, 60, 145, 7, 251, 60, 138, 95, 164, 62, 221, 180, 84, 59, 213, 167, 132, 189, 51, 188, 161, 190, 147, 42, 182, 61, 152, 193, 62, 62, 229, 124, 219, 189, 201, 60, 77, 62, 3, 92, 78, 190, 3, 195, 207, 189, 238, 218, 60, 62, 6, 172, 31, 62, 5, 196, 119, 62, 91, 33, 56, 62, 159, 100, 184, 61, 144, 228, 13, 62, 51, 67, 23, 62, 218, 122, 60, 189, 207, 157, 4, 61, 211, 80, 7, 62, 75, 21, 3, 187, 37, 89, 210, 189, 130, 92, 228, 189, 111, 232, 68, 62, 54, 20, 232, 60, 250, 168, 20, 62, 139, 13, 173, 190, 106, 29, 120, 190, 199, 92, 137, 190, 110, 2, 112, 62, 229, 50, 122, 62, 254, 211, 117, 61, 182, 214, 52, 61, 152, 247, 207, 190, 158, 19, 249, 189, 103, 229, 192, 190, 81, 10, 199, 190, 63, 88, 137, 62, 12, 120, 154, 188, 116, 147, 63, 190, 185, 218, 50, 190, 83, 237, 11, 62, 19, 146, 224, 61, 238, 66, 154, 62, 57, 226, 100, 189, 247, 250, 143, 62, 134, 67, 3, 62, 228, 170, 224, 189, 74, 140, 214, 187, 58, 171, 209, 190, 122, 125, 66, 190, 112, 56, 6, 62, 196, 179, 154, 190, 228, 82, 48, 62, 234, 124, 49, 189, 27, 125, 185, 189, 83, 71, 235, 190, 247, 70, 85, 190, 82, 34, 115, 61, 142, 138, 144, 61, 153, 201, 17, 61, 216, 250, 11, 190, 213, 19, 71, 62, 248, 16, 60, 62, 59, 77, 120, 61, 139, 230, 27, 62, 94, 204, 91, 189, 65, 224, 101, 62, 71, 149, 98, 62, 155, 233, 133, 189, 137, 4, 40, 62, 200, 125, 135, 188, 202, 181, 65, 189, 80, 75, 58, 62, 177, 211, 199, 61, 167, 26, 228, 188, 249, 57, 56, 189, 206, 186, 185, 62, 204, 126, 217, 189, 229, 149, 225, 61, 234, 206, 23, 189, 172, 122, 203, 61, 164, 44, 142, 61, 99, 168, 212, 188, 108, 211, 221, 60, 185, 5, 94, 62, 26, 173, 222, 60, 160, 223, 90, 60, 14, 31, 39, 190, 86, 220, 117, 189, 134, 98, 180, 189, 151, 242, 148, 189, 222, 63, 19, 190, 84, 26, 5, 62, 15, 81, 198, 61, 109, 253, 207, 189, 79, 105, 74, 189, 237, 149, 54, 62, 35, 53, 137, 189, 164, 6, 29, 62, 3, 191, 100, 60, 102, 182, 114, 62, 96, 15, 0, 190, 131, 14, 80, 59, 45, 178, 132, 61, 124, 166, 18, 190, 126, 22, 3, 61, 204, 252, 35, 62, 153, 49, 40, 190, 222, 171, 34, 190, 227, 208, 61, 60, 26, 183, 216, 189, 93, 143, 78, 62, 137, 180, 107, 61, 62, 207, 154, 62, 17, 189, 203, 189, 145, 230, 33, 62, 131, 172, 129, 189, 88, 134, 117, 62, 182, 134, 102, 189, 135, 36, 95, 62, 193, 144, 230, 188, 198, 43, 27, 62, 183, 43, 55, 190, 56, 239, 148, 188, 120, 68, 216, 189, 225, 165, 53, 190, 36, 213, 202, 189, 136, 106, 135, 60, 106, 207, 72, 61, 193, 173, 37, 190, 33, 203, 236, 189, 124, 40, 211, 189, 229, 2, 46, 190, 151, 58, 42, 190, 8, 214, 223, 188, 117, 157, 52, 188, 221, 145, 34, 60, 73, 199, 6, 62, 44, 42, 219, 60, 35, 237, 23, 189, 160, 114, 164, 189, 38, 228, 6, 189, 97, 199, 111, 189, 182, 30, 225, 61, 225, 11, 191, 189, 143, 107, 120, 61, 6, 61, 245, 61, 202, 92, 11, 62, 105, 143, 243, 61, 106, 241, 2, 62, 126, 9, 245, 189, 201, 226, 213, 61, 214, 78, 226, 61, 116, 233, 230, 189, 228, 94, 193, 61, 139, 60, 107, 61, 228, 159, 238, 60, 250, 61, 200, 189, 30, 220, 142, 190, 116, 138, 35, 188, 152, 223, 139, 189, 99, 107, 133, 189, 98, 51, 148, 61, 100, 45, 58, 190, 127, 24, 190, 186, 156, 226, 198, 61, 27, 94, 140, 61, 29, 186, 36, 62, 251, 185, 240, 61, 4, 221, 15, 189, 242, 110, 182, 190, 191, 203, 111, 189, 5, 180, 161, 189, 254, 162, 128, 62, 49, 93, 61, 190, 113, 109, 120, 59, 148, 63, 126, 188, 235, 101, 147, 60, 134, 1, 22, 190, 148, 254, 136, 188, 27, 87, 104, 61, 226, 142, 206, 188, 58, 206, 0, 62, 105, 58, 36, 62, 99, 225, 53, 62, 221, 136, 218, 189, 67, 28, 72, 62, 194, 58, 158, 189, 212, 45, 175, 62, 224, 135, 227, 60, 16, 25, 90, 190, 135, 14, 144, 189, 182, 203, 0, 60, 39, 0, 61, 190, 82, 30, 236, 189, 228, 25, 157, 60, 155, 103, 239, 189, 2, 195, 17, 188, 138, 134, 44, 189, 204, 185, 125, 189, 22, 96, 3, 189, 167, 109, 150, 61, 90, 216, 90, 190, 11, 245, 239, 189, 226, 207, 181, 188, 149, 79, 224, 61, 62, 108, 177, 189, 203, 64, 196, 60, 87, 139, 100, 61, 253, 197, 0, 59, 212, 205, 234, 187, 91, 77, 76, 62, 192, 223, 19, 61, 61, 41, 197, 189, 119, 109, 24, 190, 6, 253, 166, 189, 97, 2, 47, 60, 11, 102, 110, 62, 246, 86, 218, 61, 111, 88, 255, 61, 177, 83, 33, 62, 244, 102, 155, 189, 24, 231, 127, 61, 202, 255, 147, 62, 217, 219, 44, 62, 166, 22, 193, 189, 204, 52, 176, 190, 17, 93, 54, 61, 92, 32, 133, 62, 236, 251, 72, 61, 72, 3, 22, 62, 141, 94, 130, 190, 197, 42, 24, 61, 133, 122, 134, 60, 153, 118, 90, 62, 152, 73, 135, 62, 182, 4, 184, 62, 30, 116, 147, 62, 97, 160, 209, 61, 130, 252, 0, 62, 145, 76, 90, 190, 159, 233, 190, 60, 73, 214, 86, 62, 142, 25, 216, 189, 217, 238, 184, 189, 229, 168, 45, 190, 37, 40, 165, 62, 117, 192, 123, 189, 36, 23, 252, 60, 125, 18, 209, 189, 209, 28, 209, 61, 69, 4, 167, 189, 162, 5, 13, 190, 29, 212, 166, 61, 153, 26, 219, 60, 119, 77, 113, 61, 160, 185, 0, 60, 65, 103, 9, 190, 205, 27, 2, 189, 6, 4, 8, 62, 67, 141, 7, 190, 138, 35, 127, 189, 191, 7, 3, 62, 183, 186, 138, 189, 87, 148, 70, 190, 209, 152, 70, 189, 224, 217, 248, 189, 62, 100, 72, 61, 124, 141, 30, 190, 178, 84, 135, 61, 24, 244, 159, 61, 174, 12, 181, 189, 62, 90, 150, 189, 175, 4, 37, 190, 135, 130, 182, 61, 203, 85, 65, 61, 109, 50, 16, 61, 175, 214, 145, 189, 136, 68, 188, 61, 130, 252, 139, 188, 180, 235, 23, 190, 8, 184, 238, 61, 81, 139, 196, 61, 79, 50, 171, 61, 134, 59, 206, 189, 110, 233, 49, 189, 246, 89, 141, 189, 61, 89, 33, 60, 89, 236, 210, 60, 64, 143, 214, 189, 1, 202, 113, 60, 85, 237, 27, 189, 176, 35, 146, 187, 113, 193, 19, 190, 255, 155, 208, 61, 179, 40, 47, 61, 4, 164, 49, 61, 35, 24, 147, 189, 120, 99, 196, 61, 175, 91, 5, 62, 99, 213, 180, 189, 112, 49, 30, 190, 81, 128, 12, 190, 243, 145, 134, 189, 138, 12, 165, 61, 231, 238, 42, 190, 232, 19, 10, 190, 44, 14, 197, 189, 148, 223, 165, 61, 239, 167, 47, 190, 197, 238, 25, 62, 238, 10, 53, 190, 5, 43, 190, 189, 49, 160, 22, 61, 161, 87, 115, 62, 196, 84, 146, 190, 142, 47, 11, 61, 234, 60, 132, 189, 220, 129, 30, 189, 130, 156, 125, 189, 105, 156, 125, 190, 6, 71, 50, 190, 53, 119, 100, 62, 44, 109, 185, 189, 11, 72, 151, 189, 75, 149, 128, 61, 74, 79, 71, 189, 1, 112, 164, 62, 104, 236, 59, 60, 211, 216, 207, 188, 119, 63, 53, 190, 53, 39, 108, 190, 43, 250, 208, 189, 125, 225, 85, 190, 47, 154, 165, 61, 213, 208, 253, 187, 181, 21, 136, 62, 232, 124, 88, 188, 41, 120, 176, 190, 44, 203, 27, 62, 220, 150, 62, 62, 160, 61, 44, 62, 241, 175, 155, 189, 66, 143, 67, 62, 106, 121, 239, 189, 98, 108, 130, 62, 168, 179, 219, 61, 240, 163, 207, 59, 205, 57, 129, 190, 217, 83, 80, 62, 231, 15, 236, 188, 88, 212, 128, 187, 122, 13, 40, 60, 219, 180, 185, 61, 218, 46, 250, 61, 154, 185, 88, 60, 2, 196, 110, 189, 24, 177, 48, 60, 34, 171, 19, 62, 233, 1, 6, 190, 255, 25, 234, 59, 240, 200, 225, 61, 31, 105, 180, 60, 110, 80, 58, 62, 127, 156, 194, 62, 113, 79, 207, 188, 52, 112, 205, 189, 124, 72, 67, 61, 125, 167, 147, 60, 242, 121, 31, 61, 23, 123, 2, 190, 188, 91, 93, 61, 183, 70, 60, 62, 161, 92, 241, 61, 28, 200, 116, 61, 172, 186, 220, 61, 37, 123, 139, 188, 244, 3, 15, 190, 56, 155, 171, 189, 128, 121, 187, 189, 89, 109, 21, 62, 130, 188, 32, 189, 73, 219, 43, 190, 195, 252, 67, 189, 146, 46, 20, 62, 119, 65, 237, 60, 40, 239, 164, 189, 109, 130, 12, 190, 214, 29, 14, 61, 152, 104, 8, 62, 41, 252, 43, 190, 90, 182, 12, 189, 77, 153, 229, 188, 114, 216, 245, 189, 135, 1, 42, 190, 211, 125, 162, 189, 118, 200, 224, 61, 191, 143, 25, 190, 185, 178, 130, 61, 220, 253, 206, 189, 20, 136, 13, 62, 117, 23, 254, 61, 201, 145, 51, 189, 65, 44, 140, 188, 68, 76, 20, 190, 156, 199, 40, 190, 93, 230, 215, 189, 151, 167, 10, 190, 3, 85, 123, 190, 233, 195, 147, 61, 48, 85, 160, 61, 133, 107, 41, 62, 101, 87, 186, 190, 188, 74, 226, 189, 162, 82, 121, 188, 228, 166, 159, 61, 115, 221, 214, 189, 84, 213, 43, 62, 56, 251, 57, 62, 103, 48, 139, 61, 166, 241, 173, 189, 70, 73, 230, 61, 124, 245, 98, 61, 53, 69, 55, 61, 61, 201, 9, 62, 62, 19, 43, 62, 234, 58, 97, 62, 90, 186, 244, 61, 72, 82, 141, 62, 235, 137, 132, 60, 63, 195, 22, 62, 114, 251, 61, 189, 8, 232, 104, 60, 118, 255, 72, 60, 131, 138, 21, 62, 128, 121, 96, 189, 178, 188, 65, 189, 144, 125, 173, 189, 186, 174, 242, 61, 154, 40, 171, 60, 44, 160, 53, 62, 196, 198, 78, 189, 176, 187, 225, 61, 1, 76, 18, 62, 148, 243, 164, 61, 20, 92, 238, 189, 33, 123, 191, 188, 84, 31, 155, 61, 41, 24, 151, 189, 94, 43, 130, 189, 182, 3, 170, 61, 119, 113, 12, 190, 171, 119, 250, 189, 33, 131, 243, 61, 162, 32, 49, 189, 89, 104, 73, 190, 70, 7, 134, 189, 113, 182, 173, 189, 37, 103, 87, 190, 41, 0, 199, 61, 109, 13, 206, 59, 71, 45, 228, 61, 114, 33, 19, 190, 119, 170, 183, 188, 189, 240, 166, 189, 88, 13, 133, 60, 251, 189, 46, 190, 56, 163, 55, 62, 131, 149, 132, 61, 121, 206, 126, 61, 134, 244, 49, 61, 249, 25, 207, 189, 121, 97, 185, 61, 149, 71, 48, 62, 63, 65, 27, 190, 23, 226, 206, 60, 80, 130, 251, 60, 240, 124, 195, 61, 31, 85, 20, 190, 6, 227, 130, 60, 173, 162, 250, 61, 158, 19, 116, 189, 197, 101, 9, 190, 39, 143, 63, 62, 75, 210, 41, 190, 28, 136, 16, 190, 142, 2, 106, 62, 131, 87, 240, 61, 252, 102, 176, 61, 99, 16, 24, 61, 117, 222, 18, 61, 133, 220, 108, 62, 71, 218, 24, 190, 21, 220, 210, 189, 245, 213, 9, 190, 251, 209, 157, 61, 121, 204, 155, 188, 31, 250, 149, 188, 17, 40, 233, 189, 76, 79, 147, 60, 241, 145, 57, 190, 239, 132, 187, 189, 20, 105, 79, 62, 226, 126, 84, 62, 205, 133, 180, 60, 69, 70, 173, 61, 167, 169, 13, 190, 141, 74, 162, 189, 95, 9, 142, 187, 17, 220, 6, 62, 212, 54, 2, 190, 68, 250, 144, 61, 135, 230, 29, 62, 175, 172, 203, 61, 231, 57, 127, 190, 47, 158, 84, 62, 245, 113, 101, 62, 204, 209, 104, 189, 249, 58, 44, 62, 55, 197, 150, 62, 110, 111, 132, 190, 233, 90, 124, 62, 19, 121, 13, 62, 224, 37, 254, 61, 42, 42, 185, 61, 95, 251, 190, 59, 167, 178, 24, 190, 237, 99, 39, 61, 234, 59, 49, 190, 207, 60, 159, 62, 103, 78, 40, 190, 205, 126, 129, 61, 120, 199, 27, 61, 169, 99, 75, 62, 186, 235, 222, 61, 130, 187, 73, 190, 249, 213, 141, 190, 16, 223, 48, 62, 204, 163, 55, 62, 91, 25, 164, 61, 251, 105, 251, 189, 221, 53, 146, 61, 170, 76, 144, 61, 57, 117, 195, 62, 11, 0, 65, 62, 36, 223, 55, 189, 54, 37, 67, 190, 122, 199, 110, 62, 160, 90, 42, 62, 187, 96, 29, 189, 9, 188, 55, 61, 196, 236, 2, 190, 160, 52, 172, 189, 239, 168, 228, 62, 18, 231, 143, 189, 122, 141, 151, 62, 153, 221, 123, 62, 74, 21, 160, 62, 80, 237, 254, 189, 53, 108, 244, 61, 18, 19, 175, 61, 24, 12, 166, 56, 128, 102, 198, 61, 44, 175, 9, 189, 167, 203, 84, 62, 104, 247, 164, 189, 23, 123, 112, 62, 208, 240, 26, 189, 56, 107, 9, 62, 216, 210, 77, 189, 97, 89, 224, 61, 10, 237, 108, 189, 41, 211, 166, 62, 200, 130, 41, 59, 128, 142, 255, 189, 90, 12, 117, 61, 24, 5, 9, 187, 11, 89, 12, 190, 213, 244, 162, 61, 136, 96, 114, 188, 230, 89, 33, 189, 91, 47, 35, 190, 19, 84, 16, 62, 100, 132, 20, 61, 58, 10, 135, 189, 60, 138, 109, 61, 231, 177, 66, 190, 45, 113, 136, 60, 68, 202, 146, 189, 224, 16, 44, 60, 153, 73, 163, 61, 45, 164, 3, 190, 243, 79, 34, 61, 45, 251, 195, 61, 41, 174, 106, 62, 130, 150, 159, 61, 103, 32, 160, 61, 131, 113, 191, 188, 21, 59, 187, 61, 247, 195, 10, 190, 144, 101, 41, 190, 170, 15, 82, 190, 213, 4, 21, 62, 206, 124, 194, 61, 33, 99, 229, 189, 109, 121, 148, 189, 24, 149, 38, 189, 93, 128, 14, 190, 151, 146, 155, 189, 102, 38, 157, 61, 126, 130, 126, 62, 255, 242, 137, 61, 224, 113, 68, 190, 215, 18, 2, 61, 229, 159, 180, 60, 91, 29, 99, 62, 163, 12, 111, 189, 193, 151, 47, 189, 204, 102, 242, 188, 146, 211, 212, 190, 76, 233, 221, 189, 180, 52, 14, 189, 28, 114, 69, 62, 179, 11, 186, 187, 20, 35, 29, 62, 131, 148, 220, 189, 110, 214, 242, 189, 68, 59, 27, 62, 205, 101, 241, 61, 248, 255, 191, 61, 211, 179, 172, 187, 34, 107, 214, 61, 226, 91, 221, 61, 33, 206, 27, 189, 114, 178, 11, 190, 39, 88, 185, 60, 216, 56, 24, 188, 84, 151, 34, 189, 144, 199, 15, 61, 7, 235, 202, 60, 115, 216, 47, 59, 126, 250, 65, 61, 215, 94, 186, 189, 227, 88, 233, 61, 93, 25, 195, 189, 116, 27, 146, 61, 124, 143, 20, 190, 175, 31, 177, 61, 175, 126, 139, 59, 104, 218, 24, 190, 221, 186, 33, 189, 4, 78, 180, 61, 62, 226, 93, 188, 128, 34, 155, 61, 45, 32, 7, 190, 167, 161, 240, 189, 219, 65, 31, 190, 152, 37, 248, 189, 76, 24, 37, 189, 39, 90, 224, 61, 14, 11, 51, 61, 53, 78, 0, 62, 49, 87, 67, 61, 25, 33, 8, 190, 101, 189, 126, 190, 153, 107, 158, 60, 23, 197, 11, 62, 248, 180, 92, 60, 24, 205, 181, 189, 102, 231, 23, 62, 198, 103, 114, 188, 83, 222, 43, 190, 20, 246, 40, 62, 220, 176, 14, 190, 133, 149, 239, 62, 95, 207, 220, 189, 144, 145, 55, 189, 113, 210, 32, 61, 172, 137, 22, 60, 226, 208, 227, 61, 23, 217, 251, 189, 94, 76, 229, 61, 40, 58, 122, 189, 227, 202, 116, 189, 45, 50, 209, 189, 27, 52, 175, 189, 113, 203, 38, 60, 252, 183, 40, 188, 105, 111, 148, 189, 229, 190, 40, 62, 114, 111, 140, 190, 57, 21, 58, 62, 181, 220, 71, 62, 236, 208, 67, 62, 209, 221, 254, 188, 170, 180, 165, 189, 85, 216, 202, 189, 60, 38, 65, 62, 121, 201, 62, 190, 171, 92, 231, 61, 136, 152, 139, 61, 31, 241, 80, 62, 93, 253, 231, 61, 235, 209, 0, 62, 187, 254, 230, 61, 68, 94, 214, 61, 123, 40, 30, 191, 140, 201, 0, 62, 162, 139, 130, 62, 33, 227, 210, 187, 164, 222, 189, 61, 219, 187, 40, 190, 87, 227, 11, 59, 135, 0, 120, 62, 243, 199, 110, 62, 186, 219, 178, 62, 211, 244, 239, 61, 133, 116, 161, 61, 210, 239, 13, 60, 91, 48, 73, 61, 142, 122, 63, 190, 30, 38, 155, 190, 23, 117, 151, 61, 240, 250, 204, 61, 40, 238, 39, 61, 181, 210, 88, 190, 142, 150, 54, 62, 238, 44, 6, 189, 224, 213, 2, 190, 217, 159, 181, 61, 10, 219, 48, 189, 149, 37, 78, 190, 135, 217, 66, 189, 107, 4, 24, 189, 161, 57, 170, 60, 211, 95, 224, 190, 35, 236, 89, 60, 147, 158, 67, 62, 82, 237, 28, 63, 182, 87, 149, 190, 24, 18, 135, 188, 224, 70, 94, 189, 165, 102, 132, 189, 171, 29, 131, 189, 247, 215, 244, 61, 122, 78, 186, 190, 65, 36, 74, 190, 65, 123, 20, 190, 65, 70, 202, 189, 20, 227, 162, 190, 246, 138, 104, 62, 161, 204, 46, 190, 119, 208, 60, 62, 138, 80, 179, 61, 66, 179, 102, 60, 165, 217, 15, 189, 28, 103, 182, 61, 60, 254, 59, 189, 142, 182, 1, 190, 58, 127, 142, 62, 29, 39, 1, 62, 65, 139, 225, 189, 243, 123, 172, 189, 101, 254, 3, 62, 204, 89, 26, 190, 252, 109, 38, 190, 244, 216, 143, 189, 25, 250, 197, 60, 95, 232, 102, 189, 46, 244, 60, 61, 58, 18, 96, 188, 64, 92, 62, 189, 28, 83, 206, 189, 166, 19, 56, 189, 214, 236, 1, 190, 182, 83, 37, 62, 44, 12, 125, 59, 184, 112, 34, 190, 208, 234, 51, 186, 242, 73, 7, 62, 141, 44, 37, 190, 209, 87, 2, 61, 31, 9, 191, 189, 206, 244, 176, 189, 170, 56, 31, 190, 176, 183, 28, 62, 194, 249, 239, 61, 74, 165, 159, 61, 148, 229, 4, 190, 109, 222, 51, 190, 174, 142, 3, 189, 248, 91, 120, 61, 175, 25, 246, 60, 225, 43, 37, 189, 54, 185, 6, 62, 36, 158, 74, 190, 118, 232, 184, 188, 22, 103, 58, 189, 22, 192, 139, 189, 4, 194, 145, 61, 69, 138, 186, 189, 56, 107, 151, 190, 143, 50, 181, 62, 56, 193, 91, 61, 72, 164, 64, 190, 17, 176, 24, 62, 26, 158, 37, 190, 119, 18, 155, 62, 122, 236, 197, 61, 101, 24, 177, 186, 40, 53, 100, 60, 219, 44, 210, 189, 226, 145, 10, 190, 235, 209, 91, 190, 253, 16, 111, 60, 93, 73, 139, 190, 41, 8, 204, 187, 173, 196, 250, 61, 151, 177, 47, 188, 128, 112, 15, 186, 193, 168, 213, 188, 140, 78, 170, 61, 165, 132, 155, 190, 75, 127, 170, 62, 109, 212, 55, 190, 82, 176, 41, 189, 245, 59, 63, 62, 84, 202, 44, 62, 206, 15, 28, 189, 154, 131, 97, 61, 3, 25, 175, 189, 178, 134, 165, 61, 58, 0, 190, 189, 53, 255, 5, 190, 16, 119, 213, 62, 189, 215, 185, 61, 122, 197, 4, 59, 14, 144, 197, 61, 59, 129, 0, 190, 63, 185, 205, 61, 240, 189, 34, 62, 92, 71, 55, 62, 166, 116, 78, 189, 86, 11, 16, 189, 71, 94, 127, 189, 169, 20, 105, 190, 148, 188, 223, 61, 74, 161, 182, 189, 250, 72, 114, 189, 235, 40, 97, 62, 128, 184, 161, 190, 69, 206, 35, 62, 198, 110, 43, 189, 33, 54, 73, 62, 226, 128, 47, 190, 84, 15, 182, 61, 36, 134, 61, 61, 191, 78, 71, 61, 234, 237, 209, 61, 154, 238, 26, 190, 142, 246, 24, 190, 64, 25, 115, 189, 130, 39, 54, 61, 145, 133, 192, 190, 190, 203, 184, 61, 119, 86, 61, 190, 49, 66, 134, 62, 168, 70, 137, 190, 212, 156, 57, 189, 189, 24, 6, 190, 175, 110, 136, 61, 148, 103, 179, 60, 99, 242, 183, 189, 143, 33, 135, 190, 180, 46, 190, 61, 131, 103, 55, 190, 240, 251, 64, 190, 173, 223, 202, 60, 14, 13, 52, 62, 98, 155, 19, 190, 191, 94, 164, 61, 247, 187, 53, 190, 19, 36, 177, 188, 22, 131, 205, 189, 67, 53, 23, 62, 156, 208, 185, 189, 204, 255, 185, 189, 178, 36, 170, 59, 144, 246, 55, 190, 16, 99, 23, 190, 221, 38, 214, 60, 173, 72, 97, 189, 193, 99, 7, 62, 248, 78, 190, 189, 21, 212, 27, 190, 167, 238, 73, 189, 130, 227, 83, 189, 183, 66, 73, 189, 49, 134, 148, 61, 247, 241, 48, 187, 196, 35, 253, 189, 176, 22, 100, 61, 234, 65, 66, 61, 187, 231, 74, 190, 192, 164, 157, 188, 42, 164, 22, 190, 101, 180, 219, 188, 100, 153, 20, 190, 218, 153, 34, 190, 148, 223, 92, 61, 89, 134, 98, 61, 102, 234, 124, 189, 125, 135, 209, 189, 179, 77, 23, 62, 179, 120, 237, 189, 68, 21, 106, 189, 18, 146, 243, 189, 229, 247, 59, 190, 41, 27, 23, 190, 120, 74, 116, 61, 226, 171, 59, 190, 5, 110, 12, 190, 210, 51, 43, 189, 214, 241, 164, 188, 56, 199, 44, 190, 227, 51, 250, 61, 105, 240, 93, 189, 157, 116, 222, 189, 9, 210, 32, 189, 190, 140, 118, 61, 167, 154, 252, 62, 95, 88, 21, 61, 126, 128, 30, 189, 32, 61, 71, 61, 88, 6, 19, 188, 37, 176, 19, 62, 131, 75, 85, 189, 196, 176, 219, 61, 130, 68, 116, 189, 8, 253, 205, 189, 247, 103, 32, 189, 0, 35, 15, 190, 153, 34, 52, 62, 249, 153, 16, 190, 183, 212, 188, 60, 235, 201, 45, 62, 123, 36, 170, 190, 108, 120, 96, 62, 234, 190, 0, 61, 225, 68, 168, 61, 25, 214, 130, 189, 78, 54, 58, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 9, 39, 59, 182, 11, 24, 61, 255, 126, 244, 61, 147, 112, 55, 62, 66, 186, 209, 189, 69, 211, 68, 189, 36, 70, 128, 58, 221, 85, 63, 190, 246, 204, 167, 189, 255, 166, 48, 62, 14, 210, 150, 61, 178, 86, 38, 190, 67, 46, 73, 62, 136, 25, 119, 62, 156, 92, 38, 190, 60, 185, 17, 62, 4, 110, 27, 62, 169, 47, 111, 190, 143, 157, 42, 188, 61, 9, 88, 187, 36, 219, 213, 188, 103, 223, 162, 187, 161, 26, 180, 61, 35, 24, 8, 62, 229, 142, 40, 62, 163, 220, 192, 61, 245, 245, 224, 59, 230, 249, 43, 62, 241, 50, 169, 61, 167, 139, 225, 61, 107, 193, 136, 189, 25, 120, 196, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 221, 144, 190, 223, 59, 126, 189, 227, 161, 87, 190, 51, 42, 234, 190, 86, 133, 172, 60, 152, 21, 29, 62, 189, 107, 20, 190, 173, 0, 131, 189, 151, 51, 13, 189, 199, 97, 138, 190, 40, 69, 184, 60, 242, 53, 253, 61, 158, 125, 60, 62, 20, 160, 212, 186, 116, 201, 188, 61, 48, 72, 18, 188, 158, 5, 16, 190, 219, 50, 33, 190, 66, 251, 205, 62, 25, 58, 31, 190, 108, 12, 14, 189, 50, 10, 236, 61, 216, 135, 167, 189, 165, 75, 40, 62, 107, 101, 154, 190, 0, 8, 217, 62, 241, 124, 176, 59, 125, 57, 27, 62, 24, 193, 63, 62, 253, 152, 68, 62, 102, 177, 19, 190, 58, 191, 50, 62, 33, 216, 69, 189, 44, 44, 5, 190, 150, 52, 181, 189, 57, 51, 41, 62, 132, 229, 89, 190, 218, 99, 161, 61, 54, 156, 149, 189, 216, 205, 72, 62, 163, 47, 71, 62, 91, 73, 185, 189, 1, 190, 16, 61, 9, 63, 3, 62, 61, 159, 151, 61, 153, 254, 77, 190, 51, 46, 208, 189, 90, 89, 33, 190, 6, 151, 230, 61, 195, 186, 119, 62, 129, 232, 55, 189, 54, 187, 157, 190, 74, 71, 73, 62, 111, 253, 92, 189, 246, 98, 68, 61, 166, 103, 32, 190, 140, 85, 20, 60, 217, 137, 19, 62, 96, 61, 238, 187, 16, 70, 8, 62, 52, 239, 18, 190, 255, 212, 33, 62, 55, 154, 206, 189, 118, 190, 87, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 222, 92, 190, 240, 75, 5, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {64, 202, 38, 63, 152, 60, 73, 63, 193, 133, 221, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {118, 234, 106, 190, 170, 11, 147, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0078/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}