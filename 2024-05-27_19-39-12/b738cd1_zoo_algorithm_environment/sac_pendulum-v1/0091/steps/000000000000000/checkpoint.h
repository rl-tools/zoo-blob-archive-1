// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 156, 235, 190, 176, 105, 148, 60, 128, 214, 179, 190, 28, 83, 210, 190, 84, 64, 75, 190, 228, 54, 82, 189, 164, 92, 17, 63, 34, 197, 128, 190, 33, 68, 169, 62, 171, 207, 188, 190, 11, 103, 247, 62, 45, 104, 137, 62, 182, 55, 118, 62, 141, 120, 133, 190, 239, 57, 207, 190, 13, 92, 187, 190, 22, 186, 185, 190, 233, 218, 236, 61, 165, 84, 213, 188, 102, 139, 57, 189, 55, 176, 200, 190, 53, 98, 52, 60, 10, 132, 147, 62, 164, 88, 223, 190, 243, 146, 29, 190, 35, 202, 129, 62, 168, 207, 178, 190, 42, 71, 212, 61, 226, 225, 191, 190, 51, 111, 3, 62, 196, 48, 249, 189, 135, 48, 144, 188, 241, 38, 98, 190, 35, 59, 93, 62, 111, 86, 230, 190, 137, 231, 252, 189, 236, 2, 207, 190, 36, 185, 165, 60, 147, 105, 5, 63, 228, 157, 118, 190, 139, 81, 4, 191, 124, 106, 86, 190, 75, 138, 199, 61, 146, 252, 45, 62, 236, 18, 170, 61, 223, 100, 198, 189, 51, 112, 172, 186, 183, 36, 48, 190, 34, 11, 128, 189, 44, 26, 139, 188, 184, 103, 52, 190, 143, 113, 168, 62, 102, 146, 0, 191, 116, 233, 59, 190, 181, 129, 253, 190, 102, 249, 139, 62, 78, 101, 135, 62, 41, 193, 254, 61, 208, 68, 2, 191, 194, 34, 212, 62, 60, 252, 30, 61, 69, 255, 61, 189, 10, 175, 63, 190, 0, 31, 247, 62, 32, 140, 137, 62, 124, 166, 140, 62, 241, 255, 146, 62, 146, 230, 89, 189, 54, 60, 188, 190, 3, 215, 164, 190, 64, 254, 10, 190, 21, 71, 195, 62, 219, 153, 191, 189, 65, 224, 163, 62, 252, 184, 167, 190, 190, 126, 5, 191, 167, 209, 180, 189, 33, 241, 221, 189, 68, 35, 218, 61, 122, 248, 189, 62, 181, 178, 7, 191, 123, 239, 212, 62, 221, 116, 232, 62, 39, 189, 202, 62, 172, 98, 4, 63, 187, 39, 131, 188, 236, 7, 25, 189, 65, 246, 172, 61, 64, 195, 149, 62, 222, 152, 19, 63, 115, 164, 140, 190, 183, 115, 132, 190, 83, 160, 227, 190, 159, 117, 104, 190, 98, 98, 124, 190, 129, 40, 253, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 150, 19, 191, 115, 125, 15, 191, 217, 254, 178, 187, 48, 26, 114, 189, 252, 72, 145, 62, 200, 226, 215, 189, 163, 91, 205, 62, 130, 212, 134, 190, 163, 122, 209, 190, 187, 188, 175, 190, 153, 139, 134, 62, 187, 250, 1, 63, 111, 204, 242, 190, 92, 217, 221, 62, 14, 122, 153, 62, 29, 194, 160, 190, 204, 66, 160, 62, 178, 185, 180, 190, 210, 82, 32, 188, 250, 231, 165, 61, 250, 124, 201, 190, 77, 233, 223, 62, 244, 14, 5, 63, 132, 72, 116, 190, 158, 61, 243, 62, 165, 227, 160, 189, 232, 130, 211, 190, 41, 118, 195, 190, 7, 98, 13, 191, 114, 215, 106, 62, 109, 102, 24, 190, 248, 128, 1, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 89, 207, 189, 45, 93, 21, 61, 113, 46, 49, 62, 18, 139, 239, 61, 113, 31, 133, 61, 24, 229, 233, 186, 178, 62, 119, 61, 206, 100, 44, 62, 39, 137, 211, 60, 239, 90, 45, 190, 76, 32, 212, 61, 219, 15, 152, 189, 112, 243, 15, 62, 111, 62, 242, 189, 186, 45, 60, 61, 146, 34, 80, 188, 194, 71, 26, 61, 18, 218, 35, 190, 100, 103, 42, 62, 74, 99, 220, 189, 116, 129, 32, 62, 4, 41, 138, 61, 36, 134, 229, 188, 163, 85, 9, 61, 243, 41, 49, 189, 250, 218, 58, 189, 246, 49, 14, 62, 128, 28, 100, 61, 228, 94, 22, 62, 137, 57, 224, 189, 208, 142, 10, 62, 101, 68, 218, 61, 116, 118, 229, 61, 28, 29, 144, 61, 148, 11, 32, 61, 13, 90, 36, 62, 110, 225, 189, 189, 249, 37, 29, 190, 128, 211, 239, 189, 96, 38, 180, 61, 239, 233, 27, 190, 10, 194, 235, 187, 179, 1, 232, 187, 125, 224, 24, 62, 48, 61, 91, 60, 116, 5, 33, 61, 62, 95, 158, 189, 252, 143, 202, 188, 95, 226, 34, 190, 157, 145, 12, 62, 31, 236, 248, 189, 251, 162, 33, 61, 179, 76, 223, 188, 41, 252, 154, 61, 11, 112, 35, 62, 172, 73, 219, 61, 69, 82, 2, 60, 223, 244, 46, 61, 11, 214, 48, 190, 15, 223, 217, 189, 2, 87, 80, 189, 186, 217, 138, 60, 136, 254, 190, 189, 1, 227, 205, 189, 150, 185, 25, 60, 30, 123, 21, 60, 30, 144, 208, 189, 135, 94, 236, 188, 117, 188, 6, 62, 125, 188, 36, 189, 69, 45, 21, 61, 222, 207, 229, 61, 8, 177, 221, 61, 228, 164, 132, 189, 193, 144, 41, 61, 61, 154, 164, 188, 31, 25, 121, 189, 226, 115, 184, 59, 19, 54, 20, 190, 207, 11, 32, 190, 224, 153, 80, 61, 1, 128, 190, 187, 79, 127, 3, 190, 80, 250, 42, 62, 231, 135, 245, 61, 232, 200, 112, 61, 213, 143, 52, 190, 201, 206, 189, 189, 6, 186, 185, 61, 84, 48, 172, 59, 138, 167, 145, 189, 82, 5, 54, 61, 106, 60, 52, 62, 232, 73, 67, 61, 26, 200, 46, 62, 59, 244, 212, 188, 248, 34, 76, 189, 168, 185, 117, 189, 87, 115, 105, 61, 102, 50, 10, 62, 254, 92, 37, 190, 47, 134, 221, 61, 141, 13, 197, 188, 50, 74, 45, 190, 1, 46, 238, 61, 96, 167, 40, 190, 128, 221, 35, 190, 44, 38, 91, 189, 1, 103, 17, 190, 139, 13, 131, 188, 36, 87, 48, 190, 66, 175, 208, 189, 41, 233, 8, 61, 241, 47, 105, 188, 228, 152, 23, 62, 227, 94, 5, 190, 225, 60, 51, 190, 134, 225, 147, 61, 46, 51, 33, 190, 243, 189, 23, 190, 154, 152, 254, 189, 56, 46, 22, 62, 156, 117, 68, 189, 111, 14, 201, 188, 36, 153, 209, 61, 51, 195, 33, 61, 120, 14, 11, 62, 37, 37, 35, 62, 214, 112, 187, 189, 216, 184, 143, 61, 119, 21, 230, 59, 91, 46, 153, 189, 214, 70, 24, 62, 4, 143, 124, 61, 130, 223, 83, 61, 55, 165, 117, 188, 93, 194, 196, 61, 235, 234, 14, 61, 152, 241, 235, 189, 175, 178, 4, 62, 82, 224, 193, 61, 90, 1, 130, 61, 234, 130, 5, 190, 50, 48, 36, 188, 12, 43, 11, 190, 173, 157, 4, 62, 245, 239, 37, 62, 229, 207, 249, 61, 98, 36, 38, 190, 247, 6, 86, 61, 230, 16, 117, 188, 72, 39, 136, 188, 135, 195, 246, 188, 138, 250, 155, 60, 63, 33, 59, 61, 76, 239, 149, 189, 181, 94, 164, 189, 182, 248, 210, 189, 132, 140, 130, 59, 219, 68, 13, 62, 204, 158, 77, 187, 84, 76, 88, 189, 33, 133, 227, 189, 123, 127, 25, 189, 216, 48, 41, 190, 59, 0, 10, 190, 188, 88, 33, 190, 167, 41, 166, 189, 108, 224, 10, 61, 165, 132, 162, 189, 198, 159, 222, 189, 214, 2, 40, 190, 176, 71, 11, 62, 107, 182, 121, 189, 128, 223, 38, 189, 77, 67, 220, 61, 70, 183, 248, 189, 255, 249, 11, 189, 51, 123, 38, 62, 5, 162, 18, 190, 85, 48, 119, 189, 236, 118, 125, 61, 77, 17, 246, 189, 170, 220, 7, 62, 16, 26, 89, 61, 173, 14, 2, 190, 3, 7, 232, 61, 156, 77, 196, 189, 218, 143, 48, 62, 72, 181, 26, 190, 177, 46, 143, 188, 9, 27, 55, 61, 196, 75, 14, 190, 105, 12, 109, 61, 62, 215, 71, 61, 205, 5, 227, 61, 72, 0, 31, 190, 241, 232, 247, 189, 119, 151, 12, 190, 124, 132, 204, 61, 0, 173, 130, 61, 157, 42, 141, 61, 66, 17, 217, 189, 129, 33, 47, 190, 201, 130, 73, 189, 232, 56, 220, 61, 184, 59, 207, 189, 51, 190, 157, 189, 246, 113, 41, 190, 152, 28, 137, 189, 108, 16, 23, 62, 228, 194, 39, 189, 235, 96, 231, 186, 122, 236, 241, 60, 167, 210, 74, 189, 206, 21, 224, 60, 245, 151, 249, 61, 68, 169, 41, 62, 97, 119, 158, 61, 106, 253, 186, 61, 83, 118, 243, 61, 2, 218, 87, 61, 43, 5, 62, 61, 203, 65, 244, 61, 158, 21, 152, 189, 65, 93, 52, 189, 143, 117, 197, 189, 55, 125, 250, 189, 252, 243, 184, 189, 183, 3, 168, 188, 126, 168, 36, 60, 126, 124, 182, 189, 177, 106, 144, 61, 153, 11, 83, 61, 46, 142, 253, 61, 41, 94, 27, 62, 45, 138, 236, 189, 229, 138, 41, 190, 146, 47, 209, 61, 179, 193, 38, 190, 76, 145, 9, 190, 96, 105, 238, 189, 11, 166, 239, 60, 225, 30, 248, 189, 69, 253, 201, 189, 234, 30, 52, 190, 27, 188, 155, 61, 88, 113, 81, 189, 193, 231, 179, 61, 125, 83, 29, 189, 150, 255, 21, 61, 172, 208, 85, 189, 138, 196, 51, 190, 3, 121, 15, 190, 140, 64, 40, 190, 215, 209, 140, 61, 171, 167, 241, 60, 113, 135, 217, 61, 133, 211, 144, 61, 61, 76, 253, 189, 142, 226, 34, 190, 239, 160, 0, 62, 24, 225, 0, 62, 68, 115, 85, 187, 163, 253, 119, 61, 16, 120, 64, 61, 118, 164, 175, 189, 76, 159, 164, 60, 186, 129, 207, 61, 66, 54, 29, 190, 145, 220, 205, 189, 248, 21, 9, 190, 15, 226, 77, 60, 227, 82, 2, 62, 235, 238, 142, 60, 26, 18, 27, 62, 52, 88, 44, 189, 113, 158, 142, 189, 220, 2, 22, 190, 28, 138, 19, 186, 79, 139, 177, 61, 84, 216, 249, 60, 243, 237, 123, 189, 103, 25, 97, 61, 13, 208, 37, 62, 128, 178, 31, 190, 88, 107, 245, 61, 164, 32, 25, 190, 233, 246, 139, 189, 62, 234, 143, 61, 249, 134, 52, 62, 234, 133, 249, 189, 2, 8, 114, 61, 236, 206, 56, 188, 28, 180, 153, 189, 37, 83, 212, 61, 126, 224, 16, 62, 52, 161, 251, 189, 129, 76, 195, 61, 73, 83, 145, 61, 65, 229, 169, 61, 60, 168, 35, 190, 156, 39, 50, 190, 217, 76, 47, 62, 138, 63, 5, 186, 28, 182, 108, 189, 129, 151, 163, 189, 31, 20, 166, 189, 254, 26, 141, 60, 236, 86, 129, 189, 252, 95, 129, 189, 185, 163, 39, 185, 101, 232, 16, 62, 20, 143, 248, 60, 236, 136, 3, 62, 114, 243, 195, 61, 193, 21, 244, 61, 214, 224, 14, 190, 254, 4, 62, 61, 88, 113, 238, 61, 148, 239, 38, 190, 109, 134, 217, 61, 76, 143, 28, 61, 100, 23, 51, 58, 230, 157, 44, 62, 197, 131, 26, 62, 14, 166, 203, 60, 56, 205, 178, 189, 194, 42, 198, 189, 225, 148, 162, 61, 176, 125, 159, 189, 156, 90, 114, 188, 39, 29, 129, 189, 205, 193, 171, 60, 9, 187, 224, 189, 146, 243, 1, 190, 172, 144, 170, 61, 139, 52, 3, 61, 55, 183, 186, 189, 252, 60, 37, 60, 56, 10, 28, 62, 0, 139, 53, 189, 32, 151, 138, 60, 13, 247, 163, 61, 82, 179, 27, 189, 132, 217, 42, 188, 14, 181, 208, 61, 175, 247, 27, 62, 252, 216, 47, 190, 187, 248, 20, 190, 74, 43, 187, 61, 19, 136, 51, 62, 191, 43, 228, 61, 40, 105, 154, 61, 58, 234, 49, 61, 111, 70, 95, 189, 18, 23, 208, 189, 22, 98, 26, 189, 58, 209, 187, 61, 234, 24, 38, 190, 125, 52, 165, 61, 73, 111, 235, 189, 117, 146, 131, 61, 236, 172, 13, 185, 59, 30, 25, 190, 179, 234, 169, 189, 193, 171, 117, 188, 244, 39, 143, 61, 71, 203, 41, 189, 41, 12, 18, 62, 208, 218, 234, 186, 240, 141, 128, 189, 218, 46, 129, 60, 205, 181, 3, 190, 228, 83, 20, 190, 64, 133, 90, 61, 118, 203, 25, 61, 208, 82, 254, 188, 42, 89, 134, 61, 73, 65, 31, 62, 145, 140, 60, 61, 67, 56, 191, 61, 202, 48, 46, 190, 202, 100, 48, 190, 109, 6, 17, 62, 28, 92, 41, 190, 165, 63, 164, 189, 34, 197, 43, 190, 13, 9, 44, 189, 187, 179, 13, 62, 105, 65, 193, 61, 147, 56, 165, 189, 106, 24, 131, 188, 40, 213, 192, 61, 152, 93, 126, 188, 229, 234, 40, 188, 207, 96, 25, 189, 195, 199, 222, 188, 62, 214, 164, 61, 141, 231, 58, 61, 87, 42, 128, 61, 29, 60, 217, 188, 249, 155, 19, 62, 134, 68, 52, 62, 91, 7, 15, 190, 205, 214, 83, 61, 218, 18, 30, 190, 178, 142, 207, 189, 8, 65, 187, 61, 131, 18, 41, 62, 156, 165, 44, 189, 219, 139, 212, 61, 60, 187, 37, 190, 205, 253, 155, 61, 48, 89, 136, 189, 244, 172, 66, 61, 84, 249, 36, 62, 147, 98, 9, 190, 94, 94, 80, 61, 101, 136, 206, 61, 229, 193, 109, 188, 202, 141, 101, 61, 252, 151, 99, 61, 67, 138, 19, 62, 92, 225, 206, 61, 203, 81, 13, 60, 163, 78, 54, 60, 168, 242, 129, 188, 144, 35, 217, 188, 216, 241, 80, 188, 97, 245, 175, 189, 8, 12, 203, 189, 93, 141, 137, 188, 22, 35, 146, 189, 222, 206, 220, 188, 184, 45, 237, 189, 138, 164, 214, 189, 252, 243, 146, 189, 7, 98, 197, 187, 235, 110, 252, 189, 76, 115, 10, 190, 103, 0, 226, 189, 91, 98, 74, 61, 35, 222, 115, 189, 7, 171, 203, 189, 15, 243, 39, 190, 170, 83, 178, 61, 205, 141, 182, 61, 114, 225, 41, 62, 183, 94, 19, 62, 50, 172, 12, 62, 132, 173, 44, 62, 208, 162, 187, 61, 225, 242, 240, 61, 72, 14, 139, 189, 222, 65, 211, 61, 66, 197, 8, 190, 146, 248, 237, 189, 230, 244, 224, 61, 66, 2, 15, 190, 40, 176, 202, 60, 80, 209, 129, 61, 25, 197, 199, 61, 85, 19, 211, 187, 246, 234, 153, 189, 60, 141, 231, 61, 159, 102, 226, 189, 41, 252, 57, 189, 97, 1, 51, 62, 186, 11, 12, 59, 138, 190, 22, 190, 195, 78, 77, 188, 78, 61, 224, 61, 87, 199, 107, 188, 206, 245, 16, 189, 248, 67, 9, 190, 2, 171, 221, 189, 87, 12, 196, 189, 251, 245, 18, 62, 104, 72, 15, 62, 217, 162, 226, 189, 215, 182, 20, 62, 19, 158, 150, 189, 207, 254, 213, 188, 76, 36, 149, 61, 166, 108, 129, 189, 243, 129, 87, 189, 36, 223, 73, 189, 168, 71, 41, 61, 90, 38, 6, 190, 140, 192, 241, 61, 9, 250, 36, 62, 218, 224, 181, 189, 100, 105, 225, 61, 153, 210, 114, 61, 10, 0, 92, 61, 139, 17, 202, 61, 211, 100, 243, 61, 153, 65, 30, 190, 132, 254, 170, 61, 59, 242, 147, 60, 49, 182, 46, 190, 137, 144, 232, 61, 29, 131, 143, 61, 39, 40, 86, 61, 11, 162, 39, 62, 56, 153, 181, 60, 58, 53, 146, 189, 254, 237, 201, 61, 35, 209, 34, 61, 117, 237, 8, 190, 29, 32, 10, 62, 237, 214, 30, 190, 174, 163, 98, 61, 133, 212, 240, 61, 163, 224, 160, 60, 62, 165, 32, 190, 42, 197, 231, 61, 15, 249, 174, 189, 15, 179, 17, 190, 76, 85, 107, 61, 15, 99, 167, 61, 118, 217, 231, 61, 186, 72, 17, 190, 60, 61, 33, 62, 5, 208, 175, 61, 105, 212, 27, 189, 206, 90, 42, 62, 139, 175, 21, 62, 22, 70, 27, 189, 196, 73, 222, 188, 213, 58, 242, 60, 206, 233, 3, 190, 62, 169, 103, 61, 76, 206, 11, 190, 135, 255, 171, 189, 107, 15, 0, 190, 66, 126, 58, 60, 114, 79, 18, 61, 187, 130, 142, 60, 20, 161, 13, 188, 50, 241, 201, 60, 88, 67, 88, 189, 161, 156, 6, 61, 2, 176, 249, 189, 255, 217, 253, 61, 20, 33, 219, 61, 24, 4, 247, 61, 177, 168, 2, 190, 120, 171, 13, 62, 180, 116, 168, 189, 201, 97, 62, 189, 76, 233, 39, 62, 162, 101, 188, 187, 119, 2, 226, 189, 156, 165, 136, 188, 30, 64, 149, 60, 125, 236, 247, 60, 201, 94, 233, 189, 54, 255, 17, 61, 172, 36, 21, 62, 226, 129, 210, 189, 229, 85, 155, 189, 63, 78, 21, 62, 232, 26, 180, 61, 113, 55, 42, 190, 113, 118, 168, 185, 14, 199, 198, 189, 62, 199, 153, 60, 206, 141, 2, 62, 249, 64, 193, 189, 113, 70, 194, 61, 242, 29, 31, 62, 69, 43, 201, 189, 205, 102, 37, 190, 71, 82, 43, 190, 34, 225, 198, 61, 158, 187, 225, 61, 166, 68, 8, 190, 147, 63, 23, 187, 73, 24, 210, 61, 97, 83, 2, 190, 184, 180, 72, 189, 221, 15, 0, 190, 45, 105, 140, 188, 243, 179, 151, 61, 134, 43, 195, 61, 149, 12, 152, 61, 129, 223, 220, 61, 52, 202, 130, 189, 209, 110, 99, 61, 136, 1, 38, 190, 209, 93, 41, 62, 125, 232, 39, 190, 63, 93, 108, 61, 132, 198, 142, 61, 12, 239, 139, 60, 231, 211, 254, 59, 134, 55, 228, 189, 1, 130, 203, 189, 136, 82, 185, 61, 240, 166, 5, 190, 159, 14, 31, 62, 67, 252, 164, 188, 203, 154, 14, 190, 243, 151, 114, 189, 189, 173, 50, 190, 229, 197, 105, 61, 237, 139, 56, 61, 218, 147, 136, 189, 76, 107, 133, 189, 120, 114, 56, 61, 89, 56, 248, 189, 53, 38, 21, 62, 211, 19, 138, 187, 0, 45, 226, 189, 72, 154, 11, 61, 254, 144, 145, 61, 45, 83, 118, 189, 253, 164, 145, 61, 79, 74, 1, 190, 170, 105, 203, 188, 62, 27, 11, 190, 244, 149, 168, 61, 68, 227, 83, 61, 165, 219, 57, 61, 160, 103, 55, 60, 70, 191, 74, 61, 157, 77, 127, 60, 182, 125, 181, 189, 68, 117, 217, 61, 60, 55, 34, 190, 101, 13, 25, 62, 48, 78, 131, 61, 179, 52, 137, 189, 186, 90, 167, 61, 246, 93, 29, 190, 105, 61, 47, 190, 59, 55, 144, 189, 234, 172, 45, 190, 70, 187, 23, 62, 154, 221, 65, 189, 108, 198, 63, 60, 187, 87, 26, 62, 126, 140, 244, 60, 218, 13, 7, 61, 176, 45, 21, 62, 239, 71, 249, 61, 159, 105, 154, 61, 223, 114, 110, 61, 235, 226, 12, 62, 1, 12, 17, 62, 82, 46, 37, 190, 83, 29, 167, 189, 197, 193, 78, 58, 79, 166, 50, 62, 193, 222, 49, 62, 10, 252, 219, 61, 24, 190, 140, 61, 98, 85, 72, 189, 74, 87, 56, 188, 89, 208, 79, 61, 89, 15, 93, 189, 251, 138, 24, 62, 143, 98, 41, 190, 70, 113, 15, 190, 165, 53, 178, 188, 210, 190, 63, 189, 224, 30, 2, 190, 209, 158, 10, 62, 107, 173, 147, 61, 218, 136, 117, 189, 172, 62, 30, 190, 55, 21, 169, 189, 124, 218, 227, 61, 123, 20, 96, 189, 140, 120, 6, 62, 206, 11, 27, 190, 1, 116, 188, 61, 107, 114, 217, 61, 9, 159, 212, 61, 47, 143, 203, 61, 222, 251, 176, 188, 236, 82, 229, 187, 167, 90, 227, 61, 52, 220, 184, 61, 232, 51, 13, 189, 251, 129, 165, 61, 57, 127, 216, 189, 131, 212, 175, 189, 199, 49, 217, 189, 124, 139, 28, 190, 15, 246, 228, 189, 156, 93, 32, 62, 125, 101, 224, 189, 229, 2, 16, 62, 46, 197, 41, 62, 158, 125, 203, 61, 144, 234, 250, 61, 255, 155, 118, 61, 101, 35, 16, 61, 239, 134, 102, 189, 245, 200, 35, 190, 136, 98, 26, 190, 38, 112, 190, 61, 32, 104, 7, 62, 62, 217, 188, 59, 242, 172, 59, 188, 26, 155, 41, 62, 239, 144, 253, 189, 200, 220, 232, 61, 42, 9, 33, 61, 1, 210, 144, 188, 175, 245, 8, 190, 43, 214, 31, 189, 188, 112, 58, 188, 246, 140, 151, 60, 47, 9, 29, 62, 194, 93, 32, 61, 101, 13, 130, 61, 34, 80, 200, 189, 239, 68, 21, 62, 175, 49, 31, 190, 117, 249, 217, 189, 24, 112, 39, 62, 40, 30, 216, 58, 71, 82, 10, 62, 49, 29, 235, 61, 228, 162, 7, 62, 70, 169, 236, 189, 249, 98, 208, 189, 174, 42, 133, 59, 122, 114, 136, 61, 155, 241, 100, 61, 109, 153, 222, 60, 51, 54, 201, 189, 192, 166, 4, 190, 245, 225, 21, 189, 171, 209, 49, 62, 148, 1, 200, 188, 247, 254, 10, 62, 154, 119, 2, 190, 139, 100, 212, 61, 77, 254, 1, 188, 172, 78, 117, 189, 131, 189, 129, 59, 87, 123, 157, 61, 156, 234, 18, 62, 110, 223, 241, 61, 36, 134, 185, 61, 31, 148, 224, 61, 232, 93, 117, 189, 76, 242, 231, 61, 10, 23, 88, 189, 217, 30, 19, 61, 198, 191, 35, 62, 81, 250, 172, 189, 75, 194, 6, 189, 3, 132, 163, 59, 87, 161, 156, 61, 11, 99, 2, 190, 64, 20, 242, 59, 64, 130, 137, 61, 59, 157, 144, 189, 141, 239, 196, 61, 157, 166, 141, 61, 54, 90, 162, 188, 107, 142, 38, 189, 39, 65, 2, 190, 52, 5, 114, 61, 160, 66, 103, 189, 124, 74, 96, 60, 5, 224, 166, 189, 112, 0, 31, 190, 57, 78, 6, 190, 158, 202, 22, 61, 160, 205, 162, 60, 186, 98, 194, 189, 65, 36, 174, 186, 245, 92, 100, 189, 192, 136, 244, 189, 6, 35, 57, 188, 22, 219, 111, 189, 245, 53, 203, 61, 172, 150, 90, 189, 178, 141, 22, 61, 156, 11, 213, 61, 254, 130, 53, 61, 150, 222, 20, 190, 226, 227, 148, 56, 204, 179, 7, 62, 64, 94, 189, 189, 101, 137, 38, 62, 41, 52, 118, 61, 233, 12, 14, 62, 35, 159, 30, 62, 35, 252, 197, 189, 129, 138, 35, 62, 115, 216, 18, 61, 11, 139, 188, 61, 14, 204, 114, 189, 224, 251, 80, 61, 7, 78, 26, 62, 38, 139, 235, 61, 206, 135, 249, 61, 143, 59, 175, 58, 220, 108, 33, 190, 177, 169, 47, 61, 25, 46, 211, 189, 196, 73, 119, 61, 162, 57, 252, 187, 216, 54, 3, 61, 178, 151, 93, 189, 254, 249, 173, 61, 162, 124, 199, 61, 211, 153, 20, 62, 88, 247, 41, 190, 6, 156, 8, 190, 33, 19, 88, 61, 183, 238, 201, 189, 238, 191, 128, 189, 74, 216, 48, 190, 67, 39, 211, 61, 199, 206, 151, 61, 50, 84, 216, 189, 10, 78, 247, 189, 86, 152, 248, 189, 59, 253, 210, 189, 20, 65, 16, 190, 122, 248, 184, 61, 88, 116, 40, 62, 232, 106, 143, 61, 0, 236, 134, 188, 240, 139, 177, 60, 170, 255, 206, 61, 191, 152, 164, 189, 123, 170, 33, 62, 101, 65, 154, 60, 253, 101, 59, 61, 26, 49, 4, 189, 12, 9, 139, 189, 109, 134, 169, 189, 134, 126, 144, 60, 39, 2, 48, 62, 73, 23, 50, 189, 76, 107, 33, 61, 134, 72, 16, 62, 115, 181, 9, 61, 186, 112, 160, 61, 121, 21, 228, 60, 184, 129, 35, 190, 141, 44, 50, 62, 199, 15, 21, 62, 106, 4, 228, 188, 236, 34, 106, 189, 17, 82, 247, 189, 185, 42, 211, 61, 117, 168, 44, 190, 147, 141, 247, 189, 68, 154, 22, 189, 78, 171, 68, 61, 246, 173, 51, 190, 54, 171, 218, 189, 150, 4, 250, 61, 148, 15, 246, 61, 168, 183, 41, 62, 168, 233, 120, 189, 190, 176, 114, 61, 201, 166, 10, 190, 198, 63, 254, 61, 109, 151, 41, 190, 124, 221, 188, 59, 168, 127, 78, 187, 78, 128, 154, 61, 206, 75, 160, 61, 184, 8, 195, 189, 184, 83, 157, 188, 226, 185, 134, 60, 80, 240, 142, 189, 37, 136, 107, 61, 255, 221, 39, 190, 39, 78, 190, 60, 36, 59, 234, 61, 152, 213, 46, 189, 125, 60, 7, 189, 28, 179, 43, 62, 51, 65, 88, 189, 195, 251, 137, 61, 66, 151, 131, 189, 115, 148, 29, 190, 248, 33, 4, 190, 85, 61, 13, 188, 151, 230, 144, 61, 240, 105, 9, 62, 248, 16, 139, 61, 120, 169, 138, 188, 253, 102, 52, 190, 163, 151, 81, 61, 114, 141, 48, 62, 189, 54, 69, 61, 49, 93, 125, 189, 192, 178, 50, 190, 80, 15, 183, 61, 203, 13, 35, 61, 10, 169, 6, 62, 49, 98, 4, 62, 30, 141, 238, 189, 233, 72, 101, 189, 120, 68, 72, 188, 164, 187, 191, 188, 61, 30, 14, 62, 57, 160, 23, 190, 11, 36, 99, 60, 100, 146, 91, 60, 224, 64, 223, 60, 46, 184, 46, 190, 241, 124, 98, 188, 59, 91, 80, 189, 65, 68, 79, 189, 128, 127, 51, 190, 243, 3, 50, 61, 29, 67, 138, 59, 18, 17, 24, 190, 60, 204, 25, 190, 206, 81, 153, 61, 116, 30, 149, 189, 37, 180, 210, 189, 155, 129, 165, 61, 62, 214, 140, 189, 108, 51, 147, 188, 252, 28, 139, 189, 10, 42, 114, 188, 243, 205, 6, 62, 152, 52, 168, 60, 159, 255, 231, 60, 204, 102, 191, 61, 181, 109, 189, 189, 18, 190, 170, 60, 68, 218, 143, 189, 105, 205, 144, 188, 203, 79, 198, 189, 24, 230, 64, 189, 166, 238, 183, 61, 149, 50, 3, 62, 87, 169, 11, 190, 40, 15, 40, 62, 32, 216, 90, 189, 171, 137, 69, 61, 190, 67, 22, 190, 153, 163, 168, 61, 57, 232, 10, 62, 199, 83, 47, 190, 101, 35, 185, 189, 128, 48, 1, 190, 121, 64, 13, 190, 158, 71, 4, 190, 150, 171, 86, 61, 142, 144, 24, 62, 184, 105, 37, 190, 229, 174, 96, 186, 35, 186, 21, 186, 239, 107, 91, 189, 32, 197, 29, 62, 145, 52, 139, 61, 25, 132, 130, 61, 81, 55, 48, 62, 210, 152, 46, 190, 128, 89, 255, 189, 3, 140, 218, 188, 228, 68, 149, 189, 55, 13, 162, 61, 131, 55, 45, 62, 226, 185, 204, 61, 203, 215, 254, 59, 187, 67, 212, 189, 237, 118, 74, 186, 190, 78, 206, 61, 0, 207, 194, 189, 161, 176, 129, 61, 216, 189, 226, 61, 152, 152, 84, 60, 14, 139, 108, 189, 234, 129, 198, 189, 57, 26, 233, 61, 173, 66, 230, 189, 71, 4, 206, 61, 234, 76, 245, 187, 78, 72, 69, 61, 215, 229, 8, 190, 149, 111, 171, 189, 5, 11, 219, 189, 57, 74, 247, 189, 236, 77, 186, 61, 61, 134, 25, 62, 82, 180, 9, 61, 251, 193, 118, 61, 13, 42, 129, 189, 70, 237, 31, 189, 55, 230, 230, 188, 104, 21, 37, 61, 128, 248, 207, 188, 143, 41, 113, 61, 122, 42, 41, 189, 110, 48, 222, 189, 33, 100, 5, 190, 104, 71, 33, 190, 42, 46, 252, 188, 175, 176, 8, 190, 50, 147, 17, 62, 91, 159, 170, 60, 63, 139, 25, 61, 227, 152, 253, 57, 195, 58, 18, 187, 143, 129, 201, 188, 238, 201, 231, 189, 119, 18, 138, 189, 254, 211, 50, 61, 170, 180, 32, 62, 10, 167, 44, 62, 199, 183, 245, 60, 20, 75, 50, 189, 223, 156, 171, 189, 240, 240, 19, 190, 216, 91, 9, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 64, 78, 61, 249, 49, 240, 61, 189, 212, 89, 60, 109, 242, 179, 61, 208, 60, 202, 189, 27, 1, 103, 61, 6, 206, 254, 60, 109, 109, 17, 190, 229, 149, 252, 189, 222, 249, 237, 61, 135, 35, 2, 190, 173, 23, 28, 62, 162, 101, 171, 61, 192, 190, 4, 62, 31, 238, 5, 62, 165, 41, 253, 189, 191, 119, 164, 61, 1, 255, 201, 61, 81, 58, 210, 189, 49, 15, 51, 61, 177, 133, 26, 62, 129, 57, 7, 62, 218, 226, 124, 188, 10, 43, 34, 190, 206, 201, 229, 187, 232, 11, 13, 62, 148, 37, 136, 188, 179, 128, 230, 61, 250, 186, 1, 62, 88, 68, 241, 189, 151, 86, 185, 61, 237, 145, 121, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 137, 35, 190, 39, 202, 30, 60, 248, 177, 202, 189, 65, 121, 43, 61, 149, 152, 2, 61, 48, 192, 237, 189, 222, 39, 25, 62, 19, 28, 208, 187, 42, 251, 1, 61, 111, 18, 40, 190, 87, 167, 32, 190, 235, 137, 175, 188, 204, 103, 4, 62, 118, 1, 226, 189, 87, 173, 127, 60, 112, 192, 111, 189, 10, 219, 48, 62, 180, 51, 150, 61, 40, 75, 27, 62, 192, 230, 164, 61, 72, 116, 7, 190, 183, 7, 160, 189, 164, 85, 32, 62, 10, 185, 177, 61, 4, 11, 168, 61, 214, 41, 35, 190, 223, 92, 27, 62, 139, 120, 31, 62, 9, 159, 90, 61, 124, 23, 199, 61, 98, 73, 173, 61, 21, 170, 189, 61, 53, 242, 37, 62, 119, 191, 178, 189, 146, 134, 24, 188, 21, 106, 36, 62, 30, 155, 0, 190, 102, 7, 218, 189, 79, 177, 143, 61, 10, 167, 243, 61, 240, 243, 28, 190, 32, 226, 186, 189, 35, 9, 72, 61, 129, 224, 25, 190, 61, 230, 39, 190, 194, 73, 27, 190, 244, 60, 22, 60, 172, 140, 4, 189, 174, 217, 248, 189, 125, 128, 156, 189, 217, 121, 245, 61, 90, 92, 28, 189, 152, 227, 222, 61, 242, 33, 12, 190, 16, 4, 19, 190, 245, 112, 144, 60, 60, 204, 128, 61, 0, 136, 15, 190, 208, 232, 131, 189, 1, 242, 117, 61, 156, 128, 14, 62, 254, 198, 23, 62, 137, 47, 73, 187, 25, 143, 194, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 137, 102, 61, 70, 154, 22, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {242, 22, 149, 63, 64, 215, 67, 60, 243, 153, 15, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {158, 253, 185, 61, 226, 236, 166, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0091/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}