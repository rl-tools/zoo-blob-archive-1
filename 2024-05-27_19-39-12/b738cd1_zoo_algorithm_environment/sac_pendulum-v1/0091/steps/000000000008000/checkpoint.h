// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 30, 83, 191, 5, 104, 57, 191, 240, 240, 227, 190, 156, 218, 12, 190, 200, 129, 62, 191, 253, 180, 101, 189, 225, 12, 46, 63, 165, 148, 197, 189, 138, 247, 125, 62, 145, 104, 62, 190, 228, 32, 165, 63, 175, 235, 19, 190, 54, 133, 76, 63, 211, 112, 224, 190, 118, 120, 220, 190, 51, 85, 163, 190, 110, 158, 122, 62, 32, 71, 245, 62, 194, 44, 2, 190, 248, 165, 4, 191, 30, 30, 205, 190, 152, 199, 94, 190, 144, 150, 165, 62, 33, 118, 49, 191, 17, 79, 44, 191, 75, 151, 128, 190, 46, 156, 0, 191, 245, 82, 148, 190, 241, 237, 238, 190, 155, 140, 132, 62, 28, 210, 166, 190, 114, 99, 134, 62, 119, 1, 43, 190, 152, 104, 193, 62, 177, 96, 6, 191, 14, 76, 191, 61, 137, 121, 147, 62, 104, 71, 195, 62, 81, 118, 172, 62, 143, 71, 161, 190, 179, 204, 43, 191, 65, 55, 34, 189, 198, 153, 180, 61, 211, 166, 80, 63, 50, 10, 7, 61, 252, 54, 17, 62, 191, 237, 36, 190, 116, 199, 99, 190, 79, 117, 147, 190, 195, 29, 214, 190, 142, 173, 158, 189, 208, 126, 33, 63, 58, 5, 121, 191, 89, 210, 165, 190, 143, 164, 40, 191, 42, 1, 77, 63, 136, 179, 17, 61, 233, 115, 97, 189, 181, 245, 6, 191, 4, 160, 14, 63, 168, 241, 222, 62, 103, 155, 139, 190, 56, 65, 177, 190, 102, 127, 46, 63, 48, 88, 91, 63, 122, 230, 57, 62, 153, 233, 77, 63, 245, 243, 77, 190, 7, 44, 170, 190, 216, 103, 41, 190, 190, 29, 85, 61, 159, 167, 163, 62, 139, 187, 12, 190, 167, 31, 189, 62, 102, 216, 147, 190, 58, 150, 77, 191, 79, 186, 234, 189, 209, 127, 96, 188, 212, 226, 32, 191, 204, 54, 31, 190, 80, 91, 13, 191, 89, 213, 95, 63, 103, 100, 22, 63, 108, 154, 155, 62, 143, 62, 10, 63, 194, 177, 214, 62, 33, 112, 61, 190, 182, 38, 210, 62, 167, 26, 107, 63, 223, 97, 228, 62, 152, 95, 153, 190, 102, 81, 101, 191, 94, 212, 244, 190, 197, 106, 11, 63, 26, 177, 29, 191, 114, 164, 214, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 20, 231, 190, 190, 98, 46, 191, 87, 2, 6, 190, 7, 24, 167, 62, 160, 15, 136, 61, 238, 101, 155, 190, 231, 192, 80, 62, 71, 83, 140, 189, 22, 142, 111, 189, 187, 246, 111, 190, 198, 23, 172, 62, 25, 174, 16, 63, 36, 120, 122, 191, 68, 250, 237, 62, 252, 243, 205, 62, 183, 243, 169, 190, 220, 230, 142, 62, 5, 81, 174, 190, 101, 101, 35, 62, 105, 51, 115, 62, 27, 6, 131, 190, 50, 45, 140, 62, 164, 159, 143, 62, 110, 58, 246, 190, 204, 230, 34, 63, 205, 165, 112, 59, 122, 79, 189, 61, 3, 250, 34, 191, 174, 26, 104, 190, 158, 245, 231, 189, 253, 83, 123, 61, 142, 49, 159, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 105, 247, 189, 56, 14, 149, 190, 146, 236, 59, 62, 207, 131, 35, 62, 156, 106, 68, 190, 100, 46, 134, 190, 248, 50, 51, 61, 56, 32, 240, 61, 176, 222, 136, 189, 21, 216, 77, 189, 143, 171, 32, 62, 125, 30, 188, 189, 53, 119, 6, 61, 22, 251, 197, 189, 110, 106, 231, 61, 72, 100, 79, 190, 193, 125, 147, 61, 225, 195, 39, 191, 50, 181, 125, 62, 101, 91, 21, 190, 1, 93, 19, 190, 104, 44, 137, 62, 137, 109, 70, 190, 27, 218, 32, 190, 103, 98, 99, 188, 247, 217, 181, 61, 83, 47, 32, 61, 210, 99, 156, 62, 109, 237, 81, 62, 179, 186, 12, 189, 70, 201, 21, 62, 76, 94, 8, 190, 224, 196, 86, 62, 20, 132, 207, 190, 97, 161, 162, 61, 98, 187, 59, 62, 245, 136, 212, 189, 86, 92, 124, 190, 85, 88, 161, 189, 228, 15, 48, 62, 244, 182, 82, 189, 127, 166, 14, 190, 50, 58, 243, 60, 246, 116, 200, 62, 149, 169, 108, 190, 79, 98, 178, 61, 8, 228, 44, 61, 142, 232, 45, 190, 108, 64, 5, 190, 160, 221, 161, 190, 234, 31, 11, 189, 67, 221, 59, 189, 163, 251, 138, 190, 40, 237, 143, 62, 5, 179, 145, 62, 167, 17, 71, 189, 165, 114, 65, 62, 93, 60, 218, 61, 154, 44, 231, 189, 123, 191, 39, 190, 4, 172, 98, 189, 160, 182, 131, 60, 54, 60, 174, 189, 92, 152, 104, 190, 184, 112, 81, 61, 23, 94, 213, 190, 194, 80, 172, 189, 130, 109, 4, 62, 88, 198, 182, 189, 40, 207, 156, 189, 133, 53, 189, 61, 12, 42, 247, 61, 253, 193, 174, 61, 20, 224, 175, 61, 182, 181, 198, 61, 247, 84, 140, 61, 53, 93, 238, 189, 117, 228, 165, 61, 207, 75, 193, 188, 112, 179, 202, 190, 218, 171, 0, 62, 77, 66, 32, 191, 26, 131, 138, 189, 22, 219, 93, 62, 186, 28, 127, 190, 100, 108, 107, 62, 243, 134, 137, 190, 75, 166, 228, 189, 190, 144, 47, 62, 89, 108, 207, 61, 16, 190, 219, 189, 105, 175, 6, 62, 30, 18, 200, 61, 61, 188, 7, 62, 197, 242, 107, 62, 9, 170, 128, 190, 221, 178, 77, 60, 228, 108, 80, 190, 191, 15, 129, 189, 169, 166, 154, 62, 75, 73, 148, 190, 41, 207, 57, 190, 198, 174, 185, 187, 255, 255, 139, 190, 39, 97, 51, 62, 68, 95, 227, 190, 138, 227, 4, 187, 128, 182, 71, 189, 50, 33, 29, 191, 196, 127, 117, 61, 149, 208, 29, 189, 161, 217, 192, 190, 171, 142, 248, 61, 130, 51, 22, 190, 56, 102, 131, 62, 168, 164, 18, 191, 218, 184, 242, 190, 221, 118, 75, 62, 202, 46, 121, 190, 61, 229, 255, 190, 151, 28, 28, 61, 172, 205, 111, 62, 203, 116, 175, 188, 206, 231, 162, 60, 6, 245, 248, 61, 187, 101, 173, 61, 48, 33, 37, 62, 224, 98, 161, 189, 118, 159, 173, 190, 241, 73, 127, 62, 74, 253, 141, 189, 159, 127, 83, 190, 129, 233, 145, 62, 17, 67, 78, 62, 16, 175, 232, 189, 146, 92, 86, 190, 206, 7, 5, 190, 92, 251, 185, 189, 238, 220, 157, 190, 107, 158, 88, 62, 24, 197, 51, 61, 220, 195, 45, 61, 121, 238, 37, 60, 191, 235, 240, 60, 84, 70, 72, 190, 68, 94, 90, 62, 16, 59, 185, 62, 227, 185, 13, 62, 253, 136, 210, 189, 66, 177, 49, 62, 207, 172, 196, 61, 84, 159, 120, 188, 27, 121, 216, 189, 145, 142, 36, 188, 242, 215, 203, 189, 184, 137, 41, 191, 147, 125, 5, 189, 49, 94, 40, 190, 93, 93, 88, 190, 239, 154, 69, 62, 103, 145, 20, 62, 82, 97, 211, 190, 224, 3, 234, 189, 113, 170, 196, 188, 83, 94, 169, 190, 99, 126, 91, 191, 22, 179, 132, 60, 245, 39, 16, 187, 246, 17, 180, 61, 233, 145, 74, 62, 44, 112, 222, 61, 221, 22, 217, 60, 160, 109, 58, 188, 39, 28, 232, 61, 205, 227, 220, 61, 72, 82, 189, 189, 131, 31, 203, 61, 124, 31, 49, 191, 239, 24, 18, 62, 52, 124, 35, 191, 248, 180, 209, 190, 207, 28, 185, 62, 171, 108, 12, 190, 210, 168, 215, 189, 91, 96, 176, 62, 221, 66, 66, 62, 78, 194, 17, 62, 6, 238, 176, 61, 36, 34, 165, 60, 123, 11, 19, 189, 2, 221, 9, 62, 33, 189, 250, 189, 163, 48, 157, 190, 21, 239, 155, 62, 105, 192, 114, 190, 3, 55, 75, 62, 171, 194, 202, 190, 136, 1, 189, 189, 198, 37, 116, 190, 40, 253, 86, 189, 155, 105, 156, 60, 39, 78, 1, 191, 45, 160, 88, 189, 83, 175, 195, 190, 222, 96, 182, 190, 33, 18, 6, 62, 154, 172, 68, 189, 135, 134, 16, 190, 168, 72, 37, 190, 36, 135, 106, 60, 10, 57, 148, 62, 203, 72, 143, 190, 243, 167, 86, 189, 106, 130, 181, 189, 73, 14, 231, 190, 49, 150, 70, 190, 173, 21, 199, 61, 157, 23, 105, 62, 65, 200, 16, 61, 45, 205, 144, 61, 28, 73, 255, 190, 13, 110, 186, 187, 226, 172, 0, 190, 132, 235, 49, 61, 158, 21, 152, 189, 65, 93, 52, 189, 143, 117, 197, 189, 55, 125, 250, 189, 252, 243, 184, 189, 183, 3, 168, 188, 126, 168, 36, 60, 126, 124, 182, 189, 177, 106, 144, 61, 153, 11, 83, 61, 46, 142, 253, 61, 41, 94, 27, 62, 45, 138, 236, 189, 229, 138, 41, 190, 146, 47, 209, 61, 179, 193, 38, 190, 76, 145, 9, 190, 96, 105, 238, 189, 11, 166, 239, 60, 225, 30, 248, 189, 69, 253, 201, 189, 234, 30, 52, 190, 27, 188, 155, 61, 88, 113, 81, 189, 193, 231, 179, 61, 125, 83, 29, 189, 150, 255, 21, 61, 172, 208, 85, 189, 138, 196, 51, 190, 3, 121, 15, 190, 140, 64, 40, 190, 215, 209, 140, 61, 4, 20, 35, 190, 198, 116, 61, 62, 69, 245, 25, 60, 49, 188, 68, 61, 119, 179, 88, 62, 164, 207, 141, 62, 190, 219, 1, 62, 80, 173, 130, 189, 146, 158, 44, 61, 168, 80, 198, 61, 42, 20, 139, 190, 23, 63, 110, 60, 23, 2, 20, 62, 72, 125, 158, 189, 110, 200, 165, 190, 30, 63, 124, 189, 112, 39, 192, 60, 193, 172, 32, 63, 87, 184, 98, 189, 91, 55, 110, 62, 239, 224, 142, 61, 102, 45, 163, 190, 152, 46, 226, 61, 129, 76, 137, 61, 24, 210, 55, 189, 37, 139, 117, 189, 20, 207, 110, 190, 191, 149, 104, 59, 230, 178, 16, 61, 56, 130, 66, 190, 126, 106, 89, 190, 2, 210, 91, 62, 80, 217, 127, 189, 155, 5, 166, 190, 234, 228, 175, 62, 217, 255, 50, 190, 111, 210, 162, 189, 86, 83, 99, 190, 63, 66, 149, 189, 0, 29, 192, 61, 72, 150, 214, 61, 108, 134, 81, 187, 18, 128, 165, 61, 43, 185, 7, 62, 54, 18, 213, 189, 66, 133, 128, 190, 231, 59, 0, 190, 16, 52, 218, 186, 82, 228, 5, 190, 239, 221, 12, 191, 166, 43, 33, 190, 206, 14, 188, 188, 95, 84, 110, 190, 66, 161, 60, 62, 101, 109, 207, 189, 244, 70, 40, 190, 221, 215, 62, 62, 10, 66, 150, 60, 220, 89, 184, 61, 121, 73, 131, 62, 98, 110, 94, 62, 249, 54, 214, 188, 251, 110, 133, 61, 199, 121, 75, 189, 49, 185, 100, 190, 23, 175, 210, 189, 198, 99, 175, 61, 50, 209, 188, 190, 149, 2, 170, 62, 211, 185, 209, 62, 159, 74, 150, 188, 206, 32, 155, 189, 95, 111, 178, 189, 53, 26, 10, 62, 211, 211, 145, 190, 1, 219, 73, 61, 82, 112, 114, 188, 208, 46, 131, 189, 119, 45, 188, 190, 80, 235, 97, 189, 140, 80, 98, 189, 37, 27, 151, 62, 222, 98, 213, 190, 238, 57, 128, 62, 153, 132, 184, 62, 212, 191, 168, 190, 80, 16, 50, 62, 68, 190, 23, 62, 146, 34, 0, 190, 246, 101, 184, 190, 39, 77, 237, 60, 39, 109, 44, 62, 73, 206, 163, 62, 19, 244, 51, 190, 211, 123, 161, 189, 176, 144, 149, 62, 197, 221, 53, 62, 221, 95, 188, 190, 145, 159, 156, 61, 23, 115, 248, 60, 207, 216, 0, 190, 251, 73, 227, 189, 69, 253, 26, 62, 217, 194, 249, 189, 163, 236, 237, 61, 176, 38, 154, 190, 253, 142, 3, 62, 163, 74, 80, 62, 149, 21, 157, 190, 184, 134, 7, 189, 136, 247, 17, 62, 10, 128, 223, 189, 24, 188, 94, 59, 183, 170, 196, 190, 25, 242, 219, 61, 51, 18, 192, 189, 243, 155, 120, 190, 109, 66, 223, 61, 163, 181, 19, 189, 205, 67, 133, 189, 115, 43, 55, 62, 226, 63, 186, 61, 131, 192, 161, 61, 213, 95, 82, 62, 126, 42, 144, 61, 183, 163, 39, 62, 191, 219, 6, 190, 23, 214, 153, 190, 84, 179, 30, 62, 63, 64, 77, 190, 33, 210, 148, 189, 232, 63, 39, 190, 36, 94, 234, 61, 247, 175, 61, 62, 20, 98, 164, 61, 164, 173, 149, 189, 164, 78, 109, 60, 216, 36, 220, 188, 49, 6, 31, 189, 23, 127, 4, 62, 93, 216, 44, 190, 164, 136, 236, 59, 220, 102, 21, 62, 230, 124, 151, 61, 116, 40, 56, 61, 29, 126, 165, 189, 205, 160, 116, 62, 165, 216, 16, 62, 201, 58, 254, 189, 27, 95, 43, 62, 93, 135, 235, 60, 57, 57, 3, 190, 121, 111, 232, 61, 152, 211, 86, 62, 63, 174, 82, 60, 86, 1, 34, 190, 73, 216, 81, 190, 24, 78, 150, 60, 143, 13, 184, 189, 114, 206, 125, 61, 240, 127, 66, 62, 141, 39, 233, 190, 11, 54, 91, 62, 190, 63, 92, 62, 166, 60, 84, 189, 45, 37, 63, 62, 114, 160, 163, 60, 248, 219, 0, 62, 208, 55, 205, 61, 72, 185, 57, 62, 200, 169, 36, 189, 140, 7, 4, 62, 151, 151, 197, 189, 195, 177, 56, 187, 60, 211, 153, 61, 245, 21, 109, 190, 144, 55, 133, 189, 2, 214, 223, 190, 211, 76, 243, 61, 201, 131, 6, 187, 122, 254, 163, 190, 61, 102, 62, 62, 141, 144, 15, 61, 115, 36, 55, 189, 37, 171, 2, 190, 73, 195, 173, 189, 208, 101, 43, 61, 142, 84, 42, 190, 122, 209, 236, 189, 109, 206, 31, 189, 78, 171, 133, 61, 155, 164, 57, 189, 18, 73, 169, 189, 136, 59, 42, 63, 255, 179, 247, 61, 139, 146, 108, 62, 83, 241, 169, 62, 193, 64, 199, 62, 99, 80, 70, 190, 59, 204, 138, 189, 62, 16, 178, 190, 151, 130, 137, 190, 99, 189, 143, 61, 213, 145, 92, 189, 228, 85, 7, 190, 28, 218, 45, 189, 254, 62, 135, 62, 172, 146, 94, 62, 84, 169, 110, 190, 143, 68, 38, 63, 233, 9, 12, 62, 45, 91, 181, 61, 132, 105, 254, 62, 193, 83, 108, 189, 60, 69, 134, 188, 84, 69, 200, 188, 27, 57, 69, 61, 116, 84, 68, 190, 129, 184, 35, 190, 157, 140, 87, 191, 3, 249, 120, 61, 242, 71, 75, 190, 69, 95, 25, 58, 52, 16, 197, 62, 191, 41, 30, 191, 161, 50, 167, 62, 100, 27, 240, 189, 92, 94, 223, 61, 128, 223, 13, 61, 192, 102, 55, 61, 55, 61, 164, 190, 24, 211, 147, 190, 130, 116, 68, 190, 6, 197, 13, 190, 56, 148, 169, 61, 227, 133, 250, 61, 218, 58, 68, 190, 6, 149, 9, 61, 151, 253, 163, 62, 31, 73, 236, 189, 192, 128, 76, 61, 4, 215, 236, 61, 3, 240, 116, 62, 185, 54, 238, 61, 221, 196, 169, 189, 73, 147, 2, 190, 254, 150, 126, 61, 81, 35, 143, 61, 0, 162, 50, 61, 113, 138, 68, 62, 173, 0, 52, 190, 33, 145, 32, 191, 64, 130, 96, 62, 252, 241, 236, 59, 71, 202, 16, 191, 69, 51, 14, 62, 49, 211, 126, 191, 30, 27, 104, 60, 223, 52, 0, 62, 248, 76, 185, 62, 219, 187, 13, 191, 231, 80, 144, 60, 216, 39, 242, 189, 8, 223, 181, 190, 190, 215, 132, 190, 176, 29, 189, 190, 243, 236, 223, 62, 133, 141, 197, 190, 2, 31, 23, 62, 198, 114, 7, 190, 94, 176, 141, 62, 32, 149, 38, 62, 105, 123, 21, 62, 177, 148, 74, 190, 153, 184, 239, 61, 101, 95, 11, 190, 84, 156, 168, 190, 224, 105, 13, 62, 225, 5, 42, 191, 129, 48, 66, 190, 9, 41, 131, 62, 249, 84, 130, 62, 115, 123, 177, 190, 167, 129, 15, 62, 110, 131, 187, 190, 169, 105, 224, 60, 249, 58, 56, 191, 125, 158, 157, 59, 30, 12, 224, 190, 231, 132, 169, 62, 36, 129, 207, 61, 180, 100, 133, 190, 80, 13, 31, 62, 112, 18, 137, 62, 229, 92, 130, 190, 118, 150, 137, 190, 13, 89, 205, 189, 2, 206, 22, 190, 207, 169, 155, 190, 130, 10, 175, 61, 200, 187, 128, 61, 246, 90, 104, 61, 224, 183, 219, 189, 66, 31, 74, 61, 196, 113, 32, 62, 57, 41, 90, 61, 27, 70, 141, 190, 195, 198, 35, 62, 232, 147, 84, 62, 93, 128, 50, 189, 40, 180, 110, 62, 198, 103, 182, 189, 68, 117, 67, 189, 125, 100, 98, 61, 154, 200, 134, 190, 129, 60, 135, 190, 123, 235, 227, 62, 164, 214, 43, 190, 130, 139, 247, 190, 13, 18, 138, 189, 74, 38, 254, 189, 59, 189, 13, 63, 27, 111, 47, 190, 110, 174, 163, 190, 100, 156, 135, 62, 64, 189, 24, 62, 24, 248, 33, 190, 76, 148, 166, 190, 44, 14, 130, 190, 226, 135, 152, 189, 242, 65, 20, 189, 151, 40, 47, 62, 191, 60, 242, 59, 117, 177, 171, 188, 7, 247, 146, 59, 4, 79, 224, 60, 173, 198, 65, 62, 11, 253, 102, 62, 246, 70, 67, 62, 37, 19, 97, 62, 80, 244, 142, 62, 58, 110, 127, 189, 58, 214, 13, 189, 148, 247, 192, 189, 144, 57, 132, 189, 184, 148, 229, 189, 212, 123, 154, 59, 169, 236, 74, 191, 166, 15, 135, 190, 20, 202, 134, 190, 25, 106, 139, 190, 153, 174, 76, 62, 130, 10, 178, 191, 98, 164, 42, 62, 14, 170, 40, 190, 147, 107, 255, 61, 168, 62, 152, 189, 179, 197, 186, 62, 156, 204, 62, 190, 229, 121, 134, 191, 78, 230, 168, 191, 217, 226, 222, 189, 206, 146, 156, 189, 45, 219, 105, 62, 78, 171, 176, 190, 80, 57, 4, 62, 163, 22, 152, 61, 191, 184, 89, 62, 182, 38, 26, 62, 228, 126, 122, 62, 45, 163, 213, 62, 231, 147, 230, 61, 255, 135, 71, 60, 213, 232, 40, 190, 100, 147, 170, 61, 72, 110, 47, 190, 158, 96, 30, 62, 38, 43, 150, 62, 104, 150, 151, 191, 3, 137, 50, 191, 102, 73, 161, 61, 197, 37, 149, 190, 32, 10, 60, 191, 94, 199, 149, 189, 150, 231, 78, 62, 21, 55, 228, 190, 100, 110, 14, 61, 104, 242, 114, 62, 243, 35, 102, 190, 42, 52, 107, 190, 95, 238, 74, 62, 136, 108, 18, 62, 54, 98, 115, 61, 230, 1, 217, 61, 85, 213, 94, 62, 128, 114, 93, 61, 153, 24, 152, 190, 27, 137, 254, 189, 164, 105, 255, 60, 235, 96, 185, 188, 71, 191, 19, 62, 73, 36, 2, 191, 157, 69, 137, 61, 46, 186, 211, 189, 124, 120, 170, 190, 133, 4, 138, 62, 168, 226, 75, 190, 85, 170, 203, 59, 166, 154, 220, 189, 13, 43, 96, 189, 99, 226, 249, 188, 233, 213, 94, 62, 57, 156, 189, 189, 41, 38, 118, 62, 206, 96, 54, 62, 60, 147, 143, 190, 148, 48, 83, 189, 126, 172, 217, 190, 127, 202, 149, 62, 248, 94, 19, 190, 134, 226, 188, 60, 125, 190, 214, 190, 253, 87, 28, 62, 148, 96, 20, 62, 158, 247, 14, 62, 6, 47, 64, 62, 191, 241, 132, 188, 40, 195, 3, 62, 114, 115, 137, 189, 60, 166, 132, 61, 255, 198, 76, 189, 171, 229, 114, 189, 175, 103, 47, 190, 255, 9, 34, 191, 68, 124, 76, 190, 42, 156, 43, 190, 212, 33, 192, 190, 255, 253, 192, 62, 62, 193, 198, 189, 145, 223, 234, 58, 96, 127, 125, 62, 11, 83, 221, 61, 68, 128, 31, 62, 154, 90, 42, 62, 161, 85, 131, 189, 231, 118, 213, 60, 238, 102, 103, 189, 106, 147, 147, 190, 38, 215, 95, 185, 229, 201, 165, 62, 0, 124, 27, 62, 160, 209, 195, 189, 70, 192, 173, 62, 133, 150, 167, 187, 203, 173, 103, 61, 142, 171, 137, 60, 238, 165, 76, 189, 160, 89, 148, 190, 60, 36, 251, 189, 129, 137, 221, 61, 28, 243, 12, 189, 246, 26, 29, 61, 105, 89, 247, 61, 163, 172, 37, 62, 219, 77, 148, 190, 37, 42, 154, 62, 91, 15, 153, 190, 121, 16, 255, 189, 228, 79, 149, 62, 240, 160, 195, 61, 16, 98, 140, 62, 154, 157, 171, 61, 9, 143, 204, 61, 254, 147, 178, 190, 58, 193, 217, 189, 84, 142, 150, 190, 168, 191, 102, 61, 14, 220, 106, 188, 173, 64, 94, 189, 127, 231, 145, 59, 177, 114, 249, 190, 166, 81, 113, 62, 11, 183, 252, 60, 135, 98, 123, 190, 74, 72, 111, 62, 17, 158, 14, 190, 187, 191, 45, 61, 210, 90, 55, 190, 109, 52, 209, 190, 210, 38, 82, 189, 234, 224, 213, 186, 233, 120, 123, 62, 134, 81, 203, 188, 133, 3, 166, 62, 152, 234, 4, 189, 146, 139, 135, 61, 184, 94, 185, 62, 185, 190, 145, 62, 163, 187, 153, 189, 111, 121, 133, 62, 250, 45, 36, 62, 170, 158, 95, 190, 114, 58, 140, 60, 55, 116, 255, 189, 8, 1, 130, 190, 253, 156, 156, 61, 55, 51, 32, 190, 16, 99, 59, 191, 0, 128, 176, 61, 188, 177, 132, 190, 33, 51, 245, 189, 140, 185, 248, 61, 226, 95, 137, 189, 80, 163, 206, 62, 44, 149, 133, 61, 115, 11, 171, 61, 179, 107, 155, 60, 135, 82, 23, 190, 172, 1, 166, 189, 40, 235, 219, 61, 5, 86, 2, 62, 66, 214, 10, 191, 64, 241, 118, 61, 122, 249, 222, 60, 99, 121, 93, 190, 173, 100, 60, 61, 228, 62, 82, 59, 34, 35, 58, 62, 218, 1, 69, 189, 18, 240, 187, 62, 193, 160, 84, 62, 50, 26, 45, 190, 65, 103, 200, 187, 78, 52, 47, 189, 213, 205, 52, 62, 49, 48, 4, 190, 82, 75, 62, 62, 109, 240, 147, 188, 96, 11, 114, 62, 205, 81, 76, 61, 29, 219, 238, 189, 203, 194, 73, 62, 209, 52, 205, 61, 21, 2, 57, 62, 183, 130, 60, 190, 59, 65, 82, 187, 224, 104, 30, 62, 193, 233, 207, 62, 157, 5, 26, 62, 191, 215, 171, 189, 136, 85, 157, 190, 224, 66, 246, 60, 215, 8, 65, 190, 3, 77, 28, 187, 115, 42, 137, 189, 222, 108, 113, 61, 72, 117, 142, 190, 21, 131, 112, 190, 164, 83, 213, 62, 227, 221, 128, 187, 215, 63, 61, 191, 183, 225, 98, 191, 201, 47, 150, 62, 156, 166, 247, 189, 140, 155, 129, 189, 10, 229, 155, 61, 217, 63, 128, 62, 97, 215, 216, 189, 144, 219, 61, 60, 38, 9, 22, 191, 243, 160, 63, 190, 37, 7, 31, 190, 115, 15, 163, 61, 65, 213, 253, 61, 31, 198, 105, 61, 47, 255, 29, 190, 118, 18, 234, 189, 200, 117, 235, 62, 81, 167, 250, 61, 92, 27, 4, 191, 80, 93, 178, 62, 111, 122, 160, 62, 147, 105, 235, 59, 110, 215, 232, 189, 99, 231, 36, 190, 59, 252, 102, 190, 2, 166, 17, 189, 91, 121, 98, 62, 68, 176, 29, 61, 131, 201, 135, 61, 56, 141, 7, 62, 246, 8, 146, 62, 61, 60, 0, 62, 24, 238, 175, 62, 43, 193, 152, 190, 215, 250, 153, 62, 177, 204, 220, 62, 27, 194, 83, 61, 136, 225, 32, 61, 193, 233, 4, 189, 86, 179, 150, 60, 184, 7, 195, 189, 160, 37, 8, 190, 226, 222, 243, 190, 33, 59, 32, 190, 81, 44, 40, 190, 172, 53, 255, 189, 243, 107, 164, 62, 148, 15, 246, 61, 168, 183, 41, 62, 147, 194, 225, 189, 140, 117, 161, 60, 199, 19, 16, 190, 165, 67, 17, 61, 141, 235, 122, 190, 187, 72, 86, 59, 168, 127, 78, 187, 17, 247, 31, 188, 193, 50, 32, 190, 243, 56, 134, 190, 208, 121, 50, 189, 231, 183, 100, 189, 175, 92, 36, 190, 37, 136, 107, 61, 84, 180, 111, 190, 127, 86, 194, 60, 49, 170, 160, 61, 222, 167, 219, 189, 125, 60, 7, 189, 125, 75, 198, 61, 147, 251, 215, 189, 19, 70, 7, 61, 241, 29, 131, 190, 89, 221, 52, 190, 61, 108, 3, 190, 206, 57, 254, 188, 151, 230, 144, 61, 13, 255, 152, 61, 248, 16, 139, 61, 120, 169, 138, 188, 80, 26, 58, 190, 163, 151, 81, 61, 135, 66, 35, 62, 180, 61, 111, 59, 25, 169, 162, 189, 137, 7, 52, 190, 100, 33, 75, 61, 122, 25, 173, 60, 237, 22, 241, 61, 49, 98, 4, 62, 26, 36, 36, 190, 169, 248, 178, 189, 124, 29, 77, 188, 140, 166, 75, 189, 15, 66, 195, 61, 37, 122, 25, 190, 17, 61, 233, 188, 100, 146, 91, 60, 50, 147, 121, 188, 49, 3, 48, 190, 241, 124, 98, 188, 203, 124, 173, 189, 190, 169, 172, 189, 128, 127, 51, 190, 130, 177, 178, 187, 150, 93, 238, 187, 97, 247, 35, 190, 173, 218, 42, 190, 206, 81, 153, 61, 181, 175, 210, 189, 151, 41, 230, 189, 41, 191, 141, 61, 200, 182, 189, 190, 252, 15, 132, 189, 19, 1, 177, 60, 134, 8, 229, 190, 82, 119, 147, 62, 148, 114, 6, 61, 76, 114, 224, 61, 52, 167, 65, 62, 90, 60, 134, 189, 19, 165, 167, 61, 84, 97, 139, 189, 120, 244, 161, 61, 143, 136, 130, 189, 163, 87, 185, 61, 35, 144, 155, 61, 78, 73, 46, 190, 171, 234, 181, 59, 238, 120, 194, 62, 39, 155, 156, 190, 100, 67, 61, 62, 110, 230, 130, 190, 61, 196, 225, 61, 155, 91, 136, 62, 31, 189, 35, 190, 175, 234, 131, 189, 251, 25, 70, 190, 53, 124, 164, 189, 98, 90, 75, 191, 115, 79, 147, 62, 224, 38, 42, 190, 249, 164, 156, 190, 21, 19, 9, 62, 39, 188, 143, 191, 152, 97, 193, 62, 176, 155, 19, 189, 173, 93, 237, 189, 54, 39, 83, 62, 124, 37, 144, 62, 85, 181, 112, 190, 232, 214, 109, 191, 100, 71, 148, 191, 50, 52, 130, 190, 139, 120, 95, 189, 78, 108, 47, 62, 205, 135, 87, 61, 57, 139, 69, 62, 206, 184, 217, 189, 152, 98, 130, 62, 238, 77, 168, 62, 46, 14, 119, 62, 105, 159, 178, 62, 12, 204, 2, 62, 58, 18, 10, 62, 219, 145, 97, 190, 154, 164, 243, 188, 77, 158, 195, 61, 243, 219, 100, 190, 190, 205, 193, 62, 188, 90, 47, 191, 89, 145, 5, 191, 249, 163, 173, 189, 180, 156, 88, 190, 83, 206, 221, 190, 29, 195, 119, 61, 200, 250, 244, 61, 128, 194, 74, 189, 90, 102, 101, 190, 101, 230, 182, 62, 104, 43, 124, 190, 69, 158, 100, 189, 134, 232, 133, 189, 208, 105, 247, 61, 140, 114, 158, 61, 8, 177, 56, 191, 65, 54, 197, 61, 22, 205, 177, 190, 109, 31, 251, 190, 32, 142, 177, 190, 71, 109, 112, 62, 79, 177, 58, 190, 148, 219, 75, 60, 39, 65, 5, 190, 192, 155, 182, 62, 40, 228, 128, 190, 121, 73, 203, 189, 218, 89, 84, 190, 170, 106, 141, 190, 183, 111, 177, 190, 51, 222, 37, 62, 126, 254, 104, 59, 241, 106, 96, 62, 205, 234, 23, 189, 196, 167, 4, 62, 46, 137, 184, 189, 128, 155, 84, 190, 38, 36, 193, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 241, 9, 62, 169, 67, 187, 62, 152, 69, 62, 62, 118, 208, 97, 62, 42, 233, 238, 60, 7, 48, 171, 62, 250, 171, 162, 60, 109, 109, 17, 190, 2, 155, 89, 190, 252, 224, 76, 62, 236, 198, 88, 190, 135, 127, 202, 62, 192, 194, 124, 62, 223, 87, 152, 62, 178, 159, 68, 62, 125, 42, 6, 61, 125, 162, 1, 62, 180, 239, 248, 61, 22, 115, 150, 189, 126, 166, 140, 62, 192, 13, 32, 62, 35, 193, 129, 62, 112, 139, 42, 187, 223, 201, 1, 190, 130, 67, 215, 188, 110, 213, 195, 62, 235, 244, 227, 187, 133, 92, 249, 188, 89, 18, 161, 61, 243, 34, 201, 189, 191, 71, 8, 62, 121, 95, 170, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 145, 159, 190, 24, 34, 18, 190, 162, 22, 128, 190, 138, 140, 245, 62, 222, 130, 132, 62, 145, 215, 76, 191, 193, 152, 185, 62, 19, 28, 208, 187, 216, 215, 173, 190, 110, 249, 136, 190, 77, 140, 39, 191, 157, 63, 151, 190, 213, 91, 48, 189, 231, 226, 0, 190, 25, 195, 245, 62, 138, 18, 139, 62, 247, 173, 53, 63, 186, 56, 62, 62, 55, 83, 242, 62, 130, 53, 94, 63, 87, 85, 197, 190, 136, 87, 207, 190, 96, 128, 75, 62, 225, 3, 235, 62, 89, 208, 31, 62, 234, 112, 41, 191, 49, 52, 189, 62, 32, 227, 7, 62, 222, 221, 23, 61, 253, 56, 46, 63, 255, 48, 4, 63, 115, 190, 237, 62, 52, 133, 108, 62, 217, 78, 124, 190, 107, 125, 219, 61, 212, 180, 145, 62, 245, 132, 167, 190, 162, 144, 207, 189, 235, 114, 201, 60, 10, 167, 243, 61, 190, 89, 9, 189, 78, 72, 178, 189, 239, 241, 124, 62, 141, 0, 48, 190, 110, 43, 88, 190, 46, 139, 66, 190, 12, 156, 8, 62, 237, 95, 42, 189, 29, 22, 14, 61, 97, 181, 167, 190, 34, 174, 106, 62, 90, 36, 35, 189, 194, 224, 85, 62, 93, 205, 95, 190, 44, 157, 133, 190, 130, 191, 151, 62, 51, 177, 37, 189, 125, 9, 70, 190, 199, 77, 172, 189, 189, 42, 34, 61, 116, 231, 231, 61, 160, 191, 4, 190, 107, 173, 6, 188, 99, 204, 97, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 112, 194, 189, 129, 68, 9, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {111, 1, 52, 191, 71, 112, 114, 191, 179, 91, 92, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 252, 194, 191, 179, 30, 13, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0091/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}