// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 144, 82, 191, 98, 216, 43, 191, 250, 134, 213, 190, 113, 82, 201, 189, 151, 133, 74, 191, 32, 87, 51, 189, 149, 168, 40, 63, 95, 235, 63, 190, 72, 67, 148, 62, 33, 86, 59, 190, 74, 238, 166, 63, 96, 89, 19, 190, 90, 172, 80, 63, 83, 14, 227, 190, 186, 209, 213, 190, 128, 67, 145, 190, 41, 88, 0, 62, 47, 9, 0, 63, 30, 221, 245, 189, 56, 194, 33, 191, 207, 90, 188, 190, 126, 46, 148, 190, 13, 198, 228, 62, 44, 34, 33, 191, 144, 40, 30, 191, 230, 198, 24, 190, 118, 89, 4, 191, 62, 166, 121, 190, 207, 138, 2, 191, 212, 36, 94, 62, 122, 38, 183, 190, 152, 195, 147, 62, 153, 253, 45, 190, 93, 19, 170, 62, 140, 197, 4, 191, 186, 80, 76, 61, 45, 135, 208, 62, 222, 20, 213, 62, 236, 19, 169, 62, 152, 120, 166, 190, 250, 187, 56, 191, 55, 16, 37, 189, 215, 175, 130, 61, 186, 241, 99, 63, 70, 101, 87, 60, 97, 160, 158, 62, 233, 157, 56, 190, 182, 207, 88, 190, 11, 128, 133, 190, 239, 236, 8, 191, 166, 15, 224, 189, 117, 124, 46, 63, 154, 119, 131, 191, 108, 27, 152, 190, 20, 127, 37, 191, 129, 147, 90, 63, 209, 187, 46, 61, 142, 17, 44, 60, 202, 161, 0, 191, 175, 164, 5, 63, 194, 251, 251, 62, 243, 142, 134, 190, 35, 110, 174, 190, 235, 55, 36, 63, 166, 72, 112, 63, 190, 197, 78, 62, 154, 213, 76, 63, 248, 102, 147, 190, 152, 57, 161, 190, 72, 230, 133, 190, 75, 42, 165, 60, 141, 13, 162, 62, 220, 98, 56, 190, 0, 25, 184, 62, 78, 214, 148, 190, 159, 89, 92, 191, 182, 63, 194, 189, 162, 123, 36, 61, 185, 32, 16, 191, 194, 92, 78, 188, 236, 14, 18, 191, 95, 11, 99, 63, 173, 150, 23, 63, 208, 185, 146, 62, 5, 162, 251, 62, 119, 39, 233, 62, 141, 69, 119, 190, 217, 165, 199, 62, 20, 21, 133, 63, 161, 160, 214, 62, 11, 180, 126, 190, 23, 78, 127, 191, 3, 196, 212, 190, 81, 35, 22, 63, 233, 6, 31, 191, 134, 239, 204, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 201, 12, 191, 128, 232, 40, 191, 188, 192, 51, 190, 86, 205, 177, 62, 249, 254, 227, 58, 88, 16, 160, 190, 159, 147, 43, 62, 254, 69, 14, 61, 185, 167, 5, 190, 238, 87, 172, 190, 52, 129, 159, 62, 169, 183, 11, 63, 120, 185, 130, 191, 196, 102, 245, 62, 24, 93, 189, 62, 251, 230, 236, 190, 255, 235, 134, 62, 15, 71, 188, 190, 244, 77, 40, 62, 54, 112, 155, 62, 218, 167, 152, 190, 40, 97, 138, 62, 186, 28, 60, 62, 123, 255, 242, 190, 7, 155, 27, 63, 133, 64, 136, 61, 102, 111, 86, 60, 71, 178, 45, 191, 54, 107, 160, 190, 217, 193, 233, 189, 138, 117, 106, 61, 94, 67, 188, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 214, 16, 190, 236, 72, 149, 190, 114, 14, 20, 62, 25, 159, 83, 62, 43, 181, 66, 190, 223, 211, 197, 190, 229, 222, 167, 186, 234, 24, 251, 61, 219, 15, 227, 189, 247, 80, 225, 189, 120, 167, 48, 62, 166, 84, 208, 189, 46, 251, 159, 189, 235, 212, 137, 190, 151, 124, 29, 62, 92, 74, 127, 190, 22, 234, 78, 189, 164, 196, 109, 191, 91, 194, 90, 62, 151, 83, 110, 190, 84, 55, 27, 190, 216, 140, 152, 62, 235, 110, 56, 190, 184, 145, 155, 190, 195, 132, 20, 59, 180, 199, 24, 189, 240, 15, 23, 60, 234, 54, 139, 62, 7, 216, 117, 62, 66, 74, 174, 189, 101, 117, 154, 61, 106, 231, 57, 190, 41, 131, 95, 62, 211, 236, 138, 190, 142, 111, 156, 61, 191, 103, 63, 62, 67, 126, 233, 189, 50, 236, 134, 190, 60, 1, 174, 189, 179, 183, 47, 62, 145, 146, 109, 189, 112, 226, 251, 189, 60, 79, 84, 61, 244, 248, 209, 62, 86, 61, 180, 190, 28, 20, 49, 62, 251, 93, 34, 61, 51, 252, 74, 190, 53, 164, 199, 189, 17, 195, 194, 190, 63, 180, 202, 187, 236, 189, 51, 187, 26, 21, 151, 190, 35, 152, 131, 62, 242, 4, 138, 62, 201, 73, 150, 189, 10, 146, 62, 62, 0, 223, 215, 61, 146, 70, 232, 189, 39, 99, 87, 190, 42, 141, 219, 189, 184, 185, 130, 186, 183, 151, 159, 189, 17, 24, 126, 190, 123, 234, 126, 61, 79, 68, 53, 190, 103, 155, 8, 190, 177, 255, 220, 61, 129, 185, 175, 189, 56, 163, 198, 189, 46, 28, 196, 61, 98, 67, 216, 61, 213, 211, 121, 61, 29, 36, 112, 61, 138, 217, 247, 61, 12, 46, 110, 61, 133, 0, 28, 190, 172, 41, 23, 62, 253, 121, 45, 188, 114, 136, 249, 190, 243, 83, 37, 62, 54, 133, 51, 191, 219, 242, 180, 189, 51, 13, 64, 62, 187, 117, 144, 190, 4, 186, 124, 62, 254, 91, 135, 190, 121, 232, 8, 190, 12, 175, 58, 62, 135, 12, 43, 62, 142, 202, 248, 189, 52, 236, 8, 62, 128, 232, 30, 61, 81, 108, 211, 61, 149, 116, 113, 62, 72, 36, 143, 190, 47, 66, 57, 61, 222, 184, 22, 191, 55, 189, 204, 61, 30, 197, 180, 62, 46, 201, 251, 190, 181, 245, 160, 189, 136, 166, 77, 61, 131, 247, 54, 190, 87, 245, 130, 62, 165, 65, 151, 190, 116, 210, 104, 61, 143, 255, 9, 189, 145, 85, 39, 190, 183, 129, 239, 61, 57, 107, 14, 60, 170, 24, 29, 191, 146, 182, 66, 62, 183, 239, 22, 191, 103, 188, 149, 62, 82, 144, 208, 190, 219, 147, 44, 191, 193, 231, 135, 62, 38, 160, 183, 190, 230, 165, 148, 190, 22, 177, 192, 61, 157, 87, 157, 62, 37, 27, 113, 61, 236, 86, 55, 62, 128, 185, 187, 61, 116, 32, 24, 62, 154, 101, 71, 62, 187, 209, 188, 190, 174, 11, 178, 190, 206, 89, 211, 62, 144, 153, 186, 189, 25, 254, 147, 189, 193, 58, 127, 62, 185, 27, 78, 62, 40, 153, 9, 190, 163, 2, 134, 190, 175, 116, 12, 190, 240, 194, 171, 189, 95, 224, 145, 190, 245, 26, 66, 62, 17, 110, 210, 60, 83, 179, 11, 61, 156, 59, 189, 60, 39, 181, 193, 60, 20, 148, 43, 190, 58, 177, 36, 62, 145, 31, 206, 62, 73, 5, 4, 62, 105, 58, 230, 189, 113, 177, 40, 62, 7, 146, 132, 61, 161, 29, 236, 188, 63, 241, 191, 189, 166, 139, 246, 57, 236, 141, 218, 189, 82, 40, 64, 191, 233, 39, 130, 59, 206, 160, 47, 190, 66, 10, 129, 190, 140, 244, 33, 62, 174, 38, 28, 62, 211, 201, 46, 190, 36, 80, 61, 190, 212, 112, 97, 188, 236, 136, 179, 190, 20, 15, 96, 191, 124, 1, 138, 60, 147, 216, 128, 188, 218, 102, 129, 61, 246, 74, 180, 61, 172, 127, 243, 61, 167, 181, 48, 187, 222, 253, 50, 189, 228, 249, 38, 62, 137, 68, 248, 61, 254, 90, 42, 190, 108, 75, 20, 62, 69, 190, 72, 191, 139, 179, 22, 62, 48, 227, 57, 191, 164, 50, 227, 190, 120, 30, 190, 62, 7, 95, 35, 190, 107, 13, 115, 190, 179, 250, 173, 62, 175, 190, 85, 62, 91, 13, 2, 62, 255, 32, 48, 61, 162, 253, 52, 189, 224, 159, 198, 188, 24, 130, 14, 62, 73, 47, 32, 190, 155, 55, 188, 190, 21, 239, 155, 62, 112, 74, 128, 190, 154, 51, 50, 62, 37, 222, 193, 190, 84, 32, 228, 188, 120, 223, 114, 190, 252, 65, 142, 59, 123, 3, 36, 61, 222, 118, 225, 190, 150, 103, 152, 189, 240, 120, 201, 190, 193, 96, 182, 190, 59, 114, 195, 61, 182, 51, 160, 189, 135, 134, 16, 190, 99, 147, 59, 190, 36, 135, 106, 60, 246, 44, 134, 62, 153, 215, 51, 190, 196, 173, 79, 189, 221, 211, 14, 190, 132, 95, 205, 190, 239, 77, 75, 190, 131, 58, 149, 61, 44, 226, 79, 62, 114, 3, 59, 61, 121, 144, 5, 61, 226, 153, 242, 190, 147, 51, 70, 189, 217, 250, 66, 190, 132, 235, 49, 61, 158, 21, 152, 189, 65, 93, 52, 189, 143, 117, 197, 189, 55, 125, 250, 189, 252, 243, 184, 189, 183, 3, 168, 188, 126, 168, 36, 60, 126, 124, 182, 189, 177, 106, 144, 61, 153, 11, 83, 61, 46, 142, 253, 61, 41, 94, 27, 62, 45, 138, 236, 189, 229, 138, 41, 190, 146, 47, 209, 61, 179, 193, 38, 190, 76, 145, 9, 190, 96, 105, 238, 189, 11, 166, 239, 60, 225, 30, 248, 189, 69, 253, 201, 189, 234, 30, 52, 190, 27, 188, 155, 61, 88, 113, 81, 189, 193, 231, 179, 61, 125, 83, 29, 189, 150, 255, 21, 61, 172, 208, 85, 189, 138, 196, 51, 190, 3, 121, 15, 190, 140, 64, 40, 190, 215, 209, 140, 61, 158, 240, 67, 190, 208, 89, 99, 189, 63, 117, 47, 188, 107, 51, 135, 61, 163, 158, 103, 62, 80, 99, 142, 62, 164, 243, 209, 61, 104, 34, 193, 187, 186, 248, 134, 61, 21, 8, 218, 61, 187, 72, 135, 190, 76, 124, 193, 188, 204, 226, 15, 62, 79, 60, 190, 189, 187, 118, 234, 190, 163, 219, 226, 61, 153, 223, 186, 188, 193, 250, 36, 63, 82, 126, 167, 189, 51, 87, 115, 62, 125, 2, 9, 62, 78, 116, 239, 190, 152, 123, 178, 61, 57, 174, 136, 61, 42, 51, 188, 189, 110, 117, 142, 189, 189, 0, 98, 190, 224, 212, 80, 60, 33, 127, 59, 62, 13, 230, 102, 190, 98, 189, 114, 190, 84, 154, 136, 62, 26, 191, 118, 189, 224, 217, 173, 190, 47, 230, 177, 62, 171, 171, 54, 190, 161, 32, 161, 189, 153, 169, 46, 190, 92, 127, 211, 189, 91, 181, 240, 61, 77, 163, 185, 61, 81, 226, 169, 60, 222, 79, 176, 61, 167, 223, 1, 62, 44, 255, 236, 189, 160, 150, 163, 190, 57, 16, 205, 189, 118, 82, 45, 187, 147, 105, 127, 190, 107, 187, 48, 191, 230, 21, 45, 190, 182, 87, 68, 61, 31, 0, 112, 190, 113, 156, 71, 62, 16, 132, 206, 189, 60, 69, 239, 189, 69, 148, 49, 62, 164, 133, 185, 189, 246, 130, 174, 61, 21, 51, 143, 62, 67, 130, 114, 62, 239, 145, 172, 60, 169, 77, 25, 61, 25, 151, 161, 189, 192, 189, 87, 190, 101, 235, 134, 190, 112, 123, 17, 62, 239, 49, 3, 191, 191, 231, 179, 62, 8, 89, 218, 62, 99, 198, 89, 189, 137, 204, 232, 188, 80, 79, 32, 189, 156, 154, 6, 62, 86, 240, 153, 190, 118, 65, 134, 61, 245, 143, 247, 59, 47, 6, 153, 189, 56, 243, 188, 190, 127, 135, 149, 61, 130, 122, 2, 190, 160, 121, 167, 62, 236, 233, 192, 190, 133, 162, 152, 62, 154, 71, 194, 62, 52, 202, 163, 190, 32, 135, 65, 62, 111, 25, 33, 62, 221, 253, 31, 190, 36, 123, 187, 190, 113, 101, 120, 61, 31, 226, 143, 62, 111, 127, 166, 62, 71, 20, 12, 190, 62, 181, 178, 189, 246, 183, 161, 62, 96, 62, 70, 62, 106, 165, 17, 190, 223, 246, 138, 61, 101, 178, 4, 187, 52, 76, 10, 190, 220, 99, 17, 190, 198, 160, 16, 62, 37, 131, 10, 190, 166, 83, 208, 61, 13, 90, 166, 190, 65, 125, 20, 62, 202, 36, 96, 62, 193, 130, 206, 190, 7, 79, 179, 61, 42, 69, 14, 62, 126, 35, 48, 190, 229, 141, 90, 61, 238, 34, 230, 190, 105, 221, 222, 61, 164, 151, 148, 189, 42, 181, 146, 190, 110, 247, 216, 61, 252, 60, 58, 189, 50, 248, 213, 189, 1, 159, 46, 62, 163, 103, 11, 62, 71, 150, 144, 61, 91, 143, 64, 62, 83, 46, 52, 188, 16, 216, 21, 62, 28, 253, 254, 189, 36, 211, 171, 190, 128, 37, 11, 62, 240, 92, 44, 190, 52, 71, 95, 189, 96, 218, 4, 190, 17, 27, 212, 61, 59, 120, 48, 62, 155, 41, 148, 61, 240, 190, 150, 189, 35, 50, 160, 186, 192, 167, 82, 188, 246, 203, 180, 188, 83, 107, 44, 62, 6, 0, 69, 190, 197, 24, 107, 61, 210, 209, 16, 62, 62, 43, 98, 61, 1, 29, 113, 61, 51, 214, 3, 190, 66, 38, 96, 62, 213, 150, 38, 62, 209, 208, 8, 190, 0, 226, 14, 62, 13, 94, 66, 60, 48, 47, 17, 190, 234, 195, 236, 61, 200, 134, 26, 62, 93, 126, 209, 59, 15, 117, 52, 190, 161, 247, 88, 190, 77, 253, 220, 59, 230, 7, 191, 189, 255, 161, 71, 61, 72, 52, 72, 62, 98, 55, 162, 190, 143, 10, 110, 62, 86, 247, 93, 62, 194, 251, 117, 189, 137, 203, 45, 62, 170, 58, 16, 60, 113, 141, 0, 62, 204, 51, 184, 61, 90, 113, 60, 62, 99, 169, 144, 188, 167, 26, 27, 62, 202, 128, 1, 190, 67, 214, 142, 61, 25, 166, 134, 61, 104, 188, 133, 190, 57, 56, 64, 189, 162, 255, 2, 191, 227, 12, 199, 61, 71, 240, 153, 60, 18, 136, 175, 190, 20, 33, 49, 62, 251, 102, 189, 60, 164, 207, 128, 189, 237, 126, 3, 190, 164, 133, 227, 189, 170, 137, 31, 61, 71, 125, 43, 190, 102, 89, 36, 190, 86, 105, 86, 189, 36, 208, 133, 61, 209, 71, 139, 189, 10, 208, 185, 189, 248, 60, 66, 63, 236, 211, 250, 61, 63, 28, 125, 62, 73, 228, 179, 62, 14, 139, 207, 62, 144, 170, 52, 190, 57, 66, 132, 189, 158, 180, 171, 190, 208, 162, 138, 190, 163, 250, 62, 61, 137, 107, 87, 189, 215, 99, 20, 190, 220, 170, 209, 189, 234, 55, 137, 62, 117, 38, 141, 62, 4, 141, 129, 190, 122, 38, 65, 63, 36, 120, 14, 62, 59, 15, 144, 61, 32, 111, 12, 63, 163, 46, 88, 189, 238, 107, 210, 56, 190, 214, 143, 188, 109, 198, 82, 61, 35, 76, 119, 190, 37, 10, 28, 190, 124, 57, 100, 191, 189, 68, 233, 61, 217, 218, 76, 190, 93, 108, 9, 59, 102, 73, 227, 62, 93, 31, 38, 191, 57, 177, 103, 62, 138, 169, 174, 189, 141, 19, 166, 61, 144, 213, 223, 60, 192, 58, 87, 61, 233, 194, 154, 190, 38, 4, 249, 190, 164, 128, 79, 190, 255, 245, 16, 190, 80, 150, 90, 189, 61, 191, 8, 62, 92, 213, 86, 190, 211, 228, 95, 60, 108, 69, 148, 62, 82, 131, 9, 190, 182, 154, 135, 61, 237, 30, 26, 62, 85, 158, 95, 62, 53, 163, 232, 61, 126, 42, 150, 189, 244, 34, 6, 190, 174, 149, 115, 61, 243, 27, 144, 61, 91, 1, 18, 60, 115, 82, 7, 62, 198, 254, 139, 190, 115, 201, 40, 191, 68, 11, 95, 62, 215, 30, 115, 60, 193, 61, 31, 191, 127, 207, 37, 62, 79, 68, 131, 191, 30, 27, 104, 60, 171, 2, 81, 62, 196, 12, 213, 62, 12, 119, 235, 190, 169, 181, 45, 61, 83, 126, 168, 59, 164, 142, 75, 190, 28, 149, 6, 190, 107, 89, 190, 190, 93, 104, 231, 62, 233, 60, 152, 190, 130, 177, 69, 62, 190, 139, 73, 190, 51, 191, 166, 62, 153, 214, 26, 62, 235, 76, 43, 62, 173, 187, 121, 190, 201, 6, 1, 62, 167, 204, 199, 189, 88, 217, 198, 190, 49, 128, 81, 62, 23, 235, 244, 190, 72, 35, 45, 190, 107, 94, 149, 62, 71, 88, 99, 62, 145, 188, 121, 190, 105, 141, 91, 62, 202, 232, 12, 190, 71, 141, 143, 61, 12, 167, 47, 191, 17, 207, 156, 190, 110, 163, 192, 190, 147, 86, 3, 63, 103, 30, 224, 61, 32, 9, 41, 190, 23, 111, 250, 61, 241, 80, 137, 62, 175, 169, 115, 190, 103, 245, 161, 190, 12, 225, 220, 189, 26, 1, 212, 189, 52, 250, 171, 190, 109, 31, 183, 61, 70, 78, 138, 61, 245, 247, 181, 61, 36, 172, 16, 190, 1, 26, 52, 59, 195, 157, 85, 62, 114, 192, 250, 185, 202, 253, 193, 190, 234, 242, 46, 62, 125, 37, 71, 62, 213, 111, 132, 189, 191, 245, 81, 62, 127, 162, 170, 189, 178, 97, 34, 189, 155, 219, 199, 59, 104, 181, 136, 190, 42, 94, 166, 190, 200, 96, 245, 62, 135, 202, 58, 190, 63, 14, 233, 190, 71, 38, 222, 189, 129, 70, 2, 190, 53, 83, 37, 63, 24, 104, 26, 190, 10, 189, 152, 190, 7, 128, 87, 62, 155, 52, 223, 61, 105, 115, 122, 190, 193, 115, 179, 190, 20, 84, 146, 190, 110, 144, 157, 189, 218, 92, 68, 188, 99, 138, 78, 62, 209, 97, 112, 189, 243, 151, 153, 60, 211, 30, 217, 59, 7, 179, 235, 188, 245, 42, 100, 62, 238, 165, 0, 62, 152, 56, 30, 62, 156, 225, 109, 62, 143, 179, 38, 62, 211, 244, 28, 189, 162, 250, 71, 189, 43, 254, 10, 190, 134, 148, 151, 189, 23, 162, 22, 189, 195, 88, 201, 188, 238, 109, 110, 191, 123, 149, 142, 190, 130, 54, 151, 190, 186, 97, 181, 190, 238, 34, 139, 61, 197, 12, 176, 191, 31, 76, 167, 62, 8, 205, 59, 190, 206, 75, 44, 62, 236, 152, 58, 189, 125, 56, 179, 62, 225, 112, 154, 189, 61, 191, 150, 191, 2, 122, 173, 191, 199, 139, 234, 189, 210, 163, 24, 190, 230, 151, 106, 62, 153, 115, 189, 190, 80, 207, 216, 61, 190, 158, 164, 61, 67, 236, 40, 62, 135, 75, 70, 62, 221, 6, 131, 62, 171, 20, 200, 62, 91, 75, 156, 61, 172, 184, 203, 61, 186, 26, 33, 190, 20, 206, 230, 61, 156, 102, 62, 190, 228, 129, 64, 62, 139, 211, 163, 62, 59, 92, 159, 191, 0, 207, 72, 191, 179, 117, 36, 62, 170, 76, 164, 190, 15, 26, 66, 191, 181, 30, 146, 188, 167, 131, 72, 62, 75, 165, 161, 190, 211, 111, 105, 187, 189, 84, 120, 62, 130, 126, 90, 190, 122, 89, 153, 190, 51, 137, 70, 62, 200, 98, 11, 62, 114, 134, 224, 60, 73, 97, 19, 61, 167, 197, 119, 62, 51, 76, 21, 61, 220, 179, 187, 190, 69, 14, 230, 189, 254, 143, 95, 61, 233, 151, 214, 189, 48, 49, 6, 62, 152, 12, 32, 191, 109, 138, 138, 60, 161, 111, 46, 190, 8, 125, 181, 190, 202, 166, 166, 62, 11, 230, 53, 190, 52, 133, 138, 189, 145, 187, 175, 189, 194, 82, 130, 189, 249, 100, 75, 189, 12, 180, 65, 62, 177, 149, 5, 190, 209, 132, 75, 62, 204, 104, 35, 62, 199, 10, 159, 190, 30, 199, 192, 188, 244, 122, 99, 190, 212, 109, 154, 62, 15, 117, 49, 190, 97, 141, 32, 60, 86, 225, 192, 190, 3, 40, 18, 62, 231, 253, 14, 62, 35, 57, 9, 62, 220, 55, 69, 62, 24, 212, 248, 186, 134, 21, 249, 61, 203, 198, 152, 189, 154, 241, 233, 61, 26, 21, 35, 189, 104, 175, 225, 189, 82, 128, 38, 190, 220, 166, 54, 191, 0, 188, 62, 190, 29, 131, 5, 190, 141, 61, 211, 190, 124, 125, 201, 62, 118, 8, 229, 189, 255, 75, 118, 61, 116, 31, 117, 62, 156, 230, 6, 62, 129, 29, 31, 62, 23, 137, 62, 62, 216, 118, 20, 190, 151, 192, 157, 61, 177, 43, 73, 189, 204, 161, 164, 190, 81, 158, 202, 188, 219, 78, 196, 62, 200, 92, 179, 61, 176, 141, 92, 189, 71, 111, 180, 62, 107, 153, 76, 60, 220, 19, 131, 61, 42, 188, 121, 60, 125, 57, 100, 189, 26, 134, 150, 190, 131, 249, 20, 190, 0, 184, 165, 61, 5, 233, 31, 189, 129, 1, 92, 189, 176, 164, 231, 61, 130, 196, 79, 62, 171, 144, 175, 190, 51, 84, 168, 62, 218, 232, 179, 190, 116, 81, 168, 190, 164, 229, 173, 62, 185, 196, 142, 61, 117, 101, 141, 62, 237, 177, 169, 61, 112, 127, 211, 61, 133, 152, 3, 191, 63, 127, 225, 189, 95, 235, 177, 190, 171, 170, 252, 61, 42, 11, 191, 189, 131, 13, 110, 189, 113, 33, 71, 61, 97, 143, 239, 190, 85, 197, 151, 62, 201, 16, 214, 60, 1, 225, 1, 190, 43, 109, 91, 62, 32, 225, 56, 190, 23, 90, 133, 187, 46, 47, 198, 60, 62, 37, 220, 190, 154, 227, 6, 189, 235, 221, 181, 59, 248, 30, 117, 62, 169, 93, 6, 190, 37, 53, 155, 62, 205, 150, 233, 188, 216, 30, 102, 62, 71, 180, 166, 62, 94, 66, 104, 62, 91, 147, 65, 190, 206, 120, 145, 62, 58, 192, 57, 62, 109, 204, 76, 190, 183, 22, 178, 60, 153, 75, 31, 190, 63, 112, 144, 190, 42, 218, 194, 61, 60, 71, 33, 190, 209, 227, 118, 191, 116, 118, 242, 61, 172, 47, 147, 190, 199, 178, 47, 190, 206, 61, 170, 61, 247, 1, 202, 189, 229, 240, 209, 62, 149, 16, 35, 61, 122, 45, 244, 61, 197, 161, 10, 60, 61, 18, 73, 188, 98, 184, 183, 189, 189, 237, 203, 61, 68, 38, 248, 61, 129, 1, 6, 191, 14, 141, 43, 61, 85, 132, 161, 59, 99, 200, 44, 61, 142, 54, 74, 189, 4, 94, 154, 60, 45, 25, 69, 62, 53, 149, 215, 189, 42, 215, 192, 62, 198, 17, 105, 62, 228, 0, 137, 190, 104, 16, 200, 59, 175, 234, 31, 189, 113, 89, 41, 62, 176, 135, 137, 61, 62, 136, 62, 62, 102, 79, 117, 189, 143, 133, 106, 62, 133, 221, 128, 61, 11, 70, 143, 189, 55, 196, 87, 62, 250, 64, 153, 61, 143, 64, 63, 62, 228, 197, 139, 189, 59, 65, 82, 187, 44, 54, 25, 62, 62, 72, 215, 62, 18, 225, 2, 62, 58, 226, 1, 190, 72, 177, 169, 190, 176, 243, 162, 61, 124, 249, 28, 190, 180, 215, 25, 189, 68, 161, 128, 60, 59, 196, 69, 61, 12, 56, 171, 190, 63, 9, 82, 190, 243, 39, 223, 62, 11, 223, 134, 188, 176, 18, 70, 191, 123, 21, 137, 191, 64, 155, 169, 62, 185, 101, 196, 189, 157, 154, 199, 189, 109, 122, 143, 61, 162, 32, 107, 62, 74, 189, 34, 190, 46, 95, 216, 60, 244, 12, 26, 191, 123, 86, 20, 190, 197, 26, 24, 190, 158, 64, 141, 61, 173, 213, 255, 61, 17, 117, 129, 61, 217, 178, 100, 190, 25, 174, 36, 190, 150, 59, 8, 63, 9, 189, 203, 61, 84, 19, 236, 190, 203, 83, 176, 62, 221, 239, 149, 62, 156, 128, 36, 60, 255, 105, 29, 190, 132, 140, 79, 190, 4, 235, 97, 190, 68, 177, 187, 189, 98, 28, 90, 62, 178, 119, 87, 61, 146, 171, 46, 61, 49, 58, 247, 61, 72, 201, 114, 62, 140, 206, 5, 62, 89, 115, 173, 62, 13, 76, 190, 190, 254, 254, 131, 62, 208, 106, 229, 62, 59, 89, 54, 61, 219, 184, 14, 61, 66, 207, 58, 189, 221, 102, 229, 60, 49, 68, 47, 190, 37, 169, 41, 190, 88, 85, 8, 191, 14, 191, 23, 190, 122, 209, 76, 190, 35, 67, 17, 190, 234, 86, 167, 62, 148, 15, 246, 61, 168, 183, 41, 62, 147, 194, 225, 189, 140, 117, 161, 60, 199, 19, 16, 190, 165, 67, 17, 61, 141, 235, 122, 190, 187, 72, 86, 59, 168, 127, 78, 187, 17, 247, 31, 188, 193, 50, 32, 190, 243, 56, 134, 190, 208, 121, 50, 189, 231, 183, 100, 189, 175, 92, 36, 190, 37, 136, 107, 61, 84, 180, 111, 190, 127, 86, 194, 60, 49, 170, 160, 61, 222, 167, 219, 189, 125, 60, 7, 189, 125, 75, 198, 61, 147, 251, 215, 189, 19, 70, 7, 61, 241, 29, 131, 190, 89, 221, 52, 190, 61, 108, 3, 190, 206, 57, 254, 188, 151, 230, 144, 61, 13, 255, 152, 61, 248, 16, 139, 61, 120, 169, 138, 188, 80, 26, 58, 190, 163, 151, 81, 61, 135, 66, 35, 62, 180, 61, 111, 59, 25, 169, 162, 189, 137, 7, 52, 190, 100, 33, 75, 61, 122, 25, 173, 60, 237, 22, 241, 61, 49, 98, 4, 62, 26, 36, 36, 190, 169, 248, 178, 189, 124, 29, 77, 188, 140, 166, 75, 189, 15, 66, 195, 61, 37, 122, 25, 190, 17, 61, 233, 188, 100, 146, 91, 60, 50, 147, 121, 188, 49, 3, 48, 190, 241, 124, 98, 188, 203, 124, 173, 189, 190, 169, 172, 189, 128, 127, 51, 190, 130, 177, 178, 187, 150, 93, 238, 187, 97, 247, 35, 190, 173, 218, 42, 190, 206, 81, 153, 61, 181, 175, 210, 189, 151, 41, 230, 189, 41, 191, 141, 61, 30, 163, 213, 190, 34, 154, 127, 61, 227, 25, 96, 187, 226, 95, 201, 190, 187, 229, 148, 62, 183, 174, 48, 61, 163, 196, 34, 62, 86, 132, 61, 62, 62, 234, 40, 189, 192, 58, 19, 62, 180, 19, 149, 189, 247, 191, 165, 61, 141, 13, 14, 190, 209, 216, 9, 62, 86, 203, 120, 61, 104, 59, 40, 190, 186, 162, 173, 61, 39, 51, 203, 62, 151, 17, 156, 190, 190, 12, 44, 62, 240, 248, 89, 190, 196, 234, 180, 61, 111, 222, 135, 62, 211, 184, 25, 190, 149, 130, 60, 189, 42, 210, 209, 189, 201, 26, 108, 189, 22, 227, 105, 191, 48, 182, 153, 62, 86, 188, 99, 190, 228, 166, 136, 190, 202, 224, 43, 62, 109, 92, 138, 191, 191, 191, 33, 63, 16, 129, 226, 188, 102, 41, 64, 60, 238, 61, 4, 62, 212, 191, 154, 62, 160, 215, 146, 190, 81, 138, 140, 191, 82, 30, 149, 191, 97, 45, 130, 190, 184, 9, 204, 187, 50, 27, 42, 62, 212, 81, 168, 61, 115, 244, 80, 62, 9, 20, 116, 188, 89, 245, 63, 62, 29, 233, 201, 62, 79, 145, 41, 62, 13, 67, 242, 62, 134, 216, 35, 62, 223, 116, 26, 189, 131, 246, 43, 190, 135, 12, 162, 189, 77, 178, 212, 61, 224, 156, 137, 190, 69, 8, 223, 62, 246, 228, 46, 191, 168, 11, 9, 191, 54, 148, 34, 190, 128, 7, 19, 190, 131, 13, 207, 190, 108, 109, 198, 189, 228, 245, 236, 61, 93, 238, 169, 189, 131, 41, 118, 190, 177, 114, 174, 62, 7, 194, 129, 190, 241, 137, 93, 189, 2, 1, 128, 189, 189, 163, 7, 62, 58, 50, 185, 61, 135, 213, 44, 191, 104, 73, 185, 61, 86, 28, 185, 190, 9, 65, 243, 190, 188, 0, 204, 190, 94, 137, 66, 62, 108, 16, 23, 190, 61, 195, 63, 188, 122, 59, 109, 189, 164, 4, 170, 62, 163, 29, 105, 190, 134, 200, 190, 189, 18, 210, 162, 190, 71, 65, 145, 190, 40, 90, 175, 190, 142, 182, 27, 62, 168, 230, 200, 188, 184, 176, 104, 62, 25, 200, 170, 189, 6, 230, 51, 62, 87, 233, 36, 190, 181, 39, 83, 190, 72, 205, 174, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 67, 245, 61, 16, 80, 197, 62, 209, 108, 77, 62, 191, 8, 142, 62, 173, 27, 204, 60, 45, 253, 171, 62, 6, 137, 129, 188, 109, 109, 17, 190, 155, 121, 145, 190, 110, 57, 59, 62, 114, 228, 86, 190, 71, 8, 214, 62, 56, 106, 133, 62, 241, 25, 158, 62, 47, 2, 60, 62, 84, 226, 213, 60, 155, 173, 40, 62, 43, 159, 233, 61, 229, 205, 242, 188, 230, 56, 146, 62, 123, 64, 50, 62, 7, 140, 132, 62, 111, 7, 58, 189, 166, 23, 4, 190, 173, 155, 70, 189, 99, 199, 194, 62, 193, 240, 140, 188, 133, 92, 249, 188, 89, 18, 161, 61, 226, 203, 189, 189, 200, 189, 42, 62, 138, 235, 210, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 208, 239, 190, 141, 130, 31, 190, 116, 158, 143, 190, 103, 111, 32, 63, 209, 28, 128, 62, 126, 120, 101, 191, 247, 187, 157, 62, 19, 28, 208, 187, 119, 106, 216, 190, 75, 120, 159, 190, 34, 123, 60, 191, 119, 144, 167, 190, 2, 112, 55, 189, 131, 222, 1, 190, 251, 148, 12, 63, 238, 40, 141, 62, 140, 88, 55, 63, 160, 36, 36, 62, 36, 161, 6, 63, 252, 39, 113, 63, 83, 155, 219, 190, 199, 163, 223, 190, 238, 205, 123, 62, 72, 142, 6, 63, 149, 207, 25, 62, 177, 100, 50, 191, 244, 89, 179, 62, 32, 227, 7, 62, 222, 221, 23, 61, 14, 23, 48, 63, 195, 172, 13, 63, 252, 18, 230, 62, 24, 219, 116, 62, 100, 184, 134, 190, 11, 79, 242, 61, 152, 135, 138, 62, 147, 251, 132, 190, 224, 45, 125, 189, 185, 180, 133, 60, 10, 167, 243, 61, 91, 180, 153, 189, 22, 51, 84, 189, 111, 141, 84, 62, 191, 180, 33, 190, 238, 98, 66, 190, 194, 14, 80, 190, 4, 88, 226, 61, 132, 83, 119, 187, 92, 225, 30, 60, 209, 134, 184, 190, 36, 125, 146, 62, 110, 79, 162, 60, 210, 0, 97, 62, 31, 174, 48, 190, 176, 191, 121, 190, 114, 131, 135, 62, 248, 106, 73, 189, 249, 228, 86, 190, 84, 227, 230, 189, 189, 42, 34, 61, 116, 231, 231, 61, 162, 158, 31, 190, 146, 181, 15, 60, 157, 46, 166, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 119, 200, 189, 170, 254, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {229, 254, 206, 62, 148, 234, 108, 63, 227, 203, 56, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {69, 50, 22, 192, 134, 179, 14, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0091/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}