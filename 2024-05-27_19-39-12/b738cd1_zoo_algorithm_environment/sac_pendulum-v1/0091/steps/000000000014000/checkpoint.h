// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 101, 62, 191, 69, 210, 134, 191, 65, 205, 156, 190, 119, 66, 228, 61, 188, 235, 67, 191, 81, 129, 34, 189, 252, 5, 22, 63, 19, 24, 134, 190, 229, 122, 154, 62, 95, 45, 32, 190, 248, 76, 181, 63, 222, 63, 184, 189, 73, 229, 73, 63, 77, 204, 4, 191, 59, 248, 212, 190, 123, 61, 197, 188, 225, 104, 28, 61, 144, 43, 12, 63, 107, 220, 95, 190, 34, 154, 127, 191, 54, 225, 165, 190, 163, 188, 158, 190, 106, 198, 200, 62, 222, 201, 22, 191, 8, 50, 35, 191, 197, 50, 131, 190, 198, 121, 251, 190, 155, 218, 130, 190, 140, 246, 40, 191, 38, 255, 42, 62, 165, 79, 214, 190, 78, 134, 162, 62, 135, 240, 255, 189, 153, 55, 136, 62, 21, 69, 8, 191, 163, 145, 136, 59, 163, 241, 138, 62, 231, 171, 254, 62, 238, 21, 212, 62, 229, 41, 202, 190, 84, 5, 65, 191, 140, 161, 23, 189, 161, 75, 117, 61, 215, 97, 87, 63, 128, 201, 2, 185, 219, 240, 194, 62, 131, 33, 62, 190, 149, 182, 72, 190, 25, 70, 155, 190, 25, 153, 32, 191, 168, 157, 243, 189, 0, 169, 51, 63, 116, 64, 136, 191, 104, 71, 160, 190, 70, 120, 38, 191, 147, 123, 92, 63, 107, 252, 249, 58, 181, 39, 100, 188, 231, 129, 58, 191, 45, 192, 10, 63, 222, 230, 238, 62, 111, 48, 168, 190, 225, 179, 182, 190, 48, 214, 32, 63, 113, 150, 131, 63, 127, 94, 106, 62, 153, 150, 69, 63, 81, 150, 144, 190, 227, 10, 149, 190, 93, 15, 196, 190, 5, 91, 26, 62, 83, 174, 170, 62, 2, 254, 41, 190, 45, 67, 184, 62, 130, 125, 153, 190, 180, 79, 98, 191, 130, 113, 198, 187, 224, 223, 162, 61, 60, 42, 8, 191, 38, 123, 111, 189, 76, 3, 13, 191, 143, 191, 93, 63, 1, 165, 68, 63, 210, 141, 150, 62, 216, 95, 233, 62, 142, 81, 247, 62, 107, 95, 106, 190, 32, 117, 182, 62, 35, 194, 163, 63, 148, 249, 200, 62, 179, 46, 142, 190, 173, 0, 164, 191, 124, 128, 186, 190, 21, 193, 20, 63, 129, 131, 38, 191, 211, 177, 212, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 198, 27, 191, 79, 227, 61, 191, 179, 202, 141, 190, 7, 29, 150, 62, 17, 23, 178, 189, 251, 96, 64, 190, 90, 42, 211, 61, 110, 240, 167, 189, 104, 32, 208, 189, 144, 134, 176, 190, 118, 172, 129, 62, 212, 17, 7, 63, 233, 150, 128, 191, 187, 123, 254, 62, 181, 140, 155, 62, 60, 92, 14, 191, 166, 133, 133, 62, 5, 188, 192, 190, 184, 213, 253, 61, 110, 184, 155, 62, 177, 47, 185, 190, 136, 90, 133, 62, 226, 147, 206, 61, 39, 228, 253, 190, 107, 127, 27, 63, 26, 171, 8, 62, 63, 50, 177, 186, 21, 75, 51, 191, 15, 2, 200, 190, 78, 191, 28, 190, 187, 39, 28, 61, 25, 194, 214, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 126, 188, 189, 236, 72, 149, 190, 121, 170, 37, 189, 230, 61, 71, 62, 5, 96, 132, 190, 99, 21, 164, 190, 170, 27, 139, 189, 173, 40, 180, 61, 206, 132, 55, 190, 114, 165, 93, 190, 165, 224, 47, 62, 252, 202, 75, 190, 203, 24, 127, 190, 73, 224, 125, 190, 54, 53, 2, 62, 193, 236, 177, 190, 33, 74, 65, 190, 21, 138, 156, 191, 109, 123, 138, 62, 185, 202, 63, 190, 32, 231, 101, 190, 100, 43, 130, 62, 220, 159, 114, 190, 223, 237, 0, 190, 108, 39, 34, 189, 126, 243, 119, 62, 88, 101, 54, 189, 129, 74, 194, 60, 3, 91, 83, 62, 162, 249, 19, 190, 125, 19, 128, 189, 120, 12, 146, 190, 146, 109, 84, 62, 213, 170, 150, 190, 197, 147, 33, 61, 167, 246, 108, 62, 120, 156, 26, 190, 247, 106, 91, 190, 5, 87, 161, 189, 100, 204, 77, 62, 4, 116, 174, 189, 199, 205, 166, 189, 34, 180, 242, 61, 158, 52, 198, 62, 211, 253, 195, 190, 55, 95, 149, 62, 180, 42, 68, 61, 237, 202, 124, 190, 235, 31, 68, 189, 18, 13, 1, 191, 10, 247, 100, 61, 225, 193, 204, 61, 83, 95, 167, 190, 152, 200, 99, 62, 9, 52, 115, 62, 138, 30, 211, 188, 175, 90, 53, 62, 232, 188, 111, 62, 47, 129, 237, 189, 89, 242, 151, 190, 249, 1, 139, 189, 235, 138, 90, 189, 176, 42, 184, 189, 210, 121, 158, 190, 116, 4, 29, 62, 247, 29, 224, 189, 32, 176, 64, 190, 165, 10, 101, 61, 202, 42, 179, 189, 78, 111, 205, 189, 174, 185, 57, 62, 143, 226, 170, 61, 89, 217, 53, 61, 154, 167, 213, 61, 165, 151, 241, 61, 59, 79, 224, 61, 128, 19, 54, 190, 211, 204, 146, 62, 8, 95, 126, 56, 176, 22, 14, 191, 68, 244, 154, 62, 13, 61, 46, 191, 74, 236, 229, 189, 61, 104, 106, 62, 39, 241, 178, 190, 242, 48, 136, 62, 204, 199, 130, 190, 32, 69, 211, 189, 162, 107, 49, 62, 87, 188, 194, 62, 56, 77, 13, 190, 164, 187, 180, 61, 191, 235, 13, 189, 33, 197, 13, 62, 18, 44, 189, 62, 5, 18, 173, 190, 252, 53, 12, 62, 213, 13, 50, 191, 237, 143, 31, 61, 91, 197, 195, 62, 172, 39, 7, 191, 73, 182, 7, 190, 207, 37, 217, 61, 208, 123, 57, 190, 204, 31, 146, 62, 118, 205, 2, 190, 206, 199, 193, 60, 76, 55, 12, 189, 86, 208, 227, 189, 214, 84, 80, 62, 4, 168, 44, 61, 152, 170, 80, 191, 155, 8, 153, 62, 84, 54, 48, 191, 238, 42, 144, 62, 7, 138, 244, 190, 125, 115, 68, 191, 188, 34, 172, 62, 39, 160, 206, 190, 250, 176, 171, 190, 168, 44, 13, 62, 135, 87, 133, 62, 158, 144, 158, 61, 225, 148, 119, 62, 71, 43, 4, 188, 170, 166, 74, 62, 187, 204, 141, 62, 79, 32, 232, 190, 112, 234, 166, 190, 241, 189, 194, 62, 101, 33, 48, 189, 239, 218, 168, 60, 248, 66, 92, 62, 152, 193, 120, 62, 147, 0, 148, 190, 128, 14, 104, 190, 68, 126, 173, 188, 121, 178, 190, 189, 20, 204, 151, 190, 179, 223, 52, 62, 139, 180, 8, 62, 223, 192, 135, 61, 1, 84, 192, 187, 147, 110, 86, 187, 114, 46, 124, 189, 154, 91, 12, 62, 120, 251, 210, 62, 26, 248, 23, 62, 38, 237, 150, 189, 222, 220, 56, 62, 199, 69, 226, 60, 227, 43, 24, 189, 81, 124, 202, 189, 68, 240, 215, 189, 151, 226, 52, 188, 234, 153, 36, 191, 32, 232, 158, 61, 114, 139, 39, 190, 46, 117, 215, 190, 180, 234, 59, 62, 114, 215, 43, 62, 152, 60, 117, 190, 179, 69, 47, 190, 184, 220, 48, 60, 233, 140, 169, 190, 165, 144, 109, 191, 139, 242, 174, 188, 82, 165, 69, 188, 89, 133, 250, 60, 166, 55, 200, 61, 17, 61, 4, 62, 40, 5, 166, 60, 122, 123, 53, 190, 21, 82, 180, 61, 178, 44, 24, 62, 127, 60, 97, 190, 158, 251, 171, 61, 102, 92, 108, 191, 76, 195, 213, 61, 212, 13, 70, 191, 222, 57, 232, 190, 223, 35, 224, 62, 95, 0, 241, 189, 138, 142, 195, 189, 120, 227, 181, 62, 32, 210, 173, 62, 209, 112, 225, 61, 168, 127, 100, 61, 84, 31, 103, 188, 222, 159, 127, 189, 1, 233, 114, 61, 169, 179, 75, 190, 129, 106, 242, 190, 21, 239, 155, 62, 46, 121, 30, 190, 31, 43, 48, 62, 165, 228, 145, 190, 128, 244, 58, 190, 38, 180, 192, 190, 33, 98, 249, 189, 45, 188, 1, 190, 186, 123, 233, 190, 13, 118, 45, 190, 198, 29, 58, 190, 173, 32, 231, 190, 51, 103, 204, 187, 23, 13, 62, 189, 135, 134, 16, 190, 193, 73, 104, 190, 36, 135, 106, 60, 161, 53, 56, 62, 202, 9, 110, 190, 62, 189, 60, 189, 168, 246, 20, 188, 237, 57, 193, 190, 44, 161, 61, 191, 57, 96, 237, 60, 10, 137, 87, 189, 100, 181, 212, 189, 8, 231, 46, 62, 87, 212, 254, 190, 30, 238, 45, 61, 234, 102, 152, 190, 204, 252, 48, 61, 158, 21, 152, 189, 65, 93, 52, 189, 143, 117, 197, 189, 55, 125, 250, 189, 252, 243, 184, 189, 183, 3, 168, 188, 126, 168, 36, 60, 126, 124, 182, 189, 177, 106, 144, 61, 153, 11, 83, 61, 46, 142, 253, 61, 41, 94, 27, 62, 45, 138, 236, 189, 229, 138, 41, 190, 146, 47, 209, 61, 179, 193, 38, 190, 76, 145, 9, 190, 96, 105, 238, 189, 11, 166, 239, 60, 225, 30, 248, 189, 69, 253, 201, 189, 234, 30, 52, 190, 27, 188, 155, 61, 88, 113, 81, 189, 193, 231, 179, 61, 125, 83, 29, 189, 150, 255, 21, 61, 172, 208, 85, 189, 138, 196, 51, 190, 3, 121, 15, 190, 140, 64, 40, 190, 215, 209, 140, 61, 39, 120, 142, 190, 83, 67, 108, 190, 109, 215, 217, 189, 141, 201, 149, 62, 149, 224, 30, 62, 52, 143, 152, 62, 248, 215, 74, 62, 111, 35, 66, 189, 82, 27, 159, 60, 33, 0, 52, 62, 130, 73, 162, 190, 52, 195, 59, 189, 70, 216, 118, 62, 213, 228, 24, 60, 230, 201, 200, 190, 1, 167, 163, 61, 63, 11, 235, 61, 39, 84, 34, 63, 131, 76, 208, 187, 17, 234, 139, 62, 253, 64, 225, 60, 122, 44, 46, 191, 170, 110, 185, 187, 55, 8, 0, 62, 87, 130, 13, 190, 69, 255, 153, 61, 30, 195, 138, 190, 179, 136, 8, 190, 170, 216, 168, 62, 2, 143, 58, 190, 195, 197, 221, 189, 110, 13, 50, 62, 169, 196, 14, 189, 122, 78, 173, 190, 42, 142, 180, 62, 202, 162, 105, 190, 46, 186, 143, 189, 252, 37, 99, 190, 59, 62, 7, 190, 254, 211, 13, 62, 108, 184, 76, 61, 15, 39, 185, 189, 9, 71, 225, 61, 79, 110, 255, 61, 108, 94, 67, 189, 215, 238, 198, 190, 189, 216, 183, 189, 226, 129, 70, 189, 79, 35, 3, 191, 50, 49, 72, 191, 183, 153, 157, 190, 58, 204, 24, 61, 222, 144, 129, 190, 1, 122, 88, 62, 140, 111, 177, 189, 193, 10, 245, 189, 74, 62, 58, 62, 123, 91, 72, 190, 94, 187, 150, 61, 184, 41, 165, 62, 33, 164, 125, 62, 138, 13, 188, 187, 127, 34, 219, 189, 121, 61, 244, 189, 139, 30, 83, 190, 169, 139, 232, 190, 199, 204, 25, 62, 72, 56, 84, 191, 12, 140, 174, 62, 167, 84, 218, 62, 81, 183, 123, 61, 230, 167, 190, 61, 77, 146, 40, 61, 141, 225, 46, 62, 248, 208, 73, 190, 235, 204, 159, 61, 124, 161, 176, 61, 103, 42, 234, 60, 110, 99, 191, 190, 96, 117, 57, 62, 212, 50, 135, 189, 23, 22, 184, 62, 183, 63, 246, 190, 216, 255, 190, 62, 67, 222, 182, 62, 55, 26, 183, 190, 123, 116, 43, 62, 41, 200, 38, 62, 8, 62, 43, 190, 119, 159, 155, 190, 164, 158, 17, 62, 112, 117, 171, 62, 254, 215, 99, 62, 145, 241, 233, 189, 84, 10, 0, 61, 62, 142, 162, 62, 0, 26, 134, 62, 33, 82, 246, 189, 247, 167, 100, 61, 6, 46, 252, 187, 190, 213, 9, 190, 89, 23, 41, 190, 181, 141, 82, 62, 235, 212, 233, 189, 11, 98, 195, 61, 130, 103, 213, 190, 1, 79, 71, 62, 155, 231, 110, 62, 34, 184, 177, 190, 48, 214, 77, 62, 86, 104, 47, 62, 253, 231, 82, 190, 51, 133, 11, 62, 125, 101, 243, 190, 123, 112, 224, 61, 100, 233, 159, 188, 59, 42, 156, 190, 230, 85, 4, 62, 12, 2, 47, 189, 201, 222, 9, 190, 191, 160, 52, 62, 214, 19, 87, 62, 219, 130, 159, 61, 22, 115, 110, 62, 77, 154, 133, 188, 247, 97, 54, 62, 239, 252, 98, 189, 44, 169, 184, 190, 58, 241, 15, 62, 77, 57, 53, 190, 103, 138, 113, 189, 172, 217, 162, 189, 185, 45, 137, 61, 223, 143, 103, 62, 68, 3, 214, 61, 12, 107, 168, 188, 106, 7, 209, 187, 20, 44, 7, 189, 160, 232, 128, 61, 151, 34, 12, 62, 155, 118, 9, 190, 109, 211, 42, 62, 49, 105, 31, 62, 238, 146, 23, 61, 108, 39, 15, 62, 7, 131, 93, 190, 154, 171, 134, 62, 147, 77, 120, 62, 217, 2, 7, 190, 169, 224, 254, 61, 83, 123, 234, 188, 66, 196, 249, 189, 67, 172, 235, 61, 242, 117, 79, 62, 31, 221, 220, 60, 160, 170, 40, 190, 178, 22, 16, 190, 253, 106, 34, 60, 55, 70, 160, 189, 34, 179, 221, 60, 176, 136, 108, 62, 74, 173, 164, 190, 120, 27, 107, 62, 103, 14, 124, 62, 130, 134, 142, 189, 33, 159, 99, 62, 249, 30, 135, 61, 178, 39, 56, 62, 136, 196, 192, 61, 176, 70, 57, 62, 203, 243, 136, 61, 103, 195, 21, 62, 209, 238, 156, 189, 29, 74, 91, 62, 189, 31, 178, 61, 126, 190, 134, 190, 39, 59, 96, 61, 55, 217, 17, 191, 118, 147, 10, 62, 155, 74, 230, 61, 110, 139, 170, 190, 64, 168, 47, 62, 202, 201, 41, 60, 39, 111, 8, 189, 42, 189, 237, 189, 42, 216, 247, 186, 1, 112, 134, 61, 150, 198, 40, 190, 131, 153, 222, 189, 204, 118, 39, 189, 31, 153, 222, 61, 65, 61, 155, 189, 161, 48, 30, 190, 157, 125, 120, 63, 93, 19, 39, 62, 243, 83, 70, 62, 217, 204, 182, 62, 129, 173, 196, 62, 35, 64, 89, 190, 212, 167, 186, 189, 5, 27, 176, 190, 113, 179, 113, 190, 111, 47, 153, 188, 72, 166, 10, 189, 20, 119, 150, 190, 63, 241, 22, 190, 42, 152, 72, 62, 54, 46, 165, 62, 134, 122, 144, 190, 209, 39, 85, 63, 59, 179, 226, 59, 120, 203, 232, 60, 50, 114, 21, 63, 203, 121, 193, 189, 255, 147, 6, 59, 125, 69, 162, 189, 51, 74, 4, 61, 137, 243, 10, 191, 125, 105, 45, 190, 53, 187, 121, 191, 57, 129, 239, 61, 43, 157, 164, 190, 8, 229, 214, 188, 0, 158, 253, 62, 150, 244, 12, 191, 170, 23, 101, 62, 88, 74, 93, 189, 162, 191, 231, 60, 103, 232, 6, 61, 28, 217, 133, 60, 238, 72, 211, 190, 149, 186, 23, 191, 207, 199, 12, 190, 120, 23, 229, 189, 198, 164, 13, 190, 71, 198, 50, 62, 218, 193, 219, 190, 244, 198, 29, 62, 85, 205, 92, 62, 225, 153, 12, 190, 112, 253, 166, 62, 122, 79, 84, 62, 10, 59, 233, 61, 28, 51, 224, 61, 199, 81, 197, 188, 242, 218, 34, 190, 147, 31, 134, 61, 145, 109, 219, 187, 178, 69, 9, 61, 129, 67, 177, 61, 115, 74, 156, 190, 229, 203, 63, 191, 35, 141, 121, 62, 128, 20, 3, 190, 54, 70, 89, 191, 215, 62, 101, 62, 218, 187, 144, 191, 30, 27, 104, 60, 12, 203, 30, 62, 104, 206, 242, 62, 158, 147, 4, 191, 201, 115, 23, 189, 218, 90, 203, 189, 6, 19, 132, 190, 144, 91, 87, 190, 221, 1, 208, 190, 66, 188, 174, 62, 99, 118, 222, 190, 97, 139, 114, 62, 201, 117, 170, 190, 82, 218, 178, 62, 84, 37, 25, 62, 47, 65, 122, 62, 131, 76, 157, 190, 139, 190, 191, 61, 56, 0, 70, 190, 184, 121, 247, 190, 66, 138, 110, 62, 45, 200, 24, 191, 189, 137, 121, 190, 179, 247, 152, 62, 18, 60, 69, 59, 125, 37, 162, 190, 54, 26, 154, 62, 130, 85, 16, 190, 165, 175, 161, 61, 227, 127, 63, 191, 25, 229, 229, 190, 168, 3, 217, 190, 155, 75, 246, 62, 150, 195, 144, 61, 240, 43, 162, 61, 55, 113, 161, 61, 121, 250, 150, 62, 203, 13, 231, 190, 5, 37, 27, 190, 22, 202, 112, 189, 83, 245, 0, 190, 157, 183, 170, 189, 98, 121, 84, 61, 249, 61, 129, 190, 134, 253, 13, 62, 150, 97, 71, 190, 45, 189, 0, 61, 225, 155, 130, 62, 111, 54, 164, 189, 216, 134, 106, 190, 198, 158, 55, 62, 179, 143, 134, 62, 53, 65, 251, 189, 66, 116, 35, 62, 100, 40, 249, 189, 203, 61, 66, 188, 170, 84, 168, 61, 241, 215, 11, 190, 145, 146, 29, 191, 199, 106, 39, 63, 140, 110, 189, 190, 238, 86, 61, 191, 80, 187, 209, 189, 50, 14, 186, 190, 120, 119, 10, 63, 49, 7, 2, 190, 222, 87, 143, 190, 37, 235, 38, 62, 30, 53, 213, 61, 36, 252, 231, 190, 25, 207, 204, 190, 183, 75, 111, 190, 56, 237, 36, 190, 124, 77, 57, 62, 212, 215, 88, 62, 95, 248, 167, 190, 176, 229, 66, 61, 241, 78, 120, 190, 144, 200, 185, 189, 61, 223, 99, 62, 216, 106, 57, 62, 237, 157, 8, 63, 12, 152, 131, 62, 231, 235, 19, 62, 1, 253, 84, 189, 234, 171, 76, 189, 197, 79, 43, 190, 88, 240, 131, 190, 239, 220, 153, 61, 205, 15, 120, 60, 229, 42, 151, 191, 148, 0, 205, 190, 15, 9, 204, 190, 255, 84, 49, 191, 48, 183, 164, 61, 110, 142, 195, 191, 10, 224, 130, 62, 158, 223, 56, 190, 192, 241, 48, 62, 184, 203, 176, 188, 137, 147, 149, 62, 25, 159, 82, 190, 55, 211, 148, 191, 114, 96, 167, 191, 243, 131, 15, 190, 196, 84, 101, 190, 249, 90, 128, 62, 194, 175, 25, 191, 188, 224, 20, 62, 155, 49, 22, 61, 143, 231, 39, 62, 137, 100, 151, 62, 129, 129, 154, 62, 24, 116, 155, 62, 166, 167, 201, 60, 0, 141, 63, 62, 51, 237, 42, 190, 42, 146, 8, 62, 212, 35, 138, 190, 121, 28, 109, 62, 244, 97, 122, 62, 198, 127, 158, 191, 248, 118, 94, 191, 205, 49, 111, 62, 69, 238, 225, 190, 115, 189, 126, 191, 178, 15, 153, 61, 63, 178, 115, 62, 172, 110, 45, 190, 252, 33, 136, 60, 14, 59, 128, 62, 43, 9, 95, 190, 17, 137, 165, 190, 55, 128, 117, 62, 31, 65, 244, 61, 211, 120, 40, 188, 28, 83, 8, 62, 251, 204, 130, 62, 246, 143, 252, 61, 12, 132, 231, 190, 121, 47, 245, 60, 224, 252, 180, 61, 102, 192, 65, 190, 214, 22, 100, 62, 107, 212, 51, 191, 158, 91, 112, 188, 140, 153, 105, 189, 224, 81, 206, 190, 117, 34, 194, 62, 25, 163, 35, 190, 29, 118, 218, 189, 42, 184, 171, 189, 223, 234, 227, 60, 215, 39, 163, 189, 198, 117, 75, 62, 103, 166, 13, 190, 16, 44, 111, 62, 163, 47, 95, 62, 221, 216, 193, 190, 136, 200, 134, 61, 55, 196, 57, 190, 213, 36, 147, 62, 180, 228, 105, 190, 219, 235, 175, 60, 109, 75, 226, 190, 82, 21, 95, 62, 32, 221, 47, 62, 227, 72, 19, 62, 7, 247, 235, 61, 114, 18, 204, 60, 213, 95, 7, 62, 151, 69, 184, 188, 138, 38, 96, 62, 63, 45, 42, 189, 54, 197, 254, 189, 196, 35, 140, 189, 74, 117, 57, 191, 170, 109, 143, 190, 177, 202, 237, 189, 208, 63, 211, 190, 184, 61, 204, 62, 172, 229, 205, 189, 131, 90, 23, 60, 146, 25, 124, 62, 123, 146, 43, 62, 50, 81, 52, 62, 199, 93, 115, 62, 209, 127, 31, 190, 34, 90, 122, 61, 22, 203, 251, 60, 107, 71, 167, 190, 127, 135, 140, 189, 250, 232, 20, 63, 0, 9, 238, 60, 4, 100, 14, 189, 87, 96, 186, 62, 161, 144, 170, 62, 58, 155, 213, 61, 63, 40, 151, 59, 43, 101, 131, 189, 199, 9, 152, 190, 206, 221, 45, 190, 128, 17, 158, 61, 5, 233, 31, 189, 199, 58, 1, 187, 94, 13, 144, 61, 101, 77, 104, 62, 23, 127, 131, 190, 76, 97, 211, 62, 35, 6, 202, 190, 40, 18, 216, 190, 11, 96, 198, 62, 12, 87, 152, 58, 104, 170, 137, 62, 237, 177, 169, 61, 22, 57, 181, 61, 201, 231, 77, 191, 18, 64, 242, 189, 172, 43, 244, 190, 187, 7, 39, 62, 240, 120, 102, 190, 199, 211, 2, 60, 72, 147, 231, 61, 59, 82, 73, 191, 176, 206, 248, 61, 141, 73, 206, 61, 254, 31, 65, 189, 175, 159, 81, 62, 59, 206, 61, 190, 137, 131, 151, 190, 8, 199, 90, 62, 44, 160, 230, 190, 47, 27, 230, 189, 42, 252, 229, 61, 49, 121, 104, 62, 179, 167, 222, 190, 216, 148, 80, 62, 19, 245, 44, 190, 245, 215, 211, 62, 8, 182, 253, 61, 215, 115, 78, 62, 10, 87, 135, 61, 159, 126, 157, 62, 211, 145, 134, 62, 179, 107, 62, 190, 239, 207, 42, 61, 204, 28, 87, 190, 48, 62, 187, 190, 245, 73, 157, 61, 152, 79, 10, 190, 12, 227, 145, 191, 97, 27, 144, 62, 175, 203, 230, 190, 8, 91, 27, 191, 237, 57, 0, 62, 249, 156, 16, 190, 25, 158, 27, 63, 32, 117, 183, 188, 46, 65, 8, 62, 44, 63, 57, 188, 180, 248, 163, 61, 110, 39, 149, 189, 57, 114, 138, 61, 111, 246, 210, 61, 64, 118, 163, 190, 27, 168, 158, 188, 123, 128, 21, 189, 64, 20, 137, 62, 4, 195, 188, 189, 97, 200, 237, 59, 119, 138, 75, 62, 118, 140, 86, 189, 187, 254, 211, 62, 20, 181, 95, 62, 56, 28, 209, 190, 81, 36, 196, 60, 59, 30, 129, 189, 30, 204, 4, 62, 70, 106, 29, 62, 43, 61, 42, 62, 233, 147, 141, 190, 128, 161, 82, 62, 97, 229, 217, 61, 178, 147, 137, 189, 249, 198, 134, 62, 17, 96, 4, 62, 24, 62, 98, 62, 48, 226, 6, 189, 59, 65, 82, 187, 218, 169, 42, 62, 227, 1, 203, 62, 248, 253, 229, 61, 224, 203, 171, 189, 175, 72, 200, 190, 144, 227, 155, 61, 181, 84, 86, 190, 71, 180, 66, 190, 172, 225, 124, 61, 252, 125, 60, 61, 62, 229, 166, 190, 56, 161, 97, 190, 186, 23, 235, 62, 138, 82, 194, 189, 102, 2, 136, 191, 57, 16, 152, 191, 183, 198, 169, 62, 194, 120, 144, 188, 58, 6, 20, 190, 82, 230, 198, 61, 135, 34, 100, 62, 155, 23, 228, 189, 102, 209, 54, 60, 249, 224, 196, 190, 249, 40, 51, 190, 74, 19, 238, 189, 138, 100, 108, 61, 192, 171, 28, 62, 79, 37, 224, 189, 176, 144, 152, 190, 31, 173, 66, 190, 76, 214, 46, 63, 168, 177, 233, 61, 45, 158, 202, 190, 238, 71, 189, 62, 36, 36, 158, 62, 228, 115, 154, 189, 178, 164, 23, 190, 172, 101, 112, 190, 170, 51, 135, 190, 243, 88, 189, 189, 63, 247, 88, 62, 83, 92, 57, 189, 79, 196, 138, 188, 100, 125, 207, 61, 11, 165, 91, 62, 43, 12, 48, 61, 164, 241, 190, 62, 9, 97, 191, 190, 241, 17, 81, 62, 208, 185, 8, 63, 147, 10, 77, 61, 4, 178, 87, 61, 235, 150, 113, 189, 210, 97, 90, 61, 231, 147, 138, 190, 122, 34, 48, 190, 17, 202, 28, 191, 253, 234, 198, 189, 7, 223, 148, 190, 233, 193, 136, 190, 167, 31, 209, 62, 148, 15, 246, 61, 168, 183, 41, 62, 186, 7, 231, 189, 148, 167, 34, 61, 199, 19, 16, 190, 79, 117, 232, 60, 141, 235, 122, 190, 119, 89, 124, 59, 168, 127, 78, 187, 92, 136, 172, 188, 9, 115, 46, 190, 201, 252, 139, 190, 132, 138, 81, 189, 210, 125, 141, 189, 18, 52, 23, 190, 37, 136, 107, 61, 84, 180, 111, 190, 127, 86, 194, 60, 165, 18, 156, 61, 209, 208, 240, 189, 125, 60, 7, 189, 130, 246, 219, 61, 15, 71, 228, 189, 78, 169, 7, 60, 93, 97, 112, 190, 220, 56, 112, 190, 61, 108, 3, 190, 62, 135, 184, 188, 26, 197, 145, 61, 88, 126, 166, 61, 248, 16, 139, 61, 120, 169, 138, 188, 80, 26, 58, 190, 163, 151, 81, 61, 135, 66, 35, 62, 180, 61, 111, 59, 25, 169, 162, 189, 137, 7, 52, 190, 100, 33, 75, 61, 122, 25, 173, 60, 237, 22, 241, 61, 49, 98, 4, 62, 26, 36, 36, 190, 169, 248, 178, 189, 124, 29, 77, 188, 140, 166, 75, 189, 15, 66, 195, 61, 37, 122, 25, 190, 17, 61, 233, 188, 100, 146, 91, 60, 50, 147, 121, 188, 49, 3, 48, 190, 241, 124, 98, 188, 203, 124, 173, 189, 190, 169, 172, 189, 128, 127, 51, 190, 130, 177, 178, 187, 150, 93, 238, 187, 97, 247, 35, 190, 173, 218, 42, 190, 206, 81, 153, 61, 181, 175, 210, 189, 151, 41, 230, 189, 41, 191, 141, 61, 219, 60, 238, 190, 25, 185, 94, 62, 201, 72, 233, 60, 201, 180, 191, 190, 11, 136, 155, 62, 159, 149, 183, 61, 151, 223, 2, 62, 251, 216, 77, 62, 224, 204, 146, 185, 168, 103, 185, 61, 17, 192, 163, 189, 227, 191, 142, 61, 192, 52, 168, 190, 129, 248, 255, 60, 165, 58, 231, 60, 28, 191, 203, 189, 73, 144, 44, 60, 252, 167, 224, 62, 122, 54, 146, 190, 226, 192, 252, 61, 95, 100, 23, 190, 157, 174, 130, 61, 30, 221, 137, 62, 26, 93, 34, 190, 124, 215, 49, 189, 100, 118, 169, 190, 206, 100, 215, 188, 71, 14, 125, 191, 130, 13, 167, 62, 116, 223, 151, 190, 115, 112, 159, 190, 32, 98, 117, 62, 90, 93, 168, 191, 84, 161, 7, 63, 101, 83, 173, 61, 184, 147, 1, 190, 49, 54, 129, 61, 158, 222, 152, 62, 122, 248, 54, 191, 123, 203, 139, 191, 229, 71, 144, 191, 231, 242, 133, 190, 38, 56, 82, 190, 49, 5, 66, 62, 236, 255, 10, 62, 80, 1, 65, 62, 72, 90, 95, 190, 74, 6, 67, 62, 193, 157, 175, 62, 120, 231, 23, 62, 197, 110, 193, 62, 82, 34, 64, 62, 75, 106, 12, 190, 51, 217, 72, 190, 231, 144, 203, 189, 129, 219, 192, 61, 201, 88, 254, 190, 5, 15, 149, 62, 30, 114, 38, 191, 111, 153, 236, 190, 49, 161, 71, 190, 252, 56, 90, 190, 210, 158, 116, 191, 175, 42, 82, 190, 76, 118, 109, 61, 99, 34, 203, 189, 137, 193, 35, 189, 38, 2, 169, 62, 234, 69, 147, 190, 207, 99, 191, 189, 240, 110, 184, 189, 239, 24, 218, 61, 67, 243, 141, 61, 98, 140, 45, 191, 105, 129, 103, 61, 89, 198, 188, 190, 222, 207, 218, 190, 236, 72, 12, 191, 179, 132, 74, 62, 132, 157, 28, 190, 113, 93, 81, 189, 18, 151, 182, 189, 237, 151, 152, 62, 140, 186, 100, 190, 189, 17, 248, 189, 253, 156, 145, 190, 189, 125, 164, 190, 62, 45, 35, 191, 119, 61, 250, 61, 208, 104, 156, 190, 230, 17, 78, 62, 27, 223, 30, 62, 120, 102, 34, 62, 224, 147, 172, 188, 147, 223, 80, 190, 65, 213, 228, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 118, 176, 61, 152, 230, 197, 62, 116, 130, 131, 62, 33, 199, 153, 62, 246, 50, 23, 60, 9, 221, 188, 62, 38, 145, 238, 188, 109, 109, 17, 190, 83, 232, 145, 190, 121, 145, 54, 62, 56, 246, 77, 190, 25, 15, 229, 62, 56, 90, 133, 62, 174, 108, 169, 62, 232, 167, 27, 62, 27, 13, 50, 61, 156, 185, 171, 61, 202, 245, 213, 61, 198, 143, 41, 60, 143, 229, 151, 62, 216, 22, 126, 62, 74, 250, 136, 62, 170, 87, 164, 189, 12, 46, 20, 190, 168, 34, 205, 189, 204, 65, 201, 62, 182, 220, 184, 188, 37, 167, 203, 188, 89, 18, 161, 61, 149, 140, 242, 189, 241, 41, 221, 61, 228, 108, 157, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 248, 11, 191, 208, 24, 43, 190, 71, 141, 216, 190, 42, 3, 63, 63, 89, 183, 83, 62, 47, 215, 120, 191, 201, 218, 182, 62, 19, 28, 208, 187, 108, 202, 4, 191, 99, 186, 198, 190, 83, 106, 86, 191, 100, 220, 185, 190, 75, 148, 147, 189, 179, 21, 14, 190, 82, 236, 24, 63, 244, 226, 181, 62, 120, 225, 72, 63, 237, 26, 113, 62, 96, 100, 130, 63, 26, 214, 134, 63, 177, 238, 10, 191, 111, 216, 240, 190, 108, 249, 143, 62, 81, 114, 92, 63, 104, 2, 32, 62, 38, 79, 58, 191, 241, 248, 196, 62, 37, 239, 219, 61, 222, 221, 23, 61, 238, 94, 48, 63, 152, 184, 27, 63, 155, 131, 212, 62, 11, 155, 140, 62, 214, 241, 139, 190, 230, 151, 239, 61, 120, 111, 139, 62, 123, 93, 39, 190, 159, 163, 203, 189, 51, 236, 144, 61, 10, 167, 243, 61, 177, 98, 169, 187, 74, 225, 154, 188, 118, 9, 254, 61, 163, 168, 210, 189, 186, 73, 52, 190, 13, 233, 117, 190, 54, 165, 98, 61, 138, 176, 76, 61, 166, 160, 51, 59, 43, 33, 241, 190, 116, 202, 109, 61, 70, 96, 2, 62, 16, 164, 172, 62, 228, 162, 243, 188, 89, 5, 128, 190, 146, 138, 98, 62, 88, 158, 163, 189, 160, 59, 92, 190, 112, 238, 157, 189, 159, 167, 81, 58, 116, 231, 231, 61, 16, 248, 59, 190, 115, 78, 15, 189, 120, 85, 250, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 242, 4, 190, 101, 66, 62, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {46, 6, 181, 190, 219, 1, 131, 63, 198, 237, 70, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {87, 111, 53, 192, 80, 68, 18, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0091/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}