// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 64, 43, 191, 123, 118, 121, 191, 111, 142, 176, 190, 232, 247, 112, 188, 198, 215, 81, 191, 185, 231, 176, 189, 163, 186, 24, 63, 104, 71, 190, 190, 184, 72, 153, 62, 10, 172, 39, 190, 233, 122, 178, 63, 85, 123, 179, 189, 83, 163, 72, 63, 84, 227, 1, 191, 4, 216, 214, 190, 204, 32, 175, 186, 146, 255, 178, 61, 69, 110, 13, 63, 88, 74, 137, 190, 131, 14, 141, 191, 129, 150, 142, 190, 145, 207, 179, 190, 57, 17, 216, 62, 243, 224, 13, 191, 150, 187, 7, 191, 23, 13, 91, 190, 201, 107, 250, 190, 229, 29, 53, 190, 29, 34, 52, 191, 61, 135, 39, 62, 115, 64, 228, 190, 98, 195, 167, 62, 214, 177, 18, 190, 133, 180, 64, 62, 98, 30, 15, 191, 239, 212, 23, 189, 241, 100, 154, 62, 85, 246, 21, 63, 222, 149, 211, 62, 88, 186, 222, 190, 24, 55, 82, 191, 127, 105, 138, 188, 61, 240, 123, 61, 167, 66, 78, 63, 46, 148, 73, 60, 131, 22, 178, 62, 195, 83, 75, 190, 30, 98, 77, 190, 11, 40, 192, 190, 84, 103, 35, 191, 147, 81, 247, 189, 126, 188, 51, 63, 166, 59, 136, 191, 88, 184, 163, 190, 57, 26, 48, 191, 130, 54, 83, 63, 244, 167, 67, 60, 91, 125, 145, 187, 5, 200, 68, 191, 44, 206, 7, 63, 156, 191, 237, 62, 89, 47, 164, 190, 18, 131, 187, 190, 250, 129, 25, 63, 180, 47, 133, 63, 129, 26, 92, 62, 21, 67, 69, 63, 48, 15, 117, 190, 109, 234, 158, 190, 153, 227, 228, 190, 102, 126, 95, 62, 100, 159, 173, 62, 227, 36, 84, 190, 203, 166, 188, 62, 49, 199, 151, 190, 97, 42, 112, 191, 24, 207, 216, 60, 124, 69, 161, 61, 129, 167, 217, 190, 24, 223, 251, 59, 155, 228, 21, 191, 180, 154, 96, 63, 80, 77, 76, 63, 78, 72, 146, 62, 60, 62, 230, 62, 166, 225, 251, 62, 86, 197, 103, 190, 224, 33, 184, 62, 206, 14, 170, 63, 46, 165, 197, 62, 148, 234, 152, 190, 19, 49, 176, 191, 252, 194, 174, 190, 133, 203, 19, 63, 181, 126, 38, 191, 177, 67, 217, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {120, 50, 43, 191, 87, 243, 50, 191, 152, 72, 144, 190, 60, 222, 111, 62, 232, 36, 196, 189, 111, 183, 54, 190, 229, 147, 27, 61, 255, 34, 242, 189, 169, 83, 22, 190, 189, 33, 177, 190, 174, 158, 131, 62, 42, 27, 251, 62, 97, 161, 125, 191, 28, 50, 245, 62, 181, 219, 142, 62, 170, 180, 16, 191, 186, 147, 157, 62, 84, 251, 191, 190, 191, 112, 103, 62, 33, 205, 164, 62, 146, 238, 187, 190, 176, 158, 97, 62, 35, 213, 225, 61, 206, 135, 251, 190, 210, 182, 11, 63, 200, 142, 193, 61, 51, 125, 36, 61, 92, 252, 51, 191, 76, 103, 207, 190, 173, 228, 32, 190, 115, 160, 143, 188, 157, 63, 217, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 75, 158, 189, 236, 72, 149, 190, 43, 40, 210, 189, 124, 62, 93, 62, 170, 150, 118, 190, 107, 62, 166, 190, 67, 188, 163, 189, 194, 25, 196, 61, 227, 185, 70, 190, 83, 102, 93, 190, 59, 3, 71, 62, 4, 210, 59, 190, 157, 189, 196, 190, 164, 201, 120, 190, 162, 110, 23, 62, 181, 159, 185, 190, 45, 72, 132, 190, 9, 242, 159, 191, 30, 102, 149, 62, 72, 1, 62, 190, 133, 194, 95, 190, 125, 6, 138, 62, 195, 41, 81, 190, 33, 179, 60, 189, 160, 9, 133, 188, 49, 46, 159, 62, 171, 77, 53, 189, 99, 5, 237, 189, 179, 65, 114, 62, 189, 253, 27, 190, 199, 167, 194, 189, 25, 186, 147, 190, 233, 206, 22, 62, 85, 245, 151, 190, 73, 56, 147, 61, 227, 86, 116, 62, 43, 58, 244, 189, 27, 159, 109, 190, 18, 217, 40, 189, 82, 140, 94, 62, 244, 184, 204, 189, 188, 13, 152, 189, 134, 87, 12, 62, 52, 230, 223, 62, 27, 79, 214, 190, 85, 249, 188, 62, 207, 107, 74, 61, 24, 123, 119, 190, 137, 102, 128, 188, 133, 36, 213, 190, 66, 127, 169, 61, 175, 28, 26, 62, 26, 36, 154, 190, 152, 190, 83, 62, 105, 52, 139, 62, 146, 143, 81, 189, 59, 80, 64, 62, 208, 26, 92, 62, 20, 240, 225, 189, 181, 213, 207, 190, 77, 101, 8, 189, 142, 180, 235, 189, 47, 71, 84, 189, 196, 167, 143, 190, 62, 116, 173, 61, 191, 126, 141, 190, 78, 119, 60, 190, 126, 167, 1, 61, 123, 38, 4, 190, 11, 10, 221, 189, 165, 106, 74, 62, 124, 197, 168, 61, 59, 158, 142, 60, 75, 101, 238, 61, 14, 110, 7, 62, 190, 229, 197, 61, 39, 116, 66, 190, 82, 111, 141, 62, 132, 108, 0, 189, 166, 46, 20, 191, 34, 154, 148, 62, 155, 111, 55, 191, 82, 106, 159, 189, 95, 222, 126, 62, 198, 211, 209, 190, 202, 241, 86, 62, 65, 15, 145, 190, 158, 118, 187, 189, 10, 159, 14, 62, 4, 248, 202, 62, 242, 170, 31, 190, 47, 102, 170, 60, 48, 34, 121, 189, 135, 59, 240, 61, 143, 202, 200, 62, 199, 118, 207, 190, 231, 252, 85, 62, 110, 68, 121, 190, 178, 240, 174, 188, 106, 235, 179, 62, 46, 182, 249, 190, 153, 9, 58, 190, 167, 19, 86, 62, 171, 190, 148, 190, 50, 233, 132, 62, 36, 55, 137, 189, 55, 175, 132, 189, 130, 176, 168, 61, 94, 105, 40, 190, 57, 248, 208, 62, 206, 83, 33, 61, 23, 166, 92, 191, 181, 49, 246, 62, 244, 253, 2, 191, 236, 64, 62, 62, 73, 204, 4, 191, 211, 157, 68, 191, 175, 237, 181, 62, 61, 38, 190, 190, 196, 84, 226, 190, 254, 90, 215, 61, 20, 119, 98, 62, 216, 14, 168, 60, 244, 18, 147, 62, 104, 101, 235, 189, 197, 36, 59, 62, 49, 37, 206, 62, 48, 48, 195, 190, 243, 154, 158, 190, 241, 189, 194, 62, 26, 8, 73, 189, 248, 4, 38, 61, 239, 151, 86, 62, 22, 215, 108, 62, 184, 157, 218, 190, 2, 203, 124, 190, 8, 222, 62, 189, 1, 133, 250, 189, 9, 215, 162, 190, 217, 4, 48, 62, 56, 15, 1, 62, 119, 62, 100, 61, 192, 91, 10, 185, 199, 128, 86, 189, 239, 143, 175, 189, 186, 35, 4, 62, 0, 73, 186, 62, 138, 10, 1, 62, 23, 61, 154, 189, 20, 25, 83, 62, 27, 133, 158, 60, 8, 60, 158, 189, 120, 252, 201, 189, 66, 41, 33, 190, 53, 73, 6, 189, 8, 11, 25, 191, 18, 128, 159, 61, 250, 56, 39, 190, 255, 2, 18, 191, 174, 123, 54, 62, 148, 32, 47, 62, 110, 0, 122, 190, 212, 206, 74, 190, 85, 54, 182, 60, 222, 103, 179, 190, 46, 75, 115, 191, 185, 172, 210, 188, 230, 81, 77, 60, 210, 240, 34, 61, 227, 66, 19, 62, 139, 119, 31, 62, 45, 122, 2, 189, 193, 222, 154, 190, 108, 135, 194, 61, 28, 72, 15, 62, 150, 18, 82, 190, 247, 67, 134, 61, 144, 24, 125, 191, 195, 69, 10, 62, 255, 238, 65, 191, 160, 166, 229, 190, 81, 106, 205, 62, 112, 96, 14, 190, 107, 154, 109, 60, 28, 82, 182, 62, 48, 121, 194, 62, 35, 80, 5, 62, 188, 193, 71, 189, 194, 192, 7, 60, 191, 50, 228, 189, 171, 114, 28, 61, 134, 25, 81, 190, 205, 41, 2, 191, 21, 239, 155, 62, 126, 131, 104, 61, 117, 30, 97, 62, 137, 115, 249, 190, 78, 54, 210, 189, 199, 248, 204, 190, 248, 225, 124, 189, 38, 238, 130, 188, 143, 238, 233, 190, 106, 126, 38, 190, 58, 207, 91, 189, 53, 248, 129, 190, 122, 40, 28, 61, 215, 36, 112, 60, 135, 134, 16, 190, 25, 78, 10, 190, 36, 135, 106, 60, 26, 157, 69, 62, 9, 123, 30, 190, 113, 141, 1, 190, 197, 161, 182, 61, 201, 69, 15, 191, 26, 32, 116, 191, 47, 245, 135, 61, 25, 119, 219, 189, 65, 11, 227, 187, 154, 123, 217, 62, 0, 253, 36, 191, 222, 59, 250, 61, 42, 179, 170, 190, 23, 111, 209, 60, 158, 21, 152, 189, 65, 93, 52, 189, 143, 117, 197, 189, 55, 125, 250, 189, 252, 243, 184, 189, 183, 3, 168, 188, 126, 168, 36, 60, 126, 124, 182, 189, 177, 106, 144, 61, 153, 11, 83, 61, 46, 142, 253, 61, 41, 94, 27, 62, 45, 138, 236, 189, 229, 138, 41, 190, 146, 47, 209, 61, 179, 193, 38, 190, 76, 145, 9, 190, 96, 105, 238, 189, 11, 166, 239, 60, 225, 30, 248, 189, 69, 253, 201, 189, 234, 30, 52, 190, 27, 188, 155, 61, 88, 113, 81, 189, 193, 231, 179, 61, 125, 83, 29, 189, 150, 255, 21, 61, 172, 208, 85, 189, 138, 196, 51, 190, 3, 121, 15, 190, 140, 64, 40, 190, 215, 209, 140, 61, 219, 15, 198, 190, 142, 29, 153, 190, 246, 2, 9, 190, 164, 203, 152, 62, 204, 206, 40, 62, 66, 107, 136, 62, 61, 248, 142, 62, 114, 92, 251, 189, 98, 211, 138, 189, 30, 228, 56, 62, 12, 15, 248, 190, 20, 46, 241, 188, 81, 86, 105, 62, 149, 168, 240, 60, 4, 92, 205, 190, 192, 96, 22, 61, 90, 78, 39, 62, 132, 250, 46, 63, 220, 167, 133, 189, 106, 71, 135, 62, 213, 54, 165, 60, 129, 160, 86, 191, 196, 142, 153, 187, 24, 237, 190, 61, 141, 97, 69, 190, 176, 123, 124, 60, 31, 186, 177, 190, 160, 211, 65, 190, 194, 96, 157, 62, 164, 175, 81, 190, 123, 53, 145, 188, 191, 177, 58, 62, 67, 191, 125, 189, 122, 78, 173, 190, 192, 160, 186, 62, 92, 213, 117, 190, 120, 223, 65, 189, 254, 195, 142, 190, 108, 137, 63, 190, 177, 31, 36, 62, 93, 129, 59, 61, 73, 226, 255, 189, 45, 81, 4, 62, 191, 95, 15, 62, 54, 70, 215, 189, 247, 140, 201, 190, 240, 216, 196, 189, 99, 124, 136, 188, 87, 191, 54, 191, 56, 45, 63, 191, 248, 203, 163, 190, 141, 213, 59, 61, 17, 15, 115, 190, 181, 252, 83, 62, 36, 186, 109, 189, 141, 248, 21, 190, 108, 7, 70, 62, 139, 55, 112, 190, 152, 99, 179, 61, 124, 25, 133, 62, 243, 15, 139, 62, 164, 180, 175, 189, 64, 211, 128, 190, 144, 180, 211, 189, 136, 24, 156, 190, 64, 88, 5, 191, 232, 171, 33, 62, 144, 138, 87, 191, 234, 251, 179, 62, 78, 202, 220, 62, 141, 158, 150, 61, 46, 87, 245, 60, 94, 47, 28, 189, 229, 235, 60, 62, 65, 181, 151, 190, 134, 81, 216, 61, 126, 3, 199, 61, 234, 250, 5, 61, 105, 17, 174, 190, 196, 130, 38, 62, 160, 224, 149, 189, 131, 182, 196, 62, 85, 120, 7, 191, 214, 59, 200, 62, 196, 58, 180, 62, 135, 127, 183, 190, 223, 14, 61, 62, 107, 51, 25, 62, 23, 28, 79, 190, 221, 209, 174, 190, 249, 217, 139, 61, 32, 54, 182, 62, 147, 66, 115, 62, 254, 131, 191, 189, 78, 113, 81, 61, 202, 143, 161, 62, 96, 136, 69, 62, 240, 177, 111, 190, 18, 126, 175, 61, 218, 229, 171, 185, 250, 216, 252, 189, 2, 27, 41, 190, 215, 229, 84, 62, 214, 101, 214, 189, 177, 141, 155, 61, 49, 192, 207, 190, 178, 178, 81, 62, 37, 11, 130, 62, 225, 180, 170, 190, 185, 119, 88, 62, 38, 11, 55, 62, 20, 49, 82, 190, 157, 23, 228, 61, 221, 87, 233, 190, 5, 57, 12, 62, 70, 212, 173, 60, 52, 33, 154, 190, 198, 215, 249, 61, 240, 117, 202, 188, 162, 133, 3, 190, 6, 3, 55, 62, 51, 19, 68, 62, 186, 126, 152, 61, 169, 162, 71, 62, 85, 148, 0, 60, 1, 3, 42, 62, 27, 2, 109, 189, 55, 104, 185, 190, 187, 117, 102, 61, 253, 121, 129, 190, 168, 206, 36, 189, 102, 216, 142, 189, 196, 57, 153, 61, 99, 119, 65, 62, 246, 47, 200, 61, 6, 151, 167, 188, 5, 224, 59, 189, 68, 81, 179, 189, 217, 70, 152, 61, 146, 123, 50, 62, 48, 203, 38, 190, 192, 183, 82, 62, 164, 176, 36, 62, 102, 82, 125, 188, 144, 59, 15, 62, 169, 203, 57, 190, 109, 134, 143, 62, 108, 102, 133, 62, 46, 12, 11, 190, 243, 216, 242, 61, 195, 222, 88, 188, 185, 220, 64, 190, 12, 6, 228, 61, 18, 176, 12, 62, 205, 236, 37, 60, 232, 122, 84, 190, 25, 185, 225, 189, 85, 243, 246, 188, 154, 29, 185, 189, 147, 58, 143, 60, 43, 248, 34, 62, 19, 171, 195, 190, 21, 27, 129, 62, 241, 222, 131, 62, 221, 91, 59, 189, 127, 221, 69, 62, 173, 119, 158, 61, 242, 166, 68, 62, 254, 34, 145, 61, 165, 129, 16, 62, 236, 218, 168, 61, 90, 177, 64, 62, 243, 72, 204, 189, 178, 110, 130, 62, 115, 252, 198, 61, 210, 78, 136, 190, 33, 69, 125, 61, 162, 116, 2, 191, 253, 230, 31, 62, 83, 181, 12, 62, 173, 72, 162, 190, 25, 59, 45, 62, 44, 24, 33, 61, 213, 37, 171, 189, 203, 216, 223, 189, 69, 198, 94, 189, 213, 87, 130, 61, 215, 21, 85, 190, 102, 153, 145, 189, 118, 218, 151, 189, 190, 228, 237, 61, 138, 50, 125, 189, 208, 176, 165, 189, 235, 163, 133, 63, 195, 138, 48, 62, 69, 255, 46, 62, 217, 4, 174, 62, 95, 64, 216, 62, 222, 232, 86, 190, 60, 177, 204, 189, 21, 65, 165, 190, 114, 6, 99, 190, 215, 37, 241, 188, 133, 52, 74, 189, 171, 73, 146, 190, 58, 28, 33, 190, 146, 180, 45, 62, 75, 222, 162, 62, 96, 173, 136, 190, 235, 239, 77, 63, 41, 95, 235, 188, 158, 49, 98, 60, 242, 164, 19, 63, 36, 126, 217, 189, 195, 81, 177, 188, 14, 122, 46, 189, 226, 217, 196, 60, 85, 137, 7, 191, 26, 161, 41, 190, 47, 19, 126, 191, 199, 27, 193, 61, 163, 191, 170, 190, 44, 11, 149, 188, 243, 85, 251, 62, 248, 173, 239, 190, 170, 23, 101, 62, 68, 135, 144, 189, 249, 110, 11, 61, 79, 235, 72, 61, 251, 96, 19, 60, 245, 168, 4, 191, 196, 174, 22, 191, 173, 82, 5, 190, 123, 183, 255, 189, 204, 91, 44, 190, 194, 36, 57, 62, 73, 108, 250, 190, 41, 150, 50, 62, 62, 204, 80, 62, 10, 194, 28, 190, 87, 129, 184, 62, 129, 45, 86, 62, 124, 86, 85, 61, 114, 148, 195, 61, 123, 182, 45, 60, 152, 31, 29, 190, 77, 170, 160, 61, 167, 226, 113, 188, 208, 231, 100, 61, 240, 174, 228, 61, 174, 193, 133, 190, 86, 58, 69, 191, 170, 100, 149, 62, 179, 176, 62, 190, 77, 120, 125, 191, 128, 54, 125, 62, 1, 27, 156, 191, 30, 27, 104, 60, 13, 69, 27, 62, 207, 229, 253, 62, 69, 134, 80, 191, 76, 126, 142, 189, 84, 225, 201, 189, 30, 43, 146, 190, 219, 171, 25, 190, 89, 191, 220, 190, 37, 127, 164, 62, 90, 152, 220, 190, 95, 195, 109, 62, 223, 202, 157, 190, 132, 64, 189, 62, 84, 37, 25, 62, 110, 145, 187, 62, 41, 219, 159, 190, 142, 35, 69, 61, 237, 38, 106, 190, 35, 174, 60, 191, 171, 177, 132, 62, 84, 224, 110, 191, 193, 101, 159, 190, 103, 118, 157, 62, 160, 182, 188, 189, 243, 124, 146, 190, 136, 124, 191, 62, 98, 3, 199, 190, 238, 205, 174, 61, 118, 26, 65, 191, 75, 220, 37, 191, 74, 148, 203, 190, 126, 81, 246, 62, 226, 164, 163, 61, 105, 255, 159, 61, 99, 55, 229, 61, 190, 156, 139, 62, 24, 126, 9, 191, 117, 109, 71, 190, 204, 63, 16, 190, 185, 74, 51, 190, 18, 224, 188, 189, 189, 202, 208, 61, 90, 34, 193, 190, 15, 124, 65, 62, 109, 1, 73, 190, 197, 207, 89, 189, 185, 67, 149, 62, 86, 21, 197, 58, 254, 184, 93, 190, 194, 76, 62, 62, 102, 0, 135, 62, 89, 49, 171, 189, 246, 84, 72, 62, 244, 7, 40, 190, 179, 100, 197, 187, 167, 165, 236, 61, 177, 75, 71, 190, 114, 79, 48, 191, 103, 240, 38, 63, 4, 41, 223, 190, 15, 164, 82, 191, 68, 13, 175, 189, 62, 228, 210, 190, 120, 119, 10, 63, 252, 108, 16, 190, 146, 177, 109, 190, 9, 184, 33, 62, 69, 88, 186, 61, 114, 77, 15, 191, 114, 178, 84, 190, 24, 42, 114, 189, 200, 148, 62, 190, 231, 75, 163, 62, 11, 120, 79, 62, 225, 253, 203, 190, 52, 139, 127, 61, 54, 44, 185, 190, 10, 135, 200, 189, 141, 24, 125, 62, 123, 232, 79, 62, 152, 215, 38, 63, 128, 226, 127, 62, 101, 123, 129, 62, 83, 228, 197, 189, 159, 9, 127, 189, 7, 153, 54, 190, 0, 39, 68, 190, 130, 106, 0, 62, 130, 232, 94, 62, 241, 86, 170, 191, 204, 254, 245, 190, 164, 150, 8, 191, 171, 25, 83, 191, 35, 94, 31, 62, 196, 85, 188, 191, 10, 224, 130, 62, 239, 134, 74, 190, 216, 153, 31, 62, 91, 102, 4, 189, 243, 45, 151, 62, 209, 28, 189, 190, 233, 47, 152, 191, 175, 242, 155, 191, 177, 22, 24, 190, 31, 163, 143, 190, 227, 10, 111, 62, 21, 111, 34, 191, 172, 247, 9, 62, 81, 192, 99, 60, 233, 95, 164, 61, 102, 245, 138, 62, 151, 227, 128, 62, 124, 78, 129, 62, 163, 193, 247, 59, 126, 36, 57, 62, 67, 144, 45, 190, 248, 26, 252, 61, 76, 239, 133, 190, 11, 218, 109, 62, 255, 155, 139, 62, 27, 57, 159, 191, 239, 189, 98, 191, 32, 15, 137, 62, 196, 69, 251, 190, 42, 106, 151, 191, 165, 68, 60, 61, 83, 99, 124, 62, 217, 183, 208, 190, 168, 177, 66, 61, 109, 91, 97, 62, 237, 120, 132, 190, 239, 218, 164, 190, 175, 215, 135, 62, 195, 239, 11, 62, 72, 80, 17, 187, 217, 220, 91, 62, 21, 200, 141, 62, 216, 60, 223, 61, 162, 144, 1, 191, 208, 207, 54, 61, 239, 188, 56, 61, 86, 179, 65, 190, 198, 213, 116, 62, 31, 39, 66, 191, 245, 127, 249, 59, 208, 46, 253, 187, 194, 117, 225, 190, 76, 220, 163, 62, 169, 150, 69, 190, 105, 159, 156, 189, 77, 201, 220, 189, 22, 118, 35, 61, 102, 3, 136, 189, 199, 69, 227, 61, 202, 151, 39, 190, 179, 126, 62, 62, 6, 38, 133, 62, 166, 241, 220, 190, 117, 219, 83, 60, 110, 136, 167, 190, 175, 201, 158, 62, 32, 85, 142, 190, 23, 184, 27, 59, 221, 217, 239, 190, 192, 82, 60, 62, 158, 16, 40, 62, 56, 238, 229, 61, 87, 65, 55, 62, 233, 180, 73, 187, 70, 91, 9, 62, 79, 35, 181, 189, 122, 1, 92, 62, 93, 179, 166, 189, 228, 43, 7, 190, 86, 150, 243, 189, 174, 49, 68, 191, 12, 230, 181, 190, 223, 101, 170, 189, 117, 28, 223, 190, 182, 105, 183, 62, 81, 55, 224, 189, 185, 236, 150, 188, 41, 146, 95, 62, 204, 94, 145, 61, 14, 99, 30, 62, 210, 199, 44, 62, 220, 102, 33, 190, 134, 182, 36, 189, 40, 6, 93, 188, 89, 157, 186, 190, 231, 162, 213, 188, 141, 146, 33, 63, 30, 233, 158, 60, 83, 15, 42, 189, 111, 114, 180, 62, 28, 112, 209, 62, 211, 120, 242, 61, 0, 48, 170, 185, 228, 212, 85, 189, 149, 133, 190, 190, 44, 33, 48, 190, 224, 28, 150, 61, 5, 233, 31, 189, 14, 251, 215, 60, 141, 59, 95, 61, 161, 131, 77, 62, 211, 252, 102, 190, 158, 14, 208, 62, 97, 7, 209, 190, 232, 90, 231, 190, 216, 113, 194, 62, 71, 42, 36, 188, 244, 170, 129, 62, 237, 177, 169, 61, 138, 170, 174, 61, 130, 101, 75, 191, 141, 167, 237, 189, 123, 37, 3, 191, 180, 154, 28, 62, 188, 128, 132, 190, 95, 52, 245, 60, 237, 190, 217, 61, 73, 166, 67, 191, 126, 119, 248, 61, 72, 162, 235, 61, 186, 193, 81, 189, 222, 135, 49, 62, 87, 237, 33, 190, 208, 10, 252, 190, 220, 175, 70, 62, 36, 147, 230, 190, 175, 162, 0, 190, 181, 95, 89, 62, 149, 122, 86, 62, 154, 128, 231, 190, 231, 245, 65, 62, 170, 9, 110, 190, 255, 163, 208, 62, 57, 13, 143, 61, 7, 93, 36, 62, 190, 125, 152, 62, 4, 234, 161, 62, 130, 41, 129, 62, 8, 38, 20, 190, 123, 154, 137, 60, 223, 93, 50, 190, 183, 206, 182, 190, 22, 39, 40, 62, 20, 69, 14, 190, 31, 143, 157, 191, 143, 137, 135, 62, 45, 229, 243, 190, 86, 61, 83, 191, 109, 145, 197, 61, 75, 199, 208, 189, 185, 14, 42, 63, 185, 24, 50, 189, 251, 155, 3, 62, 91, 251, 26, 189, 149, 205, 212, 61, 223, 73, 107, 189, 177, 36, 66, 61, 88, 212, 211, 61, 101, 120, 163, 190, 122, 208, 63, 189, 132, 173, 104, 189, 117, 158, 156, 62, 134, 37, 208, 189, 183, 117, 222, 59, 246, 52, 52, 62, 186, 174, 194, 188, 108, 109, 197, 62, 222, 109, 50, 62, 16, 246, 235, 190, 30, 46, 185, 59, 4, 153, 79, 189, 195, 133, 196, 61, 248, 43, 1, 62, 83, 35, 25, 62, 225, 192, 195, 190, 63, 48, 70, 62, 241, 187, 72, 62, 170, 77, 193, 189, 250, 114, 162, 62, 67, 254, 34, 62, 64, 91, 82, 62, 201, 146, 145, 189, 59, 65, 82, 187, 84, 6, 70, 62, 231, 108, 195, 62, 53, 206, 4, 62, 165, 65, 152, 189, 148, 250, 229, 190, 206, 226, 145, 61, 250, 64, 122, 190, 74, 150, 123, 190, 55, 164, 117, 61, 233, 174, 128, 61, 191, 241, 166, 190, 143, 31, 103, 190, 128, 77, 232, 62, 143, 197, 165, 189, 31, 118, 165, 191, 78, 24, 147, 191, 60, 52, 175, 62, 61, 9, 243, 60, 48, 159, 13, 190, 250, 118, 221, 61, 159, 195, 124, 62, 6, 75, 128, 189, 16, 244, 131, 59, 190, 112, 156, 190, 201, 202, 68, 190, 192, 51, 37, 190, 224, 44, 146, 61, 21, 220, 12, 62, 238, 178, 113, 190, 212, 214, 148, 190, 2, 193, 216, 189, 27, 225, 68, 63, 90, 110, 186, 61, 202, 216, 186, 190, 61, 41, 191, 62, 186, 172, 160, 62, 6, 176, 244, 189, 147, 124, 9, 190, 18, 131, 74, 190, 137, 57, 146, 190, 50, 131, 153, 189, 199, 127, 66, 62, 191, 154, 14, 189, 94, 228, 65, 189, 227, 32, 227, 61, 85, 225, 70, 62, 77, 91, 9, 60, 150, 231, 178, 62, 162, 203, 186, 190, 52, 110, 40, 62, 58, 84, 13, 63, 99, 66, 138, 61, 168, 188, 86, 61, 10, 149, 4, 189, 69, 206, 164, 61, 15, 26, 126, 190, 228, 99, 19, 190, 239, 208, 34, 191, 208, 43, 155, 189, 9, 183, 152, 190, 198, 96, 161, 190, 39, 186, 214, 62, 148, 15, 246, 61, 168, 183, 41, 62, 78, 205, 246, 189, 166, 128, 199, 60, 199, 19, 16, 190, 4, 242, 163, 60, 141, 235, 122, 190, 253, 219, 125, 59, 168, 127, 78, 187, 226, 186, 158, 188, 56, 136, 54, 190, 98, 0, 148, 190, 24, 189, 98, 189, 228, 23, 142, 189, 242, 224, 38, 190, 37, 136, 107, 61, 84, 180, 111, 190, 127, 86, 194, 60, 187, 134, 131, 61, 89, 39, 1, 190, 125, 60, 7, 189, 202, 12, 191, 61, 207, 210, 254, 189, 145, 28, 168, 186, 20, 0, 133, 190, 212, 52, 125, 190, 61, 108, 3, 190, 122, 237, 8, 189, 21, 138, 142, 61, 78, 112, 141, 61, 248, 16, 139, 61, 120, 169, 138, 188, 80, 26, 58, 190, 163, 151, 81, 61, 135, 66, 35, 62, 180, 61, 111, 59, 25, 169, 162, 189, 137, 7, 52, 190, 100, 33, 75, 61, 122, 25, 173, 60, 237, 22, 241, 61, 49, 98, 4, 62, 26, 36, 36, 190, 169, 248, 178, 189, 124, 29, 77, 188, 140, 166, 75, 189, 15, 66, 195, 61, 37, 122, 25, 190, 17, 61, 233, 188, 100, 146, 91, 60, 50, 147, 121, 188, 49, 3, 48, 190, 241, 124, 98, 188, 203, 124, 173, 189, 190, 169, 172, 189, 128, 127, 51, 190, 130, 177, 178, 187, 150, 93, 238, 187, 97, 247, 35, 190, 173, 218, 42, 190, 206, 81, 153, 61, 181, 175, 210, 189, 151, 41, 230, 189, 41, 191, 141, 61, 217, 203, 208, 190, 195, 12, 144, 62, 79, 180, 8, 61, 149, 104, 195, 190, 116, 11, 148, 62, 221, 79, 238, 61, 240, 162, 226, 61, 69, 7, 72, 62, 43, 70, 124, 60, 22, 90, 147, 61, 143, 88, 169, 189, 73, 227, 78, 61, 21, 255, 144, 190, 23, 222, 65, 187, 133, 170, 120, 60, 58, 185, 245, 189, 45, 96, 34, 188, 55, 65, 212, 62, 217, 132, 154, 190, 119, 77, 199, 61, 61, 43, 33, 190, 254, 79, 137, 61, 37, 158, 128, 62, 72, 4, 246, 189, 72, 194, 54, 189, 74, 44, 178, 190, 242, 36, 188, 188, 152, 200, 128, 191, 128, 119, 159, 62, 74, 36, 149, 190, 129, 248, 167, 190, 74, 71, 108, 62, 152, 148, 161, 191, 84, 161, 7, 63, 145, 98, 203, 61, 206, 18, 92, 190, 114, 180, 215, 61, 174, 184, 147, 62, 51, 34, 78, 191, 197, 191, 139, 191, 50, 214, 133, 191, 2, 58, 129, 190, 203, 101, 40, 190, 29, 107, 90, 62, 240, 152, 216, 61, 17, 188, 99, 62, 157, 68, 162, 190, 74, 6, 67, 62, 116, 22, 193, 62, 157, 166, 93, 62, 207, 4, 176, 62, 209, 13, 74, 62, 111, 59, 207, 188, 153, 21, 96, 190, 226, 60, 134, 189, 231, 31, 187, 61, 58, 140, 240, 190, 172, 2, 158, 62, 78, 67, 18, 191, 57, 105, 2, 191, 2, 75, 112, 190, 45, 250, 140, 190, 186, 165, 136, 191, 171, 97, 138, 189, 4, 219, 131, 61, 99, 34, 203, 189, 58, 53, 238, 61, 141, 23, 154, 62, 42, 43, 164, 190, 235, 14, 200, 188, 50, 80, 166, 189, 251, 231, 177, 61, 128, 138, 136, 61, 98, 140, 45, 191, 175, 206, 7, 61, 21, 231, 209, 190, 245, 3, 133, 190, 72, 97, 16, 191, 124, 6, 46, 62, 3, 7, 40, 190, 136, 228, 236, 188, 84, 181, 191, 189, 164, 236, 142, 62, 99, 14, 49, 190, 80, 237, 19, 190, 191, 255, 158, 190, 249, 10, 187, 190, 11, 101, 62, 191, 74, 187, 190, 61, 187, 95, 196, 190, 148, 184, 63, 62, 103, 0, 177, 62, 43, 57, 242, 61, 252, 202, 26, 61, 130, 203, 51, 190, 232, 204, 3, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 115, 234, 61, 12, 49, 214, 62, 231, 39, 105, 62, 2, 37, 179, 62, 232, 74, 46, 60, 175, 15, 174, 62, 74, 54, 68, 61, 109, 109, 17, 190, 27, 128, 157, 190, 213, 249, 64, 62, 62, 2, 64, 190, 116, 191, 235, 62, 254, 153, 145, 62, 18, 67, 184, 62, 31, 252, 3, 62, 123, 244, 93, 61, 36, 100, 179, 61, 54, 199, 31, 62, 45, 224, 95, 60, 218, 34, 146, 62, 155, 221, 93, 62, 190, 118, 121, 62, 230, 2, 187, 189, 207, 86, 13, 190, 232, 23, 249, 189, 154, 179, 207, 62, 184, 46, 250, 188, 48, 189, 42, 189, 89, 18, 161, 61, 185, 214, 11, 190, 173, 184, 4, 62, 65, 180, 103, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 233, 25, 191, 97, 221, 50, 190, 250, 98, 213, 190, 76, 9, 84, 63, 16, 113, 61, 62, 50, 13, 115, 191, 65, 247, 252, 62, 19, 28, 208, 187, 13, 126, 29, 191, 236, 230, 200, 190, 207, 208, 91, 191, 227, 240, 167, 190, 212, 212, 145, 189, 121, 142, 5, 190, 213, 205, 12, 63, 221, 179, 200, 62, 55, 57, 89, 63, 29, 122, 129, 62, 118, 16, 155, 63, 194, 4, 139, 63, 45, 7, 3, 191, 53, 111, 227, 190, 213, 12, 128, 62, 160, 145, 129, 63, 42, 49, 28, 62, 149, 93, 60, 191, 52, 176, 172, 62, 204, 188, 201, 61, 222, 221, 23, 61, 185, 51, 26, 63, 30, 91, 41, 63, 65, 234, 202, 62, 175, 242, 153, 62, 120, 7, 170, 190, 131, 118, 222, 61, 131, 46, 104, 62, 200, 109, 71, 190, 117, 1, 27, 190, 36, 176, 213, 61, 10, 167, 243, 61, 16, 45, 120, 61, 99, 18, 99, 60, 220, 119, 233, 61, 231, 46, 4, 190, 228, 214, 71, 190, 225, 135, 130, 190, 117, 80, 78, 189, 98, 9, 151, 189, 251, 180, 217, 188, 107, 193, 28, 191, 36, 69, 34, 61, 142, 168, 118, 61, 171, 98, 190, 62, 115, 11, 4, 188, 222, 53, 143, 190, 53, 194, 63, 62, 254, 122, 136, 189, 130, 106, 85, 190, 52, 62, 28, 190, 219, 188, 158, 58, 116, 231, 231, 61, 210, 30, 159, 190, 70, 252, 135, 60, 182, 143, 255, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 245, 22, 190, 172, 6, 109, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {39, 239, 105, 63, 50, 28, 25, 191, 97, 245, 216, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {192, 246, 124, 62, 250, 81, 176, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0091/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}