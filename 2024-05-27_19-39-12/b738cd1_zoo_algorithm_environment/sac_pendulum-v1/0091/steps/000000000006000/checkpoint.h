// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 19, 63, 191, 182, 241, 33, 191, 44, 189, 14, 191, 47, 106, 140, 189, 109, 130, 58, 191, 88, 191, 133, 188, 46, 109, 29, 63, 201, 181, 234, 187, 88, 5, 131, 62, 243, 59, 87, 190, 2, 166, 150, 63, 220, 43, 252, 189, 216, 47, 66, 63, 249, 72, 212, 190, 135, 112, 233, 190, 126, 28, 180, 190, 230, 173, 99, 62, 107, 22, 3, 63, 173, 108, 162, 189, 235, 159, 10, 191, 126, 76, 194, 190, 219, 222, 99, 190, 63, 100, 62, 62, 20, 15, 54, 191, 35, 253, 18, 191, 181, 237, 151, 190, 206, 188, 11, 191, 126, 6, 183, 190, 117, 204, 235, 190, 242, 137, 109, 62, 105, 237, 183, 190, 100, 78, 19, 62, 117, 206, 31, 190, 146, 242, 194, 62, 157, 230, 12, 191, 89, 199, 82, 61, 195, 6, 38, 62, 181, 1, 147, 62, 130, 73, 181, 62, 1, 48, 95, 190, 7, 237, 35, 191, 204, 164, 77, 189, 13, 82, 254, 61, 223, 51, 53, 63, 4, 0, 85, 185, 218, 177, 1, 189, 80, 243, 41, 190, 159, 200, 100, 190, 182, 211, 135, 190, 55, 28, 176, 190, 58, 201, 14, 189, 149, 253, 17, 63, 128, 42, 105, 191, 141, 96, 162, 190, 216, 34, 36, 191, 156, 126, 40, 63, 81, 94, 7, 189, 45, 63, 52, 189, 115, 105, 250, 190, 96, 81, 22, 63, 77, 35, 173, 62, 190, 115, 91, 190, 169, 93, 189, 190, 235, 1, 43, 63, 122, 119, 80, 63, 93, 90, 26, 62, 224, 156, 65, 63, 221, 35, 53, 190, 248, 8, 187, 190, 215, 120, 107, 190, 73, 43, 158, 61, 31, 100, 154, 62, 233, 104, 31, 190, 109, 140, 128, 62, 171, 112, 137, 190, 151, 45, 55, 191, 220, 66, 33, 190, 251, 53, 143, 189, 147, 161, 10, 191, 102, 170, 167, 190, 67, 67, 29, 191, 232, 212, 80, 63, 253, 179, 123, 63, 9, 159, 142, 62, 67, 15, 40, 63, 74, 119, 223, 62, 202, 57, 29, 190, 154, 199, 216, 62, 162, 224, 98, 63, 175, 136, 235, 62, 172, 162, 125, 190, 147, 20, 89, 191, 59, 132, 9, 191, 168, 216, 247, 62, 75, 63, 11, 191, 18, 199, 230, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 241, 208, 190, 101, 189, 48, 191, 174, 109, 96, 189, 27, 250, 179, 62, 29, 232, 171, 61, 227, 239, 132, 190, 152, 73, 133, 62, 95, 220, 252, 189, 131, 127, 58, 190, 210, 14, 108, 190, 26, 45, 184, 62, 62, 104, 24, 63, 185, 70, 104, 191, 7, 247, 243, 62, 248, 249, 177, 62, 188, 228, 118, 190, 45, 74, 140, 62, 122, 75, 177, 190, 116, 113, 44, 62, 115, 19, 85, 62, 61, 238, 101, 190, 222, 61, 123, 62, 213, 152, 137, 62, 52, 242, 237, 190, 231, 56, 42, 63, 158, 148, 136, 60, 151, 77, 141, 189, 184, 155, 28, 191, 254, 181, 151, 190, 49, 166, 212, 189, 27, 175, 110, 61, 91, 37, 141, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 168, 161, 189, 106, 181, 152, 190, 163, 161, 46, 62, 99, 231, 21, 62, 21, 248, 4, 190, 193, 120, 139, 190, 38, 115, 202, 61, 202, 66, 5, 62, 131, 35, 63, 188, 54, 246, 96, 189, 214, 174, 15, 62, 203, 111, 145, 189, 216, 196, 124, 61, 102, 230, 137, 189, 117, 37, 209, 61, 232, 83, 22, 190, 68, 99, 178, 61, 182, 67, 254, 190, 11, 134, 98, 62, 170, 7, 99, 190, 40, 81, 156, 189, 97, 118, 76, 62, 194, 182, 34, 190, 120, 252, 199, 189, 8, 214, 222, 185, 118, 207, 124, 61, 204, 253, 167, 61, 8, 213, 157, 62, 123, 117, 168, 62, 131, 158, 10, 189, 18, 137, 73, 62, 197, 231, 65, 189, 164, 108, 69, 62, 141, 99, 94, 190, 161, 174, 149, 186, 191, 131, 68, 62, 198, 65, 158, 189, 238, 124, 110, 190, 206, 95, 76, 189, 81, 93, 58, 62, 32, 59, 111, 189, 138, 248, 168, 188, 210, 85, 8, 61, 89, 86, 199, 62, 77, 86, 33, 190, 61, 232, 239, 61, 67, 84, 149, 61, 48, 224, 27, 190, 104, 155, 179, 189, 18, 203, 88, 190, 160, 64, 200, 189, 120, 116, 187, 188, 176, 60, 111, 190, 140, 99, 120, 62, 131, 19, 153, 62, 235, 239, 60, 188, 35, 51, 73, 62, 120, 19, 113, 61, 85, 98, 241, 189, 95, 76, 35, 190, 95, 73, 188, 61, 65, 134, 218, 60, 69, 216, 100, 189, 248, 71, 55, 190, 105, 33, 137, 61, 129, 63, 181, 190, 135, 113, 3, 190, 95, 110, 152, 61, 117, 63, 60, 189, 240, 232, 227, 189, 25, 128, 223, 61, 40, 171, 241, 61, 68, 248, 226, 61, 218, 114, 142, 61, 10, 51, 140, 61, 244, 185, 138, 61, 218, 88, 241, 189, 88, 19, 190, 61, 11, 13, 202, 187, 151, 242, 181, 190, 109, 251, 25, 62, 255, 178, 2, 191, 39, 89, 140, 189, 238, 30, 45, 62, 131, 249, 82, 190, 32, 43, 73, 62, 154, 103, 118, 190, 128, 177, 246, 189, 238, 6, 44, 62, 8, 243, 218, 61, 48, 253, 187, 189, 144, 85, 228, 61, 186, 109, 97, 62, 30, 247, 249, 61, 215, 3, 129, 62, 115, 212, 70, 190, 158, 216, 219, 189, 168, 185, 117, 189, 128, 104, 137, 189, 205, 254, 154, 62, 194, 34, 37, 190, 245, 203, 16, 189, 125, 32, 195, 189, 118, 179, 72, 190, 184, 232, 178, 61, 194, 206, 145, 190, 121, 248, 26, 189, 11, 190, 207, 189, 82, 98, 194, 190, 80, 39, 52, 189, 123, 192, 74, 189, 107, 177, 74, 190, 5, 111, 184, 60, 187, 3, 98, 189, 96, 235, 132, 62, 58, 236, 188, 190, 4, 156, 129, 190, 163, 179, 21, 62, 207, 109, 6, 190, 172, 157, 173, 190, 249, 170, 158, 59, 25, 194, 36, 62, 64, 135, 168, 189, 114, 37, 69, 189, 255, 121, 66, 62, 111, 82, 221, 60, 40, 2, 68, 61, 205, 145, 187, 61, 159, 239, 147, 190, 222, 233, 153, 62, 173, 52, 76, 189, 77, 61, 35, 190, 105, 207, 148, 62, 233, 139, 52, 62, 9, 72, 196, 188, 242, 147, 8, 190, 182, 187, 166, 189, 170, 19, 3, 190, 40, 95, 69, 190, 79, 75, 95, 62, 166, 129, 208, 60, 200, 165, 132, 61, 40, 78, 251, 188, 8, 91, 131, 61, 6, 239, 39, 190, 207, 36, 130, 62, 107, 248, 80, 62, 172, 112, 7, 62, 14, 176, 61, 189, 213, 82, 31, 62, 36, 131, 182, 61, 218, 219, 115, 189, 91, 127, 146, 189, 228, 205, 12, 189, 230, 97, 36, 189, 39, 163, 22, 191, 82, 248, 26, 189, 142, 88, 66, 190, 158, 55, 10, 190, 34, 250, 122, 62, 142, 152, 10, 62, 129, 122, 135, 190, 93, 106, 203, 189, 203, 181, 144, 189, 54, 144, 167, 190, 52, 27, 103, 191, 210, 186, 188, 60, 98, 101, 152, 188, 227, 137, 177, 61, 112, 106, 139, 62, 82, 239, 156, 61, 164, 53, 109, 61, 249, 241, 111, 187, 158, 103, 255, 61, 12, 50, 200, 61, 87, 154, 161, 189, 95, 6, 207, 61, 113, 250, 27, 191, 136, 151, 126, 61, 214, 161, 21, 191, 202, 107, 201, 190, 131, 31, 170, 62, 84, 22, 23, 190, 50, 212, 128, 189, 149, 223, 164, 62, 5, 239, 249, 61, 212, 131, 11, 62, 56, 36, 46, 62, 160, 15, 247, 61, 226, 11, 20, 61, 98, 161, 21, 62, 83, 212, 189, 189, 230, 229, 107, 190, 21, 239, 155, 62, 235, 157, 212, 189, 72, 180, 66, 62, 94, 115, 93, 190, 230, 12, 181, 188, 131, 38, 86, 190, 236, 142, 18, 60, 248, 183, 17, 188, 6, 134, 202, 190, 239, 37, 87, 189, 233, 111, 122, 190, 26, 119, 44, 190, 181, 114, 15, 62, 162, 186, 63, 189, 211, 131, 183, 189, 111, 99, 32, 190, 36, 135, 106, 60, 192, 126, 134, 62, 208, 152, 39, 190, 9, 176, 52, 60, 127, 117, 68, 189, 178, 14, 37, 190, 86, 245, 178, 189, 127, 255, 228, 61, 11, 188, 97, 62, 105, 48, 229, 60, 202, 110, 103, 61, 96, 121, 68, 190, 119, 49, 235, 187, 214, 254, 35, 189, 201, 135, 141, 61, 158, 21, 152, 189, 65, 93, 52, 189, 143, 117, 197, 189, 55, 125, 250, 189, 252, 243, 184, 189, 183, 3, 168, 188, 126, 168, 36, 60, 126, 124, 182, 189, 177, 106, 144, 61, 153, 11, 83, 61, 46, 142, 253, 61, 41, 94, 27, 62, 45, 138, 236, 189, 229, 138, 41, 190, 146, 47, 209, 61, 179, 193, 38, 190, 76, 145, 9, 190, 96, 105, 238, 189, 11, 166, 239, 60, 225, 30, 248, 189, 69, 253, 201, 189, 234, 30, 52, 190, 27, 188, 155, 61, 88, 113, 81, 189, 193, 231, 179, 61, 125, 83, 29, 189, 150, 255, 21, 61, 172, 208, 85, 189, 138, 196, 51, 190, 3, 121, 15, 190, 140, 64, 40, 190, 215, 209, 140, 61, 238, 140, 62, 190, 20, 250, 59, 62, 9, 137, 86, 189, 206, 24, 164, 188, 245, 40, 46, 62, 9, 87, 126, 62, 135, 47, 134, 61, 29, 141, 41, 190, 42, 22, 249, 188, 247, 35, 128, 61, 38, 216, 164, 190, 56, 28, 184, 188, 127, 196, 9, 62, 80, 78, 181, 189, 8, 2, 106, 190, 9, 97, 48, 190, 221, 173, 79, 61, 192, 162, 20, 63, 89, 95, 217, 60, 167, 208, 73, 62, 180, 216, 7, 60, 34, 58, 153, 190, 49, 48, 200, 61, 239, 146, 26, 61, 167, 75, 180, 189, 198, 138, 157, 61, 177, 212, 154, 190, 245, 109, 241, 188, 69, 66, 53, 60, 234, 27, 79, 190, 28, 252, 136, 190, 246, 219, 34, 62, 175, 154, 228, 188, 32, 219, 140, 190, 187, 230, 135, 62, 163, 132, 30, 190, 165, 107, 86, 189, 103, 247, 135, 190, 13, 14, 13, 189, 18, 90, 228, 61, 185, 86, 18, 62, 48, 127, 141, 60, 28, 139, 203, 61, 234, 125, 229, 61, 231, 220, 124, 189, 80, 64, 53, 190, 148, 161, 196, 189, 204, 232, 52, 61, 83, 17, 3, 189, 39, 14, 223, 190, 122, 162, 30, 190, 50, 143, 188, 189, 194, 93, 70, 190, 121, 1, 246, 61, 131, 118, 190, 189, 148, 113, 31, 190, 188, 116, 79, 62, 55, 148, 184, 60, 130, 191, 247, 61, 127, 100, 128, 62, 41, 66, 158, 62, 78, 138, 51, 189, 35, 203, 235, 61, 83, 152, 186, 59, 134, 73, 143, 190, 158, 161, 118, 190, 87, 159, 50, 188, 78, 1, 183, 190, 145, 90, 160, 62, 36, 132, 188, 62, 66, 44, 134, 189, 59, 230, 194, 189, 125, 218, 235, 189, 224, 128, 225, 61, 187, 81, 147, 190, 43, 189, 153, 59, 175, 33, 107, 189, 136, 104, 93, 189, 41, 85, 173, 190, 122, 120, 207, 189, 131, 145, 34, 188, 15, 194, 125, 62, 41, 129, 115, 190, 104, 227, 86, 62, 61, 232, 160, 62, 212, 96, 202, 190, 168, 215, 42, 62, 67, 113, 237, 61, 255, 60, 13, 190, 149, 232, 87, 190, 42, 219, 213, 59, 81, 238, 53, 61, 8, 239, 163, 62, 204, 253, 99, 190, 81, 32, 219, 189, 87, 162, 123, 62, 251, 155, 58, 62, 244, 231, 136, 190, 73, 192, 141, 59, 15, 152, 74, 187, 152, 14, 232, 189, 229, 63, 34, 190, 202, 110, 49, 62, 78, 247, 255, 189, 171, 45, 255, 61, 119, 203, 113, 190, 124, 67, 229, 61, 169, 129, 71, 62, 146, 112, 146, 190, 184, 179, 77, 60, 47, 58, 6, 62, 34, 220, 167, 189, 213, 246, 129, 61, 178, 19, 141, 190, 48, 43, 11, 61, 94, 210, 5, 190, 51, 252, 91, 190, 216, 135, 56, 61, 127, 51, 44, 189, 45, 108, 170, 189, 208, 11, 41, 62, 75, 150, 58, 61, 170, 171, 167, 61, 61, 114, 71, 62, 200, 26, 47, 62, 137, 20, 17, 62, 184, 211, 206, 189, 102, 184, 131, 190, 120, 202, 2, 62, 102, 141, 177, 187, 105, 14, 3, 190, 181, 69, 50, 190, 49, 35, 214, 61, 97, 79, 30, 62, 40, 11, 193, 61, 145, 54, 162, 189, 68, 108, 131, 188, 31, 238, 83, 189, 184, 124, 18, 189, 118, 242, 236, 61, 156, 185, 14, 190, 63, 241, 66, 60, 145, 28, 62, 62, 190, 140, 129, 61, 167, 106, 147, 61, 82, 131, 220, 188, 184, 0, 49, 62, 142, 177, 1, 62, 22, 6, 242, 189, 0, 155, 59, 62, 222, 182, 57, 60, 25, 171, 49, 190, 207, 59, 220, 61, 15, 129, 62, 62, 195, 107, 85, 188, 175, 116, 194, 189, 115, 52, 1, 190, 240, 238, 220, 60, 238, 150, 151, 189, 132, 40, 156, 61, 37, 183, 45, 62, 97, 108, 173, 190, 99, 77, 0, 62, 196, 152, 80, 62, 208, 241, 187, 188, 186, 105, 243, 61, 15, 6, 70, 61, 171, 74, 10, 62, 11, 51, 188, 61, 243, 240, 6, 62, 34, 143, 35, 189, 64, 204, 232, 61, 62, 25, 163, 189, 188, 241, 43, 187, 33, 215, 241, 61, 92, 214, 89, 190, 208, 69, 32, 189, 114, 20, 166, 190, 0, 193, 137, 61, 199, 121, 132, 189, 184, 135, 143, 190, 181, 11, 36, 62, 255, 7, 83, 61, 103, 84, 222, 189, 244, 176, 250, 189, 23, 213, 253, 189, 50, 93, 17, 61, 110, 104, 11, 190, 127, 209, 4, 61, 102, 97, 77, 189, 171, 177, 193, 61, 29, 89, 185, 59, 228, 242, 61, 189, 139, 147, 29, 63, 44, 110, 195, 61, 107, 228, 93, 62, 249, 96, 141, 62, 174, 107, 188, 62, 68, 8, 68, 190, 81, 25, 187, 189, 72, 116, 180, 190, 47, 23, 174, 190, 69, 254, 172, 61, 215, 170, 202, 189, 56, 148, 133, 189, 51, 245, 76, 60, 62, 186, 78, 62, 222, 126, 40, 62, 32, 198, 30, 190, 231, 188, 7, 63, 195, 235, 221, 61, 103, 65, 183, 60, 228, 243, 218, 62, 122, 233, 39, 189, 154, 85, 129, 189, 36, 141, 7, 189, 94, 99, 37, 61, 171, 2, 148, 189, 230, 90, 39, 190, 148, 79, 77, 191, 177, 151, 221, 189, 198, 226, 121, 190, 45, 119, 18, 60, 134, 25, 159, 62, 97, 101, 24, 191, 3, 6, 165, 62, 48, 2, 7, 190, 250, 235, 110, 62, 229, 178, 177, 61, 89, 79, 10, 61, 245, 138, 88, 190, 165, 98, 224, 189, 172, 46, 77, 190, 230, 76, 60, 190, 46, 94, 82, 62, 155, 199, 200, 61, 113, 202, 33, 190, 155, 31, 163, 60, 173, 173, 184, 62, 228, 142, 20, 189, 146, 0, 70, 61, 60, 237, 1, 62, 55, 5, 58, 62, 218, 175, 185, 61, 28, 28, 57, 61, 33, 174, 207, 189, 89, 202, 232, 61, 250, 61, 42, 61, 1, 88, 2, 62, 151, 33, 39, 62, 11, 2, 238, 189, 214, 251, 19, 191, 235, 32, 164, 62, 54, 226, 166, 188, 242, 103, 243, 190, 120, 146, 97, 62, 219, 139, 116, 191, 30, 27, 104, 60, 74, 98, 219, 61, 163, 138, 161, 62, 34, 94, 146, 190, 167, 134, 125, 61, 132, 220, 44, 190, 199, 255, 208, 190, 168, 98, 237, 190, 215, 42, 135, 190, 168, 237, 221, 62, 212, 173, 167, 190, 95, 77, 33, 62, 146, 194, 47, 188, 90, 235, 114, 62, 32, 149, 38, 62, 248, 172, 117, 62, 177, 148, 74, 190, 40, 243, 38, 62, 108, 199, 163, 189, 95, 72, 41, 190, 21, 201, 225, 61, 32, 237, 192, 190, 213, 122, 37, 190, 47, 54, 118, 62, 144, 75, 153, 62, 36, 43, 252, 190, 221, 170, 175, 61, 234, 86, 29, 190, 203, 34, 65, 60, 115, 80, 34, 191, 166, 253, 143, 59, 80, 6, 220, 190, 232, 138, 168, 62, 84, 54, 29, 62, 12, 175, 62, 190, 86, 231, 29, 62, 70, 228, 158, 62, 216, 207, 43, 190, 17, 215, 15, 190, 84, 185, 56, 189, 7, 234, 11, 190, 190, 110, 56, 190, 117, 116, 218, 61, 101, 61, 172, 61, 3, 194, 26, 61, 137, 239, 225, 189, 201, 5, 213, 61, 47, 88, 255, 61, 117, 218, 191, 61, 59, 243, 157, 190, 74, 18, 85, 62, 129, 182, 148, 62, 181, 199, 210, 188, 231, 56, 100, 62, 30, 131, 138, 189, 245, 151, 19, 189, 95, 254, 53, 60, 16, 172, 61, 190, 239, 149, 65, 190, 159, 172, 222, 62, 55, 88, 243, 189, 57, 58, 203, 190, 206, 248, 189, 186, 101, 120, 163, 189, 188, 96, 20, 63, 216, 185, 202, 189, 40, 19, 150, 190, 142, 93, 156, 62, 56, 131, 45, 62, 246, 18, 246, 189, 186, 150, 148, 190, 90, 178, 77, 190, 161, 190, 164, 189, 235, 116, 156, 60, 183, 197, 65, 62, 234, 91, 72, 61, 122, 204, 34, 189, 56, 126, 77, 188, 12, 245, 136, 61, 3, 195, 19, 62, 32, 60, 142, 62, 88, 66, 35, 59, 37, 70, 104, 62, 38, 5, 170, 62, 39, 108, 31, 189, 10, 66, 87, 187, 225, 8, 142, 189, 69, 89, 137, 188, 0, 69, 50, 190, 125, 244, 97, 61, 186, 146, 41, 191, 44, 40, 119, 190, 230, 220, 99, 190, 158, 176, 124, 190, 180, 40, 130, 62, 233, 2, 156, 191, 234, 14, 32, 62, 57, 211, 225, 189, 57, 194, 49, 62, 170, 87, 192, 189, 108, 201, 203, 62, 105, 167, 68, 190, 14, 177, 100, 191, 25, 103, 149, 191, 203, 198, 249, 189, 231, 18, 247, 60, 149, 97, 96, 62, 70, 161, 154, 190, 170, 37, 245, 61, 56, 239, 102, 61, 117, 175, 91, 62, 97, 110, 16, 62, 250, 43, 94, 62, 137, 41, 194, 62, 184, 243, 12, 62, 174, 240, 37, 60, 57, 36, 48, 190, 134, 20, 130, 61, 121, 90, 26, 190, 193, 252, 38, 62, 212, 48, 153, 62, 139, 73, 126, 191, 153, 49, 25, 191, 132, 204, 127, 61, 246, 43, 140, 190, 111, 149, 79, 191, 18, 101, 176, 189, 79, 90, 59, 62, 143, 65, 193, 190, 143, 99, 148, 60, 96, 248, 68, 62, 203, 109, 38, 190, 46, 9, 153, 190, 248, 54, 73, 62, 179, 254, 215, 61, 63, 1, 76, 61, 202, 178, 238, 61, 53, 95, 31, 62, 251, 206, 1, 62, 109, 131, 160, 190, 62, 209, 165, 189, 252, 220, 85, 61, 54, 230, 152, 188, 23, 114, 37, 62, 33, 120, 196, 190, 44, 164, 129, 59, 251, 48, 58, 190, 20, 45, 151, 190, 17, 38, 99, 62, 6, 215, 21, 190, 22, 63, 59, 188, 35, 154, 235, 189, 33, 194, 239, 189, 114, 120, 71, 189, 0, 147, 36, 62, 111, 89, 166, 61, 164, 200, 70, 62, 155, 179, 38, 62, 237, 138, 104, 190, 11, 103, 98, 189, 147, 117, 151, 190, 226, 11, 88, 62, 173, 150, 4, 190, 215, 12, 31, 61, 232, 243, 224, 190, 242, 159, 44, 62, 147, 155, 24, 62, 173, 151, 22, 62, 19, 217, 92, 62, 81, 22, 186, 188, 71, 89, 205, 61, 139, 71, 72, 188, 84, 12, 188, 61, 253, 149, 58, 188, 146, 220, 223, 188, 147, 220, 0, 190, 211, 16, 10, 191, 180, 134, 104, 190, 152, 120, 101, 190, 245, 142, 175, 190, 160, 5, 168, 62, 162, 137, 200, 189, 244, 79, 16, 60, 189, 61, 123, 62, 13, 92, 94, 61, 84, 149, 34, 62, 250, 107, 64, 62, 154, 150, 70, 61, 189, 244, 11, 61, 110, 67, 13, 189, 172, 27, 124, 190, 49, 124, 204, 187, 127, 197, 219, 62, 87, 152, 72, 61, 110, 57, 71, 189, 50, 249, 134, 62, 132, 8, 106, 60, 247, 163, 89, 61, 22, 87, 223, 188, 89, 147, 178, 189, 70, 70, 137, 190, 0, 221, 158, 189, 71, 58, 116, 61, 233, 140, 222, 188, 174, 207, 6, 62, 236, 230, 250, 61, 142, 82, 153, 61, 7, 69, 32, 190, 134, 184, 122, 62, 64, 73, 45, 190, 203, 215, 24, 190, 135, 120, 90, 62, 112, 251, 251, 61, 197, 188, 81, 62, 209, 96, 187, 61, 77, 61, 205, 61, 176, 149, 38, 190, 20, 144, 11, 190, 132, 147, 179, 190, 135, 27, 204, 189, 171, 39, 11, 189, 175, 219, 110, 189, 51, 250, 133, 189, 206, 139, 217, 190, 114, 225, 137, 62, 112, 0, 134, 60, 237, 182, 41, 190, 197, 20, 137, 62, 234, 98, 158, 189, 134, 120, 43, 61, 139, 94, 36, 190, 139, 171, 155, 190, 46, 9, 67, 190, 80, 254, 151, 61, 226, 7, 35, 62, 194, 20, 28, 188, 53, 62, 41, 62, 123, 26, 229, 60, 131, 169, 251, 61, 68, 69, 72, 62, 187, 107, 158, 62, 143, 102, 16, 62, 78, 0, 0, 62, 27, 98, 90, 62, 155, 240, 53, 190, 117, 252, 33, 61, 215, 129, 252, 188, 229, 147, 69, 190, 119, 150, 179, 61, 245, 144, 134, 189, 160, 71, 20, 191, 218, 115, 246, 61, 91, 2, 24, 190, 143, 79, 35, 190, 69, 154, 50, 62, 101, 107, 93, 189, 44, 82, 218, 62, 72, 127, 207, 60, 255, 37, 170, 61, 208, 243, 93, 188, 150, 243, 243, 189, 100, 91, 184, 189, 57, 130, 204, 61, 205, 97, 228, 61, 27, 194, 8, 191, 63, 33, 128, 61, 255, 191, 184, 187, 211, 65, 1, 190, 183, 32, 136, 61, 222, 87, 13, 189, 224, 248, 32, 62, 142, 69, 63, 188, 233, 75, 154, 62, 233, 61, 118, 62, 138, 172, 46, 190, 105, 186, 44, 189, 53, 81, 19, 189, 225, 225, 27, 62, 85, 35, 152, 189, 58, 61, 50, 62, 168, 142, 90, 61, 136, 125, 101, 62, 73, 101, 62, 189, 91, 170, 134, 190, 233, 152, 246, 61, 36, 49, 193, 61, 49, 245, 14, 62, 236, 87, 229, 189, 59, 65, 82, 187, 64, 192, 2, 62, 40, 124, 184, 62, 207, 101, 39, 62, 132, 175, 209, 189, 215, 231, 133, 190, 79, 238, 26, 61, 62, 159, 0, 190, 91, 131, 112, 189, 3, 255, 137, 189, 7, 129, 71, 58, 241, 255, 73, 190, 82, 133, 140, 190, 213, 152, 195, 62, 103, 199, 184, 61, 20, 141, 43, 191, 125, 6, 46, 191, 41, 29, 102, 62, 243, 131, 64, 190, 248, 199, 174, 188, 232, 243, 49, 61, 6, 70, 112, 62, 97, 254, 159, 189, 55, 143, 81, 187, 216, 215, 8, 191, 89, 42, 20, 190, 39, 76, 177, 189, 56, 184, 145, 61, 182, 204, 22, 62, 229, 221, 14, 62, 198, 142, 153, 189, 136, 82, 16, 190, 87, 154, 244, 62, 242, 126, 74, 62, 235, 127, 252, 190, 37, 140, 169, 62, 173, 228, 182, 62, 5, 184, 82, 188, 60, 61, 20, 190, 234, 17, 77, 190, 145, 243, 72, 190, 225, 34, 128, 189, 116, 33, 135, 62, 40, 213, 33, 61, 175, 105, 18, 61, 172, 55, 231, 61, 138, 116, 133, 62, 223, 20, 82, 61, 180, 90, 168, 62, 127, 253, 188, 190, 15, 86, 184, 62, 218, 2, 214, 62, 166, 9, 158, 61, 94, 176, 208, 60, 52, 85, 152, 187, 60, 190, 119, 187, 5, 197, 95, 190, 129, 41, 41, 190, 178, 191, 220, 190, 155, 58, 27, 190, 147, 63, 249, 189, 60, 145, 32, 190, 174, 44, 157, 62, 148, 15, 246, 61, 168, 183, 41, 62, 147, 194, 225, 189, 140, 117, 161, 60, 199, 19, 16, 190, 168, 67, 17, 61, 141, 235, 122, 190, 187, 72, 86, 59, 168, 127, 78, 187, 11, 247, 31, 188, 193, 50, 32, 190, 243, 56, 134, 190, 208, 121, 50, 189, 231, 183, 100, 189, 175, 92, 36, 190, 37, 136, 107, 61, 84, 180, 111, 190, 127, 86, 194, 60, 49, 170, 160, 61, 222, 167, 219, 189, 125, 60, 7, 189, 125, 75, 198, 61, 147, 251, 215, 189, 19, 70, 7, 61, 241, 29, 131, 190, 89, 221, 52, 190, 61, 108, 3, 190, 206, 57, 254, 188, 151, 230, 144, 61, 13, 255, 152, 61, 248, 16, 139, 61, 120, 169, 138, 188, 80, 26, 58, 190, 163, 151, 81, 61, 135, 66, 35, 62, 180, 61, 111, 59, 25, 169, 162, 189, 137, 7, 52, 190, 100, 33, 75, 61, 122, 25, 173, 60, 237, 22, 241, 61, 49, 98, 4, 62, 26, 36, 36, 190, 169, 248, 178, 189, 124, 29, 77, 188, 140, 166, 75, 189, 15, 66, 195, 61, 37, 122, 25, 190, 17, 61, 233, 188, 100, 146, 91, 60, 50, 147, 121, 188, 49, 3, 48, 190, 241, 124, 98, 188, 203, 124, 173, 189, 190, 169, 172, 189, 128, 127, 51, 190, 130, 177, 178, 187, 150, 93, 238, 187, 97, 247, 35, 190, 173, 218, 42, 190, 206, 81, 153, 61, 181, 175, 210, 189, 151, 41, 230, 189, 41, 191, 141, 61, 233, 91, 196, 190, 164, 94, 65, 189, 81, 171, 62, 189, 41, 253, 198, 190, 55, 101, 141, 62, 122, 98, 237, 189, 223, 75, 199, 61, 23, 79, 68, 62, 12, 125, 217, 189, 230, 210, 71, 190, 174, 194, 103, 189, 180, 126, 13, 60, 211, 69, 225, 189, 184, 100, 90, 189, 244, 250, 174, 61, 12, 130, 74, 190, 142, 26, 77, 190, 180, 136, 175, 62, 21, 191, 87, 190, 136, 201, 151, 188, 171, 39, 118, 190, 248, 99, 196, 61, 77, 121, 128, 62, 11, 86, 54, 190, 210, 80, 131, 189, 197, 47, 109, 190, 120, 205, 216, 189, 225, 71, 79, 191, 34, 175, 151, 62, 218, 175, 74, 190, 58, 85, 179, 190, 47, 225, 9, 62, 228, 212, 131, 191, 162, 19, 186, 62, 131, 47, 29, 61, 146, 177, 185, 188, 74, 168, 116, 62, 210, 101, 130, 62, 59, 91, 105, 190, 4, 107, 97, 191, 104, 188, 133, 191, 109, 152, 154, 190, 97, 200, 161, 61, 167, 141, 70, 62, 69, 174, 197, 60, 212, 160, 36, 62, 198, 9, 235, 189, 181, 36, 138, 62, 195, 163, 132, 62, 59, 199, 134, 62, 229, 36, 74, 62, 14, 169, 210, 61, 131, 116, 100, 62, 84, 198, 70, 190, 123, 2, 203, 57, 141, 172, 77, 61, 139, 180, 17, 190, 115, 223, 161, 62, 233, 235, 25, 191, 84, 181, 221, 190, 115, 75, 32, 189, 112, 76, 105, 190, 195, 66, 18, 191, 27, 218, 244, 61, 99, 182, 42, 62, 94, 15, 239, 188, 207, 194, 14, 190, 56, 129, 179, 62, 166, 50, 147, 190, 61, 145, 48, 188, 225, 0, 112, 189, 145, 90, 252, 61, 73, 170, 179, 61, 180, 247, 49, 191, 123, 90, 252, 61, 252, 99, 196, 190, 134, 7, 188, 190, 65, 217, 103, 190, 226, 200, 86, 62, 123, 76, 83, 190, 203, 42, 0, 62, 242, 169, 132, 190, 50, 64, 206, 62, 7, 88, 63, 190, 57, 58, 23, 190, 3, 211, 163, 189, 135, 245, 153, 190, 142, 110, 159, 190, 115, 192, 47, 62, 179, 252, 18, 62, 49, 92, 107, 62, 40, 243, 94, 189, 169, 154, 49, 190, 39, 122, 204, 189, 96, 147, 64, 190, 238, 140, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 164, 5, 62, 112, 231, 188, 62, 46, 11, 68, 62, 63, 37, 44, 62, 90, 21, 177, 59, 234, 23, 169, 62, 44, 107, 0, 61, 109, 109, 17, 190, 55, 212, 71, 190, 39, 240, 83, 62, 117, 125, 77, 190, 165, 212, 193, 62, 0, 169, 108, 62, 255, 195, 146, 62, 18, 90, 36, 62, 19, 209, 215, 60, 174, 177, 38, 62, 205, 56, 245, 61, 57, 15, 175, 189, 6, 179, 130, 62, 248, 164, 63, 62, 195, 212, 126, 62, 37, 204, 118, 60, 100, 114, 50, 190, 185, 121, 57, 189, 220, 25, 168, 62, 17, 220, 105, 187, 131, 92, 249, 188, 89, 18, 161, 61, 198, 194, 21, 190, 85, 226, 7, 62, 222, 200, 246, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 252, 130, 190, 23, 107, 9, 190, 8, 88, 80, 190, 113, 166, 144, 62, 244, 117, 111, 62, 110, 148, 61, 191, 249, 108, 85, 62, 19, 28, 208, 187, 167, 180, 151, 190, 182, 151, 128, 190, 144, 234, 13, 191, 131, 76, 138, 190, 181, 57, 3, 189, 85, 174, 211, 189, 255, 235, 176, 62, 49, 143, 151, 62, 230, 117, 42, 63, 218, 9, 124, 62, 28, 222, 228, 62, 32, 115, 75, 63, 14, 136, 153, 190, 231, 185, 185, 190, 16, 38, 250, 61, 74, 89, 148, 62, 60, 194, 23, 62, 107, 168, 10, 191, 216, 114, 230, 62, 32, 227, 7, 62, 222, 221, 23, 61, 7, 110, 50, 63, 229, 231, 236, 62, 64, 251, 11, 63, 94, 133, 68, 62, 242, 245, 100, 190, 222, 196, 132, 61, 51, 134, 131, 62, 14, 80, 92, 190, 40, 137, 183, 189, 127, 136, 19, 60, 10, 167, 243, 61, 156, 2, 12, 61, 230, 196, 141, 189, 159, 121, 145, 62, 234, 116, 15, 190, 84, 59, 77, 190, 43, 156, 29, 190, 229, 226, 130, 61, 90, 148, 237, 189, 31, 86, 75, 189, 159, 34, 105, 190, 126, 53, 38, 62, 205, 169, 108, 189, 241, 134, 42, 62, 116, 128, 48, 190, 180, 229, 111, 190, 245, 191, 235, 61, 182, 211, 134, 187, 210, 244, 129, 190, 92, 80, 141, 189, 189, 42, 34, 61, 116, 231, 231, 61, 249, 116, 140, 188, 254, 170, 149, 188, 126, 231, 36, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 39, 188, 189, 9, 215, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {103, 232, 126, 63, 155, 24, 220, 190, 81, 102, 172, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {63, 119, 18, 64, 33, 225, 153, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0091/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}