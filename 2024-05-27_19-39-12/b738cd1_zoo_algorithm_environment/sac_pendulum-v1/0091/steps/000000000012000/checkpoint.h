// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 90, 77, 191, 230, 97, 110, 191, 7, 16, 165, 190, 233, 46, 87, 189, 135, 85, 59, 191, 148, 253, 120, 189, 74, 242, 34, 63, 157, 140, 70, 190, 14, 85, 137, 62, 249, 13, 100, 190, 56, 220, 180, 63, 230, 17, 212, 189, 245, 101, 81, 63, 235, 86, 252, 190, 228, 135, 204, 190, 66, 107, 93, 190, 46, 163, 11, 62, 132, 51, 2, 63, 200, 15, 187, 189, 17, 202, 66, 191, 64, 218, 187, 190, 37, 128, 125, 190, 36, 170, 185, 62, 122, 208, 34, 191, 252, 166, 21, 191, 71, 56, 134, 190, 141, 100, 253, 190, 122, 124, 130, 190, 46, 36, 22, 191, 148, 130, 66, 62, 101, 197, 180, 190, 214, 23, 167, 62, 149, 210, 10, 190, 54, 189, 168, 62, 183, 219, 10, 191, 244, 232, 26, 60, 77, 106, 175, 62, 68, 134, 233, 62, 3, 232, 179, 62, 135, 75, 165, 190, 224, 227, 54, 191, 32, 120, 74, 189, 51, 30, 104, 61, 250, 73, 85, 63, 170, 245, 21, 60, 174, 132, 204, 62, 133, 188, 61, 190, 110, 139, 82, 190, 197, 136, 131, 190, 73, 43, 23, 191, 134, 155, 252, 189, 193, 13, 52, 63, 201, 0, 133, 191, 100, 66, 158, 190, 20, 64, 41, 191, 146, 100, 96, 63, 117, 180, 24, 61, 80, 28, 4, 60, 253, 84, 11, 191, 205, 106, 21, 63, 136, 53, 253, 62, 72, 125, 157, 190, 118, 57, 170, 190, 83, 81, 34, 63, 199, 121, 114, 63, 247, 95, 108, 62, 150, 99, 80, 63, 39, 133, 142, 190, 101, 6, 147, 190, 113, 50, 155, 190, 245, 225, 203, 61, 252, 40, 173, 62, 4, 214, 48, 190, 174, 118, 170, 62, 242, 63, 155, 190, 44, 50, 89, 191, 117, 23, 176, 60, 105, 178, 131, 61, 95, 20, 4, 191, 4, 76, 255, 189, 240, 89, 10, 191, 137, 118, 95, 63, 127, 99, 37, 63, 13, 199, 158, 62, 194, 137, 243, 62, 224, 176, 253, 62, 19, 183, 102, 190, 227, 77, 185, 62, 25, 198, 150, 63, 47, 28, 194, 62, 0, 108, 119, 190, 151, 230, 148, 191, 255, 76, 188, 190, 111, 38, 24, 63, 247, 0, 37, 191, 129, 95, 202, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 215, 22, 191, 77, 9, 64, 191, 146, 247, 94, 190, 196, 139, 160, 62, 65, 185, 61, 189, 119, 128, 114, 190, 211, 31, 47, 62, 182, 235, 145, 189, 245, 163, 26, 190, 35, 12, 176, 190, 247, 239, 167, 62, 146, 249, 6, 63, 197, 45, 135, 191, 60, 158, 250, 62, 54, 225, 184, 62, 157, 235, 6, 191, 242, 6, 119, 62, 226, 3, 190, 190, 138, 140, 27, 62, 58, 209, 165, 62, 67, 211, 171, 190, 113, 41, 132, 62, 221, 9, 17, 62, 82, 201, 241, 190, 207, 26, 31, 63, 229, 180, 247, 61, 179, 230, 52, 189, 159, 104, 48, 191, 156, 64, 184, 190, 186, 241, 10, 190, 4, 58, 3, 61, 247, 152, 204, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 16, 164, 189, 236, 72, 149, 190, 22, 102, 154, 61, 119, 49, 99, 62, 66, 47, 96, 190, 11, 179, 152, 190, 54, 234, 139, 188, 145, 123, 3, 62, 27, 169, 244, 189, 246, 134, 14, 190, 4, 57, 69, 62, 81, 128, 9, 190, 43, 103, 6, 190, 160, 225, 125, 190, 168, 45, 35, 62, 7, 164, 169, 190, 218, 54, 90, 189, 40, 87, 147, 191, 197, 180, 139, 62, 79, 130, 35, 190, 252, 232, 62, 190, 176, 218, 152, 62, 244, 127, 77, 190, 231, 90, 35, 190, 68, 84, 124, 187, 162, 73, 200, 61, 90, 3, 233, 59, 94, 24, 68, 62, 79, 7, 112, 62, 77, 141, 186, 189, 173, 233, 41, 61, 152, 226, 119, 190, 158, 121, 116, 62, 209, 224, 161, 190, 238, 99, 138, 61, 67, 228, 75, 62, 13, 229, 231, 189, 132, 71, 102, 190, 146, 152, 195, 189, 170, 197, 59, 62, 216, 99, 95, 189, 37, 87, 246, 189, 127, 69, 169, 61, 192, 220, 210, 62, 208, 43, 182, 190, 18, 128, 97, 62, 75, 254, 90, 61, 186, 233, 125, 190, 188, 248, 152, 189, 233, 220, 233, 190, 239, 102, 172, 186, 163, 92, 230, 60, 59, 100, 155, 190, 223, 121, 133, 62, 5, 20, 140, 62, 204, 101, 226, 188, 105, 87, 72, 62, 230, 77, 50, 62, 131, 136, 213, 189, 46, 57, 95, 190, 24, 116, 176, 189, 31, 140, 199, 188, 223, 42, 188, 189, 180, 165, 140, 190, 246, 109, 190, 61, 214, 19, 232, 189, 245, 47, 93, 190, 62, 143, 199, 61, 241, 238, 230, 189, 48, 122, 163, 189, 75, 244, 13, 62, 100, 25, 227, 61, 243, 7, 90, 61, 26, 39, 165, 61, 47, 235, 19, 62, 229, 130, 22, 61, 111, 133, 38, 190, 93, 153, 106, 62, 232, 219, 1, 189, 65, 98, 13, 191, 27, 7, 124, 62, 27, 138, 62, 191, 90, 42, 193, 189, 63, 15, 75, 62, 5, 46, 158, 190, 38, 50, 80, 62, 84, 253, 152, 190, 67, 73, 233, 189, 238, 170, 50, 62, 123, 131, 139, 62, 184, 164, 251, 189, 94, 206, 107, 61, 142, 212, 135, 60, 168, 193, 139, 61, 188, 2, 147, 62, 155, 108, 156, 190, 17, 5, 186, 61, 147, 144, 50, 191, 184, 144, 152, 61, 19, 2, 198, 62, 138, 198, 22, 191, 109, 253, 16, 190, 12, 63, 135, 61, 145, 10, 70, 190, 134, 188, 128, 62, 89, 68, 111, 190, 69, 50, 86, 61, 11, 56, 163, 189, 168, 189, 237, 189, 130, 219, 13, 62, 248, 203, 33, 61, 101, 30, 63, 191, 52, 36, 107, 62, 56, 174, 49, 191, 61, 224, 148, 62, 101, 221, 243, 190, 108, 231, 66, 191, 169, 112, 163, 62, 246, 231, 245, 190, 174, 80, 183, 190, 112, 27, 4, 62, 60, 211, 129, 62, 81, 215, 74, 61, 90, 170, 95, 62, 213, 114, 108, 188, 110, 139, 66, 62, 88, 225, 113, 62, 199, 48, 228, 190, 178, 132, 175, 190, 167, 94, 194, 62, 226, 67, 12, 189, 119, 168, 174, 188, 144, 122, 107, 62, 28, 48, 97, 62, 11, 184, 106, 190, 225, 137, 150, 190, 101, 237, 211, 189, 158, 1, 165, 189, 94, 177, 158, 190, 89, 236, 70, 62, 117, 42, 247, 61, 138, 110, 45, 61, 107, 242, 11, 61, 113, 169, 182, 60, 197, 142, 230, 189, 152, 222, 5, 62, 137, 62, 222, 62, 33, 121, 30, 62, 57, 0, 22, 190, 224, 65, 81, 62, 90, 240, 90, 61, 104, 152, 167, 188, 24, 164, 180, 189, 107, 143, 20, 189, 94, 20, 200, 189, 233, 219, 33, 191, 202, 244, 22, 60, 106, 253, 236, 189, 120, 227, 170, 190, 226, 70, 231, 61, 198, 104, 55, 62, 55, 226, 134, 190, 56, 162, 53, 190, 243, 212, 249, 188, 230, 180, 163, 190, 137, 194, 131, 191, 25, 240, 19, 60, 115, 232, 100, 188, 169, 139, 92, 61, 139, 187, 226, 61, 4, 159, 234, 61, 119, 53, 41, 61, 221, 0, 238, 189, 15, 202, 50, 62, 154, 156, 225, 61, 1, 180, 103, 190, 200, 90, 25, 62, 166, 143, 86, 191, 60, 18, 131, 61, 193, 138, 84, 191, 26, 125, 225, 190, 185, 125, 204, 62, 60, 52, 235, 189, 26, 176, 156, 190, 79, 77, 180, 62, 215, 195, 115, 62, 185, 7, 252, 61, 74, 43, 63, 60, 126, 4, 246, 188, 17, 1, 24, 190, 40, 55, 246, 61, 235, 26, 45, 190, 148, 117, 240, 190, 21, 239, 155, 62, 200, 96, 51, 190, 191, 134, 132, 62, 216, 112, 169, 190, 19, 87, 26, 190, 21, 222, 184, 190, 190, 45, 130, 189, 225, 158, 145, 189, 49, 101, 233, 190, 17, 176, 47, 189, 209, 175, 74, 190, 119, 93, 237, 190, 33, 154, 187, 61, 125, 155, 208, 60, 135, 134, 16, 190, 65, 179, 49, 190, 36, 135, 106, 60, 26, 1, 150, 62, 209, 229, 83, 190, 153, 162, 123, 189, 88, 145, 155, 60, 99, 4, 172, 190, 62, 140, 44, 191, 31, 226, 9, 62, 11, 156, 5, 62, 173, 72, 53, 189, 163, 179, 13, 62, 24, 199, 227, 190, 55, 45, 145, 61, 52, 162, 148, 190, 129, 0, 49, 61, 158, 21, 152, 189, 65, 93, 52, 189, 143, 117, 197, 189, 55, 125, 250, 189, 252, 243, 184, 189, 183, 3, 168, 188, 126, 168, 36, 60, 126, 124, 182, 189, 177, 106, 144, 61, 153, 11, 83, 61, 46, 142, 253, 61, 41, 94, 27, 62, 45, 138, 236, 189, 229, 138, 41, 190, 146, 47, 209, 61, 179, 193, 38, 190, 76, 145, 9, 190, 96, 105, 238, 189, 11, 166, 239, 60, 225, 30, 248, 189, 69, 253, 201, 189, 234, 30, 52, 190, 27, 188, 155, 61, 88, 113, 81, 189, 193, 231, 179, 61, 125, 83, 29, 189, 150, 255, 21, 61, 172, 208, 85, 189, 138, 196, 51, 190, 3, 121, 15, 190, 140, 64, 40, 190, 215, 209, 140, 61, 125, 58, 132, 190, 33, 26, 55, 190, 162, 81, 51, 189, 107, 10, 112, 62, 45, 34, 81, 62, 249, 170, 150, 62, 47, 83, 2, 62, 1, 53, 9, 58, 110, 101, 110, 61, 60, 183, 17, 62, 209, 239, 128, 190, 84, 236, 29, 189, 167, 1, 74, 62, 195, 91, 90, 189, 81, 50, 235, 190, 192, 37, 22, 62, 77, 184, 0, 61, 194, 64, 34, 63, 140, 203, 126, 189, 232, 223, 131, 62, 54, 193, 218, 61, 211, 5, 22, 191, 255, 136, 70, 61, 208, 186, 189, 61, 91, 28, 189, 189, 215, 176, 126, 188, 190, 232, 105, 190, 74, 157, 190, 187, 1, 222, 154, 62, 51, 98, 97, 190, 1, 233, 75, 190, 58, 240, 121, 62, 174, 213, 215, 188, 122, 78, 173, 190, 160, 104, 172, 62, 40, 242, 92, 190, 117, 208, 145, 189, 25, 135, 86, 190, 228, 5, 232, 189, 66, 86, 4, 62, 84, 109, 165, 61, 232, 5, 176, 188, 164, 86, 221, 61, 90, 247, 6, 62, 25, 34, 208, 189, 253, 214, 160, 190, 116, 79, 215, 189, 164, 54, 161, 189, 130, 236, 151, 190, 75, 147, 63, 191, 99, 54, 139, 190, 78, 194, 158, 60, 63, 204, 115, 190, 54, 186, 64, 62, 71, 73, 190, 189, 52, 194, 13, 190, 139, 65, 64, 62, 0, 117, 6, 190, 212, 221, 175, 61, 165, 221, 135, 62, 239, 207, 123, 62, 245, 8, 37, 189, 147, 185, 112, 186, 173, 130, 200, 189, 177, 171, 106, 190, 225, 52, 202, 190, 146, 5, 44, 62, 226, 26, 41, 191, 10, 206, 181, 62, 16, 104, 217, 62, 244, 214, 106, 187, 199, 48, 55, 61, 147, 78, 183, 59, 241, 197, 14, 62, 24, 170, 129, 190, 31, 198, 165, 61, 248, 94, 136, 61, 146, 41, 6, 189, 102, 85, 195, 190, 140, 107, 32, 62, 125, 238, 234, 189, 250, 146, 181, 62, 241, 56, 248, 190, 147, 13, 174, 62, 223, 128, 196, 62, 18, 221, 171, 190, 160, 143, 60, 62, 87, 53, 24, 62, 69, 210, 34, 190, 31, 91, 205, 190, 152, 101, 218, 61, 140, 11, 176, 62, 176, 232, 153, 62, 95, 135, 10, 190, 134, 157, 40, 189, 169, 51, 171, 62, 127, 115, 95, 62, 104, 113, 40, 190, 160, 245, 75, 61, 251, 195, 131, 188, 2, 21, 7, 190, 159, 95, 20, 190, 77, 22, 26, 62, 229, 131, 11, 190, 183, 139, 189, 61, 22, 217, 198, 190, 62, 227, 41, 62, 118, 151, 108, 62, 51, 171, 203, 190, 13, 184, 27, 62, 150, 94, 28, 62, 42, 66, 113, 190, 211, 6, 195, 61, 237, 50, 246, 190, 160, 128, 192, 61, 172, 151, 116, 189, 164, 135, 153, 190, 198, 51, 241, 61, 4, 215, 38, 189, 238, 169, 242, 189, 186, 189, 48, 62, 248, 161, 61, 62, 143, 1, 137, 61, 37, 195, 78, 62, 78, 252, 135, 188, 255, 80, 12, 62, 236, 26, 231, 189, 48, 182, 181, 190, 184, 74, 8, 62, 119, 116, 91, 190, 210, 140, 38, 189, 32, 27, 234, 189, 125, 147, 213, 61, 167, 78, 76, 62, 243, 111, 69, 61, 142, 101, 115, 189, 128, 108, 20, 187, 106, 73, 240, 188, 224, 241, 213, 59, 116, 9, 39, 62, 172, 56, 20, 190, 176, 164, 128, 61, 166, 77, 42, 62, 116, 33, 210, 60, 203, 134, 106, 61, 158, 21, 84, 190, 10, 119, 88, 62, 48, 112, 57, 62, 144, 77, 10, 190, 162, 85, 40, 62, 223, 79, 141, 60, 191, 66, 243, 189, 226, 150, 2, 62, 184, 25, 51, 62, 69, 253, 94, 60, 30, 234, 2, 190, 59, 32, 42, 190, 83, 85, 139, 60, 78, 158, 1, 190, 242, 75, 202, 60, 202, 144, 92, 62, 217, 154, 191, 190, 109, 13, 117, 62, 253, 19, 96, 62, 6, 250, 70, 189, 179, 208, 77, 62, 217, 214, 14, 60, 202, 253, 15, 62, 183, 183, 191, 61, 201, 154, 53, 62, 23, 96, 115, 60, 185, 5, 37, 62, 205, 60, 178, 189, 224, 242, 236, 61, 106, 156, 173, 61, 234, 208, 152, 190, 234, 202, 148, 188, 188, 87, 16, 191, 248, 92, 184, 61, 34, 21, 72, 61, 212, 165, 173, 190, 102, 83, 69, 62, 67, 46, 20, 61, 243, 244, 14, 189, 175, 92, 232, 189, 147, 218, 89, 189, 199, 144, 74, 61, 137, 192, 11, 190, 129, 218, 8, 190, 92, 8, 58, 189, 83, 223, 115, 61, 126, 199, 161, 189, 88, 240, 224, 189, 165, 124, 106, 63, 6, 134, 29, 62, 85, 65, 87, 62, 81, 11, 181, 62, 145, 88, 186, 62, 9, 214, 56, 190, 183, 133, 145, 189, 245, 39, 171, 190, 239, 187, 126, 190, 124, 74, 116, 60, 208, 105, 41, 189, 124, 22, 128, 190, 176, 22, 3, 190, 107, 174, 100, 62, 243, 199, 169, 62, 164, 5, 139, 190, 43, 104, 79, 63, 195, 54, 90, 61, 253, 67, 85, 61, 21, 87, 17, 63, 0, 103, 152, 189, 182, 130, 248, 58, 94, 19, 129, 189, 199, 196, 38, 61, 115, 221, 196, 190, 211, 6, 31, 190, 91, 147, 108, 191, 145, 28, 232, 61, 132, 149, 128, 190, 1, 210, 232, 186, 231, 28, 243, 62, 112, 214, 31, 191, 170, 23, 101, 62, 26, 255, 101, 189, 198, 206, 129, 61, 14, 23, 125, 60, 153, 46, 187, 58, 142, 112, 166, 190, 113, 167, 3, 191, 104, 231, 0, 190, 224, 202, 0, 190, 87, 164, 52, 189, 19, 34, 30, 62, 3, 49, 163, 190, 1, 134, 168, 61, 187, 153, 129, 62, 80, 156, 250, 189, 209, 146, 79, 62, 202, 18, 40, 62, 119, 78, 64, 62, 117, 133, 226, 61, 18, 78, 213, 189, 95, 100, 20, 190, 198, 164, 98, 61, 200, 66, 115, 60, 207, 16, 246, 60, 101, 160, 252, 61, 98, 24, 114, 190, 72, 252, 49, 191, 232, 206, 70, 62, 11, 5, 28, 189, 249, 139, 45, 191, 150, 85, 17, 62, 37, 212, 145, 191, 30, 27, 104, 60, 182, 177, 45, 62, 30, 248, 243, 62, 147, 20, 37, 191, 85, 188, 140, 188, 232, 32, 241, 189, 235, 87, 136, 190, 202, 164, 97, 190, 5, 125, 198, 190, 126, 134, 224, 62, 227, 185, 197, 190, 226, 87, 86, 62, 240, 246, 103, 190, 139, 70, 182, 62, 84, 37, 25, 62, 63, 46, 85, 62, 171, 44, 157, 190, 109, 37, 13, 62, 23, 236, 37, 190, 206, 97, 17, 191, 180, 59, 99, 62, 25, 35, 39, 191, 27, 214, 102, 190, 59, 39, 175, 62, 33, 200, 254, 61, 70, 154, 166, 190, 87, 75, 117, 62, 26, 114, 63, 190, 223, 24, 151, 61, 189, 44, 68, 191, 203, 14, 237, 190, 40, 165, 226, 190, 155, 75, 246, 62, 143, 182, 230, 61, 248, 23, 96, 58, 205, 125, 6, 62, 153, 160, 128, 62, 71, 244, 178, 190, 155, 12, 93, 190, 63, 26, 123, 188, 75, 235, 234, 189, 125, 116, 100, 190, 139, 247, 203, 61, 253, 202, 225, 189, 96, 219, 182, 61, 242, 197, 246, 189, 51, 76, 162, 61, 79, 90, 98, 62, 115, 34, 39, 189, 56, 22, 172, 190, 102, 130, 44, 62, 27, 28, 81, 62, 36, 54, 60, 189, 210, 90, 100, 62, 31, 8, 223, 189, 112, 124, 222, 59, 192, 143, 23, 61, 87, 19, 29, 190, 220, 45, 204, 190, 239, 40, 20, 63, 91, 48, 85, 190, 83, 28, 18, 191, 146, 49, 13, 190, 172, 79, 88, 190, 170, 211, 8, 63, 240, 252, 14, 190, 120, 67, 218, 190, 6, 123, 76, 62, 204, 196, 189, 61, 218, 128, 151, 190, 43, 168, 181, 190, 82, 101, 164, 190, 85, 189, 232, 189, 127, 200, 19, 189, 178, 113, 95, 62, 152, 65, 48, 190, 15, 245, 19, 61, 65, 226, 248, 189, 1, 92, 31, 189, 50, 7, 116, 62, 189, 47, 69, 62, 151, 79, 142, 62, 168, 191, 121, 62, 25, 105, 24, 62, 219, 125, 61, 189, 208, 34, 206, 188, 76, 109, 34, 190, 15, 143, 56, 190, 104, 68, 5, 60, 180, 18, 61, 189, 180, 87, 139, 191, 28, 158, 179, 190, 25, 1, 167, 190, 2, 39, 241, 190, 9, 100, 156, 61, 223, 132, 188, 191, 248, 85, 126, 62, 107, 63, 38, 190, 192, 75, 70, 62, 90, 22, 45, 189, 108, 196, 159, 62, 43, 19, 244, 189, 35, 233, 139, 191, 124, 115, 168, 191, 23, 77, 231, 189, 255, 123, 11, 190, 240, 63, 122, 62, 188, 21, 237, 190, 204, 49, 2, 62, 139, 23, 140, 61, 52, 145, 91, 62, 243, 241, 128, 62, 102, 255, 133, 62, 24, 0, 193, 62, 155, 129, 135, 61, 228, 193, 206, 61, 41, 226, 27, 190, 165, 110, 248, 61, 150, 44, 106, 190, 26, 229, 96, 62, 30, 144, 157, 62, 130, 249, 150, 191, 198, 182, 79, 191, 220, 215, 52, 62, 151, 95, 177, 190, 190, 49, 96, 191, 190, 156, 160, 188, 225, 159, 87, 62, 20, 104, 8, 190, 204, 157, 1, 189, 109, 210, 130, 62, 170, 73, 103, 190, 40, 233, 133, 190, 225, 106, 87, 62, 235, 106, 15, 62, 150, 125, 88, 60, 232, 86, 137, 61, 162, 144, 139, 62, 29, 122, 119, 61, 253, 185, 209, 190, 197, 147, 178, 188, 67, 181, 128, 61, 142, 136, 60, 190, 146, 113, 58, 62, 245, 113, 50, 191, 179, 120, 77, 60, 188, 173, 220, 189, 165, 134, 188, 190, 26, 90, 171, 62, 70, 95, 60, 190, 99, 178, 82, 189, 143, 132, 169, 189, 199, 239, 179, 60, 94, 246, 101, 189, 95, 208, 21, 62, 127, 187, 255, 189, 255, 138, 63, 62, 146, 246, 45, 62, 123, 96, 173, 190, 128, 107, 124, 60, 154, 50, 77, 190, 226, 220, 145, 62, 119, 249, 107, 190, 172, 166, 146, 60, 2, 201, 208, 190, 135, 223, 34, 62, 37, 80, 23, 62, 71, 120, 11, 62, 247, 183, 23, 62, 21, 66, 74, 185, 132, 250, 0, 62, 9, 82, 84, 189, 225, 105, 37, 62, 123, 103, 120, 189, 79, 60, 41, 190, 30, 81, 1, 190, 80, 58, 61, 191, 4, 162, 147, 190, 173, 19, 27, 190, 167, 4, 211, 190, 227, 50, 197, 62, 107, 63, 214, 189, 74, 231, 46, 61, 184, 90, 117, 62, 151, 59, 15, 62, 191, 229, 37, 62, 90, 221, 67, 62, 51, 246, 28, 190, 245, 246, 206, 60, 45, 190, 4, 189, 169, 146, 167, 190, 66, 214, 50, 189, 152, 176, 5, 63, 22, 105, 192, 61, 40, 70, 57, 189, 141, 81, 189, 62, 113, 104, 71, 60, 139, 2, 148, 61, 170, 11, 64, 60, 213, 5, 105, 189, 22, 204, 193, 190, 219, 245, 41, 190, 51, 233, 185, 61, 5, 233, 31, 189, 203, 232, 160, 189, 220, 37, 228, 61, 169, 112, 118, 62, 238, 64, 173, 190, 63, 41, 185, 62, 188, 222, 205, 190, 53, 132, 188, 190, 238, 34, 186, 62, 130, 42, 143, 61, 115, 255, 147, 62, 237, 177, 169, 61, 119, 2, 203, 61, 140, 59, 40, 191, 159, 27, 228, 189, 170, 14, 171, 190, 48, 71, 27, 62, 63, 153, 207, 189, 168, 79, 58, 189, 87, 238, 158, 61, 48, 164, 33, 191, 74, 157, 238, 61, 12, 101, 148, 61, 207, 203, 71, 189, 66, 55, 84, 62, 206, 198, 66, 190, 107, 192, 36, 190, 221, 158, 65, 62, 3, 91, 239, 190, 214, 63, 131, 189, 9, 97, 12, 61, 60, 3, 109, 62, 241, 180, 140, 190, 177, 236, 106, 62, 126, 218, 173, 189, 194, 57, 188, 62, 241, 252, 63, 62, 95, 208, 74, 62, 196, 33, 30, 190, 18, 200, 154, 62, 223, 117, 103, 62, 60, 26, 60, 190, 140, 216, 44, 61, 150, 1, 59, 190, 121, 255, 175, 190, 180, 106, 188, 61, 99, 173, 32, 190, 25, 43, 136, 191, 246, 187, 131, 62, 17, 252, 173, 190, 222, 41, 204, 190, 152, 178, 157, 61, 161, 87, 0, 190, 46, 251, 11, 63, 143, 197, 2, 61, 199, 242, 4, 62, 222, 13, 192, 187, 78, 18, 177, 187, 9, 146, 186, 189, 174, 150, 169, 61, 116, 75, 222, 61, 250, 1, 246, 190, 152, 255, 39, 60, 148, 9, 111, 188, 62, 65, 30, 62, 176, 67, 201, 189, 161, 2, 179, 60, 233, 140, 94, 62, 242, 27, 216, 189, 186, 127, 196, 62, 11, 78, 97, 62, 7, 36, 175, 190, 26, 102, 216, 59, 194, 27, 22, 189, 133, 11, 22, 62, 150, 109, 129, 61, 126, 182, 52, 62, 208, 110, 60, 190, 214, 248, 91, 62, 165, 91, 238, 61, 57, 189, 139, 189, 175, 1, 129, 62, 92, 28, 167, 61, 92, 221, 69, 62, 101, 123, 198, 188, 59, 65, 82, 187, 193, 189, 22, 62, 225, 131, 204, 62, 109, 8, 254, 61, 214, 16, 162, 189, 98, 26, 184, 190, 202, 62, 155, 61, 196, 140, 47, 190, 136, 12, 205, 189, 158, 184, 14, 61, 130, 150, 81, 61, 183, 254, 166, 190, 218, 81, 72, 190, 205, 245, 228, 62, 125, 19, 218, 189, 105, 112, 89, 191, 148, 149, 146, 191, 106, 35, 164, 62, 116, 223, 115, 189, 109, 84, 236, 189, 11, 245, 167, 61, 89, 0, 105, 62, 73, 2, 238, 189, 147, 200, 151, 60, 254, 220, 254, 190, 141, 195, 30, 190, 88, 97, 10, 190, 106, 83, 137, 61, 17, 51, 5, 62, 158, 151, 48, 60, 220, 29, 133, 190, 232, 46, 24, 190, 85, 112, 32, 63, 39, 219, 236, 61, 176, 7, 225, 190, 7, 69, 180, 62, 211, 131, 145, 62, 167, 128, 26, 188, 28, 239, 14, 190, 11, 213, 64, 190, 201, 149, 123, 190, 96, 93, 181, 189, 183, 97, 91, 62, 131, 200, 177, 188, 17, 145, 91, 60, 65, 184, 229, 61, 8, 238, 107, 62, 82, 219, 215, 61, 10, 84, 177, 62, 122, 187, 182, 190, 152, 32, 117, 62, 91, 157, 240, 62, 171, 32, 87, 61, 222, 13, 48, 61, 75, 72, 131, 189, 75, 5, 24, 61, 76, 105, 73, 190, 236, 189, 21, 190, 208, 98, 12, 191, 15, 103, 21, 190, 24, 83, 100, 190, 241, 187, 56, 190, 39, 16, 176, 62, 148, 15, 246, 61, 168, 183, 41, 62, 147, 194, 225, 189, 140, 117, 161, 60, 199, 19, 16, 190, 165, 67, 17, 61, 141, 235, 122, 190, 187, 72, 86, 59, 168, 127, 78, 187, 17, 247, 31, 188, 193, 50, 32, 190, 243, 56, 134, 190, 208, 121, 50, 189, 231, 183, 100, 189, 175, 92, 36, 190, 37, 136, 107, 61, 84, 180, 111, 190, 127, 86, 194, 60, 49, 170, 160, 61, 222, 167, 219, 189, 125, 60, 7, 189, 125, 75, 198, 61, 147, 251, 215, 189, 19, 70, 7, 61, 241, 29, 131, 190, 89, 221, 52, 190, 61, 108, 3, 190, 206, 57, 254, 188, 151, 230, 144, 61, 13, 255, 152, 61, 248, 16, 139, 61, 120, 169, 138, 188, 80, 26, 58, 190, 163, 151, 81, 61, 135, 66, 35, 62, 180, 61, 111, 59, 25, 169, 162, 189, 137, 7, 52, 190, 100, 33, 75, 61, 122, 25, 173, 60, 237, 22, 241, 61, 49, 98, 4, 62, 26, 36, 36, 190, 169, 248, 178, 189, 124, 29, 77, 188, 140, 166, 75, 189, 15, 66, 195, 61, 37, 122, 25, 190, 17, 61, 233, 188, 100, 146, 91, 60, 50, 147, 121, 188, 49, 3, 48, 190, 241, 124, 98, 188, 203, 124, 173, 189, 190, 169, 172, 189, 128, 127, 51, 190, 130, 177, 178, 187, 150, 93, 238, 187, 97, 247, 35, 190, 173, 218, 42, 190, 206, 81, 153, 61, 181, 175, 210, 189, 151, 41, 230, 189, 41, 191, 141, 61, 190, 7, 216, 190, 154, 159, 37, 62, 96, 192, 220, 60, 28, 84, 193, 190, 0, 218, 155, 62, 130, 185, 65, 61, 213, 244, 38, 62, 19, 6, 91, 62, 152, 183, 139, 59, 142, 243, 238, 61, 113, 125, 138, 189, 205, 217, 163, 61, 115, 195, 142, 190, 3, 14, 157, 61, 105, 18, 83, 61, 209, 101, 187, 189, 238, 226, 61, 61, 41, 55, 215, 62, 201, 103, 147, 190, 116, 61, 33, 62, 133, 219, 46, 190, 186, 135, 176, 61, 21, 118, 141, 62, 147, 196, 39, 190, 160, 100, 29, 189, 147, 31, 63, 190, 93, 109, 151, 188, 212, 80, 107, 191, 79, 250, 163, 62, 133, 50, 111, 190, 55, 103, 141, 190, 231, 240, 86, 62, 20, 91, 159, 191, 84, 161, 7, 63, 23, 36, 7, 61, 171, 77, 150, 189, 137, 206, 211, 61, 14, 10, 151, 62, 161, 7, 231, 190, 31, 122, 133, 191, 36, 146, 146, 191, 60, 173, 132, 190, 107, 2, 3, 190, 8, 237, 50, 62, 185, 202, 8, 62, 128, 75, 70, 62, 115, 43, 226, 189, 74, 6, 67, 62, 87, 255, 191, 62, 228, 200, 56, 62, 166, 68, 217, 62, 13, 37, 46, 62, 141, 156, 140, 189, 13, 43, 60, 190, 90, 82, 158, 189, 232, 47, 212, 61, 11, 34, 183, 190, 99, 128, 185, 62, 70, 199, 37, 191, 215, 23, 0, 191, 128, 124, 74, 190, 83, 2, 43, 190, 152, 183, 35, 191, 220, 236, 0, 190, 34, 62, 176, 61, 99, 34, 203, 189, 185, 0, 165, 189, 57, 214, 186, 62, 5, 11, 132, 190, 168, 247, 129, 189, 48, 158, 152, 189, 97, 21, 253, 61, 249, 24, 161, 61, 98, 140, 45, 191, 115, 26, 180, 61, 57, 242, 170, 190, 168, 51, 247, 190, 241, 48, 238, 190, 68, 124, 111, 62, 124, 181, 255, 189, 205, 49, 56, 189, 254, 107, 27, 189, 200, 155, 177, 62, 83, 152, 74, 190, 180, 116, 190, 189, 70, 50, 109, 190, 187, 249, 147, 190, 150, 92, 14, 191, 150, 115, 27, 62, 220, 227, 233, 189, 194, 127, 91, 62, 29, 249, 194, 61, 161, 235, 60, 62, 113, 119, 7, 188, 129, 85, 89, 190, 136, 182, 167, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 52, 253, 61, 35, 100, 205, 62, 44, 79, 68, 62, 239, 59, 144, 62, 51, 55, 18, 61, 225, 135, 183, 62, 84, 156, 133, 61, 109, 109, 17, 190, 14, 145, 153, 190, 109, 89, 56, 62, 172, 202, 85, 190, 176, 47, 224, 62, 99, 4, 140, 62, 98, 217, 169, 62, 31, 125, 40, 62, 199, 126, 25, 61, 56, 147, 17, 62, 157, 157, 18, 62, 109, 52, 168, 187, 175, 204, 153, 62, 228, 247, 80, 62, 134, 136, 130, 62, 209, 90, 82, 189, 67, 162, 14, 190, 32, 88, 147, 189, 155, 132, 198, 62, 46, 0, 117, 188, 133, 92, 249, 188, 89, 18, 161, 61, 198, 109, 200, 189, 167, 66, 7, 62, 89, 63, 10, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 113, 1, 191, 232, 6, 29, 190, 167, 7, 173, 190, 118, 92, 60, 63, 199, 223, 80, 62, 45, 24, 112, 191, 77, 235, 213, 62, 19, 28, 208, 187, 104, 85, 246, 190, 86, 18, 162, 190, 163, 217, 79, 191, 231, 113, 173, 190, 101, 49, 91, 189, 4, 165, 250, 189, 121, 74, 15, 63, 72, 116, 115, 62, 210, 105, 74, 63, 2, 220, 32, 62, 79, 145, 63, 63, 236, 162, 115, 63, 190, 32, 225, 190, 241, 242, 222, 190, 75, 205, 132, 62, 128, 135, 34, 63, 211, 182, 21, 62, 108, 171, 49, 191, 160, 201, 174, 62, 32, 227, 7, 62, 222, 221, 23, 61, 173, 182, 44, 63, 255, 56, 12, 63, 18, 79, 224, 62, 110, 30, 158, 62, 239, 159, 159, 190, 211, 77, 20, 62, 187, 176, 150, 62, 211, 63, 114, 190, 26, 166, 92, 189, 22, 49, 209, 61, 10, 167, 243, 61, 222, 197, 28, 189, 190, 12, 247, 189, 201, 122, 116, 62, 87, 134, 63, 190, 70, 29, 68, 190, 122, 4, 112, 190, 204, 88, 211, 61, 205, 115, 208, 60, 12, 113, 124, 61, 86, 13, 212, 190, 125, 24, 74, 62, 236, 13, 68, 61, 187, 150, 142, 62, 133, 180, 83, 190, 63, 198, 146, 190, 186, 215, 157, 62, 81, 98, 119, 189, 95, 175, 140, 190, 142, 136, 169, 189, 189, 42, 34, 61, 116, 231, 231, 61, 172, 181, 8, 190, 171, 207, 94, 60, 76, 73, 116, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 213, 231, 189, 149, 221, 83, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {123, 252, 163, 190, 55, 1, 150, 191, 171, 34, 48, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {236, 55, 72, 191, 66, 220, 26, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0091/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}