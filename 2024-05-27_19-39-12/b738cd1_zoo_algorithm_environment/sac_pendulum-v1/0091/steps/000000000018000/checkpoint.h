// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 13, 40, 191, 27, 200, 120, 191, 98, 163, 172, 190, 238, 15, 52, 62, 165, 117, 88, 191, 79, 120, 8, 190, 173, 165, 13, 63, 52, 26, 177, 190, 183, 251, 169, 62, 167, 100, 35, 190, 211, 137, 194, 63, 63, 13, 139, 189, 150, 0, 68, 63, 156, 192, 13, 191, 182, 66, 204, 190, 152, 66, 17, 61, 224, 70, 160, 61, 193, 219, 7, 63, 178, 93, 175, 190, 100, 248, 146, 191, 8, 9, 131, 190, 94, 138, 118, 190, 129, 155, 226, 62, 94, 224, 22, 191, 198, 39, 237, 190, 189, 94, 31, 190, 159, 234, 237, 190, 158, 167, 24, 190, 121, 67, 68, 191, 200, 135, 10, 62, 138, 171, 191, 190, 80, 102, 185, 62, 255, 174, 76, 190, 62, 209, 21, 62, 25, 197, 21, 191, 96, 251, 14, 189, 11, 187, 150, 62, 58, 253, 29, 63, 166, 107, 223, 62, 120, 143, 244, 190, 165, 205, 85, 191, 200, 92, 1, 59, 106, 53, 174, 60, 152, 167, 99, 63, 207, 117, 26, 188, 179, 36, 174, 62, 9, 44, 108, 190, 54, 164, 99, 190, 253, 98, 191, 190, 113, 26, 35, 191, 33, 181, 219, 189, 93, 18, 52, 63, 100, 135, 138, 191, 199, 33, 149, 190, 114, 127, 60, 191, 180, 215, 88, 63, 68, 82, 207, 60, 140, 225, 161, 61, 218, 224, 101, 191, 188, 76, 236, 62, 7, 95, 238, 62, 148, 142, 169, 190, 80, 110, 179, 190, 30, 22, 15, 63, 115, 165, 138, 63, 238, 164, 74, 62, 71, 39, 63, 63, 247, 65, 168, 190, 164, 185, 144, 190, 109, 65, 251, 190, 155, 158, 134, 62, 95, 132, 175, 62, 164, 56, 75, 190, 229, 118, 226, 62, 9, 119, 152, 190, 91, 92, 121, 191, 53, 230, 89, 61, 133, 175, 220, 61, 95, 115, 90, 190, 175, 61, 129, 61, 125, 13, 43, 191, 97, 66, 94, 63, 109, 156, 71, 63, 97, 17, 130, 62, 50, 15, 254, 62, 143, 165, 226, 62, 32, 230, 68, 190, 26, 137, 175, 62, 224, 234, 169, 63, 195, 233, 184, 62, 60, 249, 172, 190, 105, 32, 181, 191, 161, 116, 170, 190, 218, 187, 20, 63, 7, 150, 40, 191, 107, 183, 203, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 48, 40, 191, 248, 174, 49, 191, 238, 33, 161, 190, 213, 78, 96, 62, 255, 193, 226, 189, 216, 118, 99, 190, 174, 128, 99, 60, 38, 213, 36, 189, 90, 137, 82, 190, 81, 186, 163, 190, 182, 10, 170, 62, 169, 122, 238, 62, 92, 232, 123, 191, 67, 123, 230, 62, 61, 180, 85, 62, 173, 245, 17, 191, 16, 157, 173, 62, 245, 168, 192, 190, 6, 234, 131, 62, 98, 248, 188, 62, 97, 159, 188, 190, 132, 231, 82, 62, 202, 38, 130, 61, 79, 27, 231, 190, 115, 232, 7, 63, 107, 0, 7, 62, 13, 255, 67, 62, 160, 208, 55, 191, 93, 81, 189, 190, 175, 24, 52, 190, 179, 15, 61, 189, 224, 60, 219, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 180, 144, 189, 236, 72, 149, 190, 53, 195, 119, 190, 122, 225, 97, 62, 153, 253, 129, 190, 56, 146, 203, 190, 250, 210, 173, 189, 27, 214, 160, 61, 255, 123, 78, 190, 50, 255, 126, 190, 162, 47, 95, 62, 92, 3, 88, 190, 173, 69, 15, 191, 7, 66, 153, 190, 74, 245, 15, 62, 55, 152, 181, 190, 161, 34, 153, 190, 201, 172, 165, 191, 109, 166, 162, 62, 155, 238, 162, 190, 176, 119, 107, 190, 238, 151, 114, 62, 244, 245, 92, 190, 161, 133, 174, 189, 33, 2, 23, 188, 113, 129, 168, 62, 32, 122, 139, 189, 42, 215, 84, 190, 8, 221, 99, 62, 200, 70, 48, 190, 236, 46, 202, 189, 147, 118, 153, 190, 41, 41, 212, 61, 54, 163, 163, 190, 99, 255, 247, 60, 33, 169, 106, 62, 74, 113, 213, 189, 144, 239, 125, 190, 237, 253, 247, 188, 127, 53, 54, 62, 200, 62, 13, 190, 251, 243, 95, 189, 144, 219, 2, 62, 59, 69, 234, 62, 174, 139, 235, 190, 168, 81, 201, 62, 82, 254, 42, 61, 50, 189, 170, 190, 192, 76, 180, 186, 37, 245, 185, 190, 252, 17, 138, 61, 226, 8, 8, 62, 23, 147, 143, 190, 155, 166, 58, 62, 76, 76, 144, 62, 84, 52, 160, 189, 144, 201, 64, 62, 218, 7, 102, 62, 20, 217, 18, 190, 194, 156, 4, 191, 112, 219, 150, 188, 142, 209, 53, 190, 159, 101, 45, 189, 145, 22, 126, 190, 53, 165, 23, 62, 195, 159, 86, 190, 115, 167, 78, 190, 11, 40, 140, 60, 218, 248, 250, 189, 74, 178, 43, 190, 177, 252, 158, 62, 216, 69, 167, 61, 187, 169, 44, 61, 73, 84, 244, 61, 52, 2, 51, 62, 73, 253, 9, 62, 132, 205, 154, 190, 155, 215, 167, 62, 62, 250, 132, 189, 14, 134, 37, 191, 136, 38, 198, 62, 64, 21, 48, 191, 242, 240, 5, 190, 113, 82, 103, 62, 244, 72, 205, 190, 230, 95, 35, 62, 32, 0, 144, 190, 30, 15, 58, 190, 242, 49, 46, 62, 72, 170, 181, 62, 137, 170, 8, 190, 39, 117, 21, 189, 28, 193, 151, 189, 149, 195, 79, 61, 12, 43, 3, 63, 36, 140, 192, 190, 47, 132, 28, 62, 218, 137, 164, 190, 99, 122, 3, 188, 43, 197, 166, 62, 195, 86, 12, 191, 60, 8, 14, 190, 212, 106, 32, 62, 188, 12, 132, 190, 120, 223, 130, 62, 166, 41, 74, 189, 47, 188, 237, 189, 124, 185, 218, 60, 26, 123, 220, 189, 0, 230, 201, 62, 249, 37, 152, 60, 64, 14, 101, 191, 174, 76, 234, 62, 218, 74, 22, 191, 17, 15, 38, 62, 226, 137, 236, 190, 136, 113, 77, 191, 220, 12, 179, 62, 189, 168, 220, 190, 197, 239, 214, 190, 245, 79, 58, 61, 79, 42, 85, 62, 182, 94, 225, 60, 20, 51, 168, 62, 222, 130, 4, 190, 125, 137, 63, 62, 221, 125, 176, 62, 71, 122, 219, 190, 243, 154, 158, 190, 241, 189, 194, 62, 227, 162, 110, 60, 11, 62, 31, 61, 197, 145, 56, 62, 6, 142, 141, 62, 225, 117, 1, 191, 238, 244, 140, 190, 37, 99, 83, 189, 43, 220, 249, 189, 160, 86, 209, 190, 219, 60, 48, 62, 243, 197, 100, 62, 77, 104, 80, 61, 201, 48, 165, 60, 121, 220, 112, 189, 70, 57, 236, 189, 232, 89, 145, 61, 37, 162, 209, 62, 50, 0, 56, 62, 106, 156, 88, 190, 22, 83, 137, 62, 154, 107, 249, 59, 203, 115, 129, 187, 38, 209, 16, 190, 118, 40, 250, 189, 211, 57, 207, 189, 191, 65, 226, 190, 234, 39, 8, 60, 230, 129, 7, 189, 128, 224, 41, 191, 157, 40, 4, 61, 82, 170, 106, 61, 185, 218, 133, 190, 124, 91, 166, 190, 149, 138, 136, 61, 25, 142, 167, 190, 59, 78, 101, 191, 174, 216, 211, 189, 219, 133, 131, 188, 88, 107, 253, 187, 227, 154, 126, 62, 117, 60, 33, 62, 65, 100, 9, 187, 99, 110, 207, 190, 113, 20, 11, 61, 225, 93, 74, 62, 9, 51, 136, 190, 186, 49, 40, 188, 108, 156, 128, 191, 161, 77, 36, 62, 69, 221, 110, 191, 156, 1, 229, 190, 37, 146, 238, 62, 72, 178, 207, 189, 143, 74, 18, 62, 46, 250, 189, 62, 135, 63, 235, 62, 73, 143, 214, 61, 255, 162, 171, 189, 228, 84, 42, 61, 63, 169, 46, 189, 200, 7, 91, 189, 196, 16, 88, 190, 200, 41, 2, 191, 21, 239, 155, 62, 206, 145, 17, 62, 127, 19, 71, 62, 150, 248, 8, 191, 38, 16, 165, 189, 190, 196, 205, 190, 46, 51, 168, 188, 60, 216, 142, 60, 147, 73, 240, 190, 149, 30, 111, 190, 83, 202, 121, 189, 134, 222, 11, 190, 16, 187, 230, 187, 44, 230, 54, 59, 135, 134, 16, 190, 238, 251, 16, 190, 67, 161, 38, 188, 174, 16, 6, 62, 171, 39, 170, 189, 113, 141, 1, 190, 119, 75, 208, 61, 148, 173, 21, 191, 145, 154, 130, 191, 2, 5, 247, 60, 152, 163, 100, 190, 204, 23, 16, 61, 81, 53, 2, 63, 55, 18, 28, 191, 22, 119, 1, 62, 89, 2, 171, 190, 23, 111, 209, 60, 158, 21, 152, 189, 65, 93, 52, 189, 143, 117, 197, 189, 55, 125, 250, 189, 252, 243, 184, 189, 183, 3, 168, 188, 126, 168, 36, 60, 126, 124, 182, 189, 177, 106, 144, 61, 153, 11, 83, 61, 46, 142, 253, 61, 41, 94, 27, 62, 45, 138, 236, 189, 229, 138, 41, 190, 146, 47, 209, 61, 179, 193, 38, 190, 76, 145, 9, 190, 96, 105, 238, 189, 11, 166, 239, 60, 225, 30, 248, 189, 69, 253, 201, 189, 234, 30, 52, 190, 27, 188, 155, 61, 88, 113, 81, 189, 193, 231, 179, 61, 125, 83, 29, 189, 150, 255, 21, 61, 172, 208, 85, 189, 138, 196, 51, 190, 3, 121, 15, 190, 140, 64, 40, 190, 215, 209, 140, 61, 28, 19, 226, 190, 132, 200, 185, 190, 63, 225, 39, 190, 139, 255, 151, 62, 167, 104, 28, 62, 208, 138, 110, 62, 169, 224, 164, 62, 120, 120, 129, 190, 130, 183, 30, 190, 216, 154, 54, 62, 249, 46, 21, 191, 60, 255, 106, 188, 180, 94, 54, 62, 51, 71, 45, 61, 181, 205, 214, 190, 188, 136, 34, 190, 230, 142, 77, 62, 187, 30, 46, 63, 114, 90, 27, 190, 92, 119, 130, 62, 9, 130, 10, 189, 44, 199, 115, 191, 40, 198, 155, 188, 111, 229, 95, 61, 199, 165, 111, 190, 49, 134, 124, 187, 215, 217, 219, 190, 61, 77, 109, 190, 73, 205, 156, 62, 168, 31, 129, 190, 73, 88, 210, 60, 36, 98, 33, 62, 225, 215, 190, 189, 122, 78, 173, 190, 231, 140, 164, 62, 172, 127, 114, 190, 254, 105, 207, 188, 81, 74, 116, 190, 190, 43, 87, 190, 189, 28, 48, 62, 203, 4, 47, 61, 88, 34, 186, 189, 24, 159, 33, 62, 192, 221, 15, 62, 184, 110, 216, 189, 226, 184, 180, 190, 227, 203, 216, 189, 184, 151, 95, 188, 10, 213, 59, 191, 111, 67, 46, 191, 0, 29, 168, 190, 24, 135, 200, 60, 57, 83, 34, 190, 49, 26, 54, 62, 34, 154, 72, 189, 224, 245, 20, 190, 225, 99, 86, 62, 168, 234, 113, 190, 52, 243, 230, 61, 189, 208, 29, 62, 37, 255, 158, 62, 254, 7, 55, 190, 246, 64, 144, 190, 10, 6, 78, 188, 191, 124, 159, 190, 121, 213, 28, 191, 89, 193, 9, 62, 57, 83, 132, 191, 167, 242, 192, 62, 163, 227, 206, 62, 105, 236, 191, 61, 198, 52, 130, 59, 148, 244, 93, 189, 49, 186, 66, 62, 25, 88, 137, 190, 146, 156, 11, 62, 51, 61, 21, 61, 156, 76, 86, 61, 122, 233, 197, 190, 116, 8, 9, 188, 117, 245, 58, 189, 198, 228, 218, 62, 105, 195, 27, 191, 6, 214, 199, 62, 16, 125, 206, 62, 203, 221, 210, 190, 138, 122, 77, 62, 88, 71, 188, 61, 37, 20, 53, 190, 78, 35, 188, 190, 138, 122, 66, 61, 212, 147, 99, 62, 79, 149, 173, 62, 26, 48, 113, 190, 166, 71, 142, 61, 70, 124, 189, 62, 123, 34, 27, 62, 229, 144, 128, 190, 97, 53, 199, 60, 206, 244, 139, 187, 4, 113, 223, 189, 3, 92, 88, 190, 19, 79, 100, 62, 228, 201, 253, 189, 172, 7, 80, 61, 31, 237, 200, 190, 159, 189, 89, 62, 85, 166, 135, 62, 162, 72, 214, 190, 245, 84, 113, 62, 187, 29, 41, 62, 111, 62, 148, 190, 107, 177, 5, 62, 110, 93, 211, 190, 231, 138, 239, 61, 208, 41, 157, 188, 113, 72, 138, 190, 210, 3, 155, 61, 89, 47, 146, 188, 138, 111, 81, 190, 236, 151, 65, 62, 85, 59, 37, 62, 250, 206, 127, 61, 62, 42, 127, 61, 192, 6, 12, 61, 162, 87, 121, 61, 52, 47, 48, 189, 114, 107, 165, 190, 249, 171, 168, 60, 184, 251, 139, 190, 53, 0, 191, 189, 210, 132, 188, 189, 145, 178, 156, 61, 86, 138, 19, 62, 254, 57, 218, 61, 80, 202, 150, 189, 209, 183, 181, 189, 6, 87, 196, 189, 232, 22, 52, 61, 201, 121, 61, 62, 159, 64, 90, 190, 65, 161, 84, 62, 162, 193, 17, 62, 120, 70, 190, 189, 35, 173, 19, 62, 50, 86, 14, 190, 59, 77, 127, 62, 168, 12, 98, 62, 90, 212, 10, 190, 124, 2, 189, 61, 32, 53, 111, 188, 195, 55, 123, 190, 43, 86, 193, 61, 12, 184, 233, 61, 204, 185, 35, 189, 9, 52, 140, 190, 172, 43, 241, 189, 92, 68, 160, 189, 248, 25, 170, 189, 12, 234, 248, 60, 114, 78, 234, 61, 23, 61, 216, 190, 68, 144, 78, 62, 181, 143, 122, 62, 190, 158, 20, 189, 223, 80, 22, 62, 73, 90, 160, 61, 234, 224, 26, 62, 143, 156, 3, 61, 235, 82, 12, 62, 1, 228, 135, 61, 200, 148, 80, 62, 17, 65, 37, 190, 174, 105, 131, 62, 237, 169, 177, 61, 30, 130, 180, 190, 102, 254, 129, 61, 58, 113, 240, 190, 200, 177, 0, 62, 114, 8, 204, 61, 220, 134, 157, 190, 240, 94, 19, 62, 125, 5, 62, 61, 19, 180, 22, 190, 249, 120, 232, 189, 202, 140, 169, 189, 111, 166, 209, 60, 50, 26, 148, 190, 77, 66, 128, 189, 161, 98, 13, 190, 0, 82, 235, 61, 144, 252, 48, 189, 141, 60, 18, 188, 43, 163, 144, 63, 68, 209, 112, 62, 106, 187, 42, 62, 155, 151, 170, 62, 45, 120, 216, 62, 208, 236, 58, 190, 71, 135, 175, 189, 237, 58, 149, 190, 58, 18, 106, 190, 183, 123, 12, 189, 80, 21, 59, 189, 224, 246, 130, 190, 234, 68, 42, 190, 181, 108, 44, 62, 143, 138, 216, 62, 126, 230, 130, 190, 124, 214, 75, 63, 13, 221, 184, 188, 101, 149, 242, 60, 73, 95, 14, 63, 116, 92, 161, 189, 92, 234, 207, 188, 236, 152, 29, 189, 209, 236, 139, 60, 160, 181, 23, 191, 66, 148, 28, 190, 66, 157, 93, 191, 90, 75, 109, 61, 81, 134, 97, 190, 146, 64, 122, 60, 242, 35, 241, 62, 248, 173, 239, 190, 170, 23, 101, 62, 100, 245, 11, 189, 42, 132, 172, 60, 36, 252, 13, 61, 203, 101, 129, 188, 157, 107, 22, 191, 31, 232, 28, 191, 88, 199, 253, 189, 170, 160, 22, 190, 227, 221, 133, 190, 153, 187, 65, 62, 194, 59, 2, 191, 155, 124, 33, 62, 52, 24, 93, 62, 249, 63, 36, 190, 141, 5, 179, 62, 115, 90, 34, 62, 94, 204, 102, 60, 88, 6, 218, 61, 143, 104, 29, 190, 140, 196, 237, 189, 246, 248, 165, 61, 106, 247, 5, 189, 120, 213, 1, 61, 146, 106, 153, 61, 101, 228, 181, 190, 55, 14, 36, 191, 226, 170, 103, 62, 234, 39, 230, 189, 115, 207, 137, 191, 203, 190, 174, 61, 218, 156, 155, 191, 30, 27, 104, 60, 52, 125, 69, 62, 106, 105, 252, 62, 130, 135, 84, 191, 88, 50, 0, 188, 214, 112, 141, 189, 239, 246, 107, 190, 226, 62, 205, 189, 204, 195, 208, 190, 57, 12, 139, 62, 100, 251, 210, 190, 44, 109, 157, 62, 82, 185, 122, 190, 21, 201, 197, 62, 84, 37, 25, 62, 236, 215, 208, 62, 41, 219, 159, 190, 51, 35, 58, 61, 61, 39, 26, 190, 204, 16, 53, 191, 242, 15, 155, 62, 12, 215, 113, 191, 162, 61, 133, 190, 237, 185, 135, 62, 60, 40, 166, 189, 254, 238, 99, 190, 255, 24, 228, 62, 173, 65, 177, 190, 116, 26, 4, 62, 29, 174, 57, 191, 197, 52, 37, 191, 112, 40, 204, 190, 175, 44, 246, 62, 236, 116, 3, 62, 40, 190, 144, 61, 152, 122, 222, 61, 254, 65, 135, 62, 233, 125, 31, 191, 4, 190, 101, 190, 223, 69, 15, 190, 0, 201, 67, 190, 9, 239, 21, 190, 28, 156, 243, 61, 97, 232, 176, 190, 104, 28, 38, 62, 104, 52, 48, 190, 163, 36, 93, 189, 12, 69, 127, 62, 127, 199, 198, 188, 211, 156, 51, 190, 151, 9, 85, 62, 31, 18, 42, 62, 201, 206, 172, 188, 48, 201, 86, 62, 146, 210, 19, 190, 145, 29, 182, 188, 77, 123, 0, 62, 207, 154, 128, 190, 108, 182, 7, 191, 80, 10, 26, 63, 76, 204, 155, 190, 131, 59, 109, 191, 236, 14, 66, 190, 138, 23, 224, 190, 226, 6, 2, 63, 221, 233, 12, 190, 175, 99, 104, 190, 70, 122, 39, 62, 106, 88, 166, 61, 44, 223, 47, 191, 135, 20, 9, 190, 189, 238, 74, 188, 250, 6, 86, 190, 95, 241, 179, 62, 143, 95, 79, 62, 191, 196, 207, 190, 196, 44, 89, 61, 213, 64, 196, 190, 67, 148, 1, 190, 207, 226, 98, 62, 46, 14, 107, 62, 156, 92, 46, 63, 185, 115, 128, 62, 230, 224, 20, 62, 246, 165, 157, 189, 63, 26, 40, 189, 123, 140, 52, 190, 197, 59, 99, 190, 180, 33, 238, 61, 149, 233, 147, 62, 43, 198, 178, 191, 65, 64, 38, 191, 16, 39, 16, 191, 178, 11, 124, 191, 126, 140, 151, 61, 117, 63, 188, 191, 10, 224, 130, 62, 156, 237, 30, 190, 208, 11, 50, 62, 123, 19, 22, 189, 142, 147, 144, 62, 57, 184, 228, 190, 72, 184, 155, 191, 203, 179, 149, 191, 28, 46, 43, 190, 230, 141, 184, 190, 166, 63, 128, 62, 216, 147, 34, 191, 8, 3, 254, 61, 106, 51, 70, 61, 248, 22, 147, 61, 234, 239, 134, 62, 15, 59, 75, 62, 33, 244, 107, 62, 32, 253, 221, 60, 89, 109, 252, 187, 185, 149, 229, 189, 148, 161, 12, 62, 48, 212, 133, 190, 59, 100, 99, 62, 138, 84, 130, 62, 187, 253, 184, 191, 179, 164, 59, 191, 212, 60, 86, 62, 90, 241, 197, 190, 4, 231, 163, 191, 213, 58, 7, 190, 204, 127, 162, 62, 140, 63, 120, 190, 154, 110, 118, 61, 179, 200, 90, 62, 242, 43, 133, 190, 52, 196, 180, 190, 65, 212, 188, 62, 158, 212, 22, 62, 83, 224, 249, 60, 43, 254, 128, 62, 242, 48, 161, 62, 16, 43, 21, 62, 123, 213, 33, 191, 45, 8, 0, 62, 26, 162, 40, 60, 38, 183, 82, 190, 153, 80, 171, 62, 120, 102, 61, 191, 56, 26, 136, 186, 183, 28, 192, 187, 162, 142, 218, 190, 9, 248, 143, 62, 243, 60, 74, 190, 41, 18, 32, 190, 143, 223, 182, 189, 37, 18, 0, 61, 105, 136, 31, 189, 232, 207, 74, 61, 22, 142, 50, 190, 192, 218, 11, 62, 208, 139, 192, 62, 158, 156, 209, 190, 229, 169, 97, 61, 74, 185, 75, 190, 13, 164, 131, 62, 171, 234, 157, 190, 197, 69, 156, 60, 94, 117, 231, 190, 27, 155, 121, 62, 105, 206, 31, 62, 31, 215, 226, 61, 66, 244, 87, 62, 30, 163, 154, 187, 181, 116, 12, 62, 235, 7, 209, 189, 171, 149, 135, 62, 60, 63, 231, 189, 120, 228, 13, 190, 214, 198, 144, 189, 107, 116, 51, 191, 137, 109, 205, 190, 181, 108, 218, 189, 135, 185, 188, 190, 248, 214, 162, 62, 254, 70, 221, 189, 151, 66, 0, 189, 168, 52, 97, 62, 60, 189, 158, 61, 147, 9, 37, 62, 32, 84, 123, 61, 248, 5, 18, 190, 144, 137, 15, 190, 195, 161, 97, 61, 38, 195, 143, 190, 200, 9, 15, 61, 131, 135, 57, 63, 29, 112, 223, 61, 67, 7, 120, 189, 202, 90, 179, 62, 201, 164, 205, 62, 244, 2, 26, 62, 98, 4, 202, 186, 205, 18, 4, 189, 50, 79, 43, 191, 229, 236, 72, 190, 94, 30, 185, 61, 5, 233, 31, 189, 170, 167, 155, 60, 83, 243, 69, 61, 147, 183, 149, 62, 124, 171, 85, 190, 85, 167, 210, 62, 15, 69, 213, 190, 199, 192, 202, 190, 6, 151, 182, 62, 208, 188, 223, 60, 152, 26, 131, 62, 237, 177, 169, 61, 37, 138, 143, 61, 143, 93, 87, 191, 54, 170, 244, 189, 210, 0, 181, 190, 189, 103, 224, 61, 158, 211, 241, 189, 7, 16, 139, 61, 131, 5, 182, 61, 135, 24, 68, 191, 79, 140, 243, 61, 129, 85, 251, 61, 226, 223, 63, 189, 134, 3, 44, 62, 39, 164, 30, 190, 52, 232, 22, 191, 137, 16, 64, 62, 89, 98, 235, 190, 65, 143, 7, 190, 67, 86, 124, 62, 131, 139, 83, 62, 176, 158, 228, 190, 88, 111, 73, 62, 253, 65, 151, 190, 35, 11, 204, 62, 96, 232, 133, 61, 1, 20, 64, 62, 133, 67, 205, 62, 39, 170, 165, 62, 115, 198, 82, 62, 59, 99, 20, 190, 170, 192, 143, 60, 31, 29, 27, 190, 139, 154, 200, 190, 19, 67, 60, 62, 130, 109, 4, 190, 212, 75, 170, 191, 204, 146, 86, 62, 238, 194, 255, 190, 107, 106, 115, 191, 210, 131, 95, 61, 108, 52, 22, 189, 65, 189, 66, 63, 180, 195, 115, 61, 9, 247, 235, 61, 91, 90, 90, 189, 168, 118, 35, 62, 239, 82, 123, 188, 76, 135, 103, 61, 247, 82, 6, 62, 166, 16, 199, 190, 25, 179, 155, 189, 85, 38, 106, 189, 209, 122, 194, 62, 187, 58, 221, 189, 81, 206, 254, 59, 145, 95, 144, 62, 122, 29, 237, 56, 71, 29, 187, 62, 145, 95, 37, 62, 183, 231, 196, 190, 221, 78, 177, 188, 215, 176, 0, 188, 16, 32, 172, 61, 14, 30, 39, 62, 50, 246, 3, 62, 209, 238, 211, 190, 100, 252, 75, 62, 53, 240, 188, 62, 164, 164, 12, 190, 56, 138, 223, 62, 39, 213, 84, 62, 17, 154, 55, 62, 162, 207, 129, 189, 59, 65, 82, 187, 244, 157, 7, 62, 107, 246, 202, 62, 11, 12, 51, 62, 174, 17, 235, 189, 21, 226, 235, 190, 7, 226, 186, 61, 116, 40, 111, 190, 220, 38, 109, 190, 223, 88, 240, 61, 113, 230, 155, 61, 154, 1, 209, 190, 32, 190, 102, 190, 120, 122, 231, 62, 11, 79, 113, 189, 118, 180, 166, 191, 35, 148, 134, 191, 240, 228, 177, 62, 68, 252, 42, 189, 240, 109, 247, 188, 156, 53, 149, 61, 193, 22, 141, 62, 154, 150, 9, 190, 28, 127, 61, 61, 155, 23, 170, 190, 214, 0, 31, 190, 158, 36, 155, 190, 143, 140, 2, 62, 190, 97, 225, 60, 66, 119, 122, 190, 102, 190, 41, 190, 191, 179, 112, 189, 202, 171, 93, 63, 227, 11, 8, 62, 172, 119, 197, 190, 138, 25, 185, 62, 183, 142, 160, 62, 229, 214, 228, 189, 219, 193, 11, 190, 17, 96, 32, 190, 249, 99, 154, 190, 46, 158, 0, 190, 111, 112, 63, 62, 130, 120, 106, 186, 255, 172, 131, 189, 232, 98, 220, 61, 92, 54, 169, 62, 235, 82, 251, 185, 96, 10, 171, 62, 24, 69, 166, 190, 171, 130, 46, 62, 81, 25, 0, 63, 97, 54, 199, 61, 207, 45, 68, 61, 221, 187, 25, 188, 156, 221, 106, 61, 245, 19, 129, 190, 163, 215, 25, 190, 29, 59, 2, 191, 87, 88, 22, 190, 160, 19, 59, 190, 228, 41, 156, 190, 68, 30, 191, 62, 148, 15, 246, 61, 168, 183, 41, 62, 78, 205, 246, 189, 163, 128, 199, 60, 199, 19, 16, 190, 4, 242, 163, 60, 141, 235, 122, 190, 253, 219, 125, 59, 168, 127, 78, 187, 226, 186, 158, 188, 56, 136, 54, 190, 98, 0, 148, 190, 24, 189, 98, 189, 228, 23, 142, 189, 242, 224, 38, 190, 37, 136, 107, 61, 84, 180, 111, 190, 127, 86, 194, 60, 187, 134, 131, 61, 89, 39, 1, 190, 125, 60, 7, 189, 202, 12, 191, 61, 207, 210, 254, 189, 150, 28, 168, 186, 20, 0, 133, 190, 212, 52, 125, 190, 61, 108, 3, 190, 122, 237, 8, 189, 21, 138, 142, 61, 78, 112, 141, 61, 248, 16, 139, 61, 120, 169, 138, 188, 80, 26, 58, 190, 163, 151, 81, 61, 135, 66, 35, 62, 180, 61, 111, 59, 25, 169, 162, 189, 137, 7, 52, 190, 100, 33, 75, 61, 122, 25, 173, 60, 237, 22, 241, 61, 49, 98, 4, 62, 26, 36, 36, 190, 169, 248, 178, 189, 124, 29, 77, 188, 140, 166, 75, 189, 15, 66, 195, 61, 37, 122, 25, 190, 17, 61, 233, 188, 100, 146, 91, 60, 50, 147, 121, 188, 49, 3, 48, 190, 241, 124, 98, 188, 203, 124, 173, 189, 190, 169, 172, 189, 128, 127, 51, 190, 130, 177, 178, 187, 150, 93, 238, 187, 97, 247, 35, 190, 173, 218, 42, 190, 206, 81, 153, 61, 181, 175, 210, 189, 151, 41, 230, 189, 41, 191, 141, 61, 186, 223, 182, 190, 216, 171, 202, 62, 212, 172, 183, 61, 151, 33, 210, 190, 205, 212, 141, 62, 233, 4, 238, 61, 253, 176, 1, 62, 239, 63, 54, 62, 144, 125, 169, 60, 42, 90, 105, 61, 211, 118, 2, 190, 70, 70, 116, 61, 51, 135, 110, 190, 8, 60, 63, 188, 148, 59, 172, 59, 81, 69, 64, 189, 153, 182, 62, 188, 50, 204, 209, 62, 120, 138, 168, 190, 109, 225, 225, 61, 4, 196, 80, 190, 116, 81, 212, 61, 179, 231, 124, 62, 162, 161, 194, 189, 216, 124, 146, 189, 54, 159, 194, 190, 101, 59, 54, 189, 113, 70, 94, 191, 96, 238, 126, 62, 249, 216, 36, 190, 102, 249, 157, 190, 178, 229, 65, 62, 23, 74, 161, 191, 62, 188, 7, 63, 106, 168, 233, 61, 51, 101, 62, 190, 217, 214, 216, 61, 9, 142, 172, 62, 224, 243, 96, 191, 133, 127, 136, 191, 109, 181, 118, 191, 229, 124, 123, 190, 210, 172, 9, 190, 13, 61, 82, 62, 164, 171, 74, 62, 214, 89, 126, 62, 230, 244, 166, 190, 74, 6, 67, 62, 198, 31, 195, 62, 131, 226, 132, 62, 179, 226, 232, 62, 86, 29, 110, 62, 245, 206, 153, 189, 178, 153, 70, 190, 68, 125, 140, 189, 218, 173, 57, 62, 76, 180, 13, 191, 255, 37, 198, 62, 52, 79, 239, 190, 33, 145, 8, 191, 189, 120, 4, 191, 179, 177, 93, 190, 102, 244, 149, 191, 60, 165, 150, 189, 137, 147, 24, 62, 40, 151, 223, 189, 119, 115, 133, 62, 221, 249, 154, 62, 53, 103, 157, 190, 22, 27, 188, 188, 26, 107, 254, 188, 238, 87, 223, 61, 238, 96, 200, 61, 98, 140, 45, 191, 150, 28, 62, 61, 203, 14, 204, 190, 120, 76, 79, 190, 87, 42, 2, 191, 14, 176, 44, 62, 117, 96, 243, 189, 137, 4, 155, 60, 26, 232, 228, 188, 114, 209, 140, 62, 19, 188, 211, 189, 106, 122, 253, 189, 113, 105, 156, 190, 68, 3, 184, 190, 10, 17, 91, 191, 133, 41, 217, 61, 69, 191, 228, 190, 89, 124, 89, 62, 53, 250, 208, 62, 34, 142, 255, 61, 35, 61, 24, 61, 13, 92, 230, 189, 16, 180, 210, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 45, 193, 61, 135, 60, 217, 62, 39, 99, 104, 62, 215, 37, 163, 62, 149, 136, 18, 61, 83, 197, 201, 62, 180, 176, 17, 61, 109, 109, 17, 190, 11, 86, 162, 190, 251, 21, 56, 62, 121, 171, 55, 190, 242, 71, 232, 62, 178, 119, 142, 62, 28, 52, 184, 62, 41, 167, 5, 62, 187, 236, 144, 61, 29, 187, 243, 61, 128, 155, 66, 62, 129, 203, 219, 60, 44, 157, 162, 62, 247, 246, 97, 62, 117, 187, 102, 62, 221, 166, 164, 189, 22, 54, 1, 190, 161, 172, 248, 189, 12, 220, 207, 62, 46, 199, 227, 188, 48, 189, 42, 189, 89, 18, 161, 61, 37, 51, 6, 190, 215, 227, 27, 62, 134, 241, 98, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 143, 54, 191, 188, 187, 48, 190, 182, 5, 244, 190, 13, 180, 75, 63, 94, 81, 56, 62, 182, 116, 138, 191, 0, 50, 7, 63, 19, 28, 208, 187, 180, 101, 42, 191, 165, 24, 110, 190, 97, 115, 101, 191, 95, 141, 138, 190, 53, 158, 65, 189, 235, 9, 180, 189, 134, 38, 236, 62, 230, 4, 117, 62, 62, 185, 89, 63, 63, 157, 25, 62, 83, 12, 170, 63, 55, 235, 119, 63, 93, 59, 24, 191, 28, 222, 136, 190, 29, 199, 49, 62, 162, 174, 144, 63, 214, 84, 47, 62, 202, 152, 50, 191, 219, 87, 127, 62, 204, 188, 201, 61, 222, 221, 23, 61, 158, 227, 231, 62, 3, 86, 60, 63, 187, 119, 205, 62, 48, 80, 154, 62, 48, 69, 174, 190, 240, 17, 196, 61, 153, 62, 41, 62, 203, 22, 157, 190, 65, 202, 70, 189, 210, 6, 151, 61, 10, 167, 243, 61, 48, 108, 156, 61, 126, 32, 191, 61, 220, 38, 216, 61, 66, 241, 26, 190, 212, 225, 90, 190, 67, 175, 119, 190, 38, 149, 18, 190, 122, 174, 95, 190, 160, 179, 140, 189, 164, 173, 46, 191, 13, 165, 232, 61, 238, 32, 146, 189, 90, 39, 182, 62, 116, 165, 255, 59, 107, 8, 191, 190, 236, 97, 133, 62, 25, 249, 154, 189, 38, 104, 83, 190, 11, 200, 138, 190, 245, 188, 158, 58, 116, 231, 231, 61, 237, 254, 217, 190, 110, 124, 75, 61, 4, 8, 145, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 247, 10, 190, 152, 128, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {11, 30, 197, 191, 16, 179, 55, 63, 175, 88, 23, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {42, 180, 2, 192, 190, 233, 25, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0091/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}