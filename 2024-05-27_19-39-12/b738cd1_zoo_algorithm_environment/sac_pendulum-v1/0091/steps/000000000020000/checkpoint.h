// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 197, 24, 191, 161, 54, 111, 191, 166, 123, 189, 190, 26, 29, 95, 62, 46, 155, 83, 191, 140, 60, 59, 190, 241, 6, 14, 63, 176, 72, 227, 190, 131, 60, 181, 62, 197, 190, 23, 190, 0, 53, 227, 63, 58, 21, 189, 189, 163, 124, 76, 63, 236, 171, 22, 191, 206, 204, 193, 190, 170, 242, 241, 60, 149, 208, 220, 61, 187, 206, 1, 63, 159, 208, 138, 190, 30, 13, 147, 191, 248, 53, 141, 190, 107, 240, 2, 190, 150, 86, 193, 62, 49, 238, 41, 191, 90, 125, 239, 190, 36, 51, 214, 189, 46, 105, 213, 190, 145, 58, 190, 189, 153, 183, 70, 191, 204, 16, 25, 62, 92, 252, 196, 190, 92, 131, 158, 62, 14, 169, 110, 190, 201, 169, 155, 61, 230, 125, 47, 191, 125, 164, 21, 61, 50, 94, 144, 62, 189, 47, 40, 63, 115, 60, 220, 62, 146, 182, 4, 191, 55, 178, 86, 191, 120, 132, 129, 60, 255, 177, 121, 187, 42, 203, 104, 63, 175, 162, 79, 59, 126, 108, 219, 62, 245, 133, 143, 190, 123, 251, 69, 190, 193, 232, 205, 190, 223, 126, 40, 191, 91, 27, 68, 189, 113, 133, 55, 63, 47, 187, 137, 191, 90, 249, 161, 190, 31, 14, 89, 191, 150, 20, 69, 63, 22, 74, 22, 61, 125, 245, 129, 61, 119, 60, 128, 191, 45, 179, 0, 63, 92, 202, 240, 62, 175, 187, 177, 190, 190, 228, 179, 190, 131, 243, 253, 62, 210, 131, 130, 63, 118, 26, 137, 62, 160, 222, 54, 63, 184, 64, 167, 190, 83, 17, 166, 190, 47, 13, 0, 191, 135, 255, 174, 62, 115, 234, 186, 62, 250, 33, 69, 190, 72, 126, 244, 62, 166, 105, 152, 190, 16, 57, 130, 191, 72, 195, 175, 60, 201, 129, 190, 61, 33, 95, 132, 190, 21, 83, 244, 60, 204, 252, 42, 191, 106, 151, 101, 63, 223, 48, 78, 63, 239, 208, 139, 62, 201, 190, 15, 63, 136, 112, 156, 62, 10, 217, 64, 190, 110, 121, 181, 62, 64, 105, 178, 63, 44, 98, 181, 62, 214, 109, 146, 190, 244, 1, 182, 191, 252, 208, 177, 190, 129, 81, 24, 63, 150, 139, 45, 191, 227, 115, 201, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 204, 39, 191, 206, 92, 49, 191, 0, 89, 167, 190, 188, 199, 111, 62, 190, 168, 174, 189, 204, 97, 86, 190, 4, 119, 153, 188, 72, 240, 23, 189, 188, 82, 85, 190, 154, 35, 161, 190, 123, 95, 156, 62, 115, 60, 206, 62, 45, 254, 120, 191, 81, 186, 225, 62, 246, 51, 79, 62, 136, 90, 29, 191, 184, 7, 182, 62, 40, 123, 191, 190, 182, 210, 167, 62, 90, 158, 172, 62, 111, 180, 198, 190, 155, 247, 13, 62, 180, 33, 11, 61, 214, 129, 218, 190, 118, 51, 8, 63, 76, 25, 7, 62, 193, 210, 253, 61, 81, 231, 47, 191, 142, 122, 165, 190, 177, 142, 19, 190, 22, 91, 143, 189, 160, 200, 223, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 208, 198, 189, 236, 72, 149, 190, 183, 109, 82, 190, 140, 222, 19, 62, 30, 139, 76, 190, 223, 194, 208, 190, 254, 49, 210, 189, 108, 203, 216, 61, 32, 224, 42, 190, 50, 255, 126, 190, 82, 185, 29, 62, 0, 162, 46, 190, 195, 209, 26, 191, 52, 38, 177, 190, 73, 161, 134, 61, 25, 100, 180, 190, 139, 176, 169, 190, 103, 195, 168, 191, 28, 90, 117, 62, 78, 222, 175, 190, 4, 254, 78, 190, 140, 189, 41, 62, 173, 58, 7, 190, 18, 207, 205, 189, 44, 2, 129, 189, 200, 162, 149, 62, 56, 74, 198, 188, 57, 66, 138, 190, 155, 138, 144, 62, 52, 122, 127, 190, 249, 123, 243, 189, 4, 129, 145, 190, 250, 124, 226, 61, 134, 103, 169, 190, 244, 31, 192, 61, 67, 137, 35, 62, 160, 162, 246, 189, 111, 248, 112, 190, 24, 247, 231, 188, 166, 27, 23, 62, 220, 99, 2, 190, 90, 243, 38, 189, 115, 253, 219, 61, 73, 243, 245, 62, 191, 224, 219, 190, 92, 43, 188, 62, 177, 147, 0, 188, 178, 176, 190, 190, 159, 217, 129, 188, 192, 83, 190, 190, 90, 210, 91, 61, 5, 123, 53, 62, 21, 252, 167, 190, 115, 42, 42, 62, 210, 170, 137, 62, 76, 229, 227, 189, 162, 120, 26, 62, 11, 98, 54, 62, 40, 232, 42, 190, 29, 250, 248, 190, 232, 0, 128, 189, 34, 232, 70, 190, 102, 47, 35, 189, 138, 152, 144, 190, 22, 2, 19, 62, 171, 65, 80, 190, 96, 235, 55, 190, 216, 10, 21, 61, 21, 196, 7, 190, 26, 175, 34, 190, 78, 172, 161, 62, 7, 54, 12, 62, 31, 165, 199, 61, 57, 216, 7, 62, 31, 114, 85, 62, 196, 98, 10, 62, 240, 16, 156, 190, 105, 203, 157, 62, 33, 92, 82, 189, 94, 252, 45, 191, 100, 156, 194, 62, 231, 111, 68, 191, 113, 80, 61, 190, 173, 175, 105, 62, 17, 213, 194, 190, 37, 204, 250, 61, 41, 92, 145, 190, 140, 230, 102, 190, 88, 200, 85, 62, 171, 202, 140, 62, 245, 52, 152, 189, 223, 7, 91, 60, 15, 141, 84, 61, 140, 93, 126, 60, 252, 249, 4, 63, 39, 121, 192, 190, 107, 216, 93, 62, 81, 31, 179, 190, 140, 138, 221, 189, 156, 208, 191, 62, 147, 17, 34, 191, 202, 130, 66, 190, 124, 242, 107, 62, 79, 39, 120, 190, 102, 155, 137, 62, 150, 214, 196, 187, 42, 226, 130, 189, 79, 185, 161, 188, 111, 107, 74, 190, 3, 113, 236, 62, 246, 172, 112, 61, 32, 158, 68, 191, 87, 63, 5, 63, 210, 25, 20, 191, 190, 136, 96, 62, 29, 214, 241, 190, 94, 151, 64, 191, 8, 204, 183, 62, 150, 150, 15, 191, 174, 89, 224, 190, 180, 160, 170, 61, 16, 149, 132, 62, 236, 102, 170, 60, 236, 251, 161, 62, 63, 43, 138, 190, 241, 118, 87, 62, 46, 137, 211, 62, 74, 76, 195, 190, 243, 154, 158, 190, 241, 189, 194, 62, 89, 55, 21, 189, 63, 78, 29, 62, 211, 56, 50, 62, 18, 115, 118, 62, 68, 39, 8, 191, 150, 88, 90, 190, 14, 128, 79, 189, 43, 217, 10, 190, 30, 116, 158, 190, 98, 36, 12, 62, 20, 217, 67, 62, 222, 181, 41, 61, 82, 190, 164, 61, 186, 43, 111, 189, 46, 173, 4, 190, 236, 191, 113, 61, 100, 67, 239, 62, 126, 174, 7, 62, 110, 106, 77, 190, 80, 105, 141, 62, 232, 150, 195, 56, 80, 85, 120, 188, 189, 223, 151, 189, 242, 113, 234, 189, 191, 162, 86, 189, 131, 232, 232, 190, 225, 146, 135, 60, 13, 210, 8, 188, 83, 191, 51, 191, 27, 55, 171, 60, 8, 56, 141, 61, 62, 21, 181, 190, 39, 194, 162, 190, 239, 122, 59, 61, 213, 160, 169, 190, 21, 195, 106, 191, 8, 201, 203, 189, 132, 21, 22, 188, 36, 11, 196, 60, 254, 45, 164, 62, 11, 52, 27, 62, 18, 80, 129, 60, 40, 167, 243, 190, 25, 228, 152, 188, 237, 50, 47, 62, 38, 13, 141, 190, 191, 53, 234, 187, 65, 115, 140, 191, 22, 100, 19, 62, 173, 235, 112, 191, 176, 240, 236, 190, 165, 41, 218, 62, 48, 238, 187, 189, 136, 161, 10, 62, 72, 170, 186, 62, 22, 76, 222, 62, 247, 64, 243, 61, 79, 99, 148, 189, 62, 105, 72, 61, 219, 86, 192, 189, 146, 57, 84, 189, 141, 211, 119, 190, 55, 146, 3, 191, 21, 239, 155, 62, 122, 51, 28, 61, 23, 117, 142, 62, 215, 8, 84, 191, 107, 20, 58, 190, 203, 118, 191, 190, 244, 242, 192, 188, 157, 13, 211, 187, 53, 241, 11, 191, 16, 179, 53, 190, 163, 106, 56, 190, 159, 198, 97, 190, 174, 11, 25, 189, 18, 199, 170, 61, 135, 134, 16, 190, 76, 41, 29, 190, 212, 65, 23, 188, 122, 50, 68, 62, 119, 211, 61, 190, 48, 27, 71, 190, 201, 246, 29, 62, 249, 14, 64, 191, 24, 164, 151, 191, 152, 132, 207, 61, 247, 177, 132, 190, 150, 244, 216, 185, 248, 155, 12, 63, 2, 14, 45, 191, 98, 69, 60, 62, 250, 58, 182, 190, 1, 29, 162, 60, 22, 16, 152, 189, 65, 93, 52, 189, 143, 117, 197, 189, 250, 183, 248, 189, 90, 236, 184, 189, 183, 3, 168, 188, 107, 174, 36, 60, 108, 134, 180, 189, 88, 133, 145, 61, 153, 11, 83, 61, 35, 198, 254, 61, 41, 94, 27, 62, 45, 138, 236, 189, 218, 137, 41, 190, 108, 15, 210, 61, 179, 193, 38, 190, 200, 125, 9, 190, 96, 105, 238, 189, 176, 9, 244, 60, 225, 30, 248, 189, 59, 236, 201, 189, 234, 30, 52, 190, 96, 228, 155, 61, 88, 113, 81, 189, 248, 146, 181, 61, 101, 128, 28, 189, 200, 194, 25, 61, 172, 208, 85, 189, 212, 185, 51, 190, 3, 121, 15, 190, 140, 64, 40, 190, 215, 209, 140, 61, 186, 228, 235, 190, 147, 13, 200, 190, 46, 155, 63, 190, 95, 5, 152, 62, 246, 193, 19, 62, 235, 225, 88, 62, 30, 21, 164, 62, 233, 80, 160, 190, 69, 87, 60, 190, 37, 250, 33, 62, 45, 102, 34, 191, 17, 251, 7, 189, 187, 171, 46, 62, 70, 255, 144, 60, 78, 202, 214, 190, 54, 36, 115, 190, 233, 11, 60, 62, 182, 114, 42, 63, 210, 170, 99, 190, 228, 53, 109, 62, 141, 1, 62, 189, 133, 33, 125, 191, 203, 99, 242, 188, 119, 101, 28, 61, 166, 66, 128, 190, 196, 205, 219, 188, 244, 135, 233, 190, 81, 92, 121, 190, 148, 92, 141, 62, 1, 85, 134, 190, 26, 133, 239, 60, 145, 226, 26, 62, 150, 54, 31, 189, 122, 78, 173, 190, 251, 126, 212, 62, 176, 191, 130, 190, 17, 223, 19, 189, 172, 50, 242, 189, 70, 21, 56, 190, 138, 85, 67, 62, 175, 138, 180, 61, 97, 68, 174, 60, 118, 19, 70, 62, 8, 165, 33, 62, 45, 62, 15, 61, 150, 128, 165, 190, 152, 172, 241, 189, 128, 7, 226, 188, 95, 228, 64, 191, 127, 228, 47, 191, 217, 144, 120, 190, 178, 157, 0, 62, 4, 151, 44, 190, 119, 181, 55, 62, 40, 29, 110, 189, 224, 249, 115, 189, 50, 200, 82, 62, 86, 32, 199, 189, 163, 36, 8, 62, 234, 72, 60, 62, 125, 186, 147, 62, 53, 53, 25, 190, 15, 139, 131, 190, 204, 226, 149, 188, 55, 160, 148, 190, 19, 216, 33, 191, 145, 226, 83, 62, 96, 197, 200, 191, 179, 169, 204, 62, 220, 49, 212, 62, 210, 209, 208, 61, 45, 163, 198, 188, 159, 49, 54, 189, 177, 233, 78, 62, 8, 160, 138, 190, 31, 44, 73, 62, 58, 5, 41, 61, 212, 189, 50, 61, 233, 0, 237, 190, 189, 190, 214, 189, 73, 88, 98, 189, 227, 48, 239, 62, 104, 75, 72, 191, 70, 51, 228, 62, 93, 178, 201, 62, 247, 181, 197, 190, 250, 119, 96, 62, 48, 232, 49, 61, 131, 29, 75, 190, 254, 10, 217, 190, 220, 11, 201, 60, 149, 243, 137, 62, 103, 101, 145, 62, 39, 156, 137, 190, 216, 250, 161, 61, 89, 252, 199, 62, 47, 32, 39, 62, 26, 208, 103, 190, 235, 164, 223, 61, 45, 22, 149, 189, 222, 54, 224, 189, 0, 96, 39, 190, 161, 6, 119, 62, 198, 111, 9, 190, 92, 133, 145, 61, 79, 4, 185, 190, 81, 75, 77, 62, 179, 249, 152, 62, 222, 77, 172, 190, 5, 140, 112, 62, 156, 135, 240, 61, 186, 180, 164, 190, 174, 171, 10, 62, 172, 212, 205, 190, 76, 7, 205, 61, 218, 81, 95, 61, 53, 29, 147, 190, 95, 228, 125, 61, 148, 39, 149, 188, 148, 182, 103, 190, 255, 84, 38, 62, 9, 171, 231, 61, 45, 21, 119, 61, 235, 36, 185, 61, 46, 151, 46, 60, 54, 42, 56, 61, 255, 103, 191, 188, 235, 171, 167, 190, 126, 157, 187, 60, 84, 184, 178, 190, 221, 61, 37, 189, 48, 63, 40, 190, 140, 13, 96, 61, 15, 219, 2, 62, 219, 94, 181, 61, 202, 50, 246, 189, 38, 125, 172, 189, 211, 15, 224, 189, 18, 205, 142, 60, 101, 94, 70, 62, 85, 237, 87, 190, 88, 145, 31, 62, 45, 131, 195, 61, 74, 139, 16, 190, 206, 194, 203, 61, 171, 13, 34, 190, 244, 234, 84, 62, 216, 192, 118, 62, 17, 103, 84, 190, 180, 160, 188, 61, 43, 37, 252, 188, 144, 43, 172, 190, 208, 16, 107, 61, 139, 110, 112, 61, 217, 1, 174, 189, 143, 188, 96, 190, 193, 238, 35, 190, 128, 73, 166, 189, 124, 50, 208, 189, 107, 96, 204, 188, 45, 13, 18, 62, 10, 100, 206, 190, 60, 172, 132, 62, 152, 47, 54, 62, 35, 184, 73, 189, 38, 34, 16, 62, 248, 105, 203, 61, 205, 87, 4, 62, 225, 202, 88, 61, 202, 119, 10, 62, 7, 107, 106, 61, 112, 222, 107, 62, 213, 242, 34, 190, 247, 125, 110, 62, 96, 238, 26, 61, 89, 37, 196, 190, 20, 50, 129, 61, 150, 119, 239, 190, 52, 59, 210, 61, 189, 51, 7, 62, 167, 15, 177, 190, 92, 77, 7, 62, 90, 59, 13, 61, 207, 35, 97, 190, 141, 46, 16, 190, 98, 174, 20, 190, 100, 94, 46, 60, 40, 178, 120, 190, 66, 190, 224, 189, 114, 184, 28, 190, 138, 176, 11, 62, 20, 79, 136, 189, 246, 193, 178, 186, 25, 202, 147, 63, 119, 42, 81, 62, 107, 193, 68, 62, 182, 238, 174, 62, 177, 68, 214, 62, 20, 246, 46, 190, 22, 75, 149, 189, 41, 93, 153, 190, 22, 63, 104, 190, 236, 36, 22, 189, 206, 175, 112, 189, 190, 67, 146, 190, 128, 148, 13, 190, 230, 85, 51, 62, 245, 215, 249, 62, 43, 89, 105, 190, 29, 167, 79, 63, 105, 251, 142, 189, 86, 33, 34, 188, 113, 26, 23, 63, 217, 43, 169, 189, 240, 89, 170, 188, 118, 168, 5, 189, 49, 134, 239, 60, 23, 198, 20, 191, 141, 185, 16, 190, 74, 86, 99, 191, 36, 119, 148, 61, 136, 119, 111, 190, 129, 53, 234, 60, 58, 250, 254, 62, 248, 173, 239, 190, 170, 23, 101, 62, 223, 206, 151, 189, 206, 170, 168, 61, 83, 73, 186, 60, 11, 87, 77, 189, 62, 172, 28, 191, 57, 135, 25, 191, 152, 50, 217, 189, 247, 201, 51, 190, 197, 101, 128, 190, 221, 57, 42, 62, 30, 11, 12, 191, 172, 137, 16, 62, 177, 59, 108, 62, 249, 63, 36, 190, 162, 122, 174, 62, 197, 225, 12, 62, 32, 28, 18, 60, 18, 220, 113, 61, 223, 206, 45, 190, 235, 87, 248, 189, 158, 47, 146, 61, 251, 18, 127, 189, 218, 146, 69, 61, 13, 160, 81, 61, 69, 44, 174, 190, 122, 22, 34, 191, 221, 11, 98, 62, 68, 57, 253, 189, 177, 153, 142, 191, 139, 43, 85, 61, 10, 190, 154, 191, 30, 27, 104, 60, 245, 81, 52, 61, 140, 17, 15, 63, 224, 180, 145, 191, 207, 165, 223, 189, 192, 120, 66, 189, 71, 152, 131, 190, 185, 47, 19, 190, 23, 254, 253, 190, 81, 248, 167, 62, 147, 72, 18, 191, 64, 84, 56, 62, 15, 154, 103, 190, 127, 161, 229, 62, 84, 37, 25, 62, 243, 130, 211, 62, 41, 219, 159, 190, 176, 32, 189, 61, 22, 18, 132, 190, 47, 151, 78, 191, 218, 222, 161, 62, 14, 92, 144, 191, 7, 184, 162, 190, 128, 202, 168, 62, 10, 18, 154, 189, 202, 220, 140, 190, 136, 110, 209, 62, 175, 173, 218, 190, 196, 123, 16, 62, 104, 107, 53, 191, 242, 248, 41, 191, 51, 29, 208, 190, 2, 238, 245, 62, 161, 59, 224, 61, 153, 145, 226, 61, 100, 195, 248, 61, 182, 228, 111, 62, 135, 132, 44, 191, 13, 10, 116, 190, 246, 187, 20, 190, 194, 249, 92, 190, 86, 123, 83, 190, 189, 111, 197, 61, 185, 223, 169, 190, 32, 208, 206, 61, 91, 250, 28, 190, 96, 186, 130, 189, 234, 150, 44, 62, 232, 52, 148, 188, 32, 243, 150, 190, 72, 232, 50, 62, 69, 156, 30, 62, 132, 227, 117, 187, 153, 218, 99, 62, 245, 7, 41, 190, 34, 249, 49, 188, 0, 244, 91, 61, 67, 136, 141, 190, 95, 94, 247, 190, 227, 174, 29, 63, 17, 28, 140, 190, 204, 22, 125, 191, 41, 151, 81, 190, 116, 28, 196, 190, 184, 73, 212, 62, 48, 69, 228, 189, 8, 53, 70, 190, 202, 192, 83, 62, 70, 64, 182, 61, 201, 128, 56, 191, 94, 117, 147, 189, 98, 99, 245, 188, 195, 201, 77, 190, 217, 66, 199, 62, 79, 58, 122, 62, 226, 199, 212, 190, 89, 208, 165, 61, 241, 132, 206, 190, 148, 155, 76, 190, 35, 12, 129, 62, 175, 78, 158, 62, 158, 209, 50, 63, 15, 70, 140, 62, 253, 39, 70, 62, 4, 233, 123, 189, 248, 108, 1, 60, 176, 147, 42, 190, 4, 223, 107, 190, 252, 184, 5, 62, 193, 173, 187, 62, 201, 204, 186, 191, 107, 59, 55, 191, 250, 40, 25, 191, 226, 235, 133, 191, 185, 60, 193, 61, 123, 176, 186, 191, 10, 224, 130, 62, 200, 15, 62, 190, 79, 211, 108, 62, 107, 222, 132, 189, 129, 95, 143, 62, 129, 227, 226, 190, 111, 71, 157, 191, 217, 214, 147, 191, 77, 27, 36, 190, 97, 159, 184, 190, 49, 35, 105, 62, 148, 213, 33, 191, 68, 233, 33, 62, 22, 201, 89, 61, 248, 22, 147, 61, 60, 159, 161, 62, 193, 115, 31, 62, 77, 132, 108, 62, 216, 65, 96, 186, 64, 31, 60, 189, 111, 180, 1, 190, 161, 161, 232, 61, 63, 81, 120, 190, 65, 89, 104, 62, 210, 0, 139, 62, 220, 83, 185, 191, 187, 123, 60, 191, 107, 83, 68, 62, 150, 64, 205, 190, 162, 96, 165, 191, 120, 148, 69, 190, 153, 130, 164, 62, 30, 28, 64, 190, 197, 170, 228, 61, 96, 191, 93, 62, 34, 89, 137, 190, 156, 65, 148, 190, 144, 35, 201, 62, 51, 198, 50, 62, 225, 195, 153, 61, 251, 249, 152, 62, 162, 89, 164, 62, 89, 214, 36, 62, 210, 51, 4, 191, 54, 99, 8, 62, 239, 15, 237, 59, 222, 159, 99, 190, 32, 173, 176, 62, 104, 1, 77, 191, 244, 172, 21, 189, 38, 197, 187, 60, 227, 10, 211, 190, 189, 128, 131, 62, 113, 20, 76, 190, 250, 27, 46, 190, 190, 138, 160, 189, 106, 100, 64, 189, 82, 194, 65, 186, 102, 61, 227, 61, 99, 240, 230, 189, 74, 5, 14, 62, 148, 48, 206, 62, 187, 101, 209, 190, 137, 92, 118, 61, 247, 66, 31, 190, 156, 102, 169, 62, 19, 32, 155, 190, 102, 73, 0, 61, 74, 156, 204, 190, 48, 97, 130, 62, 87, 7, 47, 62, 253, 47, 13, 62, 175, 160, 116, 62, 53, 125, 204, 60, 117, 22, 46, 62, 96, 191, 191, 59, 71, 239, 129, 62, 50, 31, 203, 189, 220, 193, 40, 190, 104, 27, 168, 189, 170, 112, 46, 191, 179, 166, 178, 190, 114, 26, 54, 189, 208, 121, 185, 190, 164, 239, 171, 62, 201, 181, 198, 189, 117, 26, 100, 189, 24, 212, 111, 62, 70, 161, 25, 60, 236, 243, 57, 62, 172, 206, 219, 61, 100, 168, 9, 190, 164, 21, 201, 189, 114, 231, 140, 61, 200, 69, 135, 190, 7, 1, 166, 61, 83, 221, 63, 63, 42, 179, 174, 61, 80, 251, 9, 189, 118, 1, 185, 62, 30, 228, 21, 63, 121, 221, 57, 62, 140, 164, 222, 60, 186, 204, 13, 188, 237, 63, 81, 191, 235, 41, 57, 190, 113, 161, 154, 61, 5, 233, 31, 189, 98, 107, 21, 61, 163, 16, 112, 61, 145, 221, 193, 62, 70, 133, 54, 190, 30, 242, 217, 62, 3, 182, 219, 190, 207, 37, 228, 190, 123, 117, 201, 62, 69, 87, 16, 61, 104, 29, 134, 62, 237, 177, 169, 61, 115, 21, 192, 61, 189, 81, 66, 191, 1, 47, 189, 189, 58, 54, 171, 190, 247, 234, 249, 61, 252, 7, 171, 189, 52, 179, 205, 61, 180, 35, 246, 61, 197, 96, 60, 191, 170, 29, 158, 61, 86, 204, 0, 62, 142, 227, 84, 189, 243, 230, 86, 62, 100, 160, 41, 190, 249, 57, 29, 191, 170, 180, 168, 62, 49, 93, 226, 190, 223, 179, 13, 190, 152, 19, 138, 62, 86, 186, 110, 62, 233, 183, 245, 190, 184, 214, 88, 62, 85, 122, 205, 190, 10, 114, 234, 62, 233, 48, 189, 61, 173, 47, 137, 62, 251, 204, 179, 62, 200, 48, 168, 62, 253, 145, 151, 62, 254, 170, 48, 190, 61, 183, 128, 61, 127, 171, 34, 190, 73, 124, 221, 190, 101, 40, 36, 62, 44, 240, 72, 61, 4, 130, 183, 191, 135, 81, 51, 62, 255, 49, 29, 191, 220, 252, 127, 191, 47, 57, 188, 61, 233, 45, 133, 188, 240, 241, 72, 63, 80, 35, 226, 188, 79, 228, 71, 62, 127, 213, 171, 188, 57, 87, 161, 61, 95, 16, 228, 59, 112, 139, 162, 61, 211, 172, 1, 62, 103, 254, 7, 191, 213, 253, 52, 189, 223, 166, 130, 189, 170, 152, 138, 62, 165, 166, 177, 189, 62, 140, 166, 61, 104, 19, 184, 62, 56, 140, 96, 60, 0, 23, 202, 62, 75, 110, 68, 62, 193, 144, 250, 190, 241, 190, 215, 60, 55, 17, 28, 61, 220, 246, 225, 61, 68, 84, 5, 62, 241, 249, 64, 62, 167, 86, 187, 190, 237, 212, 93, 62, 141, 68, 200, 62, 191, 248, 194, 189, 9, 26, 0, 63, 43, 99, 109, 62, 173, 119, 103, 62, 192, 3, 4, 61, 59, 65, 82, 187, 173, 103, 31, 62, 229, 34, 160, 62, 208, 135, 57, 62, 111, 46, 25, 190, 96, 172, 203, 190, 49, 141, 194, 61, 212, 143, 53, 190, 184, 196, 146, 190, 119, 61, 225, 61, 80, 117, 180, 61, 232, 206, 202, 190, 38, 193, 171, 190, 9, 16, 203, 62, 194, 181, 89, 189, 45, 52, 167, 191, 44, 219, 131, 191, 38, 158, 175, 62, 180, 118, 123, 187, 225, 239, 36, 189, 91, 31, 41, 61, 135, 163, 143, 62, 179, 1, 4, 190, 47, 234, 136, 60, 40, 141, 173, 190, 204, 97, 19, 190, 24, 148, 166, 190, 69, 53, 206, 61, 94, 200, 3, 189, 79, 113, 57, 190, 39, 154, 37, 190, 15, 52, 151, 189, 137, 171, 97, 63, 167, 0, 183, 61, 190, 167, 180, 190, 87, 70, 176, 62, 23, 183, 156, 62, 132, 78, 8, 190, 0, 169, 23, 190, 57, 210, 49, 190, 134, 194, 164, 190, 5, 154, 46, 190, 78, 109, 21, 62, 246, 42, 108, 60, 116, 195, 177, 189, 154, 156, 220, 61, 152, 138, 196, 62, 191, 31, 225, 188, 112, 16, 162, 62, 130, 34, 133, 190, 60, 214, 1, 62, 133, 216, 254, 62, 23, 120, 168, 61, 249, 93, 2, 61, 196, 173, 219, 60, 50, 163, 73, 61, 83, 192, 110, 190, 77, 37, 41, 190, 41, 214, 8, 191, 6, 235, 42, 190, 100, 18, 51, 190, 104, 43, 167, 190, 24, 223, 183, 62, 148, 15, 246, 61, 168, 183, 41, 62, 251, 35, 247, 189, 230, 122, 189, 60, 199, 19, 16, 190, 200, 157, 157, 60, 141, 235, 122, 190, 253, 219, 125, 59, 168, 127, 78, 187, 226, 186, 158, 188, 56, 136, 54, 190, 98, 0, 148, 190, 138, 69, 101, 189, 228, 23, 142, 189, 41, 177, 39, 190, 37, 136, 107, 61, 84, 180, 111, 190, 127, 86, 194, 60, 10, 23, 130, 61, 16, 143, 1, 190, 125, 60, 7, 189, 103, 187, 188, 61, 207, 210, 254, 189, 67, 236, 218, 186, 215, 17, 133, 190, 137, 64, 125, 190, 61, 108, 3, 190, 44, 221, 11, 189, 21, 138, 142, 61, 247, 43, 139, 61, 248, 16, 139, 61, 120, 169, 138, 188, 80, 26, 58, 190, 163, 151, 81, 61, 135, 66, 35, 62, 180, 61, 111, 59, 25, 169, 162, 189, 137, 7, 52, 190, 100, 33, 75, 61, 122, 25, 173, 60, 237, 22, 241, 61, 49, 98, 4, 62, 26, 36, 36, 190, 169, 248, 178, 189, 124, 29, 77, 188, 140, 166, 75, 189, 15, 66, 195, 61, 37, 122, 25, 190, 17, 61, 233, 188, 100, 146, 91, 60, 50, 147, 121, 188, 49, 3, 48, 190, 241, 124, 98, 188, 203, 124, 173, 189, 190, 169, 172, 189, 128, 127, 51, 190, 130, 177, 178, 187, 150, 93, 238, 187, 97, 247, 35, 190, 173, 218, 42, 190, 206, 81, 153, 61, 181, 175, 210, 189, 151, 41, 230, 189, 41, 191, 141, 61, 46, 197, 192, 190, 237, 108, 210, 62, 98, 41, 125, 61, 11, 104, 163, 190, 218, 157, 148, 62, 171, 13, 223, 61, 93, 130, 210, 61, 109, 234, 92, 62, 136, 17, 190, 60, 107, 196, 11, 61, 168, 215, 214, 189, 38, 90, 28, 61, 115, 239, 90, 190, 85, 133, 39, 189, 107, 77, 85, 61, 186, 166, 157, 60, 186, 198, 34, 189, 195, 187, 209, 62, 119, 101, 166, 190, 246, 137, 134, 61, 71, 255, 44, 190, 45, 183, 236, 61, 60, 245, 132, 62, 159, 105, 148, 189, 81, 249, 252, 188, 50, 128, 213, 190, 103, 252, 107, 188, 149, 56, 91, 191, 208, 1, 146, 62, 226, 243, 8, 190, 0, 66, 169, 190, 128, 159, 83, 62, 53, 228, 158, 191, 77, 142, 7, 63, 252, 159, 142, 61, 33, 83, 46, 190, 110, 7, 193, 61, 133, 29, 165, 62, 197, 7, 95, 191, 218, 136, 141, 191, 141, 98, 107, 191, 99, 44, 131, 190, 119, 8, 201, 189, 76, 237, 49, 62, 91, 94, 53, 62, 52, 198, 144, 62, 186, 100, 188, 190, 74, 6, 67, 62, 182, 242, 218, 62, 223, 152, 159, 62, 24, 51, 7, 63, 171, 83, 95, 62, 90, 82, 187, 189, 130, 81, 144, 190, 0, 58, 165, 189, 237, 182, 104, 62, 10, 211, 25, 191, 120, 245, 236, 62, 12, 142, 231, 190, 207, 66, 70, 191, 185, 74, 67, 191, 11, 202, 138, 190, 211, 76, 151, 191, 57, 110, 198, 189, 51, 190, 43, 62, 130, 213, 197, 189, 139, 42, 129, 62, 249, 42, 186, 62, 141, 117, 131, 190, 190, 118, 104, 189, 152, 157, 194, 187, 213, 210, 245, 61, 227, 42, 178, 61, 201, 207, 45, 191, 50, 33, 147, 61, 136, 234, 175, 190, 30, 173, 100, 190, 94, 37, 221, 190, 30, 218, 121, 62, 169, 78, 186, 189, 129, 120, 22, 61, 140, 167, 236, 61, 144, 118, 149, 62, 145, 81, 242, 189, 210, 167, 192, 189, 199, 153, 23, 190, 162, 8, 157, 190, 27, 186, 116, 191, 87, 47, 19, 62, 65, 144, 216, 190, 84, 193, 95, 62, 226, 3, 2, 63, 80, 231, 38, 62, 218, 254, 38, 62, 244, 113, 172, 189, 13, 115, 128, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 185, 4, 61, 247, 168, 216, 62, 24, 248, 82, 62, 8, 166, 171, 62, 197, 151, 16, 61, 219, 215, 195, 62, 152, 167, 148, 61, 220, 0, 17, 190, 241, 217, 182, 190, 207, 102, 65, 62, 236, 237, 14, 190, 160, 236, 235, 62, 49, 209, 141, 62, 248, 152, 185, 62, 196, 20, 244, 61, 242, 221, 107, 61, 39, 12, 13, 62, 246, 40, 59, 62, 153, 227, 143, 61, 61, 204, 152, 62, 161, 116, 84, 62, 253, 232, 128, 62, 27, 53, 171, 189, 11, 132, 232, 189, 74, 116, 193, 189, 147, 145, 203, 62, 147, 136, 107, 189, 230, 235, 45, 189, 89, 18, 161, 61, 186, 19, 8, 190, 7, 220, 9, 62, 212, 181, 47, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 77, 32, 191, 15, 58, 29, 190, 19, 85, 237, 190, 180, 80, 100, 63, 100, 47, 3, 62, 22, 99, 135, 191, 238, 215, 56, 63, 119, 119, 209, 187, 215, 197, 40, 191, 138, 132, 117, 190, 156, 183, 129, 191, 146, 198, 116, 190, 26, 228, 93, 189, 162, 113, 180, 189, 57, 238, 240, 62, 115, 69, 40, 62, 60, 179, 110, 63, 234, 246, 182, 61, 244, 56, 188, 63, 1, 244, 108, 63, 3, 101, 21, 191, 15, 10, 117, 190, 94, 18, 68, 62, 122, 216, 164, 63, 163, 102, 93, 62, 228, 167, 32, 191, 48, 191, 65, 62, 1, 177, 201, 61, 222, 221, 23, 61, 243, 210, 199, 62, 46, 217, 72, 63, 193, 7, 209, 62, 226, 57, 102, 62, 98, 248, 167, 190, 16, 237, 125, 61, 43, 39, 87, 61, 50, 215, 174, 190, 135, 233, 71, 188, 46, 240, 124, 60, 98, 171, 243, 61, 64, 202, 28, 62, 121, 111, 68, 62, 16, 70, 19, 62, 81, 231, 80, 190, 107, 48, 86, 190, 31, 167, 114, 190, 31, 38, 9, 190, 151, 219, 155, 190, 47, 40, 241, 189, 66, 38, 50, 191, 252, 65, 109, 62, 70, 99, 22, 190, 200, 53, 150, 62, 23, 146, 80, 188, 24, 132, 193, 190, 164, 22, 238, 62, 209, 168, 157, 189, 250, 2, 34, 190, 129, 55, 166, 190, 205, 157, 161, 58, 116, 231, 231, 61, 232, 47, 240, 190, 136, 24, 51, 62, 177, 69, 0, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 10, 11, 190, 255, 153, 169, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {247, 10, 143, 189, 68, 208, 68, 191, 211, 100, 109, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {19, 69, 70, 192, 14, 0, 54, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0091/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}