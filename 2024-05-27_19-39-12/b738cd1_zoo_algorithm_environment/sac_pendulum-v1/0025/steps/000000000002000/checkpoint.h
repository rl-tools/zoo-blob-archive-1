// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 133, 251, 61, 188, 40, 29, 62, 255, 24, 18, 63, 49, 100, 130, 62, 212, 2, 63, 191, 61, 105, 122, 62, 127, 46, 149, 190, 177, 192, 94, 63, 76, 210, 167, 189, 213, 116, 21, 63, 7, 110, 24, 61, 31, 30, 195, 62, 242, 176, 224, 190, 45, 163, 99, 63, 84, 57, 10, 62, 107, 179, 21, 63, 214, 145, 10, 191, 199, 233, 135, 190, 219, 181, 119, 62, 158, 11, 163, 189, 189, 212, 16, 191, 10, 30, 155, 190, 99, 170, 231, 62, 247, 211, 27, 62, 222, 241, 183, 190, 110, 226, 29, 191, 238, 113, 22, 62, 239, 7, 174, 61, 197, 82, 27, 63, 125, 160, 195, 189, 82, 161, 91, 189, 79, 47, 57, 63, 109, 86, 246, 188, 107, 62, 23, 63, 144, 217, 201, 190, 47, 202, 20, 191, 45, 254, 110, 190, 235, 62, 98, 63, 0, 19, 145, 189, 109, 83, 253, 190, 161, 145, 169, 190, 114, 39, 44, 190, 108, 98, 68, 190, 53, 65, 112, 62, 138, 35, 137, 60, 178, 156, 7, 191, 62, 16, 161, 190, 64, 66, 134, 189, 126, 186, 178, 62, 193, 26, 32, 63, 134, 34, 243, 189, 25, 116, 63, 63, 22, 65, 34, 191, 54, 7, 15, 63, 251, 60, 174, 62, 197, 151, 52, 62, 59, 10, 16, 191, 177, 155, 129, 190, 228, 77, 11, 63, 48, 34, 13, 191, 94, 78, 168, 190, 180, 180, 168, 189, 146, 220, 247, 62, 47, 239, 128, 190, 19, 194, 68, 191, 193, 73, 225, 62, 33, 1, 145, 190, 126, 25, 182, 190, 163, 59, 5, 63, 183, 199, 118, 61, 28, 2, 108, 190, 160, 14, 17, 63, 187, 107, 89, 62, 242, 2, 120, 191, 118, 82, 172, 62, 130, 154, 193, 190, 238, 126, 133, 62, 226, 32, 75, 62, 67, 59, 102, 63, 206, 174, 25, 63, 106, 52, 216, 62, 226, 133, 4, 63, 235, 26, 38, 63, 215, 245, 30, 190, 120, 194, 244, 190, 19, 65, 210, 189, 88, 247, 203, 62, 244, 43, 59, 189, 132, 183, 101, 62, 78, 40, 128, 190, 135, 88, 252, 190, 81, 213, 91, 191, 114, 208, 183, 62, 14, 23, 188, 189, 108, 247, 199, 190, 108, 1, 43, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 146, 37, 191, 254, 121, 226, 62, 128, 230, 127, 62, 236, 218, 41, 62, 187, 10, 74, 62, 225, 111, 221, 62, 212, 3, 54, 191, 108, 26, 228, 62, 66, 163, 185, 62, 241, 231, 87, 62, 48, 42, 134, 61, 48, 164, 183, 62, 30, 172, 116, 189, 246, 147, 107, 190, 181, 116, 144, 62, 225, 245, 12, 62, 123, 189, 166, 62, 233, 238, 201, 61, 135, 116, 217, 190, 105, 146, 146, 61, 23, 91, 142, 61, 76, 180, 47, 62, 167, 246, 252, 62, 229, 253, 23, 191, 105, 211, 224, 62, 147, 183, 12, 63, 58, 161, 196, 62, 181, 97, 43, 63, 14, 214, 41, 189, 138, 186, 186, 190, 187, 177, 86, 189, 165, 55, 236, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 25, 223, 189, 126, 119, 146, 190, 119, 251, 124, 62, 111, 185, 48, 62, 75, 131, 189, 61, 108, 63, 41, 190, 152, 119, 211, 190, 157, 230, 51, 62, 194, 110, 221, 60, 95, 95, 127, 62, 253, 42, 140, 62, 32, 197, 254, 60, 115, 7, 182, 62, 55, 29, 72, 61, 49, 253, 33, 62, 255, 214, 9, 190, 188, 51, 111, 62, 143, 93, 87, 61, 207, 36, 10, 190, 253, 195, 51, 62, 141, 155, 13, 189, 181, 94, 151, 190, 46, 225, 159, 61, 1, 116, 227, 189, 36, 73, 95, 190, 244, 167, 187, 189, 36, 70, 175, 60, 123, 91, 74, 62, 191, 20, 43, 61, 154, 243, 159, 190, 219, 175, 46, 189, 65, 143, 225, 189, 146, 235, 62, 190, 200, 66, 139, 188, 146, 191, 117, 60, 142, 7, 181, 188, 98, 204, 158, 190, 251, 220, 35, 62, 212, 214, 24, 60, 178, 226, 171, 188, 177, 140, 6, 188, 222, 153, 184, 189, 93, 81, 8, 190, 128, 142, 193, 188, 231, 156, 162, 61, 21, 178, 22, 61, 127, 0, 138, 188, 85, 138, 155, 61, 112, 23, 26, 61, 129, 248, 243, 61, 154, 168, 28, 190, 106, 190, 50, 62, 184, 85, 83, 190, 33, 195, 240, 189, 69, 74, 246, 61, 118, 58, 163, 58, 227, 190, 157, 61, 103, 220, 55, 188, 175, 242, 140, 188, 180, 117, 253, 60, 170, 199, 3, 190, 114, 70, 73, 190, 19, 82, 133, 60, 148, 129, 221, 187, 92, 181, 231, 190, 33, 71, 131, 62, 23, 194, 193, 189, 242, 49, 151, 190, 78, 74, 172, 188, 184, 190, 68, 62, 77, 62, 159, 60, 147, 161, 68, 61, 143, 237, 113, 62, 92, 111, 184, 190, 254, 158, 132, 190, 138, 184, 43, 62, 56, 224, 155, 190, 193, 101, 51, 61, 131, 196, 226, 61, 47, 194, 102, 62, 142, 209, 39, 61, 208, 60, 94, 190, 41, 42, 124, 62, 130, 157, 149, 189, 254, 50, 26, 62, 130, 32, 125, 62, 4, 198, 152, 61, 193, 255, 146, 190, 235, 97, 193, 60, 253, 204, 6, 190, 2, 197, 113, 190, 99, 178, 183, 190, 105, 57, 57, 62, 227, 123, 13, 62, 177, 108, 125, 62, 30, 112, 124, 188, 6, 87, 239, 188, 144, 146, 47, 190, 135, 86, 83, 60, 216, 32, 152, 189, 5, 116, 17, 62, 222, 231, 108, 188, 40, 132, 230, 60, 233, 189, 164, 62, 69, 148, 15, 61, 158, 90, 62, 189, 33, 46, 57, 189, 106, 107, 208, 189, 168, 135, 51, 62, 15, 181, 137, 188, 8, 255, 220, 189, 50, 58, 47, 62, 188, 134, 210, 189, 218, 88, 162, 187, 103, 198, 224, 61, 17, 24, 20, 62, 60, 0, 190, 189, 70, 11, 155, 190, 15, 255, 43, 190, 234, 201, 47, 190, 195, 86, 255, 190, 235, 200, 118, 62, 141, 62, 227, 189, 122, 29, 104, 61, 123, 156, 212, 61, 74, 1, 164, 60, 235, 92, 140, 190, 235, 118, 132, 61, 247, 80, 216, 189, 105, 58, 143, 59, 134, 116, 6, 190, 116, 208, 26, 62, 153, 25, 25, 190, 208, 94, 72, 62, 162, 235, 196, 59, 192, 97, 38, 190, 135, 46, 76, 190, 150, 170, 52, 62, 222, 206, 34, 61, 30, 31, 60, 188, 244, 117, 29, 62, 89, 182, 184, 188, 225, 119, 135, 189, 207, 100, 146, 190, 106, 112, 255, 61, 190, 188, 40, 62, 160, 34, 233, 188, 129, 152, 91, 190, 216, 255, 21, 190, 146, 221, 217, 61, 144, 211, 51, 188, 251, 184, 33, 190, 190, 46, 145, 189, 59, 83, 235, 187, 213, 215, 70, 187, 223, 242, 63, 62, 237, 165, 99, 189, 42, 204, 94, 59, 214, 229, 133, 190, 168, 170, 231, 61, 210, 225, 221, 189, 192, 25, 1, 62, 184, 84, 209, 189, 235, 174, 57, 61, 210, 33, 102, 190, 199, 191, 199, 188, 253, 46, 51, 190, 126, 114, 18, 61, 250, 60, 95, 60, 98, 12, 178, 189, 4, 211, 95, 190, 126, 218, 138, 189, 12, 65, 244, 59, 229, 64, 36, 190, 127, 29, 34, 190, 24, 42, 157, 190, 156, 230, 193, 61, 167, 128, 24, 62, 129, 236, 136, 189, 4, 78, 196, 189, 70, 69, 168, 61, 62, 95, 71, 60, 189, 101, 20, 62, 202, 162, 3, 189, 18, 94, 6, 62, 123, 149, 237, 188, 112, 77, 246, 189, 207, 123, 162, 189, 143, 118, 8, 189, 236, 254, 193, 189, 76, 0, 242, 61, 221, 173, 237, 188, 151, 54, 133, 189, 10, 246, 79, 189, 220, 31, 43, 190, 245, 87, 188, 61, 92, 63, 197, 60, 203, 252, 28, 190, 133, 201, 213, 60, 83, 135, 153, 189, 249, 218, 133, 190, 108, 59, 8, 190, 75, 239, 36, 190, 66, 82, 133, 60, 71, 71, 224, 187, 151, 98, 11, 189, 199, 213, 9, 189, 15, 55, 157, 189, 96, 181, 238, 61, 105, 202, 164, 61, 138, 86, 166, 59, 185, 59, 27, 62, 5, 104, 62, 189, 218, 74, 161, 189, 67, 251, 1, 62, 245, 255, 189, 188, 32, 83, 240, 189, 22, 251, 159, 189, 170, 35, 173, 61, 201, 207, 133, 61, 221, 189, 243, 61, 232, 246, 87, 189, 66, 121, 215, 61, 59, 96, 48, 190, 37, 125, 129, 189, 71, 22, 232, 188, 138, 54, 37, 190, 130, 60, 35, 62, 164, 230, 198, 188, 24, 117, 16, 62, 120, 190, 17, 62, 165, 50, 46, 188, 198, 231, 232, 189, 138, 169, 121, 62, 51, 67, 61, 188, 78, 140, 234, 61, 153, 193, 186, 189, 67, 212, 224, 188, 62, 65, 24, 190, 247, 204, 191, 189, 65, 159, 152, 61, 52, 8, 78, 59, 182, 201, 3, 190, 122, 134, 142, 188, 104, 130, 88, 61, 243, 217, 26, 190, 92, 122, 140, 189, 158, 132, 102, 189, 183, 100, 126, 60, 123, 228, 8, 190, 16, 134, 130, 62, 252, 186, 168, 188, 51, 7, 54, 190, 232, 190, 148, 60, 155, 248, 59, 190, 37, 88, 118, 189, 99, 166, 242, 189, 21, 253, 213, 189, 125, 158, 226, 187, 254, 101, 172, 61, 6, 172, 0, 190, 182, 220, 4, 190, 49, 110, 33, 61, 1, 40, 42, 190, 39, 250, 145, 189, 16, 1, 4, 190, 27, 18, 167, 188, 155, 35, 51, 190, 149, 219, 153, 189, 62, 234, 206, 189, 161, 174, 117, 61, 14, 52, 245, 61, 241, 180, 29, 190, 231, 15, 186, 189, 60, 229, 143, 61, 43, 57, 130, 60, 159, 218, 236, 189, 19, 50, 172, 61, 98, 191, 181, 188, 39, 168, 243, 61, 140, 7, 241, 189, 47, 39, 230, 61, 81, 41, 161, 61, 149, 120, 133, 189, 31, 69, 223, 188, 157, 210, 11, 62, 150, 60, 228, 59, 216, 116, 29, 61, 5, 154, 144, 189, 134, 45, 3, 62, 249, 65, 103, 190, 80, 194, 63, 190, 48, 173, 75, 189, 241, 159, 15, 62, 39, 219, 94, 61, 47, 10, 251, 188, 57, 30, 218, 189, 167, 89, 9, 190, 241, 200, 37, 190, 136, 91, 52, 62, 157, 135, 253, 61, 52, 224, 244, 61, 123, 152, 202, 61, 231, 245, 60, 189, 161, 236, 161, 61, 185, 198, 14, 62, 78, 251, 88, 62, 75, 150, 131, 189, 159, 154, 237, 189, 50, 112, 238, 61, 60, 110, 33, 190, 61, 170, 253, 61, 107, 48, 236, 61, 191, 13, 31, 190, 43, 74, 197, 189, 61, 74, 1, 62, 174, 208, 255, 189, 232, 206, 30, 62, 163, 155, 166, 189, 145, 58, 45, 62, 143, 212, 57, 189, 144, 235, 4, 191, 41, 180, 230, 60, 77, 244, 106, 61, 106, 61, 172, 62, 142, 57, 77, 190, 219, 32, 216, 59, 129, 252, 175, 62, 85, 20, 183, 185, 167, 218, 135, 190, 228, 82, 158, 61, 122, 52, 227, 61, 105, 118, 121, 189, 41, 247, 117, 189, 172, 152, 0, 62, 164, 210, 194, 61, 88, 191, 132, 190, 252, 61, 12, 190, 137, 38, 15, 61, 110, 52, 165, 61, 13, 217, 251, 189, 226, 159, 205, 190, 93, 147, 244, 189, 206, 199, 224, 61, 84, 221, 34, 191, 171, 207, 145, 62, 158, 26, 90, 190, 165, 107, 29, 190, 165, 86, 34, 190, 19, 131, 47, 190, 238, 231, 4, 190, 190, 62, 79, 62, 78, 154, 167, 60, 34, 8, 8, 59, 25, 224, 135, 62, 124, 241, 99, 62, 55, 176, 117, 62, 224, 124, 221, 61, 63, 75, 48, 190, 100, 241, 91, 62, 132, 139, 55, 190, 153, 184, 201, 62, 62, 202, 152, 62, 128, 241, 205, 189, 103, 214, 6, 63, 107, 58, 238, 188, 133, 185, 93, 61, 63, 21, 75, 190, 190, 170, 199, 61, 136, 18, 113, 189, 124, 206, 104, 190, 153, 81, 83, 62, 252, 104, 254, 59, 211, 32, 65, 190, 190, 148, 143, 61, 186, 194, 139, 60, 133, 223, 139, 189, 170, 195, 34, 62, 122, 184, 136, 62, 192, 16, 57, 62, 216, 87, 22, 189, 19, 145, 207, 190, 126, 68, 118, 190, 205, 102, 83, 61, 10, 151, 234, 59, 40, 79, 116, 189, 173, 217, 241, 189, 61, 29, 212, 61, 211, 208, 6, 190, 224, 89, 104, 190, 146, 171, 127, 188, 33, 238, 14, 61, 67, 101, 156, 189, 34, 210, 213, 189, 206, 45, 202, 59, 36, 56, 80, 60, 70, 188, 16, 190, 42, 83, 150, 61, 12, 57, 77, 190, 60, 211, 163, 189, 95, 15, 37, 62, 237, 63, 73, 62, 210, 71, 239, 60, 209, 109, 47, 190, 59, 117, 205, 59, 106, 230, 30, 61, 239, 10, 45, 62, 143, 185, 198, 61, 12, 224, 8, 62, 12, 252, 15, 61, 245, 65, 87, 189, 110, 253, 137, 59, 50, 99, 148, 189, 165, 225, 177, 61, 141, 161, 193, 188, 197, 191, 109, 190, 223, 199, 53, 188, 190, 112, 130, 190, 235, 51, 146, 60, 199, 92, 59, 62, 252, 225, 13, 189, 90, 61, 208, 189, 239, 220, 50, 189, 178, 215, 116, 61, 37, 130, 77, 60, 193, 104, 199, 62, 84, 161, 143, 61, 181, 158, 167, 189, 78, 73, 15, 62, 212, 77, 101, 188, 165, 135, 53, 62, 178, 16, 216, 61, 241, 33, 89, 189, 58, 118, 27, 62, 220, 197, 135, 190, 155, 220, 200, 61, 207, 35, 174, 60, 0, 1, 136, 190, 19, 43, 153, 61, 46, 1, 167, 189, 138, 232, 139, 190, 243, 225, 239, 61, 1, 174, 214, 189, 245, 76, 75, 62, 253, 72, 52, 188, 221, 70, 45, 190, 15, 192, 41, 190, 13, 219, 163, 60, 164, 145, 237, 190, 42, 226, 145, 62, 253, 200, 105, 190, 7, 202, 121, 190, 219, 158, 197, 188, 189, 67, 128, 62, 49, 91, 236, 61, 166, 0, 79, 61, 133, 78, 17, 62, 20, 149, 51, 190, 88, 194, 159, 190, 238, 219, 105, 62, 108, 33, 27, 61, 201, 28, 33, 61, 56, 136, 22, 58, 101, 84, 34, 189, 145, 114, 146, 61, 189, 109, 99, 190, 193, 192, 1, 60, 223, 203, 72, 190, 7, 214, 43, 61, 172, 134, 150, 62, 220, 150, 111, 62, 72, 116, 51, 190, 111, 187, 93, 62, 64, 33, 197, 189, 97, 252, 217, 190, 149, 198, 56, 190, 255, 56, 105, 60, 119, 119, 198, 61, 185, 222, 75, 62, 223, 11, 247, 61, 239, 220, 32, 190, 218, 95, 157, 62, 193, 96, 139, 189, 175, 0, 38, 190, 69, 96, 29, 190, 35, 138, 18, 62, 70, 29, 105, 190, 86, 248, 219, 61, 178, 61, 139, 59, 196, 206, 166, 189, 6, 1, 13, 190, 119, 112, 42, 189, 127, 232, 166, 190, 252, 210, 39, 189, 64, 253, 40, 190, 57, 33, 80, 62, 139, 213, 106, 62, 164, 206, 185, 188, 181, 204, 241, 189, 215, 121, 226, 189, 190, 118, 68, 62, 164, 184, 99, 188, 187, 61, 210, 189, 125, 137, 101, 59, 223, 83, 129, 188, 139, 155, 224, 60, 0, 195, 33, 190, 182, 116, 28, 190, 60, 106, 210, 189, 198, 86, 153, 61, 133, 65, 121, 62, 122, 184, 218, 61, 71, 137, 125, 190, 220, 96, 174, 62, 202, 31, 8, 190, 181, 192, 54, 190, 255, 111, 212, 189, 229, 194, 18, 189, 37, 159, 213, 189, 161, 159, 68, 186, 177, 62, 154, 62, 73, 51, 35, 188, 54, 23, 143, 60, 162, 22, 6, 62, 86, 114, 81, 189, 250, 175, 253, 61, 124, 89, 18, 62, 244, 25, 27, 62, 107, 99, 212, 188, 92, 89, 227, 189, 80, 242, 201, 61, 159, 168, 20, 62, 105, 209, 26, 62, 128, 176, 16, 62, 155, 109, 132, 189, 67, 40, 126, 190, 239, 21, 242, 60, 124, 225, 56, 189, 77, 252, 69, 190, 220, 138, 200, 189, 183, 63, 178, 61, 255, 254, 36, 62, 122, 153, 88, 62, 172, 146, 24, 62, 57, 63, 172, 61, 136, 149, 8, 190, 105, 195, 143, 189, 244, 237, 252, 61, 212, 132, 38, 190, 110, 13, 165, 61, 133, 90, 245, 189, 208, 162, 157, 189, 8, 92, 39, 186, 69, 56, 254, 189, 224, 46, 205, 61, 215, 68, 149, 189, 2, 252, 229, 61, 54, 59, 255, 61, 137, 116, 192, 189, 98, 26, 130, 188, 45, 163, 239, 61, 179, 88, 55, 190, 152, 59, 54, 190, 75, 94, 199, 61, 235, 219, 129, 189, 244, 46, 125, 60, 62, 57, 143, 189, 195, 91, 12, 62, 230, 90, 143, 189, 249, 178, 155, 61, 224, 225, 4, 62, 225, 44, 190, 189, 119, 51, 78, 58, 164, 201, 12, 62, 159, 115, 153, 189, 64, 67, 43, 190, 100, 5, 110, 61, 169, 181, 176, 61, 34, 76, 70, 190, 183, 188, 33, 61, 100, 210, 253, 60, 253, 15, 147, 189, 92, 191, 116, 188, 116, 169, 210, 61, 201, 132, 116, 190, 62, 192, 44, 61, 128, 66, 163, 189, 56, 81, 200, 189, 223, 10, 169, 61, 156, 116, 47, 189, 69, 48, 75, 190, 87, 191, 146, 61, 58, 62, 66, 189, 218, 103, 128, 189, 81, 12, 21, 62, 105, 185, 147, 61, 230, 89, 176, 189, 144, 54, 17, 61, 170, 221, 252, 61, 54, 81, 152, 61, 43, 6, 128, 189, 19, 174, 97, 189, 186, 214, 22, 62, 222, 229, 244, 189, 164, 50, 186, 189, 202, 76, 0, 190, 110, 187, 248, 189, 233, 144, 244, 189, 233, 90, 254, 189, 238, 190, 72, 190, 180, 56, 8, 60, 230, 236, 214, 189, 87, 87, 181, 189, 214, 121, 150, 61, 10, 194, 26, 62, 235, 166, 34, 60, 191, 155, 57, 189, 101, 72, 86, 61, 71, 188, 214, 60, 180, 164, 4, 61, 204, 238, 171, 61, 6, 178, 0, 61, 239, 224, 9, 190, 222, 151, 236, 61, 47, 28, 0, 189, 70, 54, 211, 189, 1, 3, 25, 62, 247, 19, 192, 189, 105, 110, 150, 188, 79, 99, 190, 61, 150, 208, 204, 184, 237, 101, 18, 62, 159, 119, 47, 190, 167, 233, 63, 190, 77, 209, 94, 189, 205, 87, 243, 60, 77, 67, 3, 190, 134, 100, 77, 62, 95, 44, 44, 62, 89, 18, 79, 190, 58, 185, 249, 189, 110, 137, 140, 61, 64, 178, 149, 189, 63, 42, 187, 190, 130, 56, 167, 189, 102, 154, 40, 62, 45, 237, 101, 188, 158, 112, 45, 190, 160, 9, 29, 62, 20, 114, 19, 190, 164, 238, 48, 190, 46, 167, 175, 61, 15, 26, 147, 190, 128, 110, 197, 189, 77, 102, 161, 189, 64, 113, 177, 61, 118, 15, 66, 190, 30, 80, 168, 190, 111, 191, 19, 190, 133, 16, 2, 190, 249, 10, 175, 61, 50, 125, 146, 62, 141, 141, 151, 185, 187, 162, 111, 190, 119, 178, 74, 62, 211, 241, 46, 62, 87, 22, 31, 190, 238, 96, 146, 190, 221, 58, 48, 62, 82, 65, 153, 61, 52, 247, 161, 62, 22, 54, 26, 60, 50, 236, 42, 189, 176, 234, 199, 189, 246, 35, 39, 61, 123, 73, 74, 62, 55, 203, 167, 61, 175, 65, 134, 189, 172, 137, 26, 190, 171, 3, 79, 189, 226, 215, 141, 61, 241, 60, 39, 62, 229, 157, 108, 62, 46, 54, 255, 189, 122, 3, 194, 62, 8, 130, 177, 186, 140, 227, 129, 62, 201, 179, 50, 60, 86, 17, 141, 62, 25, 85, 80, 62, 254, 134, 145, 190, 135, 243, 69, 62, 126, 131, 172, 61, 196, 221, 75, 189, 242, 96, 92, 188, 129, 188, 169, 189, 156, 187, 231, 189, 135, 169, 220, 60, 111, 48, 182, 61, 114, 191, 142, 62, 105, 198, 44, 61, 152, 186, 164, 190, 132, 224, 209, 189, 199, 248, 30, 189, 139, 194, 51, 62, 94, 34, 64, 62, 221, 28, 25, 189, 61, 72, 9, 62, 0, 59, 11, 62, 102, 119, 145, 190, 98, 17, 184, 189, 67, 113, 152, 61, 199, 45, 96, 187, 122, 146, 173, 62, 247, 217, 16, 190, 13, 49, 220, 189, 197, 90, 16, 62, 181, 200, 184, 190, 44, 46, 111, 190, 43, 24, 216, 190, 204, 18, 181, 61, 87, 117, 43, 188, 133, 212, 34, 190, 195, 87, 71, 189, 90, 228, 27, 62, 18, 68, 5, 189, 203, 35, 248, 189, 161, 182, 132, 189, 29, 3, 25, 61, 230, 128, 188, 61, 74, 150, 237, 61, 186, 2, 45, 60, 44, 56, 218, 61, 213, 181, 239, 188, 177, 244, 203, 61, 9, 72, 30, 191, 158, 208, 6, 190, 46, 212, 237, 189, 183, 117, 252, 188, 79, 120, 181, 61, 29, 178, 227, 189, 192, 230, 8, 190, 146, 39, 50, 61, 60, 242, 164, 61, 135, 179, 26, 184, 87, 144, 157, 188, 174, 202, 176, 61, 28, 190, 18, 190, 172, 197, 46, 190, 80, 1, 139, 61, 89, 14, 105, 190, 74, 13, 169, 61, 61, 198, 171, 189, 118, 65, 123, 189, 6, 83, 225, 189, 64, 62, 19, 190, 3, 243, 147, 61, 107, 133, 21, 61, 143, 33, 32, 190, 3, 178, 37, 62, 218, 135, 15, 62, 91, 238, 162, 189, 60, 167, 17, 62, 3, 24, 177, 61, 73, 171, 65, 60, 97, 54, 125, 61, 202, 56, 0, 190, 155, 27, 191, 189, 110, 15, 30, 62, 135, 53, 5, 62, 38, 205, 88, 190, 33, 141, 93, 61, 37, 64, 213, 189, 138, 77, 135, 190, 87, 178, 113, 61, 237, 109, 71, 60, 252, 168, 172, 60, 244, 93, 182, 61, 13, 95, 253, 189, 58, 166, 71, 189, 70, 131, 202, 188, 118, 160, 209, 61, 138, 95, 68, 190, 146, 213, 142, 190, 5, 47, 192, 61, 224, 197, 104, 189, 116, 24, 24, 62, 205, 244, 171, 189, 225, 69, 164, 61, 40, 97, 94, 61, 87, 114, 50, 62, 124, 23, 5, 62, 55, 149, 86, 61, 8, 8, 122, 61, 33, 50, 145, 189, 133, 89, 241, 189, 134, 110, 128, 189, 103, 166, 9, 61, 61, 243, 16, 190, 32, 148, 105, 190, 218, 86, 72, 188, 196, 5, 250, 188, 166, 102, 3, 61, 178, 52, 184, 187, 74, 155, 34, 189, 115, 40, 6, 62, 97, 191, 195, 189, 57, 46, 133, 61, 140, 74, 195, 188, 108, 87, 80, 62, 229, 7, 224, 189, 44, 83, 153, 188, 116, 205, 19, 62, 92, 167, 8, 189, 164, 205, 50, 62, 184, 72, 197, 189, 228, 191, 174, 58, 96, 220, 184, 60, 46, 156, 145, 189, 47, 254, 5, 62, 128, 34, 58, 189, 14, 247, 197, 61, 144, 18, 155, 61, 149, 142, 21, 190, 168, 0, 67, 62, 230, 59, 187, 61, 118, 74, 14, 190, 125, 183, 113, 62, 220, 174, 145, 189, 45, 98, 17, 190, 6, 81, 53, 61, 55, 198, 179, 61, 252, 21, 237, 189, 244, 113, 164, 61, 201, 76, 42, 190, 6, 53, 223, 61, 165, 179, 159, 61, 32, 216, 42, 190, 251, 27, 98, 61, 168, 157, 76, 61, 229, 219, 20, 62, 70, 92, 172, 189, 208, 217, 244, 189, 116, 127, 191, 189, 233, 245, 126, 189, 63, 182, 32, 188, 63, 167, 219, 187, 234, 54, 168, 189, 20, 63, 8, 189, 17, 240, 36, 190, 167, 150, 16, 190, 244, 216, 191, 189, 80, 255, 149, 61, 10, 53, 69, 61, 82, 8, 238, 189, 207, 227, 210, 61, 110, 214, 170, 188, 165, 34, 2, 190, 138, 119, 50, 61, 159, 43, 112, 189, 125, 216, 58, 190, 4, 164, 52, 190, 118, 89, 154, 60, 31, 227, 99, 189, 164, 100, 224, 61, 247, 23, 31, 62, 132, 40, 114, 190, 84, 244, 227, 189, 249, 173, 65, 189, 92, 157, 3, 189, 78, 200, 131, 62, 196, 246, 149, 189, 19, 159, 182, 189, 172, 188, 244, 188, 167, 118, 220, 188, 243, 62, 205, 61, 54, 225, 56, 61, 115, 59, 60, 189, 157, 218, 19, 187, 208, 134, 242, 59, 254, 234, 7, 62, 205, 66, 17, 62, 28, 240, 7, 62, 94, 26, 27, 62, 185, 149, 6, 190, 111, 230, 222, 189, 121, 9, 194, 61, 30, 201, 242, 189, 17, 209, 235, 59, 230, 246, 132, 190, 168, 0, 243, 187, 217, 161, 36, 189, 83, 225, 51, 61, 73, 232, 127, 61, 208, 241, 245, 189, 139, 213, 110, 62, 165, 17, 93, 61, 106, 27, 230, 189, 185, 107, 97, 189, 79, 105, 137, 189, 199, 13, 39, 62, 20, 122, 126, 61, 194, 219, 19, 62, 19, 155, 186, 60, 95, 208, 81, 189, 34, 236, 172, 188, 237, 145, 35, 190, 78, 205, 33, 190, 39, 102, 5, 190, 200, 253, 135, 61, 63, 169, 24, 190, 10, 227, 237, 187, 214, 25, 29, 189, 141, 190, 204, 189, 186, 83, 33, 190, 38, 141, 232, 189, 165, 37, 29, 61, 199, 193, 131, 189, 152, 78, 210, 189, 138, 214, 29, 62, 103, 101, 253, 61, 106, 81, 194, 189, 164, 24, 29, 190, 30, 111, 250, 60, 89, 32, 177, 61, 172, 69, 12, 62, 219, 80, 38, 189, 57, 186, 165, 189, 229, 17, 199, 189, 173, 60, 176, 189, 93, 24, 38, 190, 227, 166, 51, 190, 221, 68, 130, 61, 40, 120, 62, 189, 138, 117, 129, 61, 54, 9, 218, 60, 196, 139, 189, 61, 204, 45, 177, 190, 156, 50, 53, 190, 8, 250, 220, 61, 91, 37, 36, 190, 60, 238, 51, 190, 216, 128, 224, 61, 99, 200, 108, 60, 217, 215, 45, 190, 79, 227, 188, 189, 135, 48, 191, 61, 25, 31, 228, 189, 133, 8, 56, 62, 140, 235, 72, 62, 218, 72, 102, 62, 209, 100, 210, 188, 198, 254, 165, 189, 48, 0, 167, 186, 128, 47, 57, 190, 51, 166, 132, 190, 31, 140, 149, 61, 94, 87, 1, 190, 120, 202, 74, 62, 18, 117, 25, 190, 231, 35, 225, 61, 212, 86, 243, 61, 221, 183, 138, 189, 212, 132, 42, 61, 245, 106, 236, 188, 231, 51, 236, 188, 205, 171, 101, 62, 57, 199, 10, 190, 206, 139, 70, 190, 157, 50, 69, 62, 134, 133, 12, 190, 91, 155, 63, 62, 86, 4, 40, 61, 156, 181, 91, 188, 192, 170, 121, 190, 23, 110, 219, 61, 171, 180, 137, 60, 214, 90, 12, 190, 131, 11, 44, 61, 106, 176, 155, 188, 227, 107, 6, 62, 98, 241, 166, 189, 11, 39, 55, 190, 54, 133, 15, 62, 107, 78, 65, 62, 8, 136, 233, 189, 122, 154, 179, 188, 254, 58, 148, 189, 119, 150, 128, 61, 246, 161, 155, 61, 223, 241, 189, 189, 146, 249, 31, 62, 124, 24, 177, 61, 206, 5, 151, 189, 153, 233, 200, 61, 48, 30, 251, 188, 35, 108, 148, 189, 112, 224, 154, 188, 103, 255, 21, 190, 190, 115, 195, 61, 156, 166, 11, 190, 79, 227, 250, 61, 224, 47, 161, 61, 220, 133, 21, 60, 32, 150, 254, 59, 123, 130, 130, 189, 253, 155, 41, 190, 184, 8, 10, 190, 250, 226, 94, 189, 243, 126, 236, 61, 103, 89, 162, 189, 27, 168, 134, 188, 225, 81, 51, 190, 88, 144, 11, 190, 85, 199, 84, 188, 145, 138, 248, 61, 26, 112, 242, 189, 59, 148, 26, 190, 85, 144, 151, 61, 4, 79, 202, 189, 26, 162, 79, 61, 187, 26, 71, 188, 97, 44, 186, 61, 126, 141, 35, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 90, 223, 61, 23, 182, 8, 60, 6, 71, 175, 61, 81, 201, 109, 61, 1, 33, 82, 61, 58, 240, 8, 61, 122, 134, 114, 190, 172, 210, 35, 61, 67, 120, 93, 189, 109, 118, 42, 62, 19, 53, 133, 61, 239, 58, 205, 61, 157, 134, 51, 189, 121, 225, 209, 61, 41, 211, 28, 62, 105, 88, 96, 62, 34, 62, 180, 61, 20, 202, 6, 189, 158, 78, 31, 190, 195, 228, 4, 60, 105, 147, 25, 62, 87, 102, 63, 62, 43, 51, 59, 190, 150, 48, 233, 189, 15, 110, 196, 189, 219, 107, 198, 61, 133, 214, 236, 61, 86, 87, 166, 61, 120, 234, 154, 189, 66, 131, 254, 61, 246, 105, 144, 60, 100, 222, 52, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 79, 252, 189, 220, 175, 128, 61, 63, 48, 176, 62, 90, 197, 113, 190, 37, 224, 152, 190, 148, 237, 120, 190, 124, 84, 177, 61, 195, 73, 67, 190, 247, 223, 209, 189, 45, 143, 115, 62, 131, 171, 185, 190, 126, 247, 155, 190, 106, 13, 155, 189, 45, 184, 70, 190, 41, 251, 231, 62, 52, 230, 34, 62, 113, 27, 52, 62, 109, 72, 219, 61, 44, 59, 7, 62, 110, 2, 74, 59, 135, 231, 133, 62, 82, 175, 96, 190, 164, 27, 222, 189, 181, 183, 16, 61, 206, 170, 41, 190, 249, 154, 93, 60, 99, 27, 239, 61, 30, 135, 51, 62, 138, 74, 109, 189, 178, 0, 40, 62, 54, 77, 92, 61, 89, 146, 136, 61, 151, 172, 184, 187, 186, 227, 112, 190, 163, 130, 229, 61, 44, 55, 231, 61, 244, 49, 111, 190, 161, 125, 11, 190, 7, 113, 162, 61, 243, 165, 77, 189, 3, 77, 243, 60, 249, 11, 249, 189, 214, 99, 150, 61, 68, 237, 213, 189, 195, 255, 93, 61, 93, 51, 155, 61, 111, 68, 128, 60, 6, 113, 4, 190, 37, 212, 45, 190, 153, 157, 99, 61, 106, 127, 220, 61, 58, 208, 139, 61, 2, 70, 67, 61, 247, 85, 2, 190, 229, 127, 231, 60, 227, 164, 97, 61, 180, 172, 185, 61, 248, 193, 70, 190, 247, 31, 119, 61, 248, 51, 172, 59, 93, 235, 194, 189, 22, 96, 54, 190, 231, 254, 171, 60, 174, 139, 5, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 44, 229, 189, 105, 163, 102, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {122, 218, 92, 63, 252, 88, 246, 61, 48, 253, 112, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {175, 16, 139, 191, 95, 29, 99, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0025/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}