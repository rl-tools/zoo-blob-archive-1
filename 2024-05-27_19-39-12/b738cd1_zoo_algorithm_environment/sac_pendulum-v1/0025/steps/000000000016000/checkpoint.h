// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 94, 58, 62, 161, 149, 64, 63, 164, 245, 6, 63, 137, 133, 252, 62, 198, 223, 4, 191, 161, 51, 206, 62, 101, 6, 97, 190, 115, 11, 58, 63, 85, 74, 215, 188, 106, 154, 161, 62, 130, 109, 254, 62, 104, 153, 252, 62, 190, 102, 106, 191, 156, 238, 243, 62, 197, 59, 32, 61, 103, 17, 76, 63, 146, 237, 150, 191, 185, 24, 100, 190, 98, 74, 71, 63, 108, 109, 110, 191, 234, 130, 229, 190, 67, 50, 45, 191, 204, 18, 140, 62, 58, 105, 218, 61, 21, 60, 57, 191, 201, 165, 56, 191, 3, 148, 59, 61, 66, 81, 252, 61, 18, 148, 44, 63, 79, 180, 109, 190, 61, 1, 99, 189, 28, 240, 2, 63, 155, 48, 68, 190, 86, 55, 70, 63, 4, 217, 41, 191, 85, 163, 30, 191, 44, 86, 206, 189, 248, 232, 43, 63, 116, 208, 124, 190, 240, 183, 205, 190, 238, 176, 239, 191, 24, 87, 175, 190, 163, 98, 239, 189, 122, 190, 35, 63, 228, 99, 89, 61, 158, 152, 67, 191, 222, 144, 249, 190, 189, 215, 244, 188, 203, 113, 218, 60, 92, 168, 155, 63, 171, 2, 130, 188, 54, 120, 148, 62, 125, 48, 62, 191, 24, 86, 57, 63, 69, 76, 111, 62, 151, 166, 51, 190, 2, 206, 20, 191, 93, 233, 35, 190, 242, 22, 199, 189, 202, 147, 68, 191, 96, 174, 204, 190, 240, 28, 240, 63, 188, 144, 8, 63, 190, 16, 168, 189, 36, 29, 52, 189, 227, 84, 54, 63, 115, 117, 150, 61, 39, 29, 164, 63, 142, 196, 248, 62, 80, 12, 55, 190, 186, 68, 159, 190, 68, 255, 27, 63, 61, 255, 131, 62, 149, 62, 70, 190, 84, 9, 58, 63, 88, 140, 21, 191, 152, 158, 163, 62, 229, 211, 1, 62, 168, 245, 121, 63, 208, 149, 214, 63, 62, 241, 166, 62, 168, 216, 17, 63, 75, 140, 35, 63, 105, 155, 20, 190, 152, 114, 186, 190, 100, 246, 238, 63, 114, 210, 159, 62, 158, 195, 162, 189, 185, 182, 49, 61, 49, 205, 162, 190, 144, 128, 231, 190, 219, 64, 195, 190, 194, 37, 17, 63, 238, 125, 157, 190, 136, 60, 61, 191, 76, 230, 200, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 43, 53, 191, 103, 97, 63, 62, 22, 117, 29, 62, 53, 233, 85, 62, 21, 152, 145, 62, 45, 245, 187, 62, 252, 185, 109, 191, 226, 28, 16, 63, 67, 223, 233, 62, 159, 101, 18, 190, 6, 61, 110, 190, 227, 151, 112, 62, 108, 96, 187, 190, 232, 206, 175, 190, 142, 33, 138, 62, 236, 106, 24, 63, 254, 165, 22, 63, 57, 131, 149, 62, 178, 178, 227, 190, 92, 193, 40, 190, 81, 104, 211, 61, 211, 176, 98, 190, 226, 248, 215, 62, 78, 121, 147, 190, 255, 173, 159, 62, 227, 246, 47, 63, 30, 240, 98, 59, 195, 19, 5, 63, 251, 47, 41, 60, 204, 34, 141, 190, 210, 195, 228, 190, 215, 67, 234, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 215, 189, 190, 167, 54, 253, 190, 71, 182, 104, 62, 84, 124, 178, 62, 236, 208, 155, 189, 38, 191, 221, 190, 132, 97, 57, 191, 55, 19, 180, 61, 67, 191, 60, 190, 21, 126, 105, 62, 77, 29, 95, 62, 125, 236, 228, 189, 83, 135, 160, 62, 179, 118, 146, 62, 13, 97, 76, 62, 190, 159, 192, 188, 156, 38, 52, 62, 227, 195, 34, 62, 246, 14, 79, 190, 232, 176, 105, 62, 65, 12, 66, 191, 79, 161, 12, 191, 48, 133, 168, 59, 87, 220, 6, 61, 222, 37, 187, 190, 144, 162, 22, 190, 93, 25, 178, 62, 16, 200, 34, 62, 99, 179, 128, 191, 247, 12, 203, 190, 136, 136, 115, 190, 83, 66, 41, 190, 50, 223, 9, 60, 144, 241, 44, 189, 27, 244, 46, 62, 92, 132, 61, 62, 160, 128, 12, 191, 42, 111, 69, 62, 255, 44, 125, 189, 14, 114, 50, 191, 254, 242, 133, 188, 146, 240, 209, 188, 235, 9, 200, 189, 15, 84, 233, 60, 240, 93, 11, 62, 46, 98, 72, 61, 99, 122, 148, 62, 93, 106, 17, 62, 33, 109, 5, 62, 230, 241, 38, 62, 151, 165, 11, 190, 195, 129, 145, 62, 210, 255, 88, 191, 112, 254, 85, 189, 255, 29, 234, 61, 160, 78, 90, 62, 68, 168, 135, 61, 190, 107, 236, 190, 78, 117, 29, 62, 104, 35, 1, 62, 138, 188, 254, 190, 240, 68, 20, 190, 71, 213, 123, 60, 66, 97, 56, 189, 22, 181, 255, 190, 176, 115, 152, 62, 55, 217, 146, 61, 79, 97, 214, 190, 221, 20, 90, 61, 94, 67, 180, 62, 248, 28, 113, 62, 23, 2, 183, 60, 27, 109, 3, 63, 249, 151, 201, 190, 187, 69, 129, 190, 58, 200, 163, 62, 17, 25, 164, 190, 96, 61, 115, 190, 255, 158, 54, 62, 185, 137, 190, 62, 114, 224, 101, 61, 140, 97, 98, 190, 115, 243, 205, 62, 158, 145, 188, 189, 31, 146, 24, 62, 127, 59, 153, 62, 243, 116, 155, 60, 58, 203, 148, 190, 91, 105, 119, 61, 176, 112, 93, 190, 97, 80, 87, 191, 225, 18, 196, 190, 253, 177, 209, 61, 57, 163, 166, 62, 248, 132, 164, 62, 188, 150, 192, 61, 242, 219, 188, 189, 109, 253, 174, 190, 91, 74, 66, 190, 93, 162, 127, 189, 217, 138, 189, 188, 196, 88, 36, 62, 87, 130, 240, 61, 109, 177, 197, 62, 0, 180, 33, 61, 224, 100, 234, 189, 160, 170, 62, 190, 170, 127, 48, 189, 28, 11, 21, 61, 191, 243, 78, 62, 161, 250, 141, 190, 31, 123, 135, 62, 196, 110, 0, 191, 164, 240, 112, 63, 82, 3, 62, 62, 60, 21, 81, 62, 106, 211, 15, 192, 158, 215, 149, 190, 92, 98, 134, 191, 187, 40, 44, 63, 17, 50, 51, 191, 7, 181, 173, 62, 32, 77, 199, 191, 207, 31, 5, 188, 119, 172, 213, 191, 227, 44, 36, 189, 2, 2, 1, 189, 5, 21, 132, 62, 79, 95, 148, 60, 176, 169, 74, 62, 16, 218, 117, 190, 188, 131, 150, 62, 49, 233, 10, 191, 27, 70, 155, 62, 151, 25, 26, 189, 18, 109, 158, 190, 59, 207, 188, 190, 191, 56, 98, 62, 25, 55, 210, 188, 158, 54, 91, 61, 182, 125, 25, 61, 81, 139, 211, 62, 208, 75, 93, 190, 75, 128, 89, 191, 133, 110, 39, 62, 115, 82, 188, 62, 233, 47, 171, 61, 241, 75, 69, 190, 235, 62, 80, 190, 222, 194, 171, 62, 152, 168, 144, 60, 12, 132, 66, 188, 142, 104, 255, 61, 64, 112, 155, 189, 222, 93, 52, 62, 38, 224, 115, 62, 107, 18, 62, 190, 167, 165, 140, 61, 82, 41, 232, 189, 75, 26, 39, 61, 95, 52, 35, 190, 122, 220, 75, 62, 98, 131, 205, 189, 214, 104, 19, 61, 44, 223, 38, 189, 237, 151, 47, 189, 240, 34, 185, 191, 202, 189, 46, 62, 15, 98, 113, 188, 140, 177, 68, 62, 234, 151, 172, 60, 239, 114, 39, 190, 2, 139, 156, 62, 186, 32, 25, 63, 52, 47, 160, 189, 98, 215, 157, 190, 56, 246, 141, 62, 23, 30, 24, 62, 168, 63, 71, 190, 202, 85, 234, 190, 159, 63, 36, 62, 190, 185, 146, 61, 2, 171, 84, 62, 184, 76, 189, 189, 14, 76, 74, 62, 27, 120, 164, 61, 54, 100, 68, 59, 33, 67, 146, 189, 150, 197, 86, 61, 111, 61, 146, 190, 35, 75, 233, 61, 55, 105, 95, 61, 95, 181, 204, 190, 196, 157, 14, 190, 0, 198, 142, 61, 82, 27, 218, 61, 99, 104, 127, 189, 67, 207, 131, 191, 14, 170, 182, 190, 81, 244, 192, 189, 31, 39, 130, 191, 114, 50, 79, 62, 112, 32, 145, 186, 166, 107, 132, 190, 211, 142, 3, 62, 91, 230, 88, 190, 40, 204, 124, 61, 13, 210, 208, 190, 16, 31, 204, 62, 181, 43, 0, 190, 47, 91, 26, 190, 47, 246, 88, 61, 61, 142, 2, 190, 3, 5, 22, 191, 5, 239, 83, 59, 46, 24, 232, 190, 254, 100, 150, 190, 223, 23, 175, 189, 26, 118, 175, 62, 174, 113, 180, 62, 151, 115, 167, 58, 94, 69, 50, 190, 171, 7, 129, 190, 107, 204, 58, 191, 98, 204, 18, 191, 28, 119, 98, 188, 179, 169, 147, 190, 230, 170, 90, 62, 145, 201, 225, 190, 180, 88, 24, 62, 47, 38, 67, 62, 251, 246, 215, 189, 129, 191, 33, 191, 123, 76, 183, 62, 91, 225, 27, 188, 219, 138, 207, 61, 34, 21, 40, 190, 194, 89, 60, 62, 249, 170, 169, 190, 250, 92, 65, 191, 58, 139, 236, 61, 36, 32, 72, 61, 87, 188, 248, 187, 140, 193, 71, 60, 186, 64, 16, 191, 139, 122, 152, 61, 208, 163, 205, 189, 216, 135, 121, 190, 173, 105, 144, 61, 30, 1, 45, 190, 1, 240, 194, 62, 63, 71, 93, 188, 112, 248, 113, 191, 112, 186, 223, 61, 110, 41, 74, 190, 72, 59, 121, 190, 99, 166, 242, 189, 21, 253, 213, 189, 125, 158, 226, 187, 254, 101, 172, 61, 6, 172, 0, 190, 182, 220, 4, 190, 49, 110, 33, 61, 1, 40, 42, 190, 39, 250, 145, 189, 16, 1, 4, 190, 27, 18, 167, 188, 155, 35, 51, 190, 149, 219, 153, 189, 62, 234, 206, 189, 161, 174, 117, 61, 14, 52, 245, 61, 241, 180, 29, 190, 231, 15, 186, 189, 60, 229, 143, 61, 43, 57, 130, 60, 159, 218, 236, 189, 19, 50, 172, 61, 98, 191, 181, 188, 39, 168, 243, 61, 140, 7, 241, 189, 47, 39, 230, 61, 81, 41, 161, 61, 149, 120, 133, 189, 31, 69, 223, 188, 157, 210, 11, 62, 150, 60, 228, 59, 216, 116, 29, 61, 154, 203, 23, 190, 10, 43, 22, 62, 229, 13, 114, 190, 56, 213, 20, 190, 205, 110, 24, 191, 165, 0, 64, 62, 105, 37, 188, 61, 166, 82, 31, 191, 104, 82, 97, 61, 32, 173, 74, 190, 140, 182, 92, 190, 249, 103, 78, 62, 41, 45, 219, 61, 3, 133, 238, 189, 91, 200, 139, 61, 44, 48, 202, 188, 86, 104, 129, 61, 126, 69, 120, 62, 91, 206, 61, 62, 210, 12, 131, 189, 44, 86, 194, 190, 251, 194, 233, 61, 36, 231, 125, 190, 61, 224, 132, 62, 144, 12, 233, 61, 145, 23, 33, 191, 58, 193, 197, 190, 70, 77, 8, 62, 106, 135, 30, 191, 43, 242, 227, 61, 207, 221, 234, 188, 191, 164, 16, 62, 236, 245, 0, 61, 142, 164, 83, 191, 19, 201, 194, 61, 252, 170, 83, 62, 254, 124, 119, 62, 49, 138, 169, 190, 109, 232, 200, 61, 123, 153, 155, 62, 32, 17, 235, 188, 19, 191, 174, 189, 139, 134, 41, 62, 230, 243, 42, 61, 64, 163, 242, 61, 39, 114, 228, 61, 48, 19, 129, 62, 11, 118, 44, 62, 99, 221, 73, 191, 60, 143, 1, 63, 154, 91, 204, 61, 71, 10, 82, 62, 233, 43, 3, 192, 183, 128, 12, 191, 135, 36, 120, 191, 174, 178, 66, 63, 175, 77, 128, 191, 53, 233, 129, 62, 155, 99, 181, 190, 212, 76, 82, 190, 198, 190, 237, 191, 111, 55, 54, 190, 113, 120, 171, 60, 211, 169, 130, 62, 140, 193, 146, 190, 84, 170, 88, 190, 38, 31, 112, 62, 218, 116, 0, 62, 228, 101, 137, 61, 65, 239, 252, 189, 156, 253, 254, 190, 0, 45, 236, 61, 188, 5, 151, 190, 120, 126, 190, 62, 40, 142, 120, 62, 95, 222, 98, 190, 194, 50, 247, 62, 202, 22, 82, 60, 65, 77, 92, 61, 9, 155, 29, 190, 116, 16, 182, 61, 55, 182, 12, 190, 238, 59, 149, 190, 176, 104, 100, 62, 164, 228, 12, 191, 163, 172, 183, 190, 142, 4, 9, 189, 191, 55, 8, 189, 147, 228, 122, 190, 154, 2, 187, 61, 32, 33, 195, 62, 29, 186, 246, 61, 33, 253, 84, 191, 51, 67, 245, 190, 45, 147, 201, 190, 114, 81, 147, 189, 104, 166, 74, 189, 248, 27, 46, 61, 2, 220, 115, 190, 97, 67, 85, 61, 65, 35, 38, 190, 13, 218, 149, 190, 245, 141, 137, 190, 185, 81, 150, 61, 230, 92, 207, 189, 217, 174, 106, 62, 41, 78, 84, 62, 78, 78, 125, 189, 83, 177, 233, 61, 236, 163, 71, 63, 202, 146, 41, 190, 22, 141, 136, 189, 86, 45, 2, 63, 177, 195, 89, 62, 144, 202, 182, 61, 63, 127, 179, 190, 118, 65, 67, 61, 165, 57, 128, 61, 4, 151, 46, 62, 137, 218, 72, 60, 160, 204, 66, 62, 37, 253, 79, 61, 157, 90, 130, 61, 71, 238, 2, 62, 93, 208, 41, 189, 198, 231, 68, 62, 28, 196, 132, 188, 113, 160, 2, 190, 37, 172, 159, 189, 149, 114, 136, 190, 195, 239, 94, 188, 87, 11, 59, 62, 105, 186, 80, 190, 25, 171, 167, 190, 104, 25, 180, 190, 40, 183, 110, 61, 11, 120, 250, 61, 51, 122, 210, 62, 25, 100, 106, 61, 136, 200, 52, 190, 171, 250, 11, 62, 19, 222, 116, 62, 203, 59, 83, 62, 83, 68, 162, 62, 45, 160, 10, 190, 178, 219, 0, 63, 158, 154, 150, 190, 201, 116, 52, 62, 122, 122, 245, 191, 128, 83, 18, 190, 255, 182, 2, 191, 218, 155, 166, 62, 215, 167, 99, 190, 88, 238, 27, 62, 151, 16, 87, 62, 70, 55, 90, 62, 143, 137, 253, 191, 15, 100, 108, 190, 254, 1, 150, 61, 126, 103, 32, 62, 25, 133, 3, 191, 224, 3, 143, 62, 114, 27, 71, 60, 219, 183, 171, 190, 110, 141, 155, 189, 49, 167, 214, 62, 36, 93, 183, 62, 242, 36, 220, 188, 47, 213, 147, 62, 20, 223, 135, 190, 103, 134, 222, 190, 133, 255, 197, 62, 243, 240, 4, 190, 145, 98, 134, 191, 255, 237, 146, 61, 99, 64, 185, 61, 254, 195, 107, 62, 176, 99, 137, 190, 185, 73, 47, 61, 247, 84, 211, 190, 87, 78, 96, 190, 188, 25, 157, 62, 116, 7, 19, 62, 48, 142, 36, 190, 155, 196, 67, 62, 199, 236, 40, 190, 97, 249, 54, 191, 9, 216, 140, 189, 170, 227, 245, 190, 106, 215, 231, 186, 227, 243, 144, 62, 61, 104, 253, 61, 137, 145, 41, 190, 128, 216, 140, 62, 232, 216, 117, 62, 117, 52, 34, 190, 137, 230, 115, 61, 42, 246, 149, 62, 134, 60, 131, 189, 222, 51, 47, 62, 106, 206, 54, 189, 246, 61, 109, 190, 218, 188, 249, 189, 210, 57, 255, 61, 16, 100, 208, 190, 168, 53, 234, 191, 72, 140, 142, 61, 120, 214, 203, 61, 184, 228, 234, 62, 65, 56, 164, 189, 194, 185, 153, 189, 16, 70, 190, 190, 97, 223, 149, 62, 226, 214, 4, 188, 159, 88, 146, 189, 168, 196, 97, 60, 168, 64, 198, 188, 198, 0, 185, 61, 28, 6, 116, 190, 205, 234, 127, 189, 53, 96, 197, 60, 183, 163, 133, 62, 247, 50, 141, 62, 36, 105, 108, 189, 247, 74, 145, 190, 165, 185, 158, 62, 46, 245, 44, 61, 155, 247, 14, 190, 126, 174, 34, 61, 100, 219, 4, 60, 144, 112, 34, 190, 188, 68, 40, 61, 221, 227, 4, 63, 136, 27, 40, 190, 147, 138, 194, 189, 137, 178, 27, 62, 176, 205, 51, 190, 143, 146, 192, 188, 77, 148, 196, 62, 199, 93, 209, 62, 238, 205, 161, 61, 251, 153, 31, 190, 228, 86, 17, 61, 60, 171, 222, 61, 79, 205, 39, 62, 102, 248, 248, 61, 132, 119, 54, 189, 18, 44, 136, 190, 80, 240, 71, 60, 150, 169, 110, 60, 180, 220, 46, 190, 46, 109, 224, 189, 194, 153, 244, 61, 211, 84, 34, 62, 113, 19, 71, 62, 147, 228, 106, 62, 86, 0, 135, 61, 89, 84, 31, 190, 137, 238, 181, 189, 158, 189, 9, 62, 65, 18, 61, 190, 193, 229, 192, 60, 253, 10, 41, 190, 7, 238, 212, 189, 33, 193, 58, 189, 161, 157, 16, 190, 230, 201, 140, 61, 143, 181, 4, 190, 10, 23, 150, 61, 234, 229, 146, 61, 158, 195, 4, 190, 250, 187, 164, 189, 43, 51, 5, 62, 90, 232, 66, 190, 173, 53, 107, 190, 239, 36, 60, 61, 217, 3, 114, 189, 150, 2, 104, 188, 73, 35, 114, 189, 88, 134, 226, 61, 103, 26, 180, 189, 136, 35, 84, 61, 91, 125, 11, 62, 223, 215, 209, 189, 134, 221, 132, 188, 55, 60, 174, 61, 207, 192, 221, 189, 49, 42, 116, 190, 6, 103, 244, 61, 227, 26, 163, 61, 148, 46, 247, 59, 181, 41, 73, 62, 183, 96, 218, 60, 89, 110, 171, 191, 18, 25, 123, 190, 126, 34, 43, 62, 58, 236, 248, 190, 67, 112, 208, 62, 131, 12, 186, 61, 138, 161, 32, 191, 133, 22, 135, 62, 153, 90, 80, 190, 22, 41, 152, 189, 163, 222, 9, 190, 225, 125, 150, 62, 224, 106, 91, 189, 55, 202, 50, 62, 132, 104, 2, 62, 87, 188, 24, 61, 36, 156, 122, 60, 146, 71, 74, 62, 102, 156, 28, 60, 236, 234, 164, 188, 69, 243, 212, 59, 33, 148, 241, 62, 22, 241, 27, 62, 103, 238, 194, 60, 234, 92, 189, 189, 219, 79, 78, 190, 169, 48, 117, 191, 179, 21, 57, 188, 157, 217, 19, 62, 0, 61, 143, 189, 194, 211, 87, 190, 235, 215, 199, 190, 251, 128, 161, 62, 143, 118, 223, 62, 112, 247, 69, 191, 75, 135, 80, 189, 96, 203, 60, 61, 55, 225, 58, 61, 69, 213, 41, 62, 41, 155, 190, 61, 158, 171, 74, 190, 239, 211, 151, 190, 179, 187, 52, 190, 219, 253, 95, 190, 205, 16, 209, 62, 223, 100, 130, 62, 189, 29, 138, 189, 46, 124, 133, 190, 52, 15, 54, 62, 19, 85, 249, 190, 169, 126, 204, 62, 239, 212, 161, 188, 180, 44, 165, 191, 82, 42, 71, 191, 146, 232, 5, 60, 204, 14, 33, 191, 230, 104, 90, 62, 241, 226, 170, 62, 151, 86, 35, 190, 251, 96, 2, 190, 89, 149, 150, 61, 38, 161, 55, 62, 66, 77, 201, 190, 43, 253, 0, 62, 129, 105, 249, 62, 227, 80, 222, 62, 122, 68, 208, 189, 239, 30, 128, 62, 233, 163, 142, 190, 65, 24, 61, 190, 146, 232, 192, 62, 197, 45, 195, 190, 121, 143, 12, 192, 26, 75, 223, 61, 77, 111, 4, 62, 52, 74, 37, 188, 168, 41, 177, 190, 133, 175, 168, 61, 76, 106, 230, 190, 155, 56, 43, 62, 124, 46, 170, 62, 138, 126, 65, 61, 254, 34, 80, 190, 162, 62, 109, 62, 198, 126, 105, 62, 104, 187, 218, 190, 105, 138, 55, 190, 195, 205, 138, 62, 181, 202, 87, 62, 78, 220, 203, 62, 108, 73, 46, 189, 15, 119, 48, 62, 202, 71, 71, 189, 182, 190, 23, 189, 71, 63, 180, 62, 57, 27, 140, 190, 49, 145, 38, 190, 14, 81, 69, 190, 40, 123, 197, 190, 143, 18, 210, 190, 220, 24, 99, 62, 61, 61, 116, 62, 60, 150, 251, 189, 111, 246, 199, 62, 25, 215, 45, 62, 197, 192, 212, 61, 195, 95, 217, 190, 214, 124, 31, 62, 34, 90, 150, 62, 112, 19, 42, 190, 213, 103, 167, 62, 93, 137, 149, 187, 217, 100, 143, 61, 199, 241, 141, 60, 253, 79, 153, 60, 17, 55, 107, 189, 142, 128, 138, 190, 122, 130, 175, 62, 87, 43, 142, 62, 205, 187, 214, 189, 10, 89, 128, 190, 170, 207, 92, 189, 123, 80, 149, 190, 231, 226, 162, 62, 126, 6, 188, 62, 127, 45, 159, 61, 53, 88, 142, 62, 127, 55, 137, 190, 239, 6, 144, 189, 210, 65, 201, 190, 36, 147, 145, 190, 61, 137, 166, 190, 93, 44, 249, 62, 151, 115, 146, 60, 192, 148, 50, 61, 119, 85, 176, 62, 35, 245, 143, 191, 35, 69, 148, 190, 90, 197, 193, 191, 49, 126, 79, 62, 25, 21, 22, 62, 245, 25, 7, 189, 138, 8, 28, 190, 2, 37, 59, 61, 199, 207, 217, 61, 217, 180, 249, 189, 51, 73, 8, 189, 244, 176, 34, 62, 121, 121, 129, 190, 251, 156, 210, 62, 243, 255, 234, 61, 11, 28, 239, 189, 62, 3, 64, 62, 33, 222, 40, 62, 160, 91, 137, 191, 54, 155, 11, 190, 160, 85, 0, 190, 43, 185, 1, 189, 143, 249, 166, 61, 232, 60, 230, 189, 200, 133, 10, 190, 146, 39, 50, 61, 92, 44, 160, 61, 79, 14, 158, 187, 67, 177, 192, 188, 153, 53, 174, 61, 28, 190, 18, 190, 222, 60, 47, 190, 80, 1, 139, 61, 145, 170, 106, 190, 74, 13, 169, 61, 226, 198, 183, 189, 85, 190, 137, 189, 6, 83, 225, 189, 64, 62, 19, 190, 203, 180, 139, 61, 112, 92, 2, 61, 202, 101, 36, 190, 202, 182, 33, 62, 14, 124, 9, 62, 113, 160, 170, 189, 219, 9, 11, 62, 87, 3, 167, 61, 38, 28, 20, 60, 97, 54, 125, 61, 3, 212, 3, 190, 99, 29, 191, 189, 251, 219, 41, 62, 67, 61, 226, 61, 101, 50, 19, 189, 54, 213, 20, 60, 203, 77, 186, 61, 30, 90, 50, 191, 107, 166, 30, 60, 91, 10, 2, 62, 117, 18, 76, 189, 115, 39, 86, 62, 183, 202, 241, 61, 7, 240, 155, 190, 212, 119, 133, 62, 186, 132, 211, 62, 34, 113, 104, 188, 35, 78, 146, 190, 94, 98, 250, 62, 207, 203, 13, 190, 206, 135, 151, 190, 193, 163, 13, 191, 131, 195, 101, 62, 57, 131, 79, 61, 106, 229, 134, 62, 181, 209, 129, 61, 135, 132, 212, 60, 245, 196, 40, 62, 150, 100, 164, 61, 212, 21, 2, 189, 237, 173, 122, 61, 76, 236, 206, 190, 19, 194, 33, 190, 142, 179, 176, 190, 90, 153, 196, 189, 190, 54, 251, 189, 41, 215, 212, 61, 214, 121, 72, 60, 171, 12, 12, 190, 117, 135, 18, 62, 197, 62, 56, 190, 181, 65, 44, 189, 172, 239, 19, 62, 191, 197, 5, 62, 129, 70, 52, 190, 107, 66, 18, 59, 19, 112, 75, 61, 187, 129, 70, 60, 27, 144, 167, 62, 32, 107, 255, 61, 115, 70, 56, 188, 120, 98, 90, 189, 24, 195, 159, 189, 53, 113, 48, 62, 120, 177, 65, 190, 246, 48, 45, 61, 236, 145, 87, 61, 136, 188, 68, 190, 15, 190, 0, 62, 156, 249, 40, 61, 44, 221, 146, 189, 178, 25, 106, 62, 75, 195, 72, 190, 39, 120, 12, 190, 214, 186, 81, 189, 136, 204, 70, 62, 252, 21, 237, 189, 1, 41, 137, 61, 32, 208, 41, 190, 40, 221, 210, 61, 104, 241, 151, 61, 116, 246, 42, 190, 251, 27, 98, 61, 85, 171, 41, 61, 236, 31, 5, 62, 70, 92, 172, 189, 208, 217, 244, 189, 116, 127, 191, 189, 233, 245, 126, 189, 210, 5, 82, 188, 226, 214, 250, 187, 41, 151, 192, 189, 96, 60, 7, 189, 129, 207, 55, 190, 167, 150, 16, 190, 186, 17, 191, 189, 107, 216, 140, 61, 78, 62, 7, 61, 160, 255, 2, 190, 199, 36, 187, 61, 249, 233, 47, 189, 194, 14, 13, 190, 138, 119, 50, 61, 159, 43, 112, 189, 189, 97, 61, 190, 4, 164, 52, 190, 205, 173, 162, 59, 103, 117, 135, 189, 100, 70, 28, 59, 41, 2, 18, 62, 150, 210, 147, 190, 215, 13, 108, 189, 106, 99, 244, 190, 38, 217, 187, 61, 145, 3, 171, 62, 165, 44, 136, 191, 143, 4, 123, 62, 179, 96, 202, 189, 114, 21, 188, 189, 52, 76, 48, 62, 229, 20, 244, 59, 232, 94, 3, 190, 134, 215, 126, 189, 124, 71, 226, 188, 15, 154, 16, 62, 102, 222, 43, 62, 80, 154, 231, 61, 192, 219, 8, 62, 27, 113, 69, 191, 72, 170, 182, 190, 97, 26, 49, 61, 17, 156, 6, 190, 68, 130, 65, 189, 167, 184, 155, 191, 193, 200, 218, 60, 44, 108, 26, 188, 217, 15, 104, 189, 45, 212, 254, 187, 63, 9, 181, 190, 195, 197, 50, 62, 165, 17, 93, 61, 106, 27, 230, 189, 185, 107, 97, 189, 79, 105, 137, 189, 199, 13, 39, 62, 20, 122, 126, 61, 194, 219, 19, 62, 19, 155, 186, 60, 95, 208, 81, 189, 34, 236, 172, 188, 237, 145, 35, 190, 78, 205, 33, 190, 39, 102, 5, 190, 200, 253, 135, 61, 63, 169, 24, 190, 10, 227, 237, 187, 214, 25, 29, 189, 141, 190, 204, 189, 186, 83, 33, 190, 38, 141, 232, 189, 165, 37, 29, 61, 199, 193, 131, 189, 152, 78, 210, 189, 138, 214, 29, 62, 103, 101, 253, 61, 106, 81, 194, 189, 164, 24, 29, 190, 30, 111, 250, 60, 89, 32, 177, 61, 172, 69, 12, 62, 219, 80, 38, 189, 57, 186, 165, 189, 180, 44, 10, 190, 14, 26, 24, 189, 146, 152, 0, 190, 45, 69, 15, 190, 232, 9, 122, 62, 79, 179, 21, 62, 241, 119, 128, 61, 44, 55, 30, 62, 24, 12, 54, 62, 0, 189, 122, 191, 137, 232, 92, 191, 161, 180, 105, 62, 35, 39, 129, 191, 233, 150, 215, 191, 233, 252, 116, 62, 218, 242, 181, 61, 109, 32, 194, 189, 100, 153, 144, 189, 47, 86, 190, 61, 50, 86, 74, 191, 0, 134, 115, 62, 140, 243, 130, 62, 17, 134, 155, 62, 38, 169, 176, 188, 47, 218, 16, 188, 215, 75, 242, 61, 41, 21, 156, 190, 88, 98, 43, 191, 20, 70, 219, 61, 189, 200, 81, 62, 112, 63, 123, 62, 117, 84, 18, 190, 83, 243, 249, 188, 42, 102, 18, 62, 36, 209, 186, 189, 249, 254, 200, 61, 192, 166, 250, 190, 50, 197, 18, 62, 248, 0, 180, 62, 100, 27, 160, 191, 197, 191, 26, 62, 154, 99, 48, 62, 179, 97, 32, 190, 213, 26, 149, 62, 66, 115, 80, 61, 111, 7, 227, 189, 23, 161, 144, 190, 103, 238, 16, 61, 240, 110, 25, 61, 218, 122, 132, 189, 175, 135, 115, 61, 101, 224, 213, 187, 40, 231, 52, 191, 151, 168, 200, 190, 31, 151, 106, 190, 142, 9, 176, 61, 88, 214, 33, 62, 128, 170, 154, 191, 250, 248, 97, 186, 49, 23, 68, 188, 181, 232, 72, 189, 157, 196, 49, 61, 133, 23, 210, 190, 1, 17, 195, 61, 124, 24, 177, 61, 136, 6, 151, 189, 148, 230, 200, 61, 40, 36, 251, 188, 195, 108, 148, 189, 193, 15, 155, 188, 103, 255, 21, 190, 11, 115, 195, 61, 156, 166, 11, 190, 106, 209, 250, 61, 157, 44, 161, 61, 83, 48, 21, 60, 44, 52, 254, 59, 123, 130, 130, 189, 147, 156, 41, 190, 184, 8, 10, 190, 23, 253, 94, 189, 126, 126, 236, 61, 103, 89, 162, 189, 72, 182, 134, 188, 225, 81, 51, 190, 88, 144, 11, 190, 218, 199, 84, 188, 145, 138, 248, 61, 26, 112, 242, 189, 157, 148, 26, 190, 55, 142, 151, 61, 186, 87, 202, 189, 26, 162, 79, 61, 187, 26, 71, 188, 97, 44, 186, 61, 7, 176, 35, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 234, 155, 61, 131, 50, 93, 61, 206, 40, 222, 61, 106, 232, 178, 61, 171, 53, 151, 61, 217, 163, 188, 61, 53, 47, 19, 190, 175, 174, 52, 189, 67, 120, 93, 189, 45, 120, 247, 61, 64, 250, 129, 61, 144, 86, 218, 60, 132, 69, 239, 58, 123, 22, 43, 62, 140, 115, 68, 62, 22, 77, 112, 62, 24, 11, 95, 62, 140, 51, 142, 189, 2, 21, 14, 188, 251, 108, 70, 190, 69, 85, 82, 62, 10, 67, 183, 60, 102, 172, 143, 190, 87, 2, 245, 189, 113, 76, 13, 190, 236, 112, 83, 62, 226, 119, 212, 61, 230, 87, 51, 61, 120, 234, 154, 189, 46, 190, 106, 62, 18, 117, 61, 188, 221, 120, 52, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 115, 19, 191, 10, 240, 25, 61, 77, 189, 28, 63, 169, 142, 100, 191, 149, 4, 203, 190, 174, 23, 147, 190, 194, 63, 112, 63, 58, 119, 181, 190, 247, 223, 209, 189, 105, 51, 180, 62, 184, 182, 120, 191, 3, 33, 13, 191, 176, 91, 202, 189, 125, 206, 95, 191, 175, 98, 89, 63, 98, 36, 175, 62, 184, 169, 242, 61, 175, 223, 76, 61, 206, 92, 83, 63, 197, 165, 58, 63, 244, 232, 66, 63, 183, 30, 75, 190, 175, 192, 33, 191, 213, 129, 12, 61, 69, 56, 126, 190, 197, 78, 132, 60, 180, 66, 237, 61, 84, 174, 185, 62, 138, 74, 109, 189, 176, 206, 244, 62, 162, 204, 149, 62, 89, 146, 136, 61, 46, 138, 155, 61, 67, 64, 0, 191, 149, 163, 65, 62, 16, 206, 163, 188, 182, 164, 170, 190, 243, 28, 243, 189, 111, 241, 144, 61, 136, 221, 85, 190, 3, 77, 243, 60, 167, 202, 46, 190, 20, 90, 69, 61, 248, 183, 134, 189, 65, 90, 6, 61, 212, 31, 142, 62, 226, 218, 8, 62, 100, 254, 67, 188, 239, 156, 50, 190, 112, 38, 223, 61, 69, 169, 44, 189, 144, 40, 247, 62, 225, 240, 99, 62, 65, 108, 183, 190, 149, 116, 123, 189, 191, 60, 96, 61, 147, 234, 38, 62, 161, 8, 102, 190, 107, 211, 117, 61, 187, 95, 178, 189, 93, 235, 194, 189, 111, 157, 188, 189, 139, 57, 13, 189, 174, 139, 5, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 49, 184, 188, 250, 108, 237, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {187, 102, 42, 191, 199, 5, 160, 190, 222, 194, 248, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {72, 180, 22, 192, 98, 36, 230, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0025/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}