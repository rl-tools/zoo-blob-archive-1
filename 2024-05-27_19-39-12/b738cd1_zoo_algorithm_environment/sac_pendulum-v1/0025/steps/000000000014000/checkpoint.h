// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 99, 26, 62, 8, 46, 57, 63, 161, 128, 10, 63, 243, 39, 9, 63, 68, 36, 254, 190, 149, 193, 206, 62, 141, 91, 86, 190, 243, 221, 62, 63, 170, 36, 115, 189, 55, 130, 157, 62, 149, 69, 4, 63, 119, 241, 250, 62, 147, 5, 88, 191, 45, 168, 219, 62, 115, 55, 60, 61, 122, 105, 82, 63, 249, 22, 142, 191, 205, 218, 129, 190, 105, 133, 77, 63, 29, 215, 91, 191, 30, 97, 239, 190, 90, 225, 34, 191, 123, 110, 136, 62, 245, 87, 188, 61, 242, 101, 35, 191, 209, 104, 54, 191, 76, 146, 68, 61, 196, 81, 15, 62, 65, 24, 28, 63, 50, 79, 109, 190, 238, 55, 75, 189, 25, 92, 250, 62, 210, 153, 74, 190, 16, 14, 74, 63, 215, 94, 27, 191, 57, 234, 24, 191, 54, 42, 177, 189, 47, 221, 39, 63, 28, 112, 132, 190, 78, 251, 175, 190, 184, 166, 236, 191, 11, 203, 187, 190, 189, 135, 20, 190, 163, 163, 34, 63, 182, 193, 85, 61, 216, 119, 50, 191, 176, 107, 0, 191, 154, 131, 7, 189, 64, 151, 48, 61, 179, 125, 159, 63, 149, 25, 134, 188, 74, 181, 163, 62, 183, 87, 61, 191, 62, 149, 49, 63, 255, 194, 147, 62, 238, 171, 23, 190, 235, 119, 23, 191, 25, 68, 49, 190, 52, 247, 234, 189, 129, 217, 70, 191, 210, 97, 134, 190, 59, 225, 238, 63, 104, 142, 7, 63, 106, 250, 236, 189, 1, 223, 227, 189, 151, 113, 51, 63, 240, 49, 21, 61, 56, 180, 157, 63, 248, 73, 6, 63, 84, 255, 134, 190, 126, 45, 137, 190, 206, 110, 26, 63, 37, 197, 139, 62, 166, 169, 45, 190, 132, 236, 68, 63, 133, 136, 21, 191, 108, 145, 149, 62, 56, 173, 242, 61, 200, 112, 122, 63, 192, 156, 209, 63, 121, 162, 171, 62, 44, 72, 20, 63, 234, 150, 30, 63, 55, 170, 58, 190, 191, 152, 209, 190, 124, 144, 222, 63, 64, 18, 194, 62, 158, 45, 225, 189, 58, 248, 27, 61, 24, 85, 163, 190, 16, 78, 232, 190, 92, 6, 207, 190, 72, 250, 15, 63, 15, 4, 157, 190, 244, 118, 56, 191, 201, 157, 182, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 208, 51, 191, 9, 206, 102, 62, 95, 208, 39, 62, 105, 131, 81, 62, 158, 240, 143, 62, 164, 71, 190, 62, 124, 124, 106, 191, 219, 202, 20, 63, 223, 130, 247, 62, 115, 208, 249, 189, 47, 113, 98, 190, 168, 34, 130, 62, 167, 187, 176, 190, 91, 152, 178, 190, 204, 128, 118, 62, 137, 159, 23, 63, 10, 116, 26, 63, 244, 161, 172, 62, 167, 201, 215, 190, 72, 91, 38, 190, 218, 151, 173, 61, 123, 248, 120, 190, 147, 157, 190, 62, 243, 135, 157, 190, 157, 199, 159, 62, 3, 32, 47, 63, 57, 85, 10, 188, 229, 24, 8, 63, 15, 108, 13, 190, 147, 133, 149, 190, 218, 223, 228, 190, 120, 54, 234, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 215, 189, 190, 92, 128, 5, 191, 181, 188, 100, 62, 155, 88, 172, 62, 113, 0, 7, 189, 134, 222, 237, 190, 95, 53, 65, 191, 32, 17, 20, 62, 217, 54, 31, 190, 204, 63, 90, 62, 91, 241, 84, 62, 244, 236, 12, 190, 179, 254, 154, 62, 19, 84, 104, 62, 25, 253, 71, 62, 95, 3, 142, 188, 59, 134, 38, 62, 30, 124, 70, 62, 210, 16, 101, 190, 240, 237, 89, 62, 79, 254, 46, 191, 79, 161, 12, 191, 116, 121, 186, 60, 87, 220, 6, 61, 237, 36, 173, 190, 166, 67, 204, 189, 116, 32, 163, 62, 123, 161, 16, 62, 15, 81, 100, 191, 76, 231, 212, 190, 136, 136, 115, 190, 115, 43, 39, 190, 214, 167, 55, 187, 185, 4, 32, 189, 191, 145, 56, 62, 65, 230, 56, 62, 54, 129, 7, 191, 210, 68, 43, 62, 8, 122, 110, 189, 23, 180, 48, 191, 97, 45, 148, 189, 183, 122, 154, 188, 38, 36, 134, 189, 173, 26, 145, 59, 101, 86, 47, 62, 162, 152, 113, 60, 178, 103, 120, 62, 63, 226, 214, 61, 232, 23, 208, 61, 49, 55, 52, 62, 221, 209, 252, 189, 163, 26, 154, 62, 39, 12, 86, 191, 229, 230, 85, 189, 14, 217, 166, 61, 162, 118, 83, 62, 240, 68, 173, 61, 68, 223, 249, 190, 224, 47, 240, 61, 60, 189, 203, 61, 51, 244, 4, 191, 169, 252, 236, 189, 207, 221, 131, 60, 21, 140, 124, 189, 175, 65, 4, 191, 29, 61, 147, 62, 190, 178, 158, 61, 57, 39, 218, 190, 18, 136, 193, 187, 240, 164, 183, 62, 142, 154, 92, 62, 90, 9, 116, 188, 12, 204, 243, 62, 10, 55, 202, 190, 2, 145, 131, 190, 174, 106, 161, 62, 143, 221, 165, 190, 48, 82, 124, 190, 30, 131, 66, 62, 46, 184, 168, 62, 219, 160, 172, 61, 136, 2, 115, 190, 124, 253, 203, 62, 162, 39, 204, 189, 204, 161, 13, 62, 154, 75, 147, 62, 56, 157, 227, 59, 93, 22, 155, 190, 21, 20, 82, 61, 49, 6, 124, 190, 66, 60, 56, 191, 197, 169, 190, 190, 33, 56, 33, 62, 77, 79, 163, 62, 230, 187, 159, 62, 42, 204, 98, 61, 189, 189, 36, 189, 90, 33, 171, 190, 81, 204, 87, 190, 119, 20, 136, 189, 200, 104, 67, 57, 219, 212, 87, 62, 18, 54, 20, 62, 27, 31, 188, 62, 15, 146, 37, 61, 42, 248, 3, 190, 227, 83, 77, 190, 186, 78, 114, 188, 219, 113, 164, 60, 110, 241, 93, 62, 100, 111, 157, 190, 234, 10, 134, 62, 235, 6, 7, 191, 230, 68, 110, 63, 160, 136, 55, 62, 209, 81, 74, 62, 195, 22, 4, 192, 63, 228, 175, 190, 8, 33, 121, 191, 108, 126, 28, 63, 137, 96, 57, 191, 196, 197, 166, 62, 159, 47, 162, 191, 206, 67, 82, 60, 157, 25, 219, 191, 57, 221, 69, 189, 49, 28, 190, 189, 135, 153, 141, 62, 12, 225, 170, 60, 14, 214, 50, 62, 218, 165, 129, 190, 10, 51, 145, 62, 173, 142, 229, 190, 69, 83, 157, 62, 77, 130, 185, 188, 11, 14, 146, 190, 141, 239, 197, 190, 211, 37, 61, 62, 134, 105, 34, 189, 156, 226, 133, 61, 43, 121, 180, 60, 181, 65, 192, 62, 101, 59, 88, 190, 91, 237, 89, 191, 77, 52, 37, 62, 196, 164, 175, 62, 172, 66, 129, 61, 95, 92, 84, 190, 232, 36, 50, 190, 187, 15, 165, 62, 81, 37, 174, 60, 237, 253, 121, 188, 65, 38, 197, 61, 227, 255, 132, 189, 49, 48, 51, 62, 16, 15, 119, 62, 47, 196, 56, 190, 140, 221, 97, 61, 58, 214, 249, 189, 123, 79, 152, 60, 66, 182, 35, 190, 161, 29, 57, 62, 50, 154, 240, 189, 57, 246, 241, 60, 63, 224, 92, 60, 138, 95, 247, 188, 54, 230, 154, 191, 26, 117, 62, 62, 221, 104, 173, 58, 246, 53, 213, 61, 96, 240, 77, 188, 23, 238, 3, 190, 31, 157, 128, 62, 184, 106, 24, 63, 110, 92, 96, 189, 84, 208, 144, 190, 128, 126, 150, 62, 77, 25, 4, 62, 141, 116, 115, 190, 223, 189, 241, 190, 64, 82, 46, 62, 219, 205, 132, 61, 231, 179, 84, 62, 36, 107, 179, 189, 22, 37, 50, 62, 22, 108, 193, 61, 108, 236, 98, 60, 42, 232, 81, 189, 183, 62, 10, 61, 59, 128, 146, 190, 192, 145, 233, 61, 150, 4, 78, 61, 58, 46, 144, 190, 248, 80, 58, 190, 6, 244, 135, 61, 180, 99, 195, 61, 155, 44, 23, 190, 194, 186, 128, 191, 207, 175, 148, 190, 10, 53, 15, 190, 247, 180, 117, 191, 48, 124, 84, 62, 54, 33, 120, 58, 140, 210, 118, 190, 183, 226, 3, 62, 30, 26, 35, 190, 143, 51, 110, 61, 208, 42, 253, 190, 151, 192, 205, 62, 251, 57, 216, 189, 38, 32, 2, 190, 65, 201, 131, 61, 129, 191, 187, 189, 194, 174, 237, 190, 51, 52, 85, 187, 169, 142, 222, 190, 221, 55, 143, 190, 130, 214, 6, 190, 26, 41, 181, 62, 98, 65, 184, 62, 195, 103, 37, 61, 22, 111, 42, 190, 98, 249, 141, 190, 145, 88, 70, 191, 200, 75, 12, 191, 41, 232, 160, 188, 158, 138, 154, 190, 228, 134, 97, 62, 176, 245, 199, 190, 192, 40, 32, 62, 113, 96, 62, 62, 118, 84, 227, 188, 85, 236, 14, 191, 243, 185, 163, 62, 97, 78, 223, 188, 37, 178, 220, 61, 98, 228, 58, 190, 32, 240, 79, 62, 146, 244, 168, 190, 100, 105, 39, 191, 33, 57, 250, 61, 238, 100, 25, 61, 229, 4, 242, 188, 252, 162, 142, 187, 149, 176, 177, 190, 11, 175, 183, 61, 46, 105, 176, 189, 249, 9, 61, 190, 243, 34, 99, 61, 218, 151, 10, 190, 244, 42, 203, 62, 60, 179, 238, 186, 127, 60, 79, 191, 70, 66, 186, 61, 101, 249, 43, 190, 94, 204, 114, 190, 99, 166, 242, 189, 21, 253, 213, 189, 125, 158, 226, 187, 254, 101, 172, 61, 6, 172, 0, 190, 182, 220, 4, 190, 49, 110, 33, 61, 1, 40, 42, 190, 39, 250, 145, 189, 16, 1, 4, 190, 27, 18, 167, 188, 155, 35, 51, 190, 149, 219, 153, 189, 62, 234, 206, 189, 161, 174, 117, 61, 14, 52, 245, 61, 241, 180, 29, 190, 231, 15, 186, 189, 60, 229, 143, 61, 43, 57, 130, 60, 159, 218, 236, 189, 19, 50, 172, 61, 98, 191, 181, 188, 39, 168, 243, 61, 140, 7, 241, 189, 47, 39, 230, 61, 81, 41, 161, 61, 149, 120, 133, 189, 31, 69, 223, 188, 157, 210, 11, 62, 150, 60, 228, 59, 216, 116, 29, 61, 129, 98, 55, 190, 21, 240, 34, 62, 180, 101, 90, 190, 15, 76, 12, 190, 49, 238, 21, 191, 239, 29, 63, 62, 141, 23, 172, 61, 172, 187, 26, 191, 254, 82, 93, 61, 170, 229, 40, 190, 170, 228, 73, 190, 159, 187, 72, 62, 104, 68, 2, 62, 140, 13, 232, 189, 31, 173, 190, 61, 238, 105, 144, 188, 210, 143, 154, 61, 209, 121, 131, 62, 206, 56, 80, 62, 121, 150, 69, 189, 128, 59, 209, 190, 137, 29, 228, 61, 182, 12, 123, 190, 35, 41, 128, 62, 32, 99, 11, 62, 212, 5, 28, 191, 208, 187, 195, 190, 76, 110, 7, 62, 202, 75, 255, 190, 22, 78, 4, 62, 210, 164, 245, 188, 171, 207, 28, 62, 236, 245, 0, 61, 188, 27, 64, 191, 113, 226, 199, 61, 208, 161, 140, 62, 91, 178, 129, 62, 231, 85, 180, 190, 107, 6, 203, 61, 160, 175, 166, 62, 93, 231, 134, 188, 43, 96, 152, 189, 114, 242, 50, 62, 210, 98, 41, 61, 252, 24, 1, 62, 187, 111, 221, 61, 38, 122, 129, 62, 74, 182, 42, 62, 191, 172, 73, 191, 50, 104, 28, 63, 121, 135, 222, 61, 247, 54, 91, 62, 250, 185, 2, 192, 81, 16, 244, 190, 59, 154, 113, 191, 157, 13, 90, 63, 236, 135, 107, 191, 5, 52, 140, 62, 180, 49, 180, 190, 174, 64, 73, 190, 237, 82, 246, 191, 239, 57, 42, 190, 94, 53, 202, 61, 114, 61, 125, 62, 140, 193, 146, 190, 229, 110, 149, 190, 211, 69, 110, 62, 218, 45, 132, 61, 8, 238, 235, 61, 120, 184, 41, 190, 202, 30, 6, 191, 255, 213, 51, 62, 203, 108, 130, 190, 150, 237, 183, 62, 183, 178, 113, 62, 71, 199, 126, 190, 170, 63, 243, 62, 73, 69, 84, 189, 42, 118, 63, 61, 235, 54, 13, 190, 89, 80, 148, 61, 15, 12, 34, 190, 174, 94, 158, 190, 10, 153, 88, 62, 200, 217, 244, 190, 163, 172, 183, 190, 21, 188, 117, 189, 191, 55, 8, 189, 141, 177, 142, 190, 182, 140, 10, 62, 26, 63, 171, 62, 0, 212, 200, 61, 114, 124, 55, 191, 201, 60, 253, 190, 45, 147, 201, 190, 93, 199, 136, 189, 150, 13, 73, 189, 139, 130, 5, 61, 173, 189, 130, 190, 41, 11, 84, 61, 112, 70, 178, 189, 171, 221, 142, 190, 226, 61, 148, 190, 238, 0, 218, 61, 53, 236, 173, 189, 13, 163, 72, 62, 86, 135, 62, 62, 146, 55, 49, 189, 15, 123, 186, 61, 240, 110, 72, 63, 112, 33, 28, 190, 204, 70, 9, 189, 142, 115, 4, 63, 104, 117, 77, 62, 132, 31, 122, 61, 83, 177, 189, 190, 72, 253, 111, 61, 60, 110, 108, 61, 52, 18, 55, 62, 116, 162, 144, 60, 221, 116, 49, 62, 99, 44, 162, 61, 233, 183, 163, 61, 193, 44, 19, 62, 40, 124, 78, 189, 253, 132, 45, 62, 113, 36, 131, 188, 71, 43, 245, 189, 131, 34, 166, 189, 144, 188, 141, 190, 83, 30, 99, 188, 126, 80, 43, 62, 8, 222, 239, 189, 137, 194, 157, 190, 214, 66, 173, 190, 248, 168, 190, 61, 213, 42, 246, 61, 211, 122, 210, 62, 62, 40, 121, 61, 207, 43, 33, 190, 206, 119, 14, 62, 214, 213, 126, 62, 114, 114, 77, 62, 108, 145, 172, 62, 254, 0, 18, 190, 0, 55, 249, 62, 90, 190, 149, 190, 22, 61, 59, 62, 34, 28, 222, 191, 154, 126, 76, 190, 82, 169, 247, 190, 214, 21, 133, 62, 162, 131, 126, 190, 165, 172, 55, 62, 254, 149, 67, 62, 100, 248, 101, 62, 176, 138, 237, 191, 154, 173, 103, 190, 4, 123, 142, 187, 228, 241, 67, 62, 80, 167, 10, 191, 210, 16, 148, 62, 95, 4, 90, 61, 137, 253, 167, 190, 127, 33, 224, 189, 186, 247, 208, 62, 233, 201, 133, 62, 236, 120, 66, 189, 5, 43, 128, 62, 145, 161, 79, 190, 202, 199, 204, 190, 194, 18, 184, 62, 236, 44, 170, 189, 238, 82, 139, 191, 119, 230, 187, 61, 169, 11, 41, 61, 233, 201, 107, 62, 33, 190, 133, 190, 125, 209, 107, 61, 77, 66, 205, 190, 96, 185, 129, 190, 196, 226, 150, 62, 56, 83, 23, 62, 26, 232, 57, 190, 155, 121, 84, 62, 226, 169, 49, 190, 47, 95, 54, 191, 188, 24, 165, 189, 38, 251, 198, 190, 65, 210, 58, 61, 95, 179, 137, 62, 194, 244, 208, 61, 224, 235, 35, 190, 191, 120, 150, 62, 215, 212, 133, 62, 195, 135, 26, 190, 215, 17, 240, 186, 61, 95, 148, 62, 85, 143, 184, 188, 207, 236, 24, 62, 37, 157, 74, 189, 103, 162, 60, 190, 45, 227, 182, 189, 237, 55, 236, 61, 145, 65, 189, 190, 231, 157, 211, 191, 152, 86, 103, 61, 31, 238, 172, 61, 63, 197, 231, 62, 2, 164, 128, 189, 159, 189, 13, 189, 154, 165, 174, 190, 43, 60, 146, 62, 159, 64, 175, 187, 30, 230, 132, 189, 104, 87, 154, 59, 169, 233, 119, 187, 242, 145, 152, 61, 113, 83, 120, 190, 182, 239, 143, 189, 137, 99, 13, 61, 76, 216, 154, 62, 55, 223, 140, 62, 70, 242, 42, 189, 64, 105, 140, 190, 208, 111, 168, 62, 89, 161, 83, 61, 230, 99, 2, 190, 127, 178, 152, 59, 61, 70, 160, 187, 239, 88, 35, 190, 91, 36, 2, 61, 72, 61, 1, 63, 80, 12, 26, 190, 106, 21, 170, 189, 149, 146, 6, 62, 249, 167, 37, 190, 0, 210, 52, 189, 126, 134, 188, 62, 136, 2, 198, 62, 86, 12, 141, 61, 52, 92, 7, 190, 188, 59, 59, 61, 37, 202, 233, 61, 110, 165, 44, 62, 205, 127, 12, 62, 15, 31, 36, 189, 245, 125, 132, 190, 106, 231, 37, 61, 222, 147, 180, 59, 175, 143, 59, 190, 218, 171, 0, 190, 146, 149, 11, 62, 120, 247, 45, 62, 155, 120, 82, 62, 185, 215, 99, 62, 86, 0, 135, 61, 89, 84, 31, 190, 137, 238, 181, 189, 158, 189, 9, 62, 65, 18, 61, 190, 193, 229, 192, 60, 253, 10, 41, 190, 7, 238, 212, 189, 33, 193, 58, 189, 161, 157, 16, 190, 230, 201, 140, 61, 143, 181, 4, 190, 10, 23, 150, 61, 234, 229, 146, 61, 158, 195, 4, 190, 250, 187, 164, 189, 43, 51, 5, 62, 90, 232, 66, 190, 173, 53, 107, 190, 239, 36, 60, 61, 217, 3, 114, 189, 150, 2, 104, 188, 73, 35, 114, 189, 88, 134, 226, 61, 103, 26, 180, 189, 136, 35, 84, 61, 91, 125, 11, 62, 223, 215, 209, 189, 134, 221, 132, 188, 55, 60, 174, 61, 207, 192, 221, 189, 49, 42, 116, 190, 143, 241, 255, 61, 222, 242, 172, 61, 49, 57, 35, 57, 143, 72, 68, 62, 10, 238, 100, 188, 216, 26, 181, 191, 45, 70, 75, 190, 156, 252, 27, 62, 85, 111, 237, 190, 226, 253, 203, 62, 244, 166, 187, 61, 241, 31, 36, 191, 215, 244, 135, 62, 189, 183, 5, 190, 34, 209, 197, 189, 16, 95, 243, 189, 131, 113, 141, 62, 101, 151, 52, 189, 177, 193, 64, 62, 168, 156, 7, 62, 22, 152, 11, 61, 48, 181, 195, 60, 121, 85, 69, 62, 223, 54, 203, 59, 51, 44, 132, 188, 185, 139, 42, 188, 244, 84, 228, 62, 251, 119, 10, 62, 117, 61, 138, 60, 136, 114, 170, 189, 82, 153, 83, 190, 220, 66, 106, 191, 57, 138, 53, 189, 228, 194, 17, 62, 235, 69, 108, 189, 98, 254, 87, 190, 87, 101, 192, 190, 152, 76, 160, 62, 95, 192, 202, 62, 155, 70, 63, 191, 105, 234, 128, 189, 105, 141, 104, 61, 6, 203, 81, 61, 59, 101, 38, 62, 6, 212, 203, 61, 89, 170, 116, 190, 245, 12, 139, 190, 82, 117, 73, 190, 36, 187, 56, 190, 149, 114, 207, 62, 242, 119, 129, 62, 80, 70, 148, 189, 110, 121, 134, 190, 16, 201, 48, 62, 164, 35, 253, 190, 147, 119, 202, 62, 183, 210, 133, 188, 232, 213, 161, 191, 4, 102, 46, 191, 108, 32, 24, 61, 121, 82, 222, 190, 163, 75, 88, 62, 161, 233, 173, 62, 143, 178, 71, 190, 236, 140, 15, 190, 144, 158, 178, 61, 199, 123, 85, 62, 14, 43, 199, 190, 200, 16, 163, 61, 140, 79, 247, 62, 241, 144, 211, 62, 69, 97, 3, 190, 1, 64, 105, 62, 245, 176, 92, 190, 235, 3, 29, 190, 13, 189, 187, 62, 102, 7, 174, 190, 185, 202, 2, 192, 40, 168, 218, 61, 198, 24, 209, 61, 227, 82, 229, 187, 13, 205, 173, 190, 193, 185, 206, 61, 170, 146, 223, 190, 203, 178, 20, 62, 177, 14, 164, 62, 187, 252, 96, 61, 64, 57, 99, 190, 13, 118, 120, 62, 253, 85, 89, 62, 114, 52, 216, 190, 217, 148, 56, 190, 120, 254, 136, 62, 103, 133, 117, 62, 221, 1, 200, 62, 66, 171, 56, 189, 115, 172, 24, 62, 142, 165, 39, 189, 167, 238, 20, 189, 147, 215, 180, 62, 98, 178, 102, 190, 49, 127, 16, 190, 36, 117, 80, 190, 93, 193, 178, 190, 155, 107, 185, 190, 10, 165, 74, 62, 225, 51, 115, 62, 194, 112, 240, 189, 224, 18, 199, 62, 108, 106, 43, 62, 236, 189, 226, 61, 182, 146, 189, 190, 31, 208, 30, 62, 109, 183, 156, 62, 94, 40, 58, 190, 155, 190, 163, 62, 23, 57, 237, 187, 218, 162, 160, 61, 45, 238, 205, 59, 238, 60, 37, 61, 64, 73, 95, 189, 21, 200, 117, 190, 90, 156, 169, 62, 88, 165, 142, 62, 58, 218, 237, 189, 164, 203, 132, 190, 57, 142, 62, 189, 168, 221, 123, 190, 14, 138, 157, 62, 196, 78, 184, 62, 120, 186, 147, 61, 28, 8, 143, 62, 138, 61, 69, 190, 223, 191, 114, 189, 229, 112, 212, 190, 134, 81, 117, 190, 118, 224, 148, 190, 69, 171, 233, 62, 235, 48, 65, 59, 162, 95, 75, 61, 208, 49, 168, 62, 76, 11, 132, 191, 111, 93, 138, 190, 40, 119, 186, 191, 98, 233, 87, 62, 239, 68, 17, 62, 5, 46, 98, 189, 220, 84, 44, 190, 225, 193, 112, 61, 136, 75, 231, 61, 231, 170, 244, 189, 147, 119, 99, 188, 142, 70, 25, 62, 40, 164, 93, 190, 131, 57, 213, 62, 162, 138, 245, 61, 76, 187, 237, 189, 95, 95, 44, 62, 69, 20, 50, 62, 19, 177, 135, 191, 54, 155, 11, 190, 160, 85, 0, 190, 43, 185, 1, 189, 143, 249, 166, 61, 232, 60, 230, 189, 200, 133, 10, 190, 146, 39, 50, 61, 92, 44, 160, 61, 79, 14, 158, 187, 67, 177, 192, 188, 153, 53, 174, 61, 28, 190, 18, 190, 222, 60, 47, 190, 80, 1, 139, 61, 145, 170, 106, 190, 74, 13, 169, 61, 226, 198, 183, 189, 85, 190, 137, 189, 6, 83, 225, 189, 64, 62, 19, 190, 203, 180, 139, 61, 112, 92, 2, 61, 202, 101, 36, 190, 202, 182, 33, 62, 14, 124, 9, 62, 113, 160, 170, 189, 219, 9, 11, 62, 87, 3, 167, 61, 38, 28, 20, 60, 97, 54, 125, 61, 3, 212, 3, 190, 99, 29, 191, 189, 233, 63, 26, 62, 236, 109, 251, 61, 230, 168, 139, 189, 255, 45, 153, 60, 176, 240, 175, 61, 97, 126, 247, 190, 107, 166, 30, 60, 152, 243, 246, 61, 87, 126, 53, 189, 206, 50, 107, 62, 59, 195, 63, 61, 69, 139, 46, 190, 165, 229, 54, 62, 208, 23, 244, 62, 208, 79, 1, 188, 79, 91, 146, 190, 2, 112, 250, 62, 128, 238, 3, 190, 14, 179, 149, 190, 206, 226, 22, 191, 0, 144, 86, 62, 92, 183, 77, 61, 20, 76, 135, 62, 71, 176, 141, 61, 138, 55, 10, 61, 6, 176, 40, 62, 95, 136, 201, 61, 158, 202, 131, 188, 130, 145, 25, 61, 205, 143, 214, 190, 232, 12, 32, 190, 207, 58, 160, 190, 18, 151, 140, 189, 143, 198, 199, 189, 4, 51, 4, 62, 220, 110, 10, 61, 37, 144, 186, 189, 232, 220, 2, 62, 66, 61, 49, 190, 121, 188, 152, 187, 140, 182, 6, 62, 65, 73, 19, 62, 250, 47, 8, 190, 106, 24, 61, 188, 12, 159, 196, 61, 225, 189, 108, 188, 144, 203, 160, 62, 97, 248, 240, 61, 234, 98, 202, 188, 193, 127, 141, 188, 13, 50, 116, 189, 168, 241, 69, 62, 89, 87, 28, 190, 252, 101, 147, 61, 62, 212, 135, 61, 47, 133, 40, 190, 223, 196, 39, 62, 13, 215, 132, 61, 243, 132, 201, 189, 52, 72, 87, 62, 193, 218, 41, 190, 33, 0, 212, 189, 253, 6, 183, 188, 188, 250, 69, 62, 252, 21, 237, 189, 1, 41, 137, 61, 32, 208, 41, 190, 40, 221, 210, 61, 104, 241, 151, 61, 116, 246, 42, 190, 251, 27, 98, 61, 85, 171, 41, 61, 236, 31, 5, 62, 70, 92, 172, 189, 208, 217, 244, 189, 116, 127, 191, 189, 233, 245, 126, 189, 210, 5, 82, 188, 226, 214, 250, 187, 41, 151, 192, 189, 96, 60, 7, 189, 129, 207, 55, 190, 167, 150, 16, 190, 186, 17, 191, 189, 107, 216, 140, 61, 78, 62, 7, 61, 160, 255, 2, 190, 199, 36, 187, 61, 249, 233, 47, 189, 194, 14, 13, 190, 138, 119, 50, 61, 159, 43, 112, 189, 189, 97, 61, 190, 4, 164, 52, 190, 205, 173, 162, 59, 103, 117, 135, 189, 73, 44, 35, 61, 126, 225, 34, 62, 130, 71, 133, 190, 91, 164, 8, 189, 159, 126, 243, 190, 209, 13, 175, 61, 212, 174, 168, 62, 30, 136, 134, 191, 194, 146, 57, 62, 73, 194, 115, 189, 65, 91, 139, 189, 99, 2, 46, 62, 137, 242, 7, 61, 224, 219, 41, 190, 128, 121, 240, 188, 68, 204, 128, 189, 122, 13, 35, 62, 169, 42, 68, 62, 177, 92, 12, 62, 83, 11, 31, 62, 198, 61, 134, 191, 124, 172, 170, 190, 225, 201, 141, 61, 156, 155, 19, 190, 169, 82, 219, 187, 231, 203, 152, 191, 83, 207, 14, 61, 172, 169, 200, 187, 30, 194, 136, 60, 175, 196, 129, 60, 193, 133, 159, 190, 53, 232, 39, 62, 165, 17, 93, 61, 106, 27, 230, 189, 185, 107, 97, 189, 79, 105, 137, 189, 199, 13, 39, 62, 20, 122, 126, 61, 194, 219, 19, 62, 19, 155, 186, 60, 95, 208, 81, 189, 34, 236, 172, 188, 237, 145, 35, 190, 78, 205, 33, 190, 39, 102, 5, 190, 200, 253, 135, 61, 63, 169, 24, 190, 10, 227, 237, 187, 214, 25, 29, 189, 141, 190, 204, 189, 186, 83, 33, 190, 38, 141, 232, 189, 165, 37, 29, 61, 199, 193, 131, 189, 152, 78, 210, 189, 138, 214, 29, 62, 103, 101, 253, 61, 106, 81, 194, 189, 164, 24, 29, 190, 30, 111, 250, 60, 89, 32, 177, 61, 172, 69, 12, 62, 219, 80, 38, 189, 57, 186, 165, 189, 255, 125, 16, 190, 128, 62, 58, 189, 26, 188, 248, 189, 246, 49, 29, 190, 183, 248, 84, 62, 195, 164, 246, 61, 241, 119, 128, 61, 58, 83, 4, 62, 212, 20, 37, 62, 165, 71, 106, 191, 190, 174, 62, 191, 198, 138, 2, 62, 242, 89, 98, 191, 36, 241, 202, 191, 188, 169, 90, 62, 64, 118, 139, 61, 144, 101, 199, 189, 22, 100, 171, 189, 47, 86, 190, 61, 177, 189, 66, 191, 192, 134, 103, 62, 137, 236, 124, 62, 191, 50, 150, 62, 138, 58, 12, 189, 5, 139, 165, 188, 55, 37, 192, 61, 252, 26, 156, 190, 21, 146, 27, 191, 206, 43, 221, 61, 129, 147, 83, 62, 10, 172, 115, 62, 44, 215, 51, 190, 186, 41, 51, 60, 155, 160, 38, 62, 191, 12, 130, 189, 95, 184, 0, 62, 45, 29, 251, 190, 41, 150, 15, 62, 48, 100, 177, 62, 178, 125, 158, 191, 126, 179, 201, 61, 231, 15, 88, 62, 67, 177, 9, 190, 126, 185, 148, 62, 144, 127, 153, 61, 117, 34, 19, 190, 111, 165, 125, 190, 141, 64, 180, 59, 226, 181, 105, 61, 46, 6, 24, 189, 170, 196, 168, 61, 73, 51, 100, 60, 91, 157, 120, 191, 49, 251, 184, 190, 145, 48, 76, 190, 141, 224, 166, 61, 101, 35, 79, 62, 45, 47, 151, 191, 40, 122, 38, 60, 13, 92, 224, 187, 60, 180, 96, 60, 121, 182, 133, 61, 17, 222, 183, 190, 89, 109, 182, 61, 124, 24, 177, 61, 136, 6, 151, 189, 148, 230, 200, 61, 40, 36, 251, 188, 195, 108, 148, 189, 193, 15, 155, 188, 103, 255, 21, 190, 11, 115, 195, 61, 156, 166, 11, 190, 106, 209, 250, 61, 157, 44, 161, 61, 83, 48, 21, 60, 44, 52, 254, 59, 123, 130, 130, 189, 147, 156, 41, 190, 184, 8, 10, 190, 23, 253, 94, 189, 126, 126, 236, 61, 103, 89, 162, 189, 72, 182, 134, 188, 225, 81, 51, 190, 88, 144, 11, 190, 218, 199, 84, 188, 145, 138, 248, 61, 26, 112, 242, 189, 157, 148, 26, 190, 55, 142, 151, 61, 186, 87, 202, 189, 26, 162, 79, 61, 187, 26, 71, 188, 97, 44, 186, 61, 7, 176, 35, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 136, 127, 61, 147, 166, 214, 60, 241, 101, 220, 61, 18, 209, 249, 61, 216, 247, 149, 61, 238, 47, 214, 61, 156, 144, 21, 190, 140, 117, 13, 189, 67, 120, 93, 189, 43, 42, 0, 62, 205, 53, 116, 61, 113, 217, 136, 59, 14, 236, 149, 60, 104, 159, 61, 62, 168, 227, 58, 62, 190, 182, 106, 62, 115, 46, 82, 62, 140, 51, 142, 189, 131, 108, 12, 189, 124, 199, 48, 190, 78, 80, 79, 62, 154, 7, 30, 61, 130, 148, 137, 190, 87, 2, 245, 189, 221, 15, 204, 189, 248, 182, 71, 62, 226, 119, 212, 61, 62, 132, 66, 61, 120, 234, 154, 189, 102, 179, 80, 62, 199, 51, 159, 187, 221, 120, 52, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 137, 23, 191, 101, 231, 123, 61, 112, 43, 19, 63, 15, 65, 96, 191, 66, 119, 199, 190, 196, 102, 143, 190, 220, 209, 108, 63, 136, 86, 182, 190, 247, 223, 209, 189, 196, 160, 188, 62, 250, 142, 129, 191, 42, 115, 21, 191, 64, 126, 212, 189, 122, 167, 83, 191, 150, 6, 86, 63, 30, 217, 168, 62, 41, 226, 3, 62, 175, 223, 76, 61, 149, 165, 88, 63, 237, 80, 35, 63, 178, 45, 61, 63, 241, 101, 77, 190, 111, 147, 27, 191, 213, 129, 12, 61, 215, 56, 104, 190, 145, 242, 128, 60, 180, 66, 237, 61, 189, 38, 198, 62, 138, 74, 109, 189, 113, 95, 232, 62, 41, 30, 162, 62, 89, 146, 136, 61, 101, 59, 89, 61, 38, 105, 235, 190, 166, 239, 95, 62, 119, 106, 208, 58, 42, 223, 151, 190, 226, 4, 243, 189, 89, 175, 146, 61, 61, 70, 29, 190, 3, 77, 243, 60, 168, 163, 40, 190, 171, 189, 25, 60, 12, 60, 163, 189, 206, 133, 104, 61, 3, 52, 120, 62, 137, 77, 15, 62, 238, 87, 9, 188, 130, 220, 53, 190, 112, 38, 223, 61, 154, 84, 14, 189, 68, 48, 242, 62, 151, 60, 66, 62, 144, 10, 159, 190, 82, 22, 186, 187, 191, 60, 96, 61, 225, 36, 28, 62, 248, 245, 70, 190, 107, 211, 117, 61, 74, 178, 121, 189, 93, 235, 194, 189, 39, 214, 3, 190, 173, 75, 130, 188, 174, 139, 5, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 31, 9, 189, 91, 193, 216, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {252, 124, 148, 63, 172, 48, 130, 63, 85, 83, 109, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {78, 111, 244, 189, 161, 147, 168, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0025/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}