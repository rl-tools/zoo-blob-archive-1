// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 11, 98, 61, 37, 151, 43, 63, 52, 222, 14, 63, 84, 39, 250, 62, 198, 223, 22, 191, 37, 213, 221, 62, 1, 39, 64, 190, 243, 193, 66, 63, 229, 42, 241, 189, 69, 116, 160, 62, 210, 201, 9, 63, 227, 84, 249, 62, 222, 19, 84, 191, 6, 29, 202, 62, 61, 187, 227, 60, 127, 236, 90, 63, 106, 207, 132, 191, 231, 1, 142, 190, 18, 178, 74, 63, 0, 255, 80, 191, 237, 195, 243, 190, 247, 90, 27, 191, 185, 185, 146, 62, 60, 82, 179, 61, 248, 42, 41, 191, 255, 53, 49, 191, 19, 133, 32, 61, 189, 209, 48, 62, 0, 68, 13, 63, 8, 201, 113, 190, 70, 206, 214, 188, 132, 245, 239, 62, 50, 183, 96, 190, 67, 2, 80, 63, 98, 216, 23, 191, 86, 235, 19, 191, 185, 196, 248, 189, 157, 12, 30, 63, 39, 15, 136, 190, 114, 104, 112, 190, 211, 108, 229, 191, 164, 254, 186, 190, 105, 163, 56, 190, 112, 129, 22, 63, 80, 239, 170, 60, 33, 10, 47, 191, 241, 161, 6, 191, 111, 105, 242, 188, 222, 237, 152, 59, 87, 32, 165, 63, 235, 141, 8, 189, 28, 154, 182, 62, 14, 31, 35, 191, 145, 234, 43, 63, 144, 84, 154, 62, 215, 72, 7, 190, 58, 26, 24, 191, 245, 41, 34, 190, 33, 64, 240, 189, 105, 58, 75, 191, 130, 11, 141, 190, 35, 234, 233, 63, 154, 96, 3, 63, 238, 40, 59, 190, 202, 59, 115, 190, 216, 199, 48, 63, 51, 218, 145, 189, 213, 161, 141, 63, 55, 79, 26, 63, 115, 99, 117, 190, 0, 211, 54, 190, 212, 103, 25, 63, 90, 169, 122, 62, 27, 248, 131, 190, 235, 211, 79, 63, 45, 55, 16, 191, 238, 132, 160, 62, 94, 127, 254, 61, 210, 177, 124, 63, 33, 204, 205, 63, 31, 133, 165, 62, 237, 244, 20, 63, 112, 227, 22, 63, 248, 181, 99, 190, 209, 25, 225, 190, 226, 174, 210, 63, 125, 7, 213, 62, 217, 229, 106, 189, 19, 126, 115, 61, 133, 6, 167, 190, 128, 210, 213, 190, 253, 46, 238, 190, 156, 51, 17, 63, 210, 11, 150, 190, 165, 43, 50, 191, 211, 5, 169, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 177, 45, 191, 194, 52, 105, 62, 215, 205, 44, 62, 164, 12, 96, 62, 10, 229, 151, 62, 254, 209, 196, 62, 59, 151, 105, 191, 131, 118, 18, 63, 144, 202, 224, 62, 254, 85, 178, 189, 159, 165, 67, 190, 137, 40, 147, 62, 78, 48, 184, 190, 199, 93, 181, 190, 11, 94, 68, 62, 209, 63, 6, 63, 112, 59, 28, 63, 156, 243, 174, 62, 195, 56, 212, 190, 11, 35, 14, 190, 9, 57, 146, 61, 122, 38, 96, 190, 46, 160, 201, 62, 16, 92, 202, 190, 99, 123, 178, 62, 114, 67, 45, 63, 167, 105, 21, 189, 253, 127, 6, 63, 135, 225, 15, 190, 164, 119, 133, 190, 182, 135, 214, 190, 42, 34, 238, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {120, 188, 189, 190, 223, 17, 228, 190, 100, 172, 102, 62, 231, 103, 216, 62, 18, 45, 171, 59, 219, 234, 246, 190, 142, 254, 65, 191, 246, 129, 69, 62, 47, 232, 17, 190, 251, 233, 87, 62, 113, 98, 86, 62, 232, 255, 23, 190, 250, 24, 157, 62, 191, 238, 87, 62, 45, 111, 79, 62, 115, 144, 134, 187, 23, 178, 34, 62, 118, 127, 96, 62, 134, 204, 110, 190, 203, 38, 87, 62, 235, 53, 26, 191, 79, 161, 12, 191, 5, 203, 164, 61, 87, 220, 6, 61, 189, 155, 161, 190, 127, 205, 112, 189, 81, 158, 155, 62, 51, 73, 12, 62, 109, 74, 73, 191, 249, 15, 215, 190, 148, 131, 114, 190, 23, 233, 22, 190, 54, 8, 129, 189, 110, 217, 133, 189, 84, 13, 24, 62, 147, 107, 13, 62, 10, 190, 14, 191, 241, 0, 28, 62, 182, 134, 62, 189, 90, 5, 46, 191, 138, 184, 246, 189, 160, 18, 0, 189, 222, 86, 143, 189, 83, 9, 231, 187, 70, 212, 38, 62, 255, 136, 50, 60, 182, 37, 49, 62, 43, 90, 117, 61, 151, 205, 161, 61, 109, 149, 22, 62, 167, 158, 254, 189, 178, 192, 151, 62, 218, 173, 70, 191, 213, 46, 154, 189, 246, 80, 67, 60, 161, 94, 68, 62, 59, 235, 133, 61, 203, 157, 8, 191, 234, 55, 179, 61, 172, 131, 166, 61, 225, 60, 227, 190, 42, 186, 224, 189, 204, 118, 155, 60, 129, 1, 163, 189, 56, 254, 2, 191, 48, 59, 144, 62, 198, 64, 144, 61, 43, 204, 221, 190, 148, 16, 2, 189, 110, 228, 179, 62, 24, 194, 72, 62, 160, 69, 41, 188, 204, 125, 241, 62, 21, 176, 209, 190, 148, 117, 138, 190, 91, 23, 151, 62, 96, 168, 170, 190, 190, 54, 92, 190, 211, 155, 68, 62, 136, 167, 162, 62, 154, 43, 189, 61, 211, 10, 126, 190, 214, 5, 196, 62, 251, 88, 242, 189, 92, 146, 47, 62, 102, 247, 146, 62, 13, 4, 24, 60, 60, 211, 154, 190, 173, 89, 53, 61, 167, 143, 113, 190, 241, 202, 44, 191, 2, 167, 199, 190, 170, 102, 95, 62, 190, 206, 156, 62, 18, 180, 163, 62, 124, 85, 68, 61, 8, 134, 47, 62, 53, 185, 183, 190, 201, 174, 86, 190, 139, 34, 79, 60, 195, 171, 28, 60, 33, 178, 62, 62, 38, 61, 3, 62, 248, 203, 161, 62, 190, 82, 177, 188, 169, 180, 12, 190, 219, 151, 73, 190, 58, 232, 68, 188, 121, 75, 204, 60, 90, 157, 65, 62, 196, 90, 160, 190, 47, 73, 99, 62, 189, 170, 8, 191, 193, 92, 87, 63, 69, 255, 50, 62, 27, 221, 78, 62, 117, 14, 255, 191, 156, 71, 10, 191, 254, 38, 117, 191, 151, 89, 202, 62, 111, 241, 86, 191, 74, 254, 130, 62, 62, 43, 98, 191, 11, 112, 216, 60, 25, 222, 220, 191, 216, 169, 45, 189, 75, 170, 149, 190, 135, 106, 118, 62, 238, 19, 153, 187, 9, 251, 7, 62, 241, 189, 131, 190, 141, 37, 139, 62, 127, 119, 170, 190, 27, 10, 148, 62, 61, 167, 204, 188, 119, 198, 129, 190, 35, 93, 210, 190, 66, 210, 31, 62, 234, 4, 71, 189, 236, 129, 92, 61, 80, 54, 93, 60, 154, 6, 142, 62, 7, 198, 49, 190, 245, 93, 84, 191, 211, 142, 35, 62, 156, 68, 155, 62, 117, 173, 68, 61, 12, 19, 91, 190, 203, 234, 32, 190, 128, 238, 146, 62, 24, 165, 196, 60, 255, 140, 38, 189, 185, 15, 103, 61, 177, 42, 72, 189, 3, 108, 50, 62, 81, 97, 106, 62, 192, 213, 41, 190, 35, 169, 51, 61, 59, 72, 28, 190, 106, 34, 1, 189, 58, 164, 48, 190, 185, 133, 21, 62, 233, 196, 0, 190, 228, 155, 207, 60, 92, 47, 144, 61, 51, 212, 53, 189, 115, 33, 115, 191, 185, 197, 62, 62, 24, 3, 16, 189, 167, 189, 116, 61, 52, 128, 215, 188, 223, 11, 3, 190, 24, 125, 112, 62, 186, 21, 194, 62, 138, 223, 178, 58, 253, 37, 161, 190, 255, 46, 153, 62, 239, 55, 202, 61, 208, 225, 39, 190, 167, 221, 218, 190, 177, 21, 49, 62, 80, 120, 56, 61, 122, 99, 88, 62, 167, 161, 197, 189, 12, 248, 19, 62, 176, 157, 202, 61, 169, 7, 118, 60, 65, 75, 94, 189, 63, 201, 1, 61, 50, 231, 129, 190, 158, 98, 200, 61, 249, 161, 193, 188, 28, 101, 17, 190, 97, 222, 77, 190, 212, 73, 152, 61, 69, 236, 244, 61, 116, 235, 207, 189, 147, 19, 135, 191, 164, 28, 111, 190, 149, 245, 204, 189, 224, 208, 111, 191, 234, 192, 74, 62, 164, 250, 19, 60, 136, 80, 130, 190, 159, 154, 14, 62, 178, 132, 35, 190, 32, 42, 138, 61, 70, 14, 246, 190, 186, 7, 202, 62, 93, 173, 164, 189, 244, 215, 213, 189, 108, 239, 165, 61, 251, 30, 43, 189, 60, 242, 168, 190, 91, 11, 77, 61, 131, 209, 190, 190, 41, 38, 119, 190, 255, 72, 215, 189, 194, 40, 165, 62, 108, 220, 168, 62, 12, 74, 226, 61, 212, 144, 19, 190, 180, 201, 139, 190, 125, 61, 48, 191, 146, 175, 1, 191, 86, 183, 197, 186, 124, 219, 153, 190, 239, 36, 135, 62, 211, 203, 183, 190, 61, 201, 26, 62, 231, 14, 36, 62, 151, 7, 75, 61, 159, 48, 222, 190, 196, 47, 143, 62, 20, 228, 65, 189, 155, 92, 189, 61, 90, 54, 77, 190, 136, 133, 54, 62, 156, 75, 154, 190, 126, 194, 1, 191, 124, 186, 1, 62, 99, 184, 128, 61, 170, 104, 114, 189, 121, 73, 213, 188, 93, 165, 41, 190, 25, 99, 248, 61, 207, 56, 65, 188, 207, 254, 32, 190, 113, 102, 166, 61, 236, 217, 147, 189, 247, 245, 216, 62, 96, 100, 244, 185, 244, 195, 40, 191, 172, 79, 134, 61, 105, 96, 37, 190, 119, 233, 111, 190, 99, 166, 242, 189, 21, 253, 213, 189, 125, 158, 226, 187, 254, 101, 172, 61, 6, 172, 0, 190, 182, 220, 4, 190, 49, 110, 33, 61, 1, 40, 42, 190, 39, 250, 145, 189, 16, 1, 4, 190, 27, 18, 167, 188, 155, 35, 51, 190, 149, 219, 153, 189, 62, 234, 206, 189, 161, 174, 117, 61, 14, 52, 245, 61, 241, 180, 29, 190, 231, 15, 186, 189, 60, 229, 143, 61, 43, 57, 130, 60, 159, 218, 236, 189, 19, 50, 172, 61, 98, 191, 181, 188, 39, 168, 243, 61, 140, 7, 241, 189, 47, 39, 230, 61, 81, 41, 161, 61, 149, 120, 133, 189, 31, 69, 223, 188, 157, 210, 11, 62, 150, 60, 228, 59, 216, 116, 29, 61, 40, 164, 59, 190, 126, 114, 45, 62, 121, 156, 101, 190, 189, 168, 20, 190, 25, 8, 27, 191, 79, 86, 79, 62, 60, 223, 166, 61, 173, 41, 22, 191, 241, 117, 122, 61, 14, 233, 33, 190, 160, 13, 80, 190, 242, 152, 76, 62, 233, 253, 248, 61, 205, 152, 154, 189, 248, 173, 159, 61, 11, 56, 169, 188, 20, 5, 159, 61, 83, 56, 135, 62, 213, 10, 77, 62, 47, 159, 101, 189, 226, 135, 186, 190, 96, 25, 235, 61, 96, 217, 132, 190, 124, 15, 130, 62, 194, 249, 23, 62, 76, 160, 25, 191, 38, 108, 194, 190, 46, 12, 5, 62, 125, 105, 187, 190, 126, 51, 2, 62, 159, 43, 139, 188, 241, 96, 57, 62, 143, 7, 156, 61, 108, 77, 68, 191, 106, 57, 166, 61, 67, 221, 160, 62, 165, 193, 109, 62, 26, 213, 194, 190, 129, 213, 204, 61, 63, 47, 151, 62, 90, 154, 42, 188, 162, 136, 175, 189, 206, 232, 45, 62, 20, 250, 2, 61, 17, 109, 242, 61, 114, 4, 246, 61, 18, 53, 92, 62, 40, 201, 38, 62, 217, 4, 82, 191, 144, 101, 23, 63, 227, 63, 228, 61, 47, 182, 98, 62, 120, 137, 3, 192, 149, 93, 248, 190, 76, 123, 124, 191, 148, 171, 89, 63, 143, 97, 112, 191, 53, 91, 116, 62, 180, 49, 180, 190, 199, 237, 92, 190, 142, 128, 249, 191, 4, 32, 35, 190, 85, 140, 162, 61, 48, 240, 115, 62, 140, 193, 146, 190, 22, 157, 72, 190, 114, 35, 98, 62, 229, 57, 19, 62, 69, 69, 8, 62, 246, 251, 48, 190, 218, 161, 10, 191, 245, 188, 75, 62, 171, 41, 121, 190, 240, 249, 176, 62, 209, 194, 100, 62, 212, 175, 134, 190, 146, 148, 237, 62, 244, 38, 195, 189, 75, 217, 27, 61, 78, 236, 15, 190, 21, 160, 115, 61, 238, 101, 5, 190, 208, 150, 168, 190, 29, 169, 73, 62, 137, 184, 225, 190, 163, 172, 183, 190, 64, 82, 44, 189, 191, 55, 8, 189, 66, 5, 137, 190, 41, 166, 26, 62, 147, 167, 167, 62, 155, 191, 183, 61, 115, 204, 42, 191, 32, 91, 3, 191, 45, 147, 201, 190, 79, 226, 115, 189, 171, 104, 53, 189, 184, 210, 158, 60, 210, 97, 140, 190, 198, 217, 143, 61, 153, 202, 93, 189, 152, 182, 141, 190, 14, 216, 125, 190, 34, 189, 218, 61, 136, 189, 176, 189, 170, 73, 57, 62, 144, 65, 50, 62, 189, 255, 3, 189, 119, 206, 151, 61, 14, 88, 72, 63, 128, 178, 17, 190, 115, 78, 208, 188, 119, 203, 1, 63, 84, 78, 69, 62, 86, 210, 145, 61, 249, 89, 183, 190, 9, 211, 129, 61, 217, 241, 93, 61, 190, 232, 74, 62, 170, 207, 167, 60, 254, 191, 41, 62, 182, 199, 179, 61, 144, 99, 183, 61, 228, 3, 21, 62, 253, 181, 78, 189, 194, 28, 48, 62, 185, 137, 174, 188, 165, 111, 14, 190, 229, 81, 173, 61, 58, 230, 193, 190, 164, 139, 208, 188, 141, 139, 57, 62, 84, 22, 218, 189, 10, 132, 157, 190, 166, 109, 156, 190, 51, 4, 100, 61, 233, 45, 42, 61, 155, 63, 209, 62, 153, 129, 128, 61, 6, 48, 19, 190, 195, 187, 15, 62, 85, 175, 117, 62, 219, 21, 48, 62, 17, 216, 151, 62, 47, 186, 37, 190, 152, 13, 164, 62, 51, 135, 145, 190, 170, 226, 71, 62, 82, 107, 203, 191, 240, 12, 190, 190, 206, 25, 249, 190, 229, 122, 181, 61, 104, 248, 215, 190, 186, 166, 234, 61, 189, 93, 34, 62, 239, 244, 105, 62, 68, 255, 228, 191, 200, 227, 93, 190, 222, 37, 46, 190, 233, 43, 44, 62, 63, 26, 16, 191, 81, 98, 151, 62, 233, 61, 8, 61, 52, 239, 173, 190, 62, 93, 192, 189, 150, 181, 211, 62, 11, 240, 70, 62, 168, 99, 4, 189, 204, 209, 127, 62, 69, 233, 48, 190, 214, 238, 199, 190, 215, 183, 180, 62, 217, 235, 124, 189, 149, 147, 110, 191, 196, 178, 130, 61, 119, 242, 55, 61, 74, 247, 103, 62, 229, 164, 133, 190, 120, 89, 49, 61, 2, 77, 211, 190, 255, 61, 107, 190, 114, 57, 143, 62, 103, 97, 4, 62, 124, 225, 77, 190, 72, 50, 88, 62, 0, 220, 44, 190, 56, 200, 53, 191, 181, 185, 182, 189, 36, 30, 149, 190, 94, 228, 143, 61, 178, 141, 132, 62, 129, 79, 7, 62, 191, 39, 22, 190, 51, 169, 160, 62, 185, 178, 139, 62, 169, 39, 24, 190, 119, 117, 241, 188, 145, 78, 145, 62, 206, 105, 171, 189, 142, 16, 23, 62, 178, 29, 49, 189, 234, 34, 47, 190, 194, 85, 162, 189, 17, 201, 213, 61, 126, 211, 180, 190, 212, 134, 177, 191, 57, 116, 3, 61, 186, 67, 173, 61, 174, 6, 232, 62, 151, 201, 68, 189, 8, 241, 39, 189, 12, 153, 175, 190, 58, 147, 145, 62, 209, 108, 10, 60, 216, 88, 129, 189, 236, 45, 59, 60, 15, 200, 106, 60, 224, 208, 142, 61, 61, 240, 123, 190, 113, 124, 150, 189, 35, 204, 22, 61, 204, 45, 161, 62, 74, 107, 147, 62, 19, 218, 40, 188, 82, 220, 138, 190, 102, 150, 174, 62, 137, 193, 57, 61, 66, 137, 10, 190, 82, 254, 137, 188, 230, 63, 71, 59, 19, 88, 30, 190, 131, 84, 43, 61, 189, 119, 2, 63, 5, 77, 27, 190, 188, 244, 184, 189, 90, 161, 2, 62, 184, 87, 46, 190, 194, 71, 168, 188, 123, 219, 175, 62, 225, 248, 194, 62, 131, 136, 137, 61, 232, 119, 250, 189, 219, 119, 37, 61, 108, 244, 211, 61, 61, 225, 54, 62, 95, 212, 23, 62, 93, 86, 56, 189, 74, 33, 129, 190, 129, 91, 93, 61, 195, 164, 27, 60, 140, 76, 65, 190, 115, 96, 4, 190, 135, 154, 25, 62, 210, 107, 41, 62, 38, 172, 96, 62, 131, 102, 121, 62, 86, 0, 135, 61, 89, 84, 31, 190, 137, 238, 181, 189, 158, 189, 9, 62, 65, 18, 61, 190, 193, 229, 192, 60, 253, 10, 41, 190, 7, 238, 212, 189, 33, 193, 58, 189, 161, 157, 16, 190, 230, 201, 140, 61, 143, 181, 4, 190, 10, 23, 150, 61, 234, 229, 146, 61, 158, 195, 4, 190, 250, 187, 164, 189, 43, 51, 5, 62, 90, 232, 66, 190, 173, 53, 107, 190, 239, 36, 60, 61, 217, 3, 114, 189, 150, 2, 104, 188, 73, 35, 114, 189, 88, 134, 226, 61, 103, 26, 180, 189, 136, 35, 84, 61, 91, 125, 11, 62, 223, 215, 209, 189, 134, 221, 132, 188, 55, 60, 174, 61, 207, 192, 221, 189, 49, 42, 116, 190, 159, 124, 233, 61, 41, 156, 224, 61, 185, 34, 104, 60, 79, 38, 58, 62, 112, 253, 129, 189, 154, 118, 184, 191, 98, 204, 96, 190, 109, 133, 9, 62, 166, 59, 221, 190, 204, 137, 193, 62, 204, 204, 169, 61, 87, 29, 43, 191, 104, 58, 130, 62, 147, 19, 26, 190, 2, 171, 1, 190, 82, 161, 196, 189, 98, 138, 136, 62, 156, 221, 231, 188, 130, 40, 60, 62, 121, 80, 0, 62, 185, 153, 225, 59, 138, 201, 196, 60, 86, 99, 60, 62, 130, 80, 48, 188, 233, 225, 49, 188, 76, 229, 212, 188, 13, 147, 212, 62, 165, 128, 20, 62, 240, 194, 128, 188, 44, 189, 195, 189, 11, 250, 104, 190, 66, 16, 67, 191, 124, 77, 168, 189, 191, 54, 14, 62, 175, 148, 131, 189, 106, 178, 87, 190, 85, 238, 183, 190, 122, 252, 151, 62, 173, 161, 188, 62, 205, 76, 60, 191, 169, 37, 186, 189, 158, 53, 46, 61, 137, 88, 49, 61, 113, 102, 16, 62, 54, 44, 197, 61, 142, 12, 85, 190, 132, 159, 142, 190, 232, 196, 106, 190, 12, 152, 60, 190, 108, 209, 200, 62, 191, 211, 117, 62, 40, 191, 175, 189, 100, 157, 106, 190, 171, 250, 18, 62, 196, 108, 253, 190, 222, 175, 187, 62, 149, 7, 223, 188, 207, 199, 159, 191, 218, 255, 29, 191, 105, 92, 207, 60, 216, 35, 129, 190, 126, 234, 82, 62, 68, 251, 161, 62, 16, 251, 93, 190, 55, 170, 31, 190, 214, 9, 192, 61, 137, 167, 111, 62, 72, 65, 204, 190, 12, 213, 156, 60, 58, 167, 245, 62, 116, 43, 187, 62, 131, 226, 36, 190, 22, 228, 69, 62, 154, 226, 45, 190, 76, 92, 5, 190, 180, 11, 189, 62, 129, 197, 158, 190, 228, 127, 236, 191, 3, 42, 135, 61, 197, 142, 92, 61, 141, 3, 235, 59, 140, 216, 176, 190, 247, 236, 204, 61, 140, 141, 220, 190, 160, 96, 240, 61, 92, 154, 157, 62, 64, 32, 37, 61, 109, 171, 114, 190, 194, 158, 117, 62, 47, 88, 60, 62, 146, 124, 211, 190, 247, 129, 38, 190, 33, 72, 112, 62, 0, 30, 131, 62, 213, 39, 197, 62, 239, 194, 71, 189, 142, 56, 225, 61, 1, 138, 133, 189, 173, 253, 20, 189, 221, 221, 171, 62, 161, 214, 37, 190, 247, 127, 2, 190, 35, 84, 58, 190, 152, 134, 159, 190, 164, 7, 168, 190, 239, 160, 61, 62, 104, 213, 116, 62, 167, 72, 227, 189, 129, 76, 199, 62, 89, 213, 58, 62, 240, 226, 14, 62, 55, 227, 163, 190, 22, 149, 31, 62, 55, 177, 145, 62, 140, 156, 61, 190, 252, 163, 164, 62, 5, 171, 30, 59, 175, 175, 74, 61, 163, 27, 33, 188, 208, 106, 170, 60, 184, 236, 168, 189, 22, 113, 91, 190, 58, 50, 166, 62, 2, 124, 141, 62, 39, 144, 217, 189, 170, 38, 135, 190, 247, 106, 143, 189, 13, 214, 109, 190, 60, 110, 136, 62, 220, 91, 169, 62, 44, 72, 105, 61, 38, 245, 135, 62, 139, 21, 7, 190, 35, 181, 134, 189, 150, 94, 212, 190, 161, 95, 98, 190, 222, 66, 141, 190, 67, 16, 219, 62, 200, 199, 153, 188, 110, 35, 15, 61, 88, 84, 154, 62, 253, 25, 135, 191, 78, 91, 126, 190, 182, 115, 179, 191, 113, 116, 79, 62, 111, 177, 240, 61, 200, 71, 151, 189, 224, 98, 60, 190, 208, 184, 70, 61, 9, 114, 174, 61, 14, 59, 8, 190, 102, 194, 18, 189, 140, 0, 247, 61, 198, 132, 75, 190, 131, 55, 212, 62, 80, 210, 214, 61, 26, 185, 2, 190, 55, 198, 15, 62, 11, 17, 23, 62, 227, 219, 137, 191, 54, 155, 11, 190, 160, 85, 0, 190, 43, 185, 1, 189, 143, 249, 166, 61, 232, 60, 230, 189, 200, 133, 10, 190, 146, 39, 50, 61, 92, 44, 160, 61, 79, 14, 158, 187, 67, 177, 192, 188, 153, 53, 174, 61, 28, 190, 18, 190, 222, 60, 47, 190, 80, 1, 139, 61, 145, 170, 106, 190, 74, 13, 169, 61, 226, 198, 183, 189, 85, 190, 137, 189, 6, 83, 225, 189, 64, 62, 19, 190, 203, 180, 139, 61, 112, 92, 2, 61, 202, 101, 36, 190, 202, 182, 33, 62, 14, 124, 9, 62, 113, 160, 170, 189, 219, 9, 11, 62, 87, 3, 167, 61, 38, 28, 20, 60, 97, 54, 125, 61, 3, 212, 3, 190, 99, 29, 191, 189, 96, 32, 8, 62, 221, 77, 3, 62, 44, 33, 25, 190, 123, 141, 225, 60, 12, 236, 218, 61, 26, 18, 194, 190, 107, 166, 30, 60, 161, 29, 4, 62, 37, 122, 194, 188, 77, 254, 78, 62, 159, 56, 183, 188, 180, 236, 235, 189, 81, 103, 208, 61, 122, 154, 249, 62, 194, 13, 77, 187, 61, 177, 131, 190, 172, 215, 241, 62, 100, 152, 246, 189, 162, 8, 138, 190, 24, 242, 36, 191, 227, 212, 73, 62, 25, 222, 70, 61, 132, 39, 136, 62, 71, 85, 149, 61, 99, 104, 36, 61, 66, 98, 51, 62, 24, 73, 216, 61, 11, 53, 54, 189, 179, 86, 194, 60, 35, 188, 217, 190, 205, 229, 29, 190, 249, 243, 138, 190, 94, 92, 139, 189, 51, 175, 227, 189, 52, 54, 13, 62, 109, 26, 183, 60, 57, 95, 38, 189, 210, 101, 0, 62, 131, 236, 28, 190, 224, 68, 54, 61, 74, 133, 240, 61, 157, 163, 17, 62, 246, 63, 254, 189, 57, 244, 65, 188, 242, 52, 206, 61, 244, 85, 220, 187, 41, 47, 169, 62, 26, 96, 227, 61, 5, 155, 230, 187, 47, 136, 243, 188, 166, 47, 90, 189, 36, 188, 76, 62, 9, 49, 215, 189, 123, 250, 147, 61, 140, 243, 148, 61, 103, 227, 37, 190, 156, 47, 37, 62, 189, 138, 197, 61, 107, 126, 187, 189, 161, 214, 86, 62, 180, 44, 236, 189, 39, 162, 182, 189, 208, 24, 129, 188, 91, 118, 67, 62, 252, 21, 237, 189, 1, 41, 137, 61, 32, 208, 41, 190, 40, 221, 210, 61, 104, 241, 151, 61, 116, 246, 42, 190, 251, 27, 98, 61, 85, 171, 41, 61, 236, 31, 5, 62, 70, 92, 172, 189, 208, 217, 244, 189, 116, 127, 191, 189, 233, 245, 126, 189, 210, 5, 82, 188, 226, 214, 250, 187, 41, 151, 192, 189, 96, 60, 7, 189, 129, 207, 55, 190, 167, 150, 16, 190, 186, 17, 191, 189, 107, 216, 140, 61, 78, 62, 7, 61, 160, 255, 2, 190, 199, 36, 187, 61, 249, 233, 47, 189, 194, 14, 13, 190, 138, 119, 50, 61, 159, 43, 112, 189, 189, 97, 61, 190, 4, 164, 52, 190, 205, 173, 162, 59, 103, 117, 135, 189, 61, 164, 166, 61, 210, 180, 24, 62, 2, 122, 139, 190, 225, 149, 72, 189, 4, 135, 254, 190, 175, 191, 178, 61, 114, 2, 167, 62, 19, 98, 135, 191, 5, 170, 245, 61, 88, 7, 94, 189, 149, 156, 157, 189, 243, 163, 47, 62, 130, 31, 202, 60, 100, 161, 35, 190, 143, 97, 50, 189, 156, 137, 226, 189, 145, 131, 37, 62, 219, 110, 48, 62, 144, 22, 8, 62, 252, 58, 22, 62, 188, 232, 137, 191, 132, 139, 223, 190, 170, 100, 84, 61, 175, 228, 141, 190, 131, 224, 131, 188, 38, 48, 155, 191, 242, 153, 13, 61, 26, 74, 33, 188, 228, 225, 136, 60, 7, 39, 70, 60, 169, 189, 157, 190, 37, 231, 35, 62, 165, 17, 93, 61, 106, 27, 230, 189, 185, 107, 97, 189, 79, 105, 137, 189, 199, 13, 39, 62, 20, 122, 126, 61, 194, 219, 19, 62, 19, 155, 186, 60, 95, 208, 81, 189, 34, 236, 172, 188, 237, 145, 35, 190, 78, 205, 33, 190, 39, 102, 5, 190, 200, 253, 135, 61, 63, 169, 24, 190, 10, 227, 237, 187, 214, 25, 29, 189, 141, 190, 204, 189, 186, 83, 33, 190, 38, 141, 232, 189, 165, 37, 29, 61, 199, 193, 131, 189, 152, 78, 210, 189, 138, 214, 29, 62, 103, 101, 253, 61, 106, 81, 194, 189, 164, 24, 29, 190, 30, 111, 250, 60, 89, 32, 177, 61, 172, 69, 12, 62, 219, 80, 38, 189, 57, 186, 165, 189, 18, 15, 17, 190, 9, 83, 114, 189, 165, 223, 98, 189, 72, 134, 41, 190, 235, 218, 35, 62, 87, 173, 241, 60, 241, 119, 128, 61, 130, 28, 202, 61, 65, 173, 3, 62, 105, 181, 86, 191, 85, 188, 48, 191, 54, 226, 248, 61, 134, 145, 84, 191, 234, 151, 194, 191, 53, 252, 65, 62, 224, 39, 198, 60, 146, 150, 160, 189, 148, 118, 212, 189, 47, 86, 190, 61, 44, 93, 62, 191, 15, 208, 105, 62, 115, 108, 109, 62, 218, 58, 146, 62, 220, 65, 94, 189, 68, 123, 18, 189, 199, 147, 134, 61, 172, 231, 140, 190, 30, 74, 195, 190, 39, 127, 223, 61, 129, 147, 83, 62, 203, 53, 98, 62, 54, 113, 99, 190, 54, 230, 65, 61, 244, 145, 31, 62, 74, 193, 155, 189, 200, 143, 229, 61, 163, 33, 3, 191, 97, 184, 19, 62, 141, 95, 175, 62, 131, 67, 159, 191, 148, 164, 76, 61, 230, 253, 92, 62, 253, 224, 19, 190, 231, 226, 149, 62, 218, 15, 134, 61, 194, 102, 8, 190, 116, 48, 134, 190, 11, 166, 12, 189, 15, 163, 116, 61, 173, 15, 86, 189, 107, 252, 158, 61, 5, 94, 154, 59, 201, 102, 128, 191, 63, 195, 228, 190, 246, 212, 93, 190, 83, 6, 80, 188, 176, 231, 72, 62, 34, 45, 153, 191, 106, 48, 52, 60, 151, 0, 40, 188, 8, 231, 96, 60, 156, 142, 120, 61, 243, 151, 170, 190, 95, 71, 185, 61, 124, 24, 177, 61, 136, 6, 151, 189, 148, 230, 200, 61, 40, 36, 251, 188, 195, 108, 148, 189, 193, 15, 155, 188, 103, 255, 21, 190, 11, 115, 195, 61, 156, 166, 11, 190, 106, 209, 250, 61, 157, 44, 161, 61, 83, 48, 21, 60, 44, 52, 254, 59, 123, 130, 130, 189, 147, 156, 41, 190, 184, 8, 10, 190, 23, 253, 94, 189, 126, 126, 236, 61, 103, 89, 162, 189, 72, 182, 134, 188, 225, 81, 51, 190, 88, 144, 11, 190, 218, 199, 84, 188, 145, 138, 248, 61, 26, 112, 242, 189, 157, 148, 26, 190, 55, 142, 151, 61, 186, 87, 202, 189, 26, 162, 79, 61, 187, 26, 71, 188, 97, 44, 186, 61, 7, 176, 35, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 169, 124, 61, 123, 199, 151, 187, 19, 238, 195, 61, 73, 160, 211, 61, 171, 169, 121, 61, 223, 49, 190, 61, 167, 67, 50, 190, 208, 92, 200, 188, 67, 120, 93, 189, 1, 226, 6, 62, 141, 87, 183, 60, 243, 90, 1, 59, 219, 248, 156, 60, 179, 177, 33, 62, 161, 233, 58, 62, 33, 224, 103, 62, 109, 230, 81, 62, 140, 51, 142, 189, 10, 24, 10, 189, 221, 171, 61, 190, 147, 215, 79, 62, 178, 156, 57, 61, 8, 67, 140, 190, 87, 2, 245, 189, 172, 129, 139, 189, 191, 16, 66, 62, 226, 119, 212, 61, 42, 1, 50, 61, 120, 234, 154, 189, 24, 11, 54, 62, 213, 213, 219, 187, 221, 120, 52, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 139, 26, 191, 10, 192, 173, 61, 57, 25, 21, 63, 85, 58, 87, 191, 134, 62, 189, 190, 93, 105, 137, 190, 183, 9, 99, 63, 56, 51, 180, 190, 247, 223, 209, 189, 55, 87, 206, 62, 87, 178, 139, 191, 255, 235, 30, 191, 122, 163, 199, 189, 195, 222, 71, 191, 120, 99, 85, 63, 13, 75, 171, 62, 33, 138, 47, 62, 175, 223, 76, 61, 236, 13, 89, 63, 101, 81, 17, 63, 179, 103, 56, 63, 204, 107, 84, 190, 253, 160, 16, 191, 213, 129, 12, 61, 190, 175, 95, 190, 247, 35, 233, 60, 180, 66, 237, 61, 47, 89, 214, 62, 138, 74, 109, 189, 83, 45, 212, 62, 95, 50, 179, 62, 89, 146, 136, 61, 133, 149, 198, 61, 170, 205, 209, 190, 65, 220, 109, 62, 160, 227, 26, 186, 107, 58, 122, 190, 234, 120, 225, 189, 183, 63, 166, 61, 135, 179, 25, 190, 3, 77, 243, 60, 34, 138, 31, 190, 145, 183, 30, 189, 84, 197, 200, 188, 219, 178, 173, 61, 86, 169, 96, 62, 35, 134, 16, 62, 164, 175, 197, 59, 2, 124, 52, 190, 112, 38, 223, 61, 57, 51, 29, 189, 229, 49, 227, 62, 127, 108, 87, 62, 222, 149, 119, 190, 43, 44, 138, 61, 191, 60, 96, 61, 168, 131, 10, 62, 119, 235, 55, 190, 107, 211, 117, 61, 36, 181, 96, 189, 93, 235, 194, 189, 197, 231, 10, 190, 245, 15, 85, 188, 174, 139, 5, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 136, 218, 188, 73, 118, 196, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {33, 17, 74, 191, 233, 130, 180, 59, 199, 42, 31, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {59, 181, 226, 63, 108, 1, 3, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0025/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}