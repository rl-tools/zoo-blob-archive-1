// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 31, 180, 61, 204, 198, 69, 63, 84, 127, 8, 63, 127, 8, 233, 62, 109, 41, 36, 191, 236, 176, 193, 62, 206, 151, 65, 190, 198, 186, 71, 63, 195, 61, 105, 60, 255, 176, 157, 62, 135, 115, 223, 62, 174, 209, 3, 63, 72, 150, 161, 191, 98, 5, 18, 63, 162, 165, 235, 60, 41, 239, 79, 63, 166, 50, 148, 191, 210, 134, 53, 190, 15, 19, 84, 63, 13, 71, 117, 191, 75, 90, 226, 190, 154, 177, 90, 191, 194, 149, 83, 62, 66, 159, 12, 62, 231, 23, 51, 191, 39, 58, 69, 191, 214, 88, 113, 61, 59, 225, 251, 61, 222, 243, 96, 63, 247, 253, 72, 190, 199, 246, 49, 189, 156, 196, 5, 63, 110, 122, 42, 190, 231, 127, 73, 63, 6, 5, 8, 191, 115, 37, 42, 191, 214, 158, 164, 189, 78, 238, 50, 63, 67, 202, 100, 190, 16, 129, 133, 190, 221, 153, 245, 191, 138, 217, 187, 190, 44, 17, 224, 189, 106, 169, 120, 63, 143, 123, 6, 187, 130, 17, 65, 191, 216, 15, 240, 190, 183, 253, 212, 188, 15, 139, 218, 189, 193, 127, 159, 63, 157, 27, 109, 189, 11, 101, 126, 62, 36, 117, 78, 191, 249, 99, 75, 63, 114, 140, 62, 62, 212, 31, 54, 190, 6, 160, 19, 191, 142, 158, 20, 190, 210, 186, 181, 189, 51, 9, 64, 191, 189, 5, 80, 191, 157, 162, 244, 63, 158, 33, 233, 62, 38, 18, 25, 62, 252, 231, 12, 190, 215, 241, 59, 63, 129, 115, 78, 190, 203, 129, 153, 63, 157, 6, 3, 63, 100, 199, 74, 61, 145, 234, 156, 190, 209, 227, 26, 63, 169, 118, 86, 62, 4, 63, 152, 190, 232, 173, 45, 63, 137, 56, 27, 191, 115, 97, 127, 62, 4, 99, 42, 62, 22, 196, 114, 63, 14, 234, 218, 63, 196, 238, 160, 62, 204, 169, 1, 63, 66, 153, 57, 63, 55, 192, 82, 190, 191, 14, 221, 190, 79, 72, 242, 63, 81, 112, 150, 62, 89, 110, 226, 188, 130, 65, 186, 61, 127, 81, 158, 190, 122, 133, 65, 190, 114, 11, 230, 190, 189, 26, 26, 63, 21, 143, 152, 190, 250, 217, 48, 191, 194, 83, 25, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 208, 57, 191, 2, 169, 32, 62, 106, 60, 36, 62, 107, 71, 77, 62, 191, 116, 172, 62, 248, 119, 212, 62, 148, 42, 111, 191, 243, 252, 7, 63, 108, 118, 5, 63, 7, 139, 26, 190, 7, 24, 114, 190, 168, 5, 113, 62, 161, 102, 190, 190, 254, 56, 167, 190, 185, 199, 143, 62, 46, 138, 39, 63, 249, 21, 10, 63, 194, 61, 90, 62, 236, 211, 237, 190, 174, 115, 76, 190, 130, 97, 219, 61, 171, 89, 74, 189, 208, 211, 241, 62, 8, 47, 171, 190, 51, 36, 165, 62, 153, 2, 44, 63, 12, 106, 182, 188, 81, 46, 218, 62, 16, 251, 118, 60, 125, 208, 130, 190, 186, 85, 140, 190, 213, 166, 234, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 64, 73, 190, 57, 210, 19, 191, 37, 59, 151, 62, 206, 43, 215, 62, 19, 191, 249, 189, 173, 19, 250, 190, 83, 126, 64, 191, 116, 82, 139, 60, 110, 1, 243, 190, 44, 223, 140, 62, 85, 55, 95, 62, 64, 53, 216, 189, 225, 80, 161, 62, 114, 167, 207, 62, 200, 42, 156, 62, 156, 168, 44, 189, 180, 162, 131, 62, 54, 53, 68, 188, 54, 240, 60, 190, 57, 168, 110, 62, 117, 187, 58, 191, 126, 245, 221, 189, 190, 213, 117, 62, 54, 170, 195, 61, 32, 159, 212, 190, 148, 205, 189, 189, 201, 90, 8, 63, 136, 111, 81, 62, 90, 252, 109, 191, 77, 218, 193, 190, 201, 123, 112, 190, 166, 28, 165, 190, 139, 95, 235, 189, 174, 214, 197, 188, 59, 82, 42, 62, 48, 56, 50, 62, 148, 92, 14, 191, 153, 4, 111, 62, 217, 124, 101, 189, 208, 210, 68, 191, 27, 237, 224, 60, 119, 129, 9, 189, 100, 204, 224, 189, 39, 187, 116, 59, 129, 34, 3, 62, 52, 154, 173, 61, 18, 253, 129, 62, 167, 86, 47, 62, 164, 214, 162, 61, 60, 85, 50, 62, 49, 253, 43, 190, 77, 132, 131, 62, 225, 34, 120, 191, 189, 170, 119, 189, 57, 47, 155, 61, 161, 149, 56, 62, 116, 92, 105, 61, 86, 8, 234, 190, 192, 170, 183, 61, 79, 108, 171, 61, 58, 132, 2, 191, 66, 252, 56, 190, 138, 107, 50, 189, 117, 54, 153, 59, 154, 46, 22, 191, 178, 6, 159, 62, 158, 158, 142, 61, 225, 209, 217, 190, 197, 129, 241, 61, 112, 35, 172, 62, 15, 27, 118, 62, 169, 190, 255, 60, 70, 45, 11, 63, 67, 19, 197, 190, 61, 177, 116, 190, 174, 252, 137, 62, 95, 165, 158, 190, 38, 227, 158, 190, 16, 13, 37, 62, 58, 252, 198, 62, 202, 12, 195, 60, 115, 122, 83, 190, 55, 101, 200, 62, 17, 158, 189, 189, 235, 99, 160, 188, 149, 22, 155, 62, 185, 239, 149, 188, 32, 230, 146, 190, 78, 51, 122, 61, 160, 99, 55, 190, 49, 99, 117, 191, 31, 104, 207, 190, 232, 194, 21, 190, 110, 124, 160, 62, 149, 9, 152, 62, 244, 198, 227, 61, 98, 113, 94, 190, 149, 142, 171, 190, 63, 134, 47, 190, 119, 20, 100, 189, 104, 12, 138, 190, 187, 204, 115, 62, 157, 121, 2, 62, 25, 251, 51, 62, 125, 164, 206, 188, 10, 155, 214, 189, 73, 36, 56, 190, 188, 99, 222, 188, 87, 30, 60, 61, 208, 234, 134, 62, 16, 247, 126, 190, 79, 147, 75, 62, 91, 88, 244, 190, 72, 46, 113, 63, 230, 119, 95, 62, 250, 120, 107, 62, 102, 133, 26, 192, 124, 65, 148, 190, 127, 27, 148, 191, 110, 147, 42, 63, 18, 178, 48, 191, 237, 96, 58, 62, 201, 105, 218, 191, 161, 154, 218, 188, 239, 7, 207, 191, 92, 26, 228, 187, 52, 179, 67, 189, 97, 83, 126, 62, 224, 241, 247, 188, 72, 20, 130, 62, 232, 167, 14, 190, 166, 48, 156, 62, 29, 146, 69, 191, 95, 25, 165, 62, 221, 65, 157, 189, 161, 1, 182, 190, 26, 224, 152, 190, 134, 60, 150, 62, 221, 15, 0, 189, 21, 13, 15, 61, 139, 17, 246, 60, 12, 143, 36, 63, 100, 124, 150, 190, 239, 203, 69, 191, 45, 12, 246, 61, 188, 8, 223, 62, 187, 255, 187, 61, 84, 87, 59, 190, 71, 243, 132, 190, 219, 40, 195, 62, 47, 169, 93, 187, 203, 170, 1, 189, 231, 21, 60, 62, 190, 127, 187, 189, 160, 77, 19, 62, 72, 206, 86, 62, 119, 114, 69, 190, 233, 142, 148, 61, 112, 165, 250, 189, 103, 152, 57, 62, 88, 162, 44, 190, 64, 78, 128, 62, 96, 177, 0, 62, 19, 248, 70, 61, 46, 90, 131, 190, 31, 67, 44, 189, 51, 181, 194, 191, 18, 172, 243, 61, 113, 138, 228, 188, 66, 240, 16, 63, 178, 113, 47, 61, 89, 222, 83, 190, 149, 1, 157, 62, 100, 249, 35, 63, 114, 131, 93, 190, 63, 198, 171, 190, 10, 90, 69, 62, 106, 170, 88, 62, 6, 40, 116, 190, 12, 148, 14, 191, 208, 138, 40, 62, 93, 60, 243, 61, 165, 84, 71, 62, 130, 214, 226, 189, 136, 171, 129, 62, 238, 142, 41, 61, 179, 160, 120, 189, 64, 172, 0, 190, 45, 130, 132, 61, 94, 228, 215, 190, 58, 176, 218, 61, 67, 26, 253, 61, 48, 225, 216, 190, 224, 68, 99, 190, 13, 230, 149, 61, 152, 226, 69, 189, 227, 229, 11, 62, 68, 241, 140, 191, 198, 171, 185, 190, 91, 2, 161, 61, 12, 31, 127, 191, 248, 203, 71, 62, 21, 62, 8, 60, 55, 231, 145, 190, 160, 157, 16, 62, 91, 230, 88, 190, 13, 147, 55, 61, 68, 138, 92, 190, 203, 138, 191, 62, 18, 218, 62, 190, 70, 56, 38, 190, 193, 193, 107, 61, 227, 27, 205, 189, 169, 108, 36, 191, 203, 8, 185, 189, 145, 19, 233, 190, 200, 252, 199, 190, 87, 189, 14, 189, 142, 198, 63, 62, 192, 142, 155, 62, 157, 194, 82, 188, 239, 103, 46, 190, 171, 7, 129, 190, 199, 141, 42, 191, 68, 161, 226, 190, 233, 207, 187, 60, 157, 183, 61, 190, 95, 250, 80, 62, 231, 171, 4, 191, 67, 91, 21, 62, 46, 72, 193, 61, 193, 65, 255, 189, 28, 110, 99, 191, 130, 95, 200, 62, 208, 211, 76, 189, 246, 142, 97, 61, 195, 164, 80, 190, 119, 145, 41, 62, 58, 82, 247, 190, 127, 15, 128, 191, 28, 31, 174, 60, 28, 245, 249, 61, 157, 234, 84, 189, 12, 76, 8, 189, 155, 93, 17, 191, 99, 143, 116, 62, 59, 243, 18, 190, 171, 54, 201, 190, 37, 62, 251, 61, 201, 10, 106, 190, 35, 196, 160, 62, 123, 233, 158, 189, 115, 183, 107, 191, 176, 243, 123, 61, 98, 197, 183, 190, 129, 240, 40, 190, 99, 166, 242, 189, 21, 253, 213, 189, 125, 158, 226, 187, 254, 101, 172, 61, 6, 172, 0, 190, 182, 220, 4, 190, 49, 110, 33, 61, 1, 40, 42, 190, 39, 250, 145, 189, 16, 1, 4, 190, 27, 18, 167, 188, 155, 35, 51, 190, 149, 219, 153, 189, 62, 234, 206, 189, 161, 174, 117, 61, 14, 52, 245, 61, 241, 180, 29, 190, 231, 15, 186, 189, 60, 229, 143, 61, 43, 57, 130, 60, 159, 218, 236, 189, 19, 50, 172, 61, 98, 191, 181, 188, 39, 168, 243, 61, 140, 7, 241, 189, 47, 39, 230, 61, 81, 41, 161, 61, 149, 120, 133, 189, 31, 69, 223, 188, 157, 210, 11, 62, 150, 60, 228, 59, 216, 116, 29, 61, 3, 133, 188, 189, 2, 197, 248, 61, 124, 241, 140, 190, 215, 9, 7, 190, 98, 105, 30, 191, 31, 130, 50, 62, 245, 146, 237, 61, 119, 199, 46, 191, 231, 109, 54, 60, 102, 254, 84, 190, 63, 37, 68, 190, 166, 135, 96, 62, 21, 166, 4, 62, 161, 116, 159, 190, 31, 100, 38, 62, 186, 97, 14, 190, 44, 153, 244, 61, 70, 184, 80, 62, 242, 141, 55, 62, 185, 58, 135, 189, 88, 68, 137, 190, 163, 188, 189, 61, 211, 186, 80, 190, 33, 65, 152, 62, 210, 246, 160, 61, 25, 60, 32, 191, 191, 7, 177, 190, 118, 74, 55, 62, 200, 139, 36, 191, 174, 37, 208, 61, 34, 225, 59, 188, 51, 72, 118, 60, 236, 245, 0, 61, 89, 168, 141, 191, 88, 31, 205, 61, 161, 1, 42, 62, 99, 86, 103, 62, 174, 91, 146, 190, 223, 114, 226, 61, 21, 75, 131, 62, 42, 115, 173, 188, 246, 66, 195, 189, 59, 164, 32, 62, 167, 62, 131, 61, 236, 63, 232, 61, 30, 43, 91, 62, 79, 144, 132, 62, 90, 67, 124, 62, 49, 227, 71, 191, 86, 119, 180, 62, 172, 186, 244, 61, 235, 173, 100, 62, 172, 239, 7, 192, 71, 115, 25, 191, 45, 79, 138, 191, 196, 116, 48, 63, 6, 66, 129, 191, 227, 81, 84, 62, 29, 168, 216, 190, 210, 174, 108, 190, 92, 22, 213, 191, 186, 253, 31, 190, 28, 38, 41, 188, 236, 174, 166, 62, 130, 192, 85, 190, 143, 4, 160, 190, 230, 204, 148, 62, 250, 62, 51, 62, 114, 163, 107, 60, 42, 242, 71, 190, 68, 32, 7, 191, 146, 213, 168, 60, 81, 218, 1, 191, 114, 53, 211, 62, 182, 163, 116, 62, 66, 116, 100, 190, 241, 36, 246, 62, 105, 243, 70, 62, 83, 200, 15, 62, 86, 210, 45, 190, 80, 173, 29, 62, 212, 150, 166, 190, 183, 234, 140, 190, 197, 131, 103, 62, 164, 216, 37, 191, 51, 150, 58, 61, 232, 36, 39, 62, 27, 176, 7, 189, 24, 19, 163, 190, 9, 182, 233, 61, 118, 248, 8, 63, 170, 218, 26, 62, 215, 177, 81, 191, 79, 185, 236, 190, 45, 147, 201, 190, 253, 186, 106, 190, 9, 75, 92, 189, 225, 47, 153, 61, 104, 17, 35, 190, 44, 92, 99, 61, 55, 227, 148, 190, 131, 196, 146, 190, 63, 105, 141, 190, 133, 232, 237, 60, 237, 242, 206, 189, 184, 38, 148, 62, 156, 214, 86, 62, 137, 22, 135, 189, 6, 166, 236, 61, 7, 39, 94, 63, 26, 215, 94, 190, 36, 245, 113, 189, 126, 139, 246, 62, 50, 29, 131, 62, 55, 228, 241, 61, 155, 143, 171, 190, 150, 55, 8, 61, 164, 81, 206, 61, 134, 235, 29, 62, 161, 24, 91, 187, 183, 64, 107, 62, 133, 206, 44, 60, 234, 167, 248, 60, 89, 209, 214, 61, 43, 95, 49, 189, 39, 4, 85, 62, 137, 230, 141, 188, 29, 32, 115, 189, 141, 181, 180, 59, 102, 79, 153, 190, 243, 141, 254, 60, 183, 166, 54, 62, 122, 190, 251, 190, 140, 143, 181, 190, 187, 93, 199, 190, 200, 140, 167, 189, 1, 19, 133, 61, 5, 31, 217, 62, 117, 207, 92, 60, 21, 183, 73, 190, 186, 39, 190, 61, 148, 243, 173, 62, 212, 110, 149, 62, 16, 193, 87, 62, 105, 180, 159, 189, 36, 145, 238, 62, 195, 234, 168, 190, 49, 188, 9, 62, 132, 124, 2, 192, 91, 161, 5, 190, 62, 38, 234, 190, 157, 57, 172, 62, 55, 166, 124, 190, 195, 222, 124, 61, 160, 248, 195, 62, 173, 134, 97, 62, 132, 46, 3, 192, 16, 239, 142, 190, 249, 123, 208, 61, 154, 90, 199, 59, 60, 127, 10, 191, 114, 9, 122, 62, 203, 63, 112, 190, 118, 7, 174, 190, 239, 243, 70, 62, 50, 149, 213, 62, 73, 203, 255, 62, 199, 109, 102, 61, 54, 250, 185, 62, 83, 90, 180, 190, 93, 193, 211, 190, 146, 231, 216, 62, 17, 134, 244, 189, 140, 241, 138, 191, 203, 211, 93, 62, 151, 147, 67, 62, 122, 230, 161, 62, 134, 52, 162, 190, 159, 245, 86, 61, 106, 61, 203, 190, 107, 6, 127, 190, 194, 203, 133, 62, 37, 225, 41, 62, 90, 132, 16, 190, 6, 246, 20, 62, 157, 194, 187, 189, 30, 65, 40, 191, 248, 171, 15, 188, 184, 74, 55, 191, 100, 190, 23, 189, 155, 33, 148, 62, 250, 110, 182, 61, 110, 39, 44, 190, 78, 37, 108, 62, 95, 254, 245, 61, 229, 69, 52, 190, 117, 216, 81, 62, 190, 118, 149, 62, 97, 239, 152, 188, 0, 136, 68, 62, 13, 60, 109, 189, 17, 205, 170, 190, 111, 47, 201, 189, 31, 3, 12, 62, 232, 111, 194, 190, 90, 40, 249, 191, 158, 177, 36, 62, 86, 97, 202, 61, 247, 117, 2, 63, 202, 128, 8, 190, 63, 246, 154, 189, 158, 168, 172, 190, 178, 102, 154, 62, 7, 85, 66, 189, 199, 22, 167, 189, 130, 20, 6, 61, 82, 27, 153, 189, 19, 142, 224, 61, 56, 179, 82, 190, 208, 52, 31, 189, 157, 78, 54, 61, 4, 217, 141, 62, 132, 137, 140, 62, 229, 178, 1, 190, 171, 230, 166, 190, 99, 7, 138, 62, 233, 22, 64, 59, 240, 20, 44, 190, 204, 220, 32, 62, 112, 239, 26, 58, 212, 142, 16, 190, 183, 227, 78, 61, 124, 214, 0, 63, 45, 133, 69, 190, 144, 237, 172, 189, 93, 61, 23, 62, 3, 155, 41, 190, 21, 84, 152, 189, 56, 222, 220, 62, 150, 5, 206, 62, 225, 30, 199, 61, 43, 227, 86, 190, 28, 42, 109, 60, 197, 76, 214, 61, 64, 151, 20, 62, 17, 118, 147, 61, 36, 47, 120, 189, 148, 71, 144, 190, 118, 50, 49, 189, 30, 192, 236, 60, 143, 43, 41, 190, 118, 154, 202, 189, 195, 19, 225, 61, 204, 140, 17, 62, 226, 210, 33, 62, 4, 43, 66, 62, 86, 0, 135, 61, 89, 84, 31, 190, 137, 238, 181, 189, 158, 189, 9, 62, 65, 18, 61, 190, 193, 229, 192, 60, 253, 10, 41, 190, 7, 238, 212, 189, 33, 193, 58, 189, 161, 157, 16, 190, 230, 201, 140, 61, 143, 181, 4, 190, 10, 23, 150, 61, 234, 229, 146, 61, 158, 195, 4, 190, 250, 187, 164, 189, 43, 51, 5, 62, 90, 232, 66, 190, 173, 53, 107, 190, 239, 36, 60, 61, 217, 3, 114, 189, 150, 2, 104, 188, 73, 35, 114, 189, 88, 134, 226, 61, 103, 26, 180, 189, 136, 35, 84, 61, 91, 125, 11, 62, 223, 215, 209, 189, 134, 221, 132, 188, 55, 60, 174, 61, 207, 192, 221, 189, 49, 42, 116, 190, 19, 24, 75, 62, 206, 8, 47, 61, 144, 19, 191, 60, 27, 75, 43, 62, 91, 89, 21, 62, 195, 206, 174, 191, 214, 217, 98, 190, 56, 211, 117, 62, 209, 46, 29, 191, 237, 194, 211, 62, 170, 204, 239, 61, 230, 74, 32, 191, 111, 120, 148, 62, 199, 10, 0, 191, 215, 114, 170, 189, 206, 0, 72, 190, 211, 168, 140, 62, 125, 40, 85, 189, 217, 158, 57, 62, 63, 183, 21, 62, 165, 211, 165, 61, 230, 139, 70, 61, 220, 66, 52, 62, 72, 126, 136, 61, 182, 79, 239, 188, 189, 241, 205, 60, 116, 83, 195, 62, 21, 133, 212, 61, 112, 212, 93, 61, 117, 139, 163, 189, 153, 25, 13, 190, 237, 163, 118, 191, 14, 162, 50, 59, 250, 215, 39, 62, 56, 159, 31, 189, 135, 1, 62, 190, 211, 189, 193, 190, 48, 174, 155, 62, 129, 177, 240, 62, 100, 252, 83, 191, 17, 196, 179, 189, 30, 221, 163, 61, 38, 180, 173, 61, 96, 10, 41, 62, 33, 184, 6, 62, 237, 230, 186, 190, 144, 73, 138, 190, 154, 98, 125, 190, 76, 158, 98, 190, 255, 107, 219, 62, 45, 130, 137, 62, 145, 26, 68, 189, 242, 22, 106, 190, 135, 27, 77, 62, 105, 112, 237, 190, 102, 248, 216, 62, 18, 40, 16, 188, 228, 168, 166, 191, 3, 0, 105, 191, 135, 163, 140, 60, 73, 137, 70, 191, 222, 220, 101, 62, 162, 128, 167, 62, 206, 196, 69, 190, 141, 205, 216, 189, 1, 86, 9, 61, 114, 162, 108, 61, 247, 82, 201, 190, 183, 135, 146, 62, 154, 13, 251, 62, 199, 175, 5, 63, 187, 82, 151, 189, 104, 138, 117, 62, 224, 205, 209, 190, 203, 77, 66, 190, 81, 118, 204, 62, 47, 19, 201, 190, 174, 99, 17, 192, 236, 82, 121, 62, 243, 176, 255, 61, 128, 89, 135, 61, 113, 193, 202, 190, 252, 108, 161, 61, 141, 159, 217, 190, 169, 148, 94, 62, 54, 199, 151, 62, 38, 137, 137, 61, 30, 200, 60, 190, 90, 20, 66, 62, 106, 124, 134, 62, 8, 164, 187, 190, 134, 146, 14, 190, 209, 32, 171, 62, 66, 67, 77, 62, 48, 185, 202, 62, 228, 120, 220, 189, 102, 187, 216, 61, 117, 44, 228, 188, 104, 243, 247, 60, 97, 195, 170, 62, 19, 69, 170, 190, 63, 141, 50, 190, 213, 43, 118, 190, 35, 82, 248, 190, 239, 26, 252, 190, 247, 72, 145, 62, 16, 118, 128, 62, 103, 114, 19, 190, 109, 58, 207, 62, 168, 165, 92, 62, 150, 201, 9, 61, 66, 154, 228, 190, 74, 66, 232, 61, 92, 34, 160, 62, 254, 16, 16, 190, 216, 141, 176, 62, 101, 69, 177, 189, 197, 15, 120, 61, 224, 182, 188, 188, 54, 126, 141, 189, 2, 172, 53, 189, 219, 68, 176, 190, 25, 175, 153, 62, 255, 193, 125, 62, 171, 22, 9, 190, 140, 234, 96, 190, 147, 27, 14, 190, 113, 6, 96, 190, 32, 251, 153, 62, 175, 162, 200, 62, 209, 251, 33, 62, 67, 25, 137, 62, 113, 218, 235, 190, 50, 94, 153, 189, 11, 107, 233, 190, 96, 89, 173, 190, 46, 40, 186, 190, 32, 193, 13, 63, 6, 116, 63, 186, 185, 245, 184, 60, 69, 30, 164, 62, 142, 177, 157, 191, 151, 80, 193, 190, 155, 118, 201, 191, 110, 205, 32, 62, 60, 216, 49, 62, 163, 162, 99, 189, 49, 254, 54, 190, 37, 28, 56, 60, 205, 48, 235, 61, 159, 186, 19, 190, 76, 145, 171, 189, 132, 197, 57, 62, 254, 74, 154, 190, 145, 62, 198, 62, 189, 200, 194, 61, 249, 123, 15, 190, 207, 122, 30, 62, 6, 207, 5, 62, 171, 109, 131, 191, 54, 155, 11, 190, 160, 85, 0, 190, 43, 185, 1, 189, 143, 249, 166, 61, 232, 60, 230, 189, 200, 133, 10, 190, 146, 39, 50, 61, 92, 44, 160, 61, 79, 14, 158, 187, 67, 177, 192, 188, 153, 53, 174, 61, 28, 190, 18, 190, 222, 60, 47, 190, 80, 1, 139, 61, 145, 170, 106, 190, 74, 13, 169, 61, 226, 198, 183, 189, 85, 190, 137, 189, 6, 83, 225, 189, 64, 62, 19, 190, 203, 180, 139, 61, 112, 92, 2, 61, 202, 101, 36, 190, 202, 182, 33, 62, 14, 124, 9, 62, 113, 160, 170, 189, 219, 9, 11, 62, 87, 3, 167, 61, 38, 28, 20, 60, 97, 54, 125, 61, 3, 212, 3, 190, 99, 29, 191, 189, 30, 98, 0, 62, 135, 222, 233, 61, 178, 219, 181, 188, 249, 234, 200, 60, 215, 67, 26, 61, 180, 146, 95, 191, 107, 166, 30, 60, 230, 209, 13, 62, 26, 154, 208, 60, 146, 212, 130, 62, 116, 150, 55, 185, 2, 212, 163, 190, 144, 26, 240, 61, 233, 133, 177, 62, 182, 4, 79, 60, 166, 249, 70, 190, 38, 152, 12, 63, 252, 179, 17, 190, 114, 126, 3, 191, 238, 22, 73, 191, 89, 219, 108, 62, 177, 88, 38, 61, 129, 157, 149, 62, 252, 245, 55, 61, 170, 98, 240, 60, 13, 178, 68, 62, 114, 229, 10, 62, 101, 159, 47, 62, 95, 101, 88, 61, 24, 234, 48, 191, 37, 99, 45, 190, 191, 132, 176, 190, 172, 163, 192, 189, 152, 101, 37, 190, 99, 50, 12, 62, 120, 69, 19, 189, 213, 183, 188, 189, 65, 37, 215, 61, 233, 73, 56, 190, 110, 165, 33, 189, 36, 230, 35, 62, 197, 26, 10, 62, 200, 58, 45, 190, 116, 148, 49, 189, 20, 191, 112, 61, 85, 108, 215, 60, 193, 237, 170, 62, 119, 38, 13, 62, 8, 124, 18, 189, 65, 130, 165, 189, 235, 231, 201, 189, 166, 154, 41, 62, 130, 12, 235, 189, 18, 128, 132, 61, 78, 251, 75, 61, 201, 181, 68, 190, 46, 45, 153, 61, 13, 93, 133, 61, 162, 223, 27, 190, 228, 91, 46, 62, 209, 226, 227, 189, 194, 214, 30, 190, 5, 174, 159, 189, 67, 36, 53, 62, 252, 21, 237, 189, 1, 41, 137, 61, 32, 208, 41, 190, 40, 221, 210, 61, 104, 241, 151, 61, 116, 246, 42, 190, 251, 27, 98, 61, 85, 171, 41, 61, 236, 31, 5, 62, 70, 92, 172, 189, 208, 217, 244, 189, 116, 127, 191, 189, 233, 245, 126, 189, 210, 5, 82, 188, 226, 214, 250, 187, 41, 151, 192, 189, 96, 60, 7, 189, 129, 207, 55, 190, 167, 150, 16, 190, 186, 17, 191, 189, 107, 216, 140, 61, 78, 62, 7, 61, 160, 255, 2, 190, 199, 36, 187, 61, 249, 233, 47, 189, 194, 14, 13, 190, 138, 119, 50, 61, 159, 43, 112, 189, 189, 97, 61, 190, 4, 164, 52, 190, 205, 173, 162, 59, 103, 117, 135, 189, 124, 33, 37, 59, 78, 92, 162, 61, 194, 107, 180, 190, 38, 217, 174, 189, 220, 107, 244, 190, 90, 21, 151, 61, 46, 55, 190, 62, 236, 175, 147, 191, 119, 2, 141, 62, 8, 27, 2, 190, 89, 105, 167, 189, 214, 156, 69, 62, 148, 70, 123, 60, 211, 218, 33, 190, 6, 23, 174, 60, 98, 48, 156, 189, 173, 44, 75, 62, 208, 85, 44, 61, 174, 148, 208, 61, 174, 26, 1, 62, 142, 188, 71, 191, 223, 250, 115, 191, 214, 219, 137, 61, 61, 91, 12, 190, 169, 24, 24, 190, 64, 234, 156, 191, 106, 28, 153, 61, 214, 171, 14, 61, 200, 206, 38, 190, 17, 189, 183, 188, 195, 139, 150, 190, 241, 198, 108, 61, 165, 17, 93, 61, 106, 27, 230, 189, 185, 107, 97, 189, 79, 105, 137, 189, 199, 13, 39, 62, 20, 122, 126, 61, 194, 219, 19, 62, 19, 155, 186, 60, 95, 208, 81, 189, 34, 236, 172, 188, 237, 145, 35, 190, 78, 205, 33, 190, 39, 102, 5, 190, 200, 253, 135, 61, 63, 169, 24, 190, 10, 227, 237, 187, 214, 25, 29, 189, 141, 190, 204, 189, 186, 83, 33, 190, 38, 141, 232, 189, 165, 37, 29, 61, 199, 193, 131, 189, 152, 78, 210, 189, 138, 214, 29, 62, 103, 101, 253, 61, 106, 81, 194, 189, 164, 24, 29, 190, 30, 111, 250, 60, 89, 32, 177, 61, 172, 69, 12, 62, 219, 80, 38, 189, 57, 186, 165, 189, 126, 76, 3, 190, 219, 244, 167, 188, 237, 201, 72, 189, 162, 239, 234, 189, 160, 136, 219, 62, 30, 59, 86, 62, 185, 152, 81, 62, 65, 197, 89, 62, 215, 33, 88, 62, 214, 15, 111, 191, 32, 172, 70, 191, 53, 13, 46, 62, 151, 86, 112, 191, 123, 117, 210, 191, 107, 42, 161, 62, 249, 39, 17, 62, 140, 192, 193, 189, 60, 83, 54, 189, 26, 49, 8, 62, 60, 21, 240, 190, 111, 140, 144, 62, 143, 9, 140, 62, 232, 118, 164, 62, 29, 124, 20, 187, 218, 14, 72, 60, 155, 65, 60, 62, 131, 114, 145, 190, 100, 69, 64, 191, 179, 5, 50, 62, 80, 247, 166, 62, 85, 135, 120, 62, 166, 79, 103, 188, 83, 243, 249, 188, 230, 200, 149, 61, 138, 221, 25, 190, 185, 137, 135, 61, 178, 27, 252, 190, 215, 193, 250, 61, 227, 209, 196, 62, 109, 30, 171, 191, 133, 215, 43, 62, 23, 142, 22, 62, 114, 33, 19, 190, 224, 52, 160, 62, 34, 133, 124, 61, 205, 209, 21, 190, 129, 26, 67, 190, 179, 183, 171, 188, 51, 164, 206, 61, 75, 179, 78, 190, 185, 39, 72, 61, 67, 203, 91, 188, 107, 75, 54, 191, 45, 207, 143, 191, 38, 219, 81, 190, 112, 247, 185, 60, 64, 178, 67, 61, 35, 192, 155, 191, 11, 246, 78, 61, 80, 196, 14, 61, 126, 83, 14, 190, 129, 48, 241, 60, 244, 179, 203, 190, 221, 90, 1, 189, 124, 24, 177, 61, 136, 6, 151, 189, 148, 230, 200, 61, 40, 36, 251, 188, 195, 108, 148, 189, 193, 15, 155, 188, 103, 255, 21, 190, 11, 115, 195, 61, 156, 166, 11, 190, 106, 209, 250, 61, 157, 44, 161, 61, 83, 48, 21, 60, 44, 52, 254, 59, 123, 130, 130, 189, 147, 156, 41, 190, 184, 8, 10, 190, 23, 253, 94, 189, 126, 126, 236, 61, 103, 89, 162, 189, 72, 182, 134, 188, 225, 81, 51, 190, 88, 144, 11, 190, 218, 199, 84, 188, 145, 138, 248, 61, 26, 112, 242, 189, 157, 148, 26, 190, 55, 142, 151, 61, 186, 87, 202, 189, 26, 162, 79, 61, 187, 26, 71, 188, 97, 44, 186, 61, 7, 176, 35, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 76, 212, 61, 88, 83, 122, 61, 255, 232, 238, 61, 19, 71, 62, 61, 193, 82, 174, 61, 115, 176, 152, 61, 140, 160, 72, 190, 179, 87, 143, 189, 67, 120, 93, 189, 139, 151, 1, 62, 60, 159, 137, 61, 140, 125, 17, 61, 132, 226, 144, 186, 102, 185, 3, 62, 239, 163, 97, 62, 212, 216, 114, 62, 171, 40, 92, 62, 140, 51, 142, 189, 92, 226, 167, 189, 247, 151, 79, 190, 121, 56, 97, 62, 136, 161, 18, 60, 128, 235, 146, 190, 87, 2, 245, 189, 172, 188, 48, 189, 136, 63, 42, 62, 226, 119, 212, 61, 133, 51, 53, 61, 120, 234, 154, 189, 114, 10, 142, 62, 53, 99, 65, 188, 221, 120, 52, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 79, 76, 191, 177, 60, 217, 60, 40, 184, 17, 63, 114, 144, 107, 191, 115, 201, 217, 190, 134, 83, 168, 190, 83, 72, 94, 63, 57, 57, 174, 190, 247, 223, 209, 189, 49, 195, 145, 62, 199, 142, 118, 191, 6, 4, 60, 191, 221, 168, 187, 189, 39, 164, 99, 191, 51, 41, 84, 63, 165, 80, 173, 62, 208, 176, 154, 61, 175, 223, 76, 61, 224, 127, 74, 63, 42, 0, 89, 63, 39, 197, 58, 63, 235, 201, 45, 190, 136, 9, 35, 191, 213, 129, 12, 61, 49, 208, 148, 190, 131, 250, 94, 60, 180, 66, 237, 61, 150, 232, 198, 62, 138, 74, 109, 189, 97, 79, 0, 63, 6, 182, 159, 62, 89, 146, 136, 61, 99, 131, 17, 61, 164, 51, 9, 191, 239, 162, 22, 62, 202, 1, 85, 61, 191, 211, 200, 190, 19, 6, 239, 189, 15, 1, 33, 61, 253, 240, 108, 190, 3, 77, 243, 60, 1, 32, 126, 190, 175, 250, 2, 62, 8, 27, 227, 189, 159, 79, 46, 61, 223, 182, 211, 62, 76, 68, 194, 61, 236, 235, 48, 188, 232, 40, 39, 190, 112, 38, 223, 61, 130, 67, 194, 189, 72, 50, 200, 62, 220, 248, 127, 62, 226, 41, 197, 190, 127, 229, 29, 189, 191, 60, 96, 61, 71, 186, 15, 62, 208, 72, 82, 190, 107, 211, 117, 61, 215, 99, 95, 188, 93, 235, 194, 189, 198, 18, 198, 188, 43, 134, 73, 61, 174, 139, 5, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 157, 140, 188, 225, 233, 1, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {146, 101, 222, 190, 22, 204, 46, 63, 115, 244, 205, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {99, 195, 70, 64, 6, 82, 170, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0025/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}