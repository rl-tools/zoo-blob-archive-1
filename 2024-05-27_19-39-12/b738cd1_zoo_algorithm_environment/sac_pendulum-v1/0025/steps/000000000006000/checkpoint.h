// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 100, 139, 187, 153, 164, 18, 63, 42, 41, 27, 63, 105, 109, 228, 62, 38, 39, 244, 190, 41, 111, 243, 62, 140, 46, 167, 190, 137, 108, 60, 63, 185, 209, 90, 190, 89, 132, 180, 62, 173, 23, 149, 62, 121, 104, 244, 62, 117, 78, 45, 191, 233, 105, 241, 62, 197, 160, 220, 188, 252, 156, 98, 63, 254, 89, 75, 191, 32, 19, 137, 190, 229, 41, 28, 63, 179, 201, 21, 191, 131, 111, 12, 191, 69, 237, 252, 190, 234, 26, 137, 62, 0, 208, 151, 61, 73, 126, 3, 191, 73, 9, 13, 191, 76, 13, 241, 61, 231, 174, 91, 62, 251, 32, 9, 63, 217, 113, 125, 190, 87, 168, 85, 60, 83, 183, 216, 62, 173, 27, 131, 190, 87, 72, 80, 63, 182, 76, 240, 190, 4, 247, 19, 191, 154, 17, 89, 189, 92, 199, 19, 63, 11, 155, 162, 190, 165, 26, 221, 190, 114, 215, 176, 191, 164, 214, 186, 190, 78, 142, 143, 190, 144, 194, 228, 62, 104, 50, 135, 189, 2, 18, 18, 191, 99, 26, 10, 191, 228, 184, 26, 188, 207, 52, 6, 62, 107, 209, 177, 63, 89, 88, 238, 189, 13, 25, 188, 62, 98, 120, 45, 191, 139, 216, 44, 63, 130, 189, 173, 62, 209, 146, 218, 189, 14, 65, 32, 191, 224, 36, 57, 190, 40, 110, 34, 190, 212, 151, 83, 191, 219, 83, 116, 190, 175, 125, 152, 63, 87, 69, 34, 63, 102, 235, 56, 60, 53, 134, 152, 190, 131, 250, 55, 63, 181, 196, 25, 189, 138, 254, 87, 63, 145, 177, 57, 63, 117, 227, 195, 190, 4, 48, 37, 190, 165, 168, 35, 63, 204, 65, 140, 62, 253, 247, 135, 190, 249, 200, 92, 63, 54, 190, 6, 191, 212, 161, 163, 62, 83, 148, 213, 61, 227, 150, 131, 63, 158, 83, 158, 63, 20, 80, 199, 62, 111, 62, 32, 63, 201, 249, 7, 63, 59, 188, 166, 190, 98, 76, 190, 190, 50, 216, 142, 63, 82, 39, 244, 62, 207, 153, 181, 189, 69, 232, 181, 61, 220, 78, 177, 190, 130, 165, 83, 190, 150, 48, 240, 190, 212, 220, 24, 63, 10, 15, 133, 190, 39, 18, 4, 191, 80, 167, 82, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 166, 11, 191, 109, 128, 139, 62, 219, 157, 41, 62, 144, 76, 122, 62, 43, 240, 135, 62, 131, 39, 184, 62, 213, 85, 79, 191, 177, 209, 234, 62, 102, 79, 219, 62, 168, 64, 193, 188, 188, 35, 37, 190, 95, 86, 150, 62, 89, 31, 142, 190, 148, 21, 133, 190, 104, 156, 27, 62, 86, 169, 163, 62, 209, 208, 21, 63, 182, 38, 211, 62, 231, 137, 175, 190, 15, 253, 26, 190, 230, 233, 66, 188, 225, 207, 29, 190, 186, 98, 135, 62, 247, 61, 175, 190, 39, 52, 165, 62, 155, 143, 26, 63, 0, 184, 151, 187, 66, 224, 6, 63, 139, 12, 57, 190, 20, 67, 78, 190, 82, 163, 194, 190, 243, 63, 241, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 49, 22, 61, 68, 246, 210, 190, 137, 28, 80, 62, 86, 212, 241, 62, 54, 52, 143, 187, 120, 150, 195, 190, 197, 99, 34, 191, 135, 53, 250, 61, 110, 142, 228, 188, 129, 107, 91, 62, 78, 164, 89, 62, 146, 214, 195, 189, 0, 110, 156, 62, 232, 86, 54, 62, 72, 206, 42, 62, 215, 219, 255, 189, 160, 115, 1, 62, 45, 90, 121, 62, 207, 8, 112, 190, 155, 196, 103, 62, 97, 10, 236, 190, 223, 242, 10, 191, 19, 243, 59, 189, 39, 111, 8, 60, 113, 67, 175, 190, 166, 180, 11, 190, 43, 136, 142, 62, 216, 98, 44, 62, 34, 11, 234, 190, 31, 191, 219, 190, 229, 33, 116, 190, 56, 197, 234, 189, 49, 43, 131, 190, 197, 206, 19, 189, 64, 206, 37, 61, 150, 88, 27, 62, 4, 75, 224, 190, 32, 140, 89, 62, 103, 220, 138, 189, 43, 164, 136, 190, 73, 167, 188, 189, 29, 127, 168, 189, 138, 156, 31, 190, 60, 214, 111, 60, 110, 8, 178, 61, 23, 22, 147, 61, 7, 233, 137, 60, 94, 24, 242, 61, 189, 83, 208, 61, 146, 88, 32, 62, 179, 233, 44, 190, 150, 254, 127, 62, 152, 84, 156, 190, 26, 3, 70, 190, 75, 200, 63, 61, 125, 40, 152, 60, 238, 73, 137, 61, 28, 187, 122, 190, 41, 223, 41, 62, 17, 9, 214, 61, 102, 61, 116, 190, 244, 172, 17, 190, 222, 25, 194, 189, 155, 127, 52, 187, 208, 221, 2, 191, 234, 62, 150, 62, 125, 64, 72, 61, 191, 162, 182, 190, 155, 226, 92, 188, 247, 75, 185, 62, 176, 50, 48, 62, 225, 40, 182, 60, 112, 255, 162, 62, 153, 203, 211, 190, 128, 186, 156, 190, 178, 47, 152, 62, 70, 234, 185, 190, 203, 230, 191, 189, 233, 234, 63, 62, 237, 168, 136, 62, 203, 81, 24, 62, 128, 45, 131, 190, 20, 148, 198, 62, 24, 8, 2, 190, 92, 129, 120, 62, 95, 251, 158, 62, 155, 193, 254, 61, 173, 128, 164, 190, 61, 187, 130, 61, 242, 149, 37, 190, 153, 75, 242, 190, 157, 57, 195, 190, 207, 155, 141, 62, 129, 154, 158, 62, 87, 120, 160, 62, 20, 33, 118, 185, 8, 134, 47, 62, 252, 98, 157, 190, 248, 88, 195, 189, 139, 29, 159, 61, 175, 27, 136, 61, 180, 233, 158, 60, 150, 53, 168, 61, 0, 242, 150, 62, 198, 223, 103, 61, 214, 100, 154, 189, 238, 139, 226, 189, 170, 23, 109, 189, 229, 145, 4, 62, 248, 57, 212, 61, 107, 151, 51, 190, 164, 68, 68, 62, 86, 190, 217, 190, 166, 164, 83, 63, 111, 252, 56, 62, 103, 248, 107, 62, 229, 130, 144, 191, 180, 150, 30, 191, 72, 251, 253, 190, 119, 137, 179, 62, 193, 108, 106, 191, 142, 85, 105, 62, 120, 40, 9, 191, 119, 224, 39, 61, 120, 195, 97, 191, 170, 41, 25, 187, 143, 158, 177, 190, 152, 6, 34, 62, 166, 186, 0, 190, 134, 48, 208, 61, 66, 100, 51, 190, 219, 77, 102, 62, 83, 1, 79, 190, 70, 157, 135, 62, 28, 80, 45, 60, 142, 200, 100, 190, 157, 26, 136, 190, 46, 143, 83, 62, 115, 220, 240, 60, 0, 240, 116, 61, 80, 105, 226, 61, 176, 129, 5, 190, 254, 130, 218, 189, 53, 216, 28, 191, 141, 51, 54, 62, 225, 54, 146, 62, 151, 55, 131, 61, 59, 249, 52, 190, 9, 44, 116, 190, 27, 19, 57, 62, 66, 163, 74, 189, 158, 245, 164, 189, 229, 108, 144, 59, 30, 85, 142, 189, 226, 147, 162, 61, 28, 127, 128, 62, 200, 168, 99, 190, 161, 71, 188, 61, 17, 14, 54, 190, 94, 99, 71, 60, 168, 106, 2, 190, 131, 5, 42, 62, 239, 19, 174, 190, 54, 18, 76, 61, 95, 169, 207, 189, 95, 31, 62, 188, 102, 24, 83, 190, 183, 36, 254, 61, 74, 123, 77, 61, 11, 8, 223, 187, 102, 209, 124, 190, 242, 6, 168, 189, 231, 84, 164, 189, 187, 7, 97, 62, 145, 73, 250, 189, 126, 90, 137, 190, 231, 180, 96, 62, 22, 222, 16, 62, 211, 220, 156, 189, 104, 97, 235, 190, 204, 248, 244, 61, 106, 173, 40, 61, 94, 22, 68, 62, 151, 223, 60, 189, 241, 202, 44, 62, 77, 50, 113, 61, 190, 177, 32, 188, 79, 159, 46, 189, 168, 121, 211, 187, 211, 166, 195, 190, 137, 131, 17, 62, 66, 21, 6, 61, 223, 68, 154, 189, 32, 231, 237, 188, 197, 195, 66, 189, 121, 201, 20, 62, 87, 194, 204, 189, 53, 233, 16, 191, 188, 100, 178, 188, 43, 224, 22, 190, 81, 245, 3, 191, 64, 93, 132, 61, 193, 215, 133, 189, 174, 76, 88, 190, 104, 60, 192, 61, 205, 0, 134, 189, 226, 61, 64, 189, 240, 25, 188, 190, 62, 4, 142, 62, 191, 61, 186, 61, 57, 1, 206, 189, 8, 204, 166, 61, 219, 40, 171, 189, 250, 123, 248, 189, 56, 61, 211, 61, 1, 117, 228, 189, 136, 198, 1, 190, 17, 50, 33, 190, 144, 141, 107, 62, 152, 110, 90, 62, 11, 75, 87, 61, 180, 230, 4, 190, 248, 125, 11, 60, 39, 245, 180, 190, 171, 108, 167, 190, 89, 68, 236, 188, 172, 229, 149, 190, 152, 48, 115, 62, 253, 229, 123, 190, 196, 64, 17, 62, 32, 203, 247, 61, 34, 78, 172, 189, 124, 174, 83, 190, 141, 54, 100, 62, 18, 13, 142, 189, 148, 225, 178, 61, 153, 113, 87, 190, 24, 253, 183, 189, 153, 200, 142, 190, 217, 65, 141, 190, 170, 210, 197, 61, 21, 84, 71, 61, 185, 4, 2, 190, 64, 67, 155, 189, 92, 135, 147, 189, 221, 43, 212, 189, 192, 116, 129, 189, 242, 0, 25, 190, 160, 215, 6, 61, 44, 228, 76, 190, 65, 12, 187, 62, 133, 94, 169, 188, 96, 54, 246, 190, 115, 233, 86, 60, 101, 81, 92, 190, 6, 103, 50, 190, 99, 166, 242, 189, 21, 253, 213, 189, 125, 158, 226, 187, 254, 101, 172, 61, 6, 172, 0, 190, 182, 220, 4, 190, 49, 110, 33, 61, 1, 40, 42, 190, 39, 250, 145, 189, 16, 1, 4, 190, 27, 18, 167, 188, 155, 35, 51, 190, 149, 219, 153, 189, 62, 234, 206, 189, 161, 174, 117, 61, 14, 52, 245, 61, 241, 180, 29, 190, 231, 15, 186, 189, 60, 229, 143, 61, 43, 57, 130, 60, 159, 218, 236, 189, 19, 50, 172, 61, 98, 191, 181, 188, 39, 168, 243, 61, 140, 7, 241, 189, 47, 39, 230, 61, 81, 41, 161, 61, 149, 120, 133, 189, 31, 69, 223, 188, 157, 210, 11, 62, 150, 60, 228, 59, 216, 116, 29, 61, 178, 19, 212, 189, 76, 159, 43, 62, 13, 189, 144, 190, 47, 172, 233, 189, 198, 76, 6, 191, 11, 176, 116, 62, 105, 233, 100, 61, 25, 234, 209, 190, 72, 251, 11, 189, 132, 3, 53, 190, 104, 121, 130, 190, 103, 205, 103, 62, 134, 206, 129, 61, 59, 120, 159, 61, 249, 150, 107, 60, 86, 197, 255, 188, 57, 64, 179, 61, 141, 198, 117, 62, 218, 161, 79, 62, 228, 251, 77, 189, 215, 30, 39, 190, 6, 146, 16, 62, 38, 27, 76, 190, 109, 67, 93, 62, 36, 55, 25, 62, 64, 175, 237, 190, 211, 8, 137, 190, 179, 121, 9, 62, 244, 196, 40, 190, 156, 129, 252, 61, 101, 134, 73, 189, 35, 222, 84, 62, 75, 213, 163, 61, 210, 135, 84, 191, 183, 79, 157, 187, 71, 247, 196, 62, 1, 182, 135, 62, 245, 219, 207, 190, 216, 23, 199, 61, 236, 1, 156, 62, 123, 219, 83, 61, 160, 105, 114, 190, 201, 215, 119, 61, 74, 50, 105, 60, 50, 123, 1, 60, 175, 158, 22, 62, 251, 94, 16, 62, 117, 11, 86, 62, 151, 230, 136, 191, 123, 2, 10, 63, 138, 32, 175, 61, 194, 52, 80, 62, 118, 138, 149, 191, 213, 197, 8, 191, 39, 200, 223, 190, 170, 196, 97, 63, 205, 61, 123, 191, 241, 89, 136, 62, 180, 49, 180, 190, 91, 175, 156, 190, 18, 189, 141, 191, 0, 223, 67, 190, 206, 21, 133, 188, 244, 96, 136, 62, 148, 20, 72, 59, 153, 175, 44, 190, 178, 56, 81, 62, 119, 92, 84, 62, 216, 92, 18, 62, 57, 58, 217, 189, 98, 215, 205, 190, 48, 173, 28, 62, 165, 15, 83, 190, 121, 46, 179, 62, 78, 105, 111, 62, 174, 121, 103, 190, 179, 76, 242, 62, 221, 176, 154, 189, 170, 224, 248, 59, 101, 101, 112, 190, 58, 45, 229, 60, 98, 145, 199, 189, 143, 90, 164, 190, 1, 254, 91, 62, 179, 184, 128, 190, 195, 83, 171, 190, 41, 90, 192, 189, 119, 63, 208, 184, 78, 84, 120, 190, 188, 228, 189, 61, 8, 151, 150, 62, 238, 77, 215, 61, 63, 10, 175, 190, 89, 12, 3, 191, 45, 147, 201, 190, 167, 200, 251, 188, 44, 166, 255, 187, 175, 189, 211, 188, 73, 168, 172, 190, 116, 237, 158, 61, 31, 142, 5, 190, 201, 15, 180, 190, 27, 134, 20, 190, 199, 230, 184, 61, 78, 240, 163, 188, 72, 92, 45, 62, 4, 28, 29, 62, 223, 243, 184, 189, 159, 249, 125, 59, 132, 205, 233, 62, 88, 166, 64, 190, 252, 10, 6, 59, 186, 19, 223, 62, 243, 21, 65, 62, 106, 10, 138, 61, 6, 232, 173, 190, 108, 110, 85, 61, 198, 87, 164, 61, 247, 88, 93, 62, 252, 53, 171, 61, 200, 239, 47, 62, 137, 148, 188, 61, 56, 99, 0, 61, 43, 50, 223, 61, 61, 213, 17, 189, 235, 35, 11, 62, 51, 84, 178, 60, 211, 174, 55, 190, 99, 254, 182, 61, 17, 0, 85, 190, 92, 109, 212, 188, 152, 87, 126, 62, 30, 56, 2, 190, 111, 37, 146, 190, 39, 178, 58, 190, 210, 174, 187, 58, 219, 245, 189, 61, 92, 77, 221, 62, 25, 33, 180, 61, 14, 141, 18, 190, 184, 49, 41, 62, 35, 109, 34, 62, 5, 249, 17, 62, 251, 13, 70, 62, 240, 114, 64, 190, 239, 26, 0, 63, 146, 11, 141, 190, 107, 213, 74, 62, 74, 107, 51, 191, 174, 31, 80, 190, 179, 141, 46, 190, 90, 147, 147, 62, 150, 202, 138, 190, 41, 135, 128, 61, 103, 83, 170, 188, 130, 183, 116, 62, 188, 113, 75, 191, 78, 181, 90, 190, 77, 16, 143, 188, 191, 12, 216, 61, 231, 227, 10, 191, 78, 223, 142, 62, 239, 244, 139, 61, 217, 2, 159, 190, 141, 1, 186, 61, 31, 180, 183, 62, 11, 36, 207, 61, 71, 242, 179, 61, 17, 147, 240, 61, 139, 179, 16, 190, 141, 93, 191, 190, 249, 40, 157, 62, 163, 133, 236, 188, 88, 239, 53, 191, 120, 0, 45, 62, 57, 243, 198, 189, 181, 212, 145, 62, 24, 11, 150, 190, 80, 182, 30, 61, 158, 204, 228, 190, 100, 13, 176, 61, 60, 181, 159, 62, 98, 73, 131, 62, 128, 138, 105, 190, 228, 37, 92, 62, 20, 94, 134, 189, 94, 191, 34, 191, 146, 116, 218, 189, 90, 30, 147, 61, 186, 220, 193, 61, 97, 41, 105, 62, 34, 158, 102, 187, 153, 245, 39, 190, 57, 242, 162, 62, 188, 67, 110, 62, 198, 242, 28, 190, 1, 79, 247, 188, 178, 225, 138, 62, 140, 103, 76, 190, 171, 41, 248, 61, 121, 111, 185, 189, 201, 198, 86, 190, 104, 250, 39, 190, 193, 2, 168, 61, 41, 214, 207, 190, 178, 215, 77, 191, 93, 113, 80, 188, 155, 31, 73, 61, 192, 108, 229, 62, 79, 115, 142, 189, 146, 14, 245, 188, 199, 5, 192, 190, 154, 41, 147, 62, 70, 128, 177, 60, 168, 144, 64, 189, 116, 43, 178, 188, 240, 173, 157, 59, 123, 60, 16, 61, 182, 130, 84, 190, 189, 231, 219, 189, 170, 6, 58, 186, 151, 237, 142, 62, 242, 195, 135, 62, 87, 121, 82, 189, 85, 120, 138, 190, 37, 108, 184, 62, 25, 239, 27, 188, 9, 16, 15, 190, 103, 29, 200, 188, 76, 238, 118, 61, 145, 10, 23, 190, 238, 74, 255, 60, 187, 29, 185, 62, 134, 188, 37, 190, 95, 30, 4, 190, 124, 166, 37, 62, 170, 103, 80, 190, 123, 201, 100, 61, 144, 65, 132, 62, 186, 249, 139, 62, 183, 191, 132, 61, 245, 212, 6, 190, 118, 184, 91, 61, 244, 200, 171, 61, 198, 197, 80, 62, 134, 133, 32, 62, 127, 61, 15, 189, 42, 67, 144, 190, 222, 115, 82, 61, 150, 176, 73, 188, 133, 233, 34, 190, 74, 42, 0, 190, 123, 145, 17, 62, 74, 178, 39, 62, 164, 198, 86, 62, 185, 118, 76, 62, 86, 0, 135, 61, 89, 84, 31, 190, 137, 238, 181, 189, 158, 189, 9, 62, 65, 18, 61, 190, 193, 229, 192, 60, 253, 10, 41, 190, 7, 238, 212, 189, 33, 193, 58, 189, 161, 157, 16, 190, 230, 201, 140, 61, 143, 181, 4, 190, 10, 23, 150, 61, 234, 229, 146, 61, 158, 195, 4, 190, 250, 187, 164, 189, 43, 51, 5, 62, 90, 232, 66, 190, 173, 53, 107, 190, 239, 36, 60, 61, 217, 3, 114, 189, 150, 2, 104, 188, 73, 35, 114, 189, 88, 134, 226, 61, 103, 26, 180, 189, 136, 35, 84, 61, 91, 125, 11, 62, 223, 215, 209, 189, 134, 221, 132, 188, 55, 60, 174, 61, 207, 192, 221, 189, 49, 42, 116, 190, 35, 64, 174, 61, 46, 110, 3, 62, 2, 1, 18, 190, 169, 47, 226, 61, 143, 36, 25, 190, 44, 145, 34, 191, 92, 191, 116, 188, 244, 195, 152, 60, 103, 247, 245, 190, 221, 23, 120, 62, 151, 102, 181, 60, 59, 226, 230, 190, 251, 170, 110, 62, 156, 116, 47, 189, 151, 75, 148, 190, 71, 7, 90, 190, 235, 251, 246, 61, 237, 248, 4, 189, 118, 98, 62, 62, 185, 188, 14, 62, 25, 184, 188, 189, 131, 121, 127, 60, 209, 134, 1, 62, 9, 193, 97, 60, 27, 51, 50, 189, 134, 181, 20, 190, 131, 26, 155, 62, 129, 16, 120, 61, 95, 135, 245, 189, 65, 104, 155, 189, 115, 94, 82, 190, 14, 113, 224, 190, 233, 90, 254, 189, 124, 186, 29, 61, 47, 223, 185, 189, 173, 47, 35, 190, 117, 25, 152, 190, 105, 57, 129, 62, 82, 132, 169, 62, 93, 208, 6, 191, 2, 116, 233, 190, 92, 128, 92, 61, 22, 148, 62, 60, 164, 186, 6, 62, 177, 113, 127, 61, 199, 156, 101, 189, 189, 179, 154, 190, 234, 254, 57, 190, 105, 113, 229, 189, 128, 116, 135, 62, 101, 96, 116, 62, 238, 129, 173, 189, 105, 110, 150, 188, 36, 84, 167, 61, 32, 121, 226, 189, 232, 176, 18, 62, 5, 31, 230, 189, 5, 10, 96, 191, 38, 8, 152, 190, 45, 163, 83, 61, 77, 67, 3, 190, 47, 142, 93, 62, 201, 79, 30, 62, 198, 221, 154, 190, 79, 150, 87, 190, 196, 41, 175, 61, 152, 254, 149, 62, 211, 166, 219, 190, 199, 4, 254, 60, 52, 233, 214, 62, 69, 105, 24, 62, 101, 188, 20, 190, 234, 118, 21, 62, 11, 44, 28, 190, 182, 51, 12, 190, 67, 161, 159, 62, 194, 215, 148, 190, 156, 52, 121, 191, 128, 177, 198, 61, 9, 148, 162, 60, 64, 63, 18, 61, 130, 254, 194, 190, 89, 151, 55, 61, 74, 156, 1, 191, 0, 31, 5, 62, 211, 57, 165, 62, 205, 27, 34, 61, 217, 123, 142, 190, 121, 123, 92, 62, 105, 141, 66, 62, 248, 9, 190, 190, 69, 184, 57, 190, 227, 58, 93, 62, 44, 136, 56, 62, 60, 133, 187, 62, 78, 75, 186, 189, 221, 76, 48, 61, 84, 158, 186, 189, 64, 214, 54, 189, 57, 229, 158, 62, 26, 10, 125, 189, 247, 151, 201, 189, 12, 3, 62, 190, 118, 170, 83, 190, 125, 217, 98, 189, 36, 206, 16, 62, 182, 229, 84, 62, 92, 239, 225, 189, 36, 151, 185, 62, 27, 129, 82, 62, 48, 146, 52, 62, 102, 123, 244, 189, 48, 140, 24, 62, 29, 125, 137, 62, 1, 218, 121, 190, 146, 29, 150, 62, 199, 206, 231, 60, 179, 100, 150, 189, 163, 253, 60, 189, 61, 187, 41, 189, 65, 53, 0, 190, 150, 205, 2, 190, 11, 194, 141, 62, 193, 83, 138, 62, 28, 28, 6, 189, 182, 164, 158, 190, 224, 196, 24, 190, 25, 96, 219, 189, 19, 72, 53, 62, 65, 58, 133, 62, 28, 11, 151, 61, 86, 213, 105, 62, 226, 106, 163, 61, 199, 208, 253, 188, 140, 42, 114, 190, 141, 28, 131, 189, 253, 108, 224, 189, 98, 16, 209, 62, 121, 32, 54, 189, 186, 196, 61, 61, 36, 175, 125, 62, 76, 246, 3, 191, 202, 51, 26, 190, 46, 90, 138, 191, 193, 2, 75, 62, 227, 106, 144, 61, 177, 42, 149, 189, 89, 119, 69, 190, 125, 8, 219, 61, 43, 57, 234, 188, 119, 61, 14, 190, 251, 202, 216, 189, 53, 188, 125, 61, 253, 207, 90, 189, 23, 69, 179, 62, 145, 64, 209, 61, 94, 182, 84, 60, 99, 222, 190, 61, 83, 77, 100, 61, 139, 211, 115, 191, 54, 155, 11, 190, 160, 85, 0, 190, 43, 185, 1, 189, 143, 249, 166, 61, 232, 60, 230, 189, 200, 133, 10, 190, 146, 39, 50, 61, 92, 44, 160, 61, 79, 14, 158, 187, 67, 177, 192, 188, 153, 53, 174, 61, 28, 190, 18, 190, 222, 60, 47, 190, 80, 1, 139, 61, 145, 170, 106, 190, 74, 13, 169, 61, 226, 198, 183, 189, 85, 190, 137, 189, 6, 83, 225, 189, 64, 62, 19, 190, 203, 180, 139, 61, 112, 92, 2, 61, 202, 101, 36, 190, 202, 182, 33, 62, 14, 124, 9, 62, 113, 160, 170, 189, 219, 9, 11, 62, 87, 3, 167, 61, 38, 28, 20, 60, 97, 54, 125, 61, 3, 212, 3, 190, 99, 29, 191, 189, 176, 62, 30, 62, 145, 177, 44, 62, 211, 55, 205, 190, 206, 192, 84, 61, 170, 198, 79, 189, 42, 36, 179, 190, 78, 34, 3, 61, 225, 146, 173, 61, 86, 230, 149, 61, 2, 212, 130, 62, 28, 18, 101, 189, 172, 122, 151, 189, 162, 236, 132, 187, 200, 168, 12, 63, 108, 86, 55, 190, 37, 13, 57, 190, 54, 82, 184, 62, 132, 147, 120, 189, 18, 238, 8, 61, 15, 61, 0, 191, 221, 98, 11, 62, 124, 155, 193, 61, 211, 199, 106, 62, 19, 222, 1, 62, 139, 49, 183, 61, 210, 121, 13, 62, 103, 102, 205, 60, 89, 193, 69, 189, 136, 199, 129, 188, 186, 77, 69, 190, 156, 154, 204, 189, 139, 113, 3, 190, 168, 131, 27, 189, 162, 227, 77, 189, 210, 64, 133, 61, 115, 47, 24, 61, 32, 213, 136, 60, 145, 198, 73, 62, 164, 16, 39, 190, 15, 191, 160, 61, 138, 21, 193, 60, 69, 73, 200, 61, 12, 39, 63, 190, 167, 9, 220, 59, 182, 174, 93, 61, 6, 178, 124, 60, 229, 241, 129, 62, 117, 145, 16, 61, 165, 217, 151, 188, 224, 154, 249, 184, 156, 208, 201, 189, 82, 238, 19, 62, 70, 61, 78, 189, 69, 120, 139, 61, 248, 210, 155, 61, 6, 28, 53, 190, 143, 235, 51, 62, 61, 90, 232, 61, 189, 144, 64, 189, 125, 251, 88, 62, 114, 11, 151, 189, 168, 5, 253, 189, 30, 99, 147, 187, 45, 98, 27, 62, 252, 21, 237, 189, 190, 179, 146, 61, 179, 153, 42, 190, 201, 135, 214, 61, 135, 153, 159, 61, 116, 246, 42, 190, 251, 27, 98, 61, 126, 109, 62, 61, 25, 100, 13, 62, 70, 92, 172, 189, 208, 217, 244, 189, 116, 127, 191, 189, 233, 245, 126, 189, 166, 84, 54, 188, 17, 86, 235, 187, 3, 164, 178, 189, 20, 63, 8, 189, 198, 109, 47, 190, 167, 150, 16, 190, 146, 76, 193, 189, 107, 216, 140, 61, 90, 183, 27, 61, 0, 27, 0, 190, 125, 120, 197, 61, 14, 128, 10, 189, 70, 246, 6, 190, 138, 119, 50, 61, 159, 43, 112, 189, 189, 97, 61, 190, 4, 164, 52, 190, 202, 79, 35, 60, 49, 244, 120, 189, 18, 63, 173, 61, 71, 1, 206, 61, 111, 255, 154, 190, 188, 151, 170, 189, 49, 182, 195, 190, 161, 27, 112, 61, 26, 134, 153, 62, 17, 206, 36, 191, 143, 200, 109, 190, 147, 205, 69, 189, 60, 191, 204, 189, 218, 38, 35, 62, 104, 191, 212, 187, 64, 23, 4, 190, 175, 243, 163, 189, 114, 28, 15, 190, 70, 38, 57, 62, 44, 198, 215, 61, 133, 133, 18, 62, 156, 28, 19, 62, 21, 157, 140, 190, 48, 190, 122, 190, 72, 118, 36, 61, 32, 225, 240, 189, 147, 74, 76, 189, 215, 179, 98, 191, 159, 99, 33, 61, 100, 70, 143, 188, 170, 96, 148, 60, 50, 236, 190, 60, 174, 234, 96, 190, 11, 115, 4, 62, 165, 17, 93, 61, 106, 27, 230, 189, 185, 107, 97, 189, 79, 105, 137, 189, 199, 13, 39, 62, 20, 122, 126, 61, 194, 219, 19, 62, 19, 155, 186, 60, 95, 208, 81, 189, 34, 236, 172, 188, 237, 145, 35, 190, 78, 205, 33, 190, 39, 102, 5, 190, 200, 253, 135, 61, 63, 169, 24, 190, 10, 227, 237, 187, 214, 25, 29, 189, 141, 190, 204, 189, 186, 83, 33, 190, 38, 141, 232, 189, 165, 37, 29, 61, 199, 193, 131, 189, 152, 78, 210, 189, 138, 214, 29, 62, 103, 101, 253, 61, 106, 81, 194, 189, 164, 24, 29, 190, 30, 111, 250, 60, 89, 32, 177, 61, 172, 69, 12, 62, 219, 80, 38, 189, 57, 186, 165, 189, 85, 121, 249, 189, 47, 141, 69, 189, 253, 244, 36, 62, 223, 108, 42, 190, 33, 186, 99, 62, 43, 245, 68, 61, 241, 119, 128, 61, 173, 146, 209, 61, 34, 41, 197, 61, 223, 27, 60, 191, 21, 103, 149, 190, 230, 134, 18, 62, 132, 31, 179, 190, 199, 234, 135, 191, 26, 135, 148, 62, 172, 233, 68, 188, 188, 96, 24, 189, 40, 203, 225, 189, 47, 86, 190, 61, 187, 38, 45, 191, 106, 73, 134, 62, 172, 2, 122, 62, 81, 8, 152, 62, 114, 189, 88, 189, 130, 59, 50, 189, 76, 75, 137, 61, 28, 46, 123, 190, 101, 212, 229, 190, 240, 195, 22, 62, 114, 74, 53, 189, 123, 78, 109, 62, 220, 148, 125, 190, 13, 184, 89, 61, 187, 225, 196, 61, 162, 230, 209, 189, 17, 38, 131, 61, 61, 63, 205, 190, 186, 224, 225, 61, 122, 41, 162, 62, 84, 188, 89, 191, 176, 124, 174, 190, 182, 132, 102, 62, 35, 185, 39, 190, 70, 215, 142, 62, 187, 107, 24, 61, 21, 132, 198, 189, 236, 43, 151, 190, 91, 13, 121, 189, 231, 206, 160, 61, 120, 90, 7, 190, 17, 218, 184, 61, 38, 9, 115, 59, 82, 123, 148, 189, 104, 23, 131, 190, 99, 93, 133, 190, 19, 105, 222, 61, 127, 123, 23, 62, 192, 253, 98, 191, 217, 144, 37, 60, 147, 47, 167, 188, 8, 231, 96, 60, 232, 65, 152, 61, 24, 175, 136, 190, 121, 131, 96, 61, 124, 24, 177, 61, 136, 6, 151, 189, 148, 230, 200, 61, 40, 36, 251, 188, 195, 108, 148, 189, 193, 15, 155, 188, 103, 255, 21, 190, 11, 115, 195, 61, 156, 166, 11, 190, 106, 209, 250, 61, 157, 44, 161, 61, 83, 48, 21, 60, 44, 52, 254, 59, 123, 130, 130, 189, 147, 156, 41, 190, 184, 8, 10, 190, 23, 253, 94, 189, 126, 126, 236, 61, 103, 89, 162, 189, 72, 182, 134, 188, 225, 81, 51, 190, 88, 144, 11, 190, 218, 199, 84, 188, 145, 138, 248, 61, 26, 112, 242, 189, 157, 148, 26, 190, 55, 142, 151, 61, 186, 87, 202, 189, 26, 162, 79, 61, 187, 26, 71, 188, 97, 44, 186, 61, 7, 176, 35, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 71, 170, 61, 165, 44, 138, 61, 218, 38, 217, 61, 51, 211, 115, 61, 197, 72, 141, 61, 207, 75, 221, 61, 242, 234, 100, 190, 164, 144, 249, 188, 67, 120, 93, 189, 220, 84, 35, 62, 110, 16, 57, 60, 192, 128, 116, 58, 82, 133, 241, 188, 83, 247, 225, 61, 243, 221, 39, 62, 121, 36, 79, 62, 243, 219, 70, 62, 140, 51, 142, 189, 186, 2, 30, 190, 83, 196, 44, 190, 4, 216, 57, 62, 106, 180, 213, 61, 222, 21, 111, 190, 87, 2, 245, 189, 13, 248, 86, 189, 0, 153, 82, 62, 19, 103, 224, 61, 254, 135, 248, 60, 120, 234, 154, 189, 126, 87, 44, 62, 195, 105, 214, 188, 221, 120, 52, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 235, 180, 190, 59, 113, 166, 61, 168, 158, 11, 63, 82, 214, 40, 191, 9, 33, 164, 190, 96, 94, 149, 190, 64, 16, 191, 62, 211, 166, 145, 190, 247, 223, 209, 189, 96, 14, 195, 62, 66, 24, 141, 191, 221, 55, 236, 190, 242, 84, 231, 189, 96, 156, 242, 190, 193, 22, 60, 63, 100, 195, 165, 62, 29, 133, 71, 62, 175, 223, 76, 61, 172, 215, 14, 63, 149, 253, 118, 62, 10, 57, 18, 63, 182, 198, 92, 190, 102, 175, 151, 190, 213, 129, 12, 61, 85, 131, 80, 190, 57, 101, 70, 61, 5, 150, 237, 61, 14, 247, 168, 62, 138, 74, 109, 189, 34, 213, 226, 62, 35, 149, 135, 62, 89, 146, 136, 61, 140, 108, 198, 61, 187, 2, 202, 190, 205, 125, 101, 62, 243, 214, 98, 61, 67, 253, 191, 190, 134, 162, 197, 189, 120, 166, 176, 62, 206, 41, 146, 190, 3, 77, 243, 60, 214, 211, 48, 190, 108, 233, 192, 189, 29, 222, 120, 188, 114, 14, 171, 61, 12, 83, 90, 62, 76, 12, 41, 62, 132, 54, 132, 189, 62, 86, 51, 190, 112, 38, 223, 61, 16, 69, 114, 62, 73, 34, 212, 62, 246, 6, 89, 62, 198, 144, 247, 189, 117, 89, 105, 60, 191, 60, 96, 61, 32, 197, 3, 62, 53, 223, 55, 190, 190, 193, 117, 61, 243, 44, 186, 186, 93, 235, 194, 189, 226, 240, 39, 190, 85, 227, 65, 61, 174, 139, 5, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 250, 49, 189, 185, 75, 181, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {215, 15, 96, 191, 140, 99, 142, 63, 167, 162, 83, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {166, 232, 43, 63, 34, 2, 232, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0025/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}