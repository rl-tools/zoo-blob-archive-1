// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 58, 189, 189, 175, 82, 44, 62, 172, 52, 251, 62, 44, 34, 100, 62, 109, 171, 163, 190, 197, 238, 49, 62, 137, 25, 106, 190, 193, 62, 11, 63, 219, 150, 182, 59, 71, 209, 235, 62, 255, 15, 2, 190, 240, 237, 160, 62, 138, 69, 177, 190, 181, 148, 10, 63, 161, 165, 140, 62, 234, 133, 210, 62, 159, 165, 92, 190, 3, 122, 182, 190, 110, 168, 108, 62, 175, 199, 0, 190, 249, 61, 19, 191, 153, 15, 159, 190, 161, 12, 71, 62, 41, 128, 187, 62, 26, 55, 157, 190, 200, 240, 213, 190, 181, 59, 33, 61, 114, 19, 69, 62, 236, 213, 157, 62, 220, 203, 180, 186, 166, 4, 91, 61, 161, 245, 170, 62, 208, 85, 206, 61, 203, 120, 230, 62, 140, 68, 183, 189, 184, 24, 19, 191, 158, 68, 53, 190, 34, 140, 253, 62, 147, 194, 186, 189, 181, 90, 208, 190, 106, 34, 60, 190, 168, 248, 73, 190, 37, 75, 62, 190, 74, 215, 36, 62, 107, 150, 176, 61, 138, 20, 226, 190, 165, 177, 180, 189, 128, 144, 114, 190, 71, 4, 203, 62, 203, 41, 248, 62, 169, 167, 38, 190, 135, 208, 246, 62, 254, 93, 14, 191, 30, 42, 16, 63, 188, 69, 153, 62, 172, 167, 161, 62, 197, 233, 250, 190, 154, 230, 105, 190, 114, 253, 176, 62, 73, 81, 12, 191, 115, 47, 142, 190, 168, 199, 206, 189, 6, 99, 236, 62, 27, 237, 27, 190, 134, 191, 211, 190, 91, 65, 213, 62, 12, 200, 234, 190, 174, 40, 1, 191, 196, 68, 9, 63, 248, 34, 55, 190, 153, 243, 26, 190, 64, 122, 18, 63, 27, 59, 224, 62, 7, 35, 19, 191, 6, 132, 177, 62, 0, 141, 197, 190, 123, 156, 25, 189, 103, 108, 33, 62, 114, 159, 214, 62, 97, 87, 214, 62, 111, 122, 212, 62, 206, 30, 8, 63, 194, 164, 200, 62, 80, 244, 81, 189, 144, 127, 201, 190, 71, 30, 150, 190, 166, 92, 232, 62, 155, 43, 21, 61, 105, 0, 195, 61, 32, 193, 0, 190, 201, 64, 213, 190, 207, 126, 249, 190, 32, 150, 160, 62, 246, 94, 83, 189, 109, 150, 7, 190, 180, 21, 155, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 189, 19, 191, 247, 18, 208, 62, 57, 52, 63, 62, 125, 138, 248, 61, 4, 8, 109, 189, 172, 169, 209, 62, 144, 179, 19, 191, 186, 207, 186, 62, 109, 107, 191, 62, 82, 23, 115, 189, 200, 16, 182, 189, 161, 233, 1, 63, 144, 31, 242, 190, 123, 236, 187, 190, 201, 182, 48, 62, 208, 117, 198, 60, 109, 140, 52, 62, 228, 191, 39, 62, 22, 236, 174, 190, 245, 69, 35, 189, 82, 237, 219, 60, 208, 0, 176, 61, 150, 162, 15, 63, 125, 224, 220, 190, 159, 39, 125, 62, 174, 231, 10, 63, 248, 212, 18, 63, 35, 240, 233, 62, 9, 32, 191, 189, 114, 149, 204, 190, 142, 189, 30, 190, 91, 11, 107, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 167, 176, 189, 44, 169, 30, 190, 163, 49, 36, 62, 42, 248, 19, 62, 131, 173, 155, 61, 234, 186, 41, 190, 206, 190, 23, 190, 232, 148, 50, 62, 239, 47, 243, 61, 41, 209, 168, 189, 174, 147, 47, 62, 136, 157, 99, 189, 95, 164, 246, 61, 144, 221, 104, 188, 13, 213, 254, 61, 1, 246, 190, 60, 174, 68, 57, 61, 62, 161, 135, 61, 210, 170, 135, 61, 135, 32, 160, 60, 62, 208, 145, 61, 190, 143, 29, 190, 170, 216, 48, 62, 5, 157, 161, 189, 78, 203, 221, 189, 167, 117, 144, 189, 218, 75, 73, 189, 70, 201, 148, 189, 240, 157, 28, 62, 31, 99, 244, 189, 168, 137, 9, 62, 59, 134, 162, 188, 38, 202, 8, 190, 73, 8, 156, 189, 29, 39, 172, 61, 20, 156, 163, 188, 127, 210, 20, 190, 55, 107, 139, 61, 207, 0, 67, 61, 189, 125, 115, 61, 40, 7, 1, 189, 187, 75, 43, 190, 249, 220, 21, 189, 220, 203, 204, 189, 56, 186, 251, 61, 70, 179, 219, 185, 87, 59, 230, 60, 170, 203, 148, 59, 241, 222, 71, 189, 255, 186, 244, 61, 113, 75, 21, 190, 86, 30, 188, 61, 76, 59, 41, 190, 182, 46, 200, 189, 78, 79, 32, 62, 160, 175, 11, 61, 210, 81, 117, 61, 144, 28, 63, 61, 216, 82, 151, 58, 251, 93, 42, 189, 31, 250, 178, 189, 206, 233, 249, 189, 247, 163, 31, 61, 209, 61, 176, 189, 111, 94, 46, 190, 32, 143, 170, 61, 105, 82, 141, 188, 69, 53, 224, 188, 125, 154, 167, 188, 80, 180, 21, 62, 74, 174, 175, 189, 84, 20, 112, 61, 50, 238, 227, 61, 52, 221, 4, 190, 38, 184, 0, 60, 245, 68, 43, 62, 61, 149, 52, 189, 13, 14, 137, 61, 82, 177, 191, 61, 126, 19, 51, 62, 223, 126, 210, 61, 11, 222, 170, 188, 74, 103, 43, 62, 140, 14, 18, 61, 231, 132, 26, 61, 186, 200, 230, 61, 97, 95, 60, 189, 228, 244, 155, 189, 35, 182, 166, 186, 107, 177, 39, 190, 192, 191, 88, 61, 86, 57, 36, 190, 124, 57, 141, 61, 189, 220, 141, 60, 234, 225, 153, 61, 128, 61, 75, 189, 4, 155, 225, 189, 253, 189, 240, 61, 159, 5, 150, 59, 120, 40, 2, 190, 82, 95, 1, 190, 136, 110, 44, 61, 56, 91, 151, 61, 231, 198, 161, 61, 55, 93, 22, 61, 170, 231, 11, 61, 242, 172, 210, 189, 127, 30, 44, 189, 164, 187, 23, 62, 221, 113, 194, 188, 87, 53, 249, 189, 18, 53, 43, 62, 234, 123, 8, 187, 132, 0, 60, 185, 83, 180, 44, 62, 149, 190, 50, 62, 236, 100, 27, 189, 193, 237, 43, 190, 15, 107, 47, 190, 204, 190, 44, 190, 220, 57, 14, 190, 92, 177, 20, 62, 16, 209, 145, 189, 43, 161, 2, 62, 85, 74, 177, 61, 240, 233, 140, 61, 115, 83, 108, 189, 116, 201, 178, 61, 134, 104, 134, 60, 130, 187, 113, 188, 59, 179, 7, 190, 232, 211, 3, 62, 87, 230, 61, 189, 105, 59, 174, 60, 101, 60, 151, 60, 42, 18, 14, 190, 41, 105, 13, 190, 49, 121, 185, 61, 144, 50, 69, 61, 77, 182, 3, 190, 84, 222, 52, 62, 176, 182, 51, 62, 174, 170, 38, 189, 20, 77, 218, 189, 179, 15, 45, 189, 229, 53, 47, 62, 172, 107, 109, 189, 84, 101, 37, 190, 207, 255, 148, 189, 254, 118, 48, 62, 15, 190, 185, 60, 161, 222, 95, 189, 145, 125, 135, 189, 153, 134, 138, 60, 147, 181, 86, 189, 25, 217, 54, 61, 25, 53, 15, 61, 209, 157, 87, 60, 23, 115, 16, 190, 198, 240, 134, 61, 130, 97, 26, 190, 78, 119, 78, 61, 172, 51, 148, 61, 139, 236, 117, 58, 226, 49, 18, 190, 238, 132, 109, 61, 96, 250, 15, 190, 209, 108, 221, 60, 180, 230, 5, 189, 229, 138, 50, 188, 1, 130, 60, 188, 35, 86, 155, 60, 187, 156, 17, 62, 113, 87, 153, 189, 12, 87, 220, 189, 106, 179, 33, 190, 20, 168, 236, 61, 39, 194, 129, 61, 98, 92, 14, 189, 143, 182, 153, 189, 23, 149, 206, 60, 203, 241, 160, 189, 112, 179, 158, 61, 217, 105, 214, 189, 97, 138, 43, 61, 102, 62, 66, 189, 141, 142, 0, 190, 235, 255, 0, 188, 100, 38, 207, 189, 244, 127, 205, 189, 198, 235, 215, 59, 77, 105, 175, 61, 6, 67, 151, 189, 94, 198, 44, 188, 132, 190, 215, 189, 78, 121, 166, 61, 93, 76, 54, 61, 192, 219, 203, 189, 150, 160, 43, 61, 132, 122, 55, 189, 169, 191, 22, 190, 40, 155, 172, 189, 152, 103, 40, 190, 141, 16, 36, 61, 140, 174, 19, 61, 177, 179, 66, 188, 233, 245, 237, 60, 67, 88, 71, 189, 216, 173, 32, 62, 130, 192, 173, 61, 216, 32, 184, 60, 18, 26, 45, 62, 179, 126, 161, 188, 98, 237, 73, 189, 234, 159, 42, 62, 255, 10, 157, 188, 238, 170, 220, 189, 20, 155, 151, 188, 178, 148, 178, 61, 39, 224, 87, 61, 237, 133, 20, 62, 117, 75, 224, 188, 33, 7, 31, 62, 161, 112, 22, 190, 92, 96, 174, 60, 127, 40, 33, 189, 255, 38, 6, 190, 141, 115, 157, 61, 65, 140, 217, 189, 251, 203, 3, 62, 155, 97, 28, 62, 36, 28, 201, 189, 228, 1, 246, 188, 105, 131, 32, 62, 235, 221, 36, 190, 89, 24, 253, 61, 127, 231, 184, 189, 83, 214, 214, 60, 88, 22, 232, 189, 72, 196, 44, 189, 55, 197, 11, 189, 94, 117, 85, 189, 41, 68, 1, 190, 233, 198, 128, 60, 178, 163, 202, 61, 165, 72, 21, 190, 44, 125, 168, 189, 175, 112, 17, 61, 56, 237, 142, 188, 37, 250, 12, 190, 156, 117, 12, 62, 175, 214, 24, 190, 172, 46, 188, 189, 91, 39, 164, 187, 91, 240, 77, 189, 221, 18, 250, 188, 99, 166, 242, 189, 21, 253, 213, 189, 125, 158, 226, 187, 254, 101, 172, 61, 6, 172, 0, 190, 182, 220, 4, 190, 49, 110, 33, 61, 1, 40, 42, 190, 39, 250, 145, 189, 16, 1, 4, 190, 27, 18, 167, 188, 155, 35, 51, 190, 149, 219, 153, 189, 62, 234, 206, 189, 161, 174, 117, 61, 14, 52, 245, 61, 241, 180, 29, 190, 231, 15, 186, 189, 60, 229, 143, 61, 43, 57, 130, 60, 159, 218, 236, 189, 19, 50, 172, 61, 98, 191, 181, 188, 39, 168, 243, 61, 140, 7, 241, 189, 47, 39, 230, 61, 81, 41, 161, 61, 149, 120, 133, 189, 31, 69, 223, 188, 157, 210, 11, 62, 150, 60, 228, 59, 216, 116, 29, 61, 206, 179, 189, 188, 253, 125, 126, 61, 65, 173, 21, 190, 165, 253, 44, 190, 149, 65, 152, 61, 131, 23, 32, 61, 246, 191, 2, 187, 3, 50, 102, 61, 213, 2, 16, 190, 6, 107, 37, 190, 114, 12, 173, 189, 160, 155, 190, 61, 133, 8, 229, 61, 181, 56, 167, 61, 96, 245, 45, 62, 245, 220, 207, 189, 23, 134, 107, 61, 38, 92, 32, 62, 200, 247, 25, 62, 96, 244, 227, 189, 124, 145, 139, 189, 45, 17, 15, 62, 242, 102, 4, 190, 223, 42, 41, 62, 137, 179, 215, 61, 70, 117, 163, 189, 145, 221, 53, 189, 238, 167, 220, 61, 224, 66, 159, 189, 159, 114, 210, 61, 207, 95, 117, 189, 134, 179, 169, 61, 55, 43, 41, 190, 39, 155, 2, 190, 64, 89, 95, 189, 247, 214, 75, 189, 155, 225, 199, 61, 53, 7, 29, 190, 176, 170, 179, 61, 29, 53, 0, 62, 4, 148, 142, 189, 249, 217, 41, 190, 255, 207, 148, 188, 218, 238, 36, 62, 105, 196, 201, 189, 160, 150, 247, 189, 93, 46, 218, 60, 95, 98, 241, 60, 135, 199, 195, 189, 81, 118, 0, 190, 167, 245, 6, 62, 71, 219, 186, 61, 93, 197, 174, 61, 17, 172, 206, 189, 249, 190, 139, 189, 43, 224, 195, 61, 145, 187, 20, 190, 28, 176, 253, 61, 19, 19, 51, 190, 183, 211, 155, 189, 12, 21, 187, 58, 9, 160, 87, 189, 180, 235, 51, 62, 79, 153, 52, 62, 42, 187, 48, 188, 165, 177, 161, 61, 47, 233, 126, 61, 43, 79, 33, 62, 102, 41, 51, 62, 154, 175, 190, 61, 148, 220, 56, 61, 225, 126, 41, 62, 18, 123, 41, 190, 135, 247, 100, 61, 52, 175, 249, 61, 19, 131, 25, 190, 229, 41, 45, 62, 45, 152, 134, 189, 219, 252, 93, 189, 116, 191, 250, 189, 107, 69, 189, 189, 11, 168, 208, 189, 112, 14, 182, 189, 172, 242, 128, 61, 153, 112, 0, 61, 215, 118, 255, 189, 118, 160, 191, 61, 58, 184, 65, 188, 56, 104, 196, 188, 78, 136, 194, 61, 127, 216, 20, 62, 150, 135, 22, 189, 239, 88, 203, 187, 3, 183, 6, 186, 111, 122, 27, 190, 36, 72, 144, 61, 78, 34, 7, 189, 72, 67, 245, 189, 29, 160, 160, 60, 215, 97, 8, 61, 205, 63, 125, 189, 215, 85, 105, 189, 146, 171, 127, 188, 147, 83, 134, 61, 239, 116, 194, 188, 7, 214, 21, 190, 187, 168, 58, 61, 241, 3, 238, 61, 61, 177, 202, 189, 62, 204, 133, 61, 229, 158, 244, 189, 157, 117, 101, 188, 128, 4, 170, 61, 176, 237, 9, 62, 210, 71, 239, 60, 130, 92, 45, 190, 140, 109, 55, 59, 125, 55, 151, 60, 50, 162, 51, 62, 61, 185, 116, 61, 33, 60, 155, 61, 24, 35, 182, 61, 234, 39, 221, 189, 21, 46, 11, 190, 187, 6, 133, 189, 165, 225, 177, 61, 235, 147, 248, 188, 70, 51, 43, 190, 252, 51, 162, 188, 187, 247, 179, 189, 84, 5, 246, 189, 132, 234, 38, 62, 207, 239, 157, 189, 83, 136, 68, 60, 247, 244, 165, 61, 116, 134, 54, 61, 240, 57, 255, 61, 172, 135, 154, 61, 190, 68, 32, 189, 84, 43, 131, 188, 47, 80, 107, 189, 113, 120, 122, 57, 245, 155, 0, 62, 46, 34, 36, 62, 94, 151, 14, 190, 4, 78, 36, 62, 240, 69, 33, 190, 63, 187, 129, 61, 66, 16, 199, 61, 118, 160, 22, 190, 206, 186, 23, 62, 16, 234, 157, 189, 91, 30, 33, 190, 135, 104, 1, 62, 6, 201, 34, 190, 219, 146, 173, 187, 167, 51, 139, 61, 125, 179, 12, 61, 8, 182, 144, 188, 98, 99, 185, 61, 41, 109, 40, 190, 244, 217, 22, 61, 120, 54, 180, 189, 18, 165, 35, 188, 30, 154, 139, 61, 46, 76, 12, 62, 189, 26, 189, 60, 78, 59, 0, 62, 134, 198, 214, 188, 252, 135, 232, 189, 205, 42, 25, 190, 72, 5, 48, 62, 18, 162, 32, 62, 72, 20, 24, 61, 250, 147, 46, 58, 248, 181, 247, 189, 160, 0, 169, 61, 86, 82, 131, 189, 6, 209, 134, 189, 103, 10, 223, 189, 152, 42, 63, 189, 232, 122, 2, 62, 23, 190, 221, 61, 115, 32, 158, 57, 48, 100, 244, 61, 219, 22, 205, 189, 244, 182, 35, 190, 174, 223, 105, 189, 218, 46, 212, 189, 67, 8, 30, 189, 28, 242, 4, 189, 38, 137, 166, 60, 11, 250, 42, 61, 244, 151, 233, 61, 121, 255, 238, 60, 226, 231, 43, 189, 139, 208, 23, 189, 239, 253, 199, 60, 241, 178, 40, 190, 75, 210, 34, 62, 6, 16, 220, 189, 111, 175, 31, 187, 3, 212, 118, 61, 213, 117, 2, 190, 50, 210, 11, 190, 79, 94, 160, 60, 248, 47, 16, 190, 20, 170, 1, 62, 52, 106, 30, 62, 248, 202, 56, 61, 165, 252, 238, 189, 123, 168, 195, 189, 214, 145, 38, 62, 97, 206, 216, 189, 151, 23, 24, 190, 42, 69, 14, 62, 204, 120, 2, 190, 148, 150, 221, 60, 151, 115, 82, 189, 40, 67, 38, 190, 198, 107, 28, 190, 27, 27, 29, 62, 78, 132, 2, 62, 94, 151, 103, 59, 5, 9, 239, 60, 29, 193, 14, 61, 90, 46, 160, 189, 236, 231, 174, 188, 56, 13, 90, 60, 16, 114, 241, 189, 130, 53, 246, 189, 39, 95, 6, 61, 90, 248, 49, 62, 237, 19, 157, 188, 37, 93, 50, 62, 144, 221, 161, 61, 42, 126, 101, 61, 62, 147, 34, 62, 71, 123, 190, 61, 69, 167, 10, 62, 246, 219, 190, 189, 216, 7, 89, 189, 35, 213, 133, 61, 126, 230, 41, 62, 217, 98, 232, 61, 165, 107, 162, 60, 17, 62, 49, 190, 56, 226, 110, 189, 166, 46, 30, 190, 254, 100, 237, 189, 236, 78, 223, 189, 154, 167, 249, 189, 125, 36, 35, 61, 174, 221, 16, 62, 216, 121, 78, 61, 174, 133, 231, 61, 214, 40, 189, 61, 224, 118, 219, 189, 69, 56, 47, 189, 78, 229, 28, 62, 3, 45, 15, 190, 169, 156, 229, 61, 3, 94, 244, 189, 217, 243, 98, 189, 253, 148, 64, 60, 47, 155, 168, 189, 16, 71, 9, 62, 46, 117, 64, 189, 86, 34, 7, 62, 222, 191, 2, 62, 63, 201, 136, 189, 187, 198, 21, 188, 34, 69, 28, 62, 120, 155, 31, 190, 41, 108, 47, 190, 137, 237, 233, 61, 44, 194, 100, 189, 56, 80, 213, 60, 238, 123, 108, 189, 249, 254, 20, 62, 168, 230, 54, 189, 150, 150, 207, 61, 113, 132, 37, 62, 212, 191, 92, 189, 242, 208, 24, 60, 164, 201, 12, 62, 2, 215, 132, 189, 218, 170, 26, 190, 133, 152, 94, 61, 150, 4, 18, 62, 1, 228, 8, 190, 235, 254, 10, 61, 90, 239, 100, 61, 94, 142, 20, 188, 245, 235, 35, 188, 136, 228, 12, 62, 218, 107, 222, 189, 99, 171, 176, 61, 30, 88, 157, 189, 45, 202, 153, 189, 87, 245, 211, 61, 247, 160, 24, 189, 127, 103, 9, 190, 126, 162, 181, 61, 103, 41, 71, 60, 207, 140, 77, 189, 135, 110, 26, 62, 219, 103, 158, 61, 197, 86, 88, 189, 235, 9, 154, 61, 86, 81, 48, 62, 140, 186, 170, 61, 172, 216, 34, 189, 166, 46, 86, 60, 98, 18, 31, 62, 163, 176, 7, 190, 201, 232, 111, 189, 205, 199, 246, 189, 255, 52, 121, 189, 194, 119, 179, 189, 106, 165, 233, 189, 10, 158, 219, 189, 64, 194, 237, 61, 109, 178, 170, 189, 155, 0, 91, 189, 64, 25, 218, 61, 228, 64, 24, 62, 95, 193, 11, 61, 48, 1, 29, 188, 242, 43, 38, 62, 14, 244, 161, 61, 199, 121, 143, 61, 190, 32, 218, 61, 229, 103, 16, 61, 231, 23, 157, 188, 45, 208, 17, 62, 41, 17, 42, 61, 99, 127, 170, 189, 6, 116, 44, 62, 253, 198, 113, 189, 82, 122, 233, 187, 181, 110, 208, 61, 151, 96, 151, 60, 13, 218, 26, 62, 122, 178, 204, 189, 210, 24, 254, 189, 77, 147, 147, 57, 208, 196, 9, 62, 251, 123, 238, 189, 245, 76, 15, 62, 87, 114, 44, 62, 208, 18, 43, 190, 100, 0, 29, 62, 84, 10, 47, 190, 183, 129, 184, 60, 16, 115, 235, 189, 186, 9, 105, 189, 35, 70, 19, 62, 31, 234, 197, 188, 93, 87, 45, 190, 152, 190, 171, 188, 149, 214, 10, 62, 77, 43, 229, 61, 33, 95, 11, 62, 189, 178, 224, 60, 178, 173, 13, 189, 98, 11, 212, 189, 181, 186, 26, 61, 205, 237, 174, 189, 3, 33, 10, 190, 174, 116, 13, 190, 156, 117, 114, 61, 209, 116, 183, 188, 36, 106, 24, 62, 184, 89, 25, 190, 84, 195, 0, 188, 141, 244, 16, 62, 251, 32, 210, 61, 66, 12, 27, 62, 228, 104, 129, 189, 91, 244, 138, 61, 92, 175, 1, 62, 215, 219, 14, 62, 251, 152, 86, 188, 158, 27, 98, 189, 98, 60, 109, 189, 200, 207, 226, 189, 253, 204, 243, 61, 243, 125, 37, 59, 234, 94, 115, 60, 151, 56, 57, 61, 252, 157, 2, 190, 163, 27, 241, 61, 76, 205, 51, 190, 3, 182, 177, 59, 243, 216, 137, 189, 134, 69, 245, 61, 2, 172, 86, 61, 202, 60, 31, 62, 19, 203, 227, 61, 165, 59, 34, 62, 109, 127, 8, 62, 126, 102, 242, 189, 204, 16, 52, 62, 13, 137, 163, 61, 193, 149, 235, 188, 18, 47, 222, 188, 82, 140, 225, 189, 105, 120, 242, 189, 22, 15, 56, 189, 103, 55, 92, 189, 45, 231, 152, 61, 236, 102, 54, 61, 42, 190, 224, 188, 229, 94, 104, 189, 143, 255, 90, 61, 169, 230, 20, 62, 250, 32, 40, 62, 199, 182, 233, 60, 15, 166, 158, 61, 53, 203, 49, 62, 172, 249, 173, 189, 116, 44, 178, 189, 229, 131, 219, 61, 137, 2, 218, 61, 250, 129, 2, 62, 96, 6, 21, 190, 185, 31, 156, 189, 5, 21, 35, 61, 185, 47, 218, 189, 0, 193, 37, 190, 32, 168, 118, 61, 207, 94, 253, 189, 171, 76, 65, 189, 165, 94, 15, 190, 129, 154, 229, 61, 137, 79, 41, 62, 63, 151, 153, 188, 85, 72, 197, 189, 142, 137, 177, 189, 10, 54, 212, 60, 56, 98, 31, 62, 95, 207, 21, 61, 101, 161, 241, 189, 197, 102, 5, 62, 19, 229, 216, 188, 170, 185, 9, 62, 212, 159, 253, 189, 252, 155, 23, 190, 52, 60, 139, 189, 161, 69, 57, 61, 114, 227, 166, 61, 20, 41, 181, 189, 39, 50, 21, 188, 66, 69, 39, 61, 77, 166, 223, 61, 42, 148, 193, 61, 64, 13, 199, 61, 107, 134, 225, 61, 185, 51, 145, 189, 59, 9, 7, 190, 80, 1, 139, 61, 31, 246, 40, 190, 2, 146, 193, 61, 2, 184, 230, 60, 197, 55, 106, 189, 247, 115, 207, 189, 254, 33, 230, 189, 84, 91, 179, 61, 127, 130, 101, 61, 232, 106, 0, 190, 88, 221, 31, 62, 250, 249, 27, 62, 155, 68, 203, 188, 122, 8, 37, 62, 206, 9, 5, 62, 48, 36, 191, 60, 97, 54, 125, 61, 105, 125, 192, 189, 35, 212, 27, 56, 188, 36, 20, 62, 197, 55, 215, 61, 9, 241, 33, 190, 43, 122, 92, 61, 28, 188, 133, 189, 159, 246, 144, 189, 87, 178, 113, 61, 90, 163, 242, 60, 146, 114, 232, 58, 118, 135, 220, 61, 110, 166, 109, 189, 28, 185, 46, 189, 187, 100, 143, 61, 26, 85, 14, 62, 84, 107, 42, 190, 156, 94, 20, 190, 192, 33, 150, 61, 50, 1, 144, 189, 116, 24, 24, 62, 157, 28, 171, 189, 199, 214, 159, 61, 44, 59, 45, 61, 47, 21, 48, 62, 27, 176, 237, 61, 161, 132, 44, 61, 132, 216, 152, 61, 209, 243, 147, 189, 174, 83, 154, 189, 100, 146, 125, 189, 103, 166, 9, 61, 141, 181, 38, 190, 135, 120, 127, 189, 248, 25, 146, 60, 137, 191, 135, 189, 113, 116, 191, 60, 75, 139, 8, 187, 198, 93, 126, 188, 12, 179, 54, 188, 29, 66, 7, 189, 106, 158, 158, 61, 123, 65, 146, 189, 227, 8, 115, 61, 171, 245, 11, 190, 250, 84, 8, 190, 55, 63, 62, 60, 44, 158, 61, 187, 163, 235, 37, 62, 15, 179, 30, 190, 6, 155, 245, 189, 185, 165, 16, 61, 250, 247, 181, 189, 221, 110, 155, 61, 91, 112, 86, 189, 204, 63, 191, 61, 140, 63, 146, 61, 135, 77, 248, 189, 94, 255, 49, 62, 236, 89, 158, 61, 154, 63, 21, 190, 59, 69, 19, 62, 5, 28, 168, 189, 72, 144, 3, 189, 78, 52, 15, 61, 230, 234, 22, 58, 146, 8, 222, 189, 149, 210, 177, 61, 59, 147, 35, 190, 159, 242, 228, 61, 107, 243, 177, 61, 136, 162, 43, 190, 251, 27, 98, 61, 194, 219, 130, 61, 22, 112, 29, 62, 33, 247, 165, 189, 20, 198, 233, 189, 213, 184, 191, 189, 233, 245, 126, 189, 167, 87, 4, 188, 4, 124, 171, 59, 123, 143, 161, 189, 203, 228, 227, 188, 11, 40, 33, 190, 167, 150, 16, 190, 122, 127, 190, 189, 163, 211, 170, 61, 186, 95, 107, 61, 149, 26, 214, 189, 98, 79, 221, 61, 196, 44, 87, 188, 223, 98, 231, 189, 15, 30, 94, 61, 231, 181, 87, 189, 10, 238, 50, 190, 4, 164, 52, 190, 144, 8, 225, 60, 99, 185, 92, 189, 194, 194, 28, 62, 5, 119, 245, 61, 5, 181, 3, 190, 213, 242, 193, 189, 94, 77, 77, 61, 28, 90, 219, 189, 232, 96, 48, 62, 117, 192, 170, 60, 39, 71, 80, 189, 108, 214, 168, 189, 129, 94, 62, 59, 70, 192, 251, 60, 248, 229, 35, 189, 112, 142, 120, 189, 225, 83, 219, 61, 61, 53, 150, 188, 183, 164, 1, 62, 233, 16, 40, 62, 192, 147, 114, 61, 25, 71, 219, 61, 8, 232, 152, 189, 88, 239, 146, 189, 129, 16, 18, 62, 204, 195, 157, 189, 164, 59, 15, 60, 175, 200, 22, 190, 140, 48, 53, 61, 5, 156, 86, 189, 143, 58, 206, 61, 241, 188, 15, 189, 207, 183, 141, 189, 96, 14, 52, 62, 165, 17, 93, 61, 106, 27, 230, 189, 185, 107, 97, 189, 79, 105, 137, 189, 199, 13, 39, 62, 20, 122, 126, 61, 194, 219, 19, 62, 19, 155, 186, 60, 95, 208, 81, 189, 34, 236, 172, 188, 237, 145, 35, 190, 78, 205, 33, 190, 39, 102, 5, 190, 200, 253, 135, 61, 63, 169, 24, 190, 10, 227, 237, 187, 214, 25, 29, 189, 141, 190, 204, 189, 186, 83, 33, 190, 38, 141, 232, 189, 165, 37, 29, 61, 199, 193, 131, 189, 152, 78, 210, 189, 138, 214, 29, 62, 103, 101, 253, 61, 106, 81, 194, 189, 164, 24, 29, 190, 30, 111, 250, 60, 89, 32, 177, 61, 172, 69, 12, 62, 219, 80, 38, 189, 57, 186, 165, 189, 157, 192, 124, 189, 160, 238, 14, 190, 55, 199, 5, 190, 63, 225, 21, 190, 151, 165, 8, 61, 121, 97, 21, 189, 100, 228, 228, 61, 77, 238, 129, 188, 104, 101, 10, 60, 156, 46, 35, 190, 33, 15, 30, 190, 186, 124, 12, 62, 20, 203, 62, 189, 129, 4, 224, 189, 40, 142, 138, 61, 202, 145, 4, 61, 39, 151, 25, 190, 158, 5, 107, 189, 215, 2, 10, 62, 98, 165, 234, 188, 56, 158, 6, 62, 27, 210, 17, 62, 58, 30, 41, 62, 70, 231, 205, 58, 77, 87, 233, 189, 55, 152, 159, 189, 9, 233, 33, 190, 70, 162, 15, 190, 43, 209, 152, 60, 24, 192, 157, 189, 69, 86, 2, 62, 137, 122, 244, 189, 192, 78, 25, 62, 100, 179, 64, 60, 158, 155, 34, 61, 234, 167, 141, 61, 125, 5, 179, 60, 21, 205, 97, 189, 121, 123, 15, 62, 84, 150, 0, 189, 50, 182, 1, 190, 107, 97, 4, 62, 37, 237, 41, 190, 162, 241, 42, 62, 104, 98, 170, 189, 129, 171, 22, 61, 189, 95, 0, 190, 126, 253, 40, 62, 87, 188, 201, 60, 148, 208, 251, 189, 219, 135, 19, 188, 206, 241, 152, 188, 4, 248, 44, 62, 178, 56, 167, 189, 9, 167, 45, 190, 120, 138, 50, 62, 196, 73, 32, 62, 94, 47, 4, 61, 190, 123, 36, 61, 79, 186, 89, 188, 81, 22, 198, 61, 87, 71, 225, 188, 75, 179, 195, 189, 100, 159, 45, 62, 170, 171, 233, 61, 73, 125, 60, 189, 229, 84, 27, 62, 171, 125, 15, 187, 228, 116, 240, 188, 19, 215, 250, 189, 141, 227, 17, 190, 162, 167, 5, 62, 205, 49, 227, 189, 35, 164, 34, 62, 203, 209, 235, 61, 67, 217, 180, 189, 200, 216, 152, 61, 123, 130, 130, 189, 17, 15, 246, 189, 47, 192, 24, 190, 46, 56, 130, 189, 112, 194, 15, 62, 170, 82, 159, 189, 22, 18, 76, 189, 139, 63, 18, 190, 224, 188, 226, 189, 42, 61, 147, 60, 27, 180, 21, 62, 251, 248, 202, 189, 92, 218, 231, 189, 18, 98, 231, 61, 169, 168, 163, 189, 98, 211, 155, 61, 187, 26, 71, 188, 177, 83, 223, 61, 37, 156, 161, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 51, 147, 61, 28, 80, 35, 189, 82, 5, 92, 61, 32, 233, 168, 61, 127, 34, 197, 188, 10, 245, 134, 61, 146, 87, 24, 190, 221, 173, 6, 61, 67, 120, 93, 189, 121, 191, 19, 62, 147, 17, 102, 60, 238, 108, 225, 187, 84, 97, 145, 59, 241, 78, 240, 61, 117, 26, 102, 61, 167, 79, 13, 62, 22, 206, 137, 187, 248, 26, 127, 58, 150, 2, 101, 189, 148, 148, 190, 61, 27, 44, 158, 61, 175, 185, 0, 62, 131, 234, 252, 189, 219, 156, 38, 188, 89, 86, 169, 189, 202, 122, 161, 60, 45, 236, 4, 62, 173, 107, 230, 61, 120, 234, 154, 189, 26, 81, 144, 61, 210, 44, 186, 61, 64, 64, 46, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 22, 158, 59, 140, 151, 249, 61, 21, 80, 28, 62, 26, 248, 36, 190, 251, 62, 16, 190, 172, 249, 3, 190, 85, 159, 204, 61, 237, 145, 11, 190, 247, 223, 209, 189, 4, 240, 40, 62, 107, 233, 7, 190, 95, 139, 39, 190, 130, 241, 141, 60, 83, 38, 229, 189, 86, 137, 193, 60, 56, 201, 210, 60, 107, 37, 119, 61, 97, 53, 239, 61, 70, 35, 22, 62, 130, 99, 46, 189, 121, 241, 228, 60, 41, 55, 40, 190, 45, 79, 21, 189, 65, 163, 82, 61, 30, 153, 9, 190, 203, 61, 183, 61, 249, 89, 237, 61, 191, 238, 223, 61, 138, 74, 109, 189, 136, 157, 130, 60, 152, 104, 150, 188, 223, 44, 140, 61, 0, 85, 75, 61, 224, 178, 114, 189, 224, 28, 207, 61, 37, 183, 24, 62, 244, 52, 38, 190, 197, 82, 79, 61, 134, 226, 94, 61, 208, 31, 175, 189, 3, 77, 243, 60, 189, 208, 87, 189, 7, 73, 209, 61, 153, 43, 93, 189, 146, 184, 75, 61, 232, 167, 250, 61, 123, 195, 55, 61, 201, 191, 199, 189, 34, 196, 52, 190, 82, 3, 184, 61, 93, 176, 171, 61, 243, 226, 126, 61, 154, 42, 108, 61, 131, 171, 14, 189, 85, 37, 145, 61, 125, 58, 198, 60, 49, 107, 217, 61, 166, 18, 3, 190, 223, 255, 127, 61, 27, 117, 233, 60, 93, 235, 194, 189, 154, 15, 14, 190, 160, 67, 213, 60, 57, 87, 34, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 47, 164, 189, 150, 210, 221, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {178, 254, 61, 191, 97, 100, 15, 64, 75, 64, 76, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 185, 88, 190, 140, 131, 10, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0025/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}