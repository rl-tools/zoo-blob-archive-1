// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 178, 86, 61, 106, 69, 35, 63, 1, 226, 16, 63, 197, 244, 246, 62, 213, 130, 25, 191, 175, 28, 222, 62, 65, 96, 19, 190, 24, 199, 79, 63, 202, 17, 36, 190, 188, 219, 162, 62, 210, 5, 240, 62, 202, 103, 0, 63, 145, 8, 61, 191, 174, 3, 236, 62, 248, 253, 9, 61, 130, 139, 90, 63, 152, 125, 121, 191, 26, 14, 148, 190, 16, 133, 70, 63, 141, 115, 76, 191, 209, 160, 249, 190, 194, 114, 13, 191, 147, 136, 172, 62, 250, 223, 196, 61, 187, 214, 19, 191, 147, 182, 52, 191, 203, 250, 113, 61, 50, 138, 81, 62, 64, 195, 8, 63, 216, 82, 113, 190, 41, 165, 14, 61, 79, 1, 243, 62, 200, 101, 110, 190, 125, 194, 80, 63, 223, 123, 15, 191, 181, 76, 19, 191, 196, 42, 171, 189, 16, 180, 30, 63, 246, 182, 142, 190, 117, 118, 132, 190, 188, 62, 216, 191, 142, 97, 199, 190, 205, 41, 57, 190, 142, 74, 10, 63, 226, 239, 105, 60, 222, 229, 33, 191, 218, 104, 1, 191, 144, 179, 245, 188, 14, 151, 33, 61, 86, 53, 174, 63, 141, 48, 135, 189, 49, 56, 192, 62, 26, 25, 35, 191, 91, 55, 44, 63, 21, 38, 162, 62, 5, 236, 16, 190, 248, 93, 25, 191, 131, 111, 11, 190, 199, 139, 6, 190, 128, 165, 78, 191, 138, 9, 149, 190, 87, 96, 218, 63, 56, 41, 4, 63, 94, 155, 21, 190, 206, 155, 162, 190, 228, 166, 46, 63, 194, 70, 37, 189, 175, 68, 148, 63, 193, 229, 25, 63, 34, 144, 138, 190, 203, 179, 239, 189, 179, 176, 25, 63, 231, 233, 120, 62, 219, 222, 157, 190, 79, 35, 81, 63, 242, 75, 11, 191, 64, 153, 195, 62, 200, 103, 14, 62, 83, 41, 128, 63, 126, 205, 196, 63, 2, 233, 168, 62, 42, 236, 25, 63, 203, 251, 13, 63, 166, 46, 131, 190, 2, 218, 229, 190, 65, 52, 198, 63, 221, 79, 206, 62, 98, 82, 158, 189, 146, 245, 122, 61, 231, 65, 168, 190, 117, 26, 187, 190, 127, 155, 0, 191, 201, 29, 17, 63, 36, 166, 145, 190, 210, 86, 37, 191, 79, 132, 153, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 47, 41, 191, 173, 201, 130, 62, 47, 224, 39, 62, 220, 193, 112, 62, 163, 17, 141, 62, 3, 58, 195, 62, 184, 142, 98, 191, 209, 56, 11, 63, 106, 80, 236, 62, 15, 1, 103, 189, 150, 235, 30, 190, 56, 164, 151, 62, 237, 62, 173, 190, 237, 100, 172, 190, 229, 201, 84, 62, 253, 74, 7, 63, 194, 20, 22, 63, 43, 200, 186, 62, 16, 117, 201, 190, 166, 147, 20, 190, 30, 208, 61, 61, 177, 173, 77, 190, 9, 85, 172, 62, 25, 164, 217, 190, 183, 111, 189, 62, 208, 65, 37, 63, 220, 90, 14, 189, 232, 76, 4, 63, 248, 104, 24, 190, 170, 135, 126, 190, 119, 106, 209, 190, 133, 14, 237, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 3, 156, 190, 172, 204, 246, 190, 67, 232, 120, 62, 89, 15, 237, 62, 48, 228, 185, 58, 136, 26, 252, 190, 69, 88, 58, 191, 246, 115, 75, 62, 110, 63, 46, 190, 125, 105, 105, 62, 223, 177, 100, 62, 116, 59, 21, 190, 216, 50, 163, 62, 67, 193, 20, 62, 171, 253, 106, 62, 19, 183, 172, 189, 85, 232, 55, 62, 109, 42, 58, 62, 245, 185, 109, 190, 169, 103, 89, 62, 20, 113, 229, 190, 186, 38, 13, 191, 7, 63, 14, 62, 86, 26, 12, 61, 66, 113, 182, 190, 168, 96, 87, 189, 168, 171, 167, 62, 109, 29, 30, 62, 212, 170, 28, 191, 75, 84, 215, 190, 124, 214, 115, 190, 151, 154, 77, 190, 154, 220, 168, 189, 163, 71, 185, 188, 81, 47, 172, 61, 171, 125, 59, 62, 13, 233, 4, 191, 49, 209, 36, 62, 235, 114, 114, 189, 155, 218, 29, 191, 116, 107, 39, 190, 80, 94, 131, 189, 128, 207, 205, 189, 235, 202, 107, 188, 115, 48, 17, 62, 146, 83, 229, 60, 160, 232, 59, 61, 147, 98, 104, 61, 240, 146, 116, 61, 103, 6, 59, 62, 32, 85, 30, 190, 34, 159, 137, 62, 79, 238, 53, 191, 142, 137, 170, 189, 59, 6, 20, 61, 18, 6, 60, 62, 180, 66, 207, 61, 155, 128, 245, 190, 248, 68, 20, 62, 163, 28, 154, 61, 112, 126, 202, 190, 56, 90, 246, 189, 96, 110, 239, 60, 26, 109, 144, 189, 82, 174, 254, 190, 9, 207, 148, 62, 7, 148, 135, 61, 193, 220, 215, 190, 143, 210, 3, 189, 3, 11, 187, 62, 88, 69, 78, 62, 6, 196, 231, 59, 100, 192, 232, 62, 190, 158, 210, 190, 22, 114, 140, 190, 247, 33, 151, 62, 117, 93, 171, 190, 249, 43, 51, 190, 208, 49, 66, 62, 86, 162, 159, 62, 47, 117, 208, 61, 180, 251, 122, 190, 63, 224, 195, 62, 148, 232, 252, 189, 49, 107, 89, 62, 74, 174, 150, 62, 237, 182, 247, 60, 183, 69, 154, 190, 170, 4, 76, 61, 146, 117, 93, 190, 175, 239, 32, 191, 185, 60, 199, 190, 168, 33, 140, 62, 44, 95, 156, 62, 126, 212, 167, 62, 143, 38, 74, 61, 8, 134, 47, 62, 142, 130, 212, 190, 45, 161, 58, 190, 167, 107, 217, 61, 131, 242, 69, 61, 155, 15, 25, 62, 179, 86, 200, 61, 186, 9, 167, 62, 249, 53, 153, 188, 18, 152, 5, 190, 103, 101, 61, 190, 54, 208, 105, 188, 3, 192, 46, 61, 187, 25, 31, 62, 88, 147, 135, 190, 100, 152, 89, 62, 136, 119, 1, 191, 181, 220, 70, 63, 26, 142, 51, 62, 144, 216, 89, 62, 153, 169, 233, 191, 167, 52, 30, 191, 50, 212, 65, 191, 73, 100, 225, 62, 88, 190, 106, 191, 108, 62, 134, 62, 160, 44, 64, 191, 13, 132, 40, 61, 122, 132, 205, 191, 249, 131, 12, 189, 193, 244, 181, 190, 155, 245, 96, 62, 185, 162, 214, 188, 197, 110, 12, 62, 242, 11, 107, 190, 14, 111, 142, 62, 53, 81, 146, 190, 181, 45, 146, 62, 4, 113, 12, 189, 250, 228, 108, 190, 239, 138, 204, 190, 237, 62, 30, 62, 234, 49, 225, 188, 65, 90, 94, 61, 102, 137, 39, 61, 251, 81, 255, 61, 89, 128, 16, 190, 58, 100, 73, 191, 209, 197, 42, 62, 10, 133, 159, 62, 191, 121, 63, 61, 164, 20, 83, 190, 100, 138, 27, 190, 199, 235, 134, 62, 207, 34, 166, 60, 185, 174, 69, 189, 166, 220, 101, 61, 203, 118, 41, 189, 234, 231, 36, 62, 171, 196, 115, 62, 6, 122, 36, 190, 47, 33, 97, 61, 0, 238, 26, 190, 200, 42, 103, 188, 183, 50, 54, 190, 245, 81, 27, 62, 68, 219, 30, 190, 9, 97, 7, 61, 254, 103, 10, 61, 139, 226, 37, 189, 160, 189, 89, 191, 37, 128, 41, 62, 44, 139, 36, 189, 46, 174, 65, 60, 233, 214, 236, 188, 255, 253, 237, 189, 195, 74, 78, 62, 224, 124, 90, 62, 42, 158, 48, 59, 69, 164, 169, 190, 191, 33, 140, 62, 36, 31, 223, 61, 191, 138, 15, 190, 28, 87, 236, 190, 226, 236, 29, 62, 23, 101, 17, 61, 106, 219, 78, 62, 51, 85, 183, 189, 63, 81, 25, 62, 95, 73, 172, 61, 95, 115, 172, 59, 38, 122, 66, 189, 88, 208, 226, 59, 243, 215, 147, 190, 2, 19, 220, 61, 246, 195, 182, 188, 232, 134, 152, 189, 19, 92, 65, 190, 189, 127, 43, 61, 58, 190, 201, 61, 89, 163, 181, 188, 160, 124, 85, 191, 205, 207, 75, 190, 56, 4, 143, 189, 93, 106, 19, 191, 55, 50, 13, 62, 97, 72, 213, 188, 161, 35, 105, 190, 81, 172, 235, 61, 177, 35, 12, 190, 31, 162, 37, 61, 114, 250, 162, 190, 101, 49, 179, 62, 99, 11, 57, 189, 78, 184, 180, 189, 229, 221, 163, 61, 135, 71, 109, 189, 146, 74, 78, 190, 122, 58, 139, 61, 43, 154, 74, 190, 241, 240, 84, 190, 153, 100, 178, 189, 41, 230, 114, 62, 68, 209, 133, 62, 60, 248, 212, 61, 154, 149, 23, 190, 175, 80, 204, 189, 33, 123, 7, 191, 50, 195, 2, 191, 165, 134, 211, 59, 14, 5, 150, 190, 109, 240, 143, 62, 132, 189, 179, 190, 168, 106, 40, 62, 56, 52, 58, 62, 64, 236, 13, 61, 158, 102, 187, 190, 236, 129, 120, 62, 219, 38, 87, 189, 79, 13, 210, 61, 183, 92, 75, 190, 38, 157, 94, 62, 132, 25, 143, 190, 226, 243, 198, 190, 197, 218, 235, 61, 230, 55, 159, 61, 16, 99, 101, 189, 238, 234, 76, 188, 149, 89, 158, 189, 239, 171, 7, 61, 28, 161, 206, 187, 233, 62, 108, 190, 180, 253, 182, 61, 175, 2, 183, 189, 173, 115, 214, 62, 24, 6, 191, 186, 111, 111, 7, 191, 16, 116, 159, 61, 90, 88, 96, 190, 163, 140, 46, 190, 99, 166, 242, 189, 21, 253, 213, 189, 125, 158, 226, 187, 254, 101, 172, 61, 6, 172, 0, 190, 182, 220, 4, 190, 49, 110, 33, 61, 1, 40, 42, 190, 39, 250, 145, 189, 16, 1, 4, 190, 27, 18, 167, 188, 155, 35, 51, 190, 149, 219, 153, 189, 62, 234, 206, 189, 161, 174, 117, 61, 14, 52, 245, 61, 241, 180, 29, 190, 231, 15, 186, 189, 60, 229, 143, 61, 43, 57, 130, 60, 159, 218, 236, 189, 19, 50, 172, 61, 98, 191, 181, 188, 39, 168, 243, 61, 140, 7, 241, 189, 47, 39, 230, 61, 81, 41, 161, 61, 149, 120, 133, 189, 31, 69, 223, 188, 157, 210, 11, 62, 150, 60, 228, 59, 216, 116, 29, 61, 173, 226, 65, 190, 251, 236, 32, 62, 216, 102, 132, 190, 0, 65, 25, 190, 199, 129, 27, 191, 223, 38, 82, 62, 231, 9, 154, 61, 21, 168, 20, 191, 0, 71, 188, 60, 205, 105, 36, 190, 73, 105, 99, 190, 237, 191, 73, 62, 108, 23, 210, 61, 92, 250, 0, 189, 75, 71, 199, 60, 240, 152, 46, 189, 93, 242, 155, 61, 59, 175, 120, 62, 216, 210, 64, 62, 202, 196, 140, 189, 115, 5, 170, 190, 70, 131, 207, 61, 254, 186, 132, 190, 229, 201, 104, 62, 243, 227, 7, 62, 196, 179, 25, 191, 183, 237, 177, 190, 224, 210, 254, 61, 85, 107, 145, 190, 65, 249, 246, 61, 21, 218, 35, 189, 146, 248, 45, 62, 143, 7, 156, 61, 29, 85, 78, 191, 78, 187, 49, 61, 248, 163, 201, 62, 215, 198, 121, 62, 169, 112, 189, 190, 252, 145, 213, 61, 127, 142, 145, 62, 206, 207, 7, 58, 203, 29, 15, 190, 9, 235, 251, 61, 132, 97, 40, 61, 47, 82, 147, 61, 89, 16, 13, 62, 196, 11, 52, 62, 24, 31, 46, 62, 176, 20, 101, 191, 175, 186, 13, 63, 195, 240, 217, 61, 47, 158, 99, 62, 18, 116, 245, 191, 246, 65, 246, 190, 163, 85, 79, 191, 54, 181, 105, 63, 16, 251, 118, 191, 248, 215, 115, 62, 180, 49, 180, 190, 84, 58, 111, 190, 246, 122, 237, 191, 97, 179, 45, 190, 246, 5, 133, 61, 33, 40, 127, 62, 113, 23, 122, 190, 56, 41, 65, 190, 65, 207, 106, 62, 167, 137, 96, 62, 210, 35, 5, 62, 134, 116, 60, 190, 251, 79, 4, 191, 247, 244, 71, 62, 238, 86, 150, 190, 148, 192, 181, 62, 220, 170, 109, 62, 94, 114, 134, 190, 253, 161, 242, 62, 179, 47, 183, 189, 206, 60, 78, 61, 46, 193, 76, 190, 61, 141, 140, 61, 124, 255, 247, 189, 184, 117, 168, 190, 3, 65, 76, 62, 195, 223, 160, 190, 60, 230, 187, 190, 143, 103, 150, 60, 191, 55, 8, 189, 35, 41, 131, 190, 172, 107, 21, 62, 52, 238, 183, 62, 98, 151, 203, 61, 207, 131, 8, 191, 211, 196, 2, 191, 45, 147, 201, 190, 118, 81, 184, 189, 13, 20, 45, 189, 109, 164, 116, 60, 138, 65, 136, 190, 44, 252, 173, 61, 202, 137, 225, 189, 154, 119, 151, 190, 181, 189, 92, 190, 216, 133, 155, 61, 124, 149, 199, 189, 247, 219, 63, 62, 48, 246, 55, 62, 5, 65, 42, 189, 175, 62, 126, 61, 8, 204, 17, 63, 232, 29, 3, 190, 142, 75, 163, 189, 1, 11, 255, 62, 122, 57, 74, 62, 147, 255, 154, 61, 86, 174, 185, 190, 188, 24, 139, 61, 40, 113, 98, 61, 181, 150, 84, 62, 238, 159, 233, 60, 164, 252, 47, 62, 5, 107, 142, 61, 211, 255, 195, 61, 13, 178, 28, 62, 15, 30, 99, 189, 239, 29, 33, 62, 132, 85, 149, 188, 217, 217, 58, 190, 229, 81, 173, 61, 85, 165, 181, 190, 2, 207, 167, 188, 206, 147, 62, 62, 85, 84, 186, 189, 151, 128, 156, 190, 41, 217, 140, 190, 227, 219, 77, 61, 55, 31, 246, 60, 50, 71, 214, 62, 148, 179, 147, 61, 45, 100, 12, 190, 114, 11, 23, 62, 232, 68, 50, 62, 88, 35, 46, 62, 123, 179, 133, 62, 197, 243, 39, 190, 219, 223, 174, 62, 122, 80, 143, 190, 0, 24, 78, 62, 170, 174, 173, 191, 234, 88, 187, 190, 31, 40, 183, 190, 63, 185, 37, 62, 189, 167, 215, 190, 207, 124, 228, 61, 115, 193, 228, 61, 235, 34, 117, 62, 2, 43, 199, 191, 250, 152, 91, 190, 61, 143, 56, 190, 180, 118, 9, 62, 16, 138, 13, 191, 118, 13, 146, 62, 227, 174, 153, 60, 90, 26, 172, 190, 154, 39, 131, 189, 48, 73, 207, 62, 134, 109, 98, 62, 32, 142, 142, 188, 76, 163, 94, 62, 198, 234, 8, 190, 49, 128, 197, 190, 184, 249, 177, 62, 56, 128, 89, 189, 150, 140, 95, 191, 0, 12, 51, 61, 221, 51, 149, 58, 227, 93, 123, 62, 33, 212, 141, 190, 169, 199, 107, 61, 114, 230, 207, 190, 223, 200, 26, 190, 8, 227, 148, 62, 187, 119, 31, 62, 208, 32, 82, 190, 236, 152, 82, 62, 187, 1, 31, 190, 28, 5, 48, 191, 165, 7, 179, 189, 237, 1, 42, 190, 101, 21, 192, 61, 41, 90, 131, 62, 193, 90, 183, 61, 248, 240, 12, 190, 86, 71, 156, 62, 12, 70, 136, 62, 147, 150, 26, 190, 162, 111, 192, 59, 36, 189, 139, 62, 16, 64, 45, 190, 67, 134, 35, 62, 108, 12, 128, 189, 213, 118, 45, 190, 46, 242, 200, 189, 1, 182, 184, 61, 186, 152, 182, 190, 166, 77, 166, 191, 240, 166, 161, 60, 1, 30, 149, 61, 23, 153, 239, 62, 44, 131, 129, 189, 104, 195, 102, 189, 65, 67, 179, 190, 34, 60, 147, 62, 161, 248, 99, 60, 244, 187, 83, 189, 163, 100, 29, 60, 20, 81, 191, 59, 209, 122, 158, 61, 177, 101, 114, 190, 166, 229, 175, 189, 73, 154, 53, 61, 192, 53, 161, 62, 71, 33, 143, 62, 205, 185, 32, 189, 218, 215, 134, 190, 224, 66, 179, 62, 111, 116, 157, 60, 180, 175, 13, 190, 107, 12, 132, 60, 177, 178, 140, 60, 30, 232, 29, 190, 180, 181, 128, 61, 75, 203, 247, 62, 245, 194, 30, 190, 218, 206, 201, 189, 40, 135, 5, 62, 240, 110, 48, 190, 56, 104, 27, 60, 54, 90, 150, 62, 14, 165, 194, 62, 146, 14, 126, 61, 246, 173, 245, 189, 183, 249, 12, 61, 169, 119, 190, 61, 242, 59, 58, 62, 230, 184, 31, 62, 94, 126, 46, 189, 19, 73, 128, 190, 222, 186, 108, 61, 34, 139, 202, 60, 33, 78, 61, 190, 36, 49, 11, 190, 38, 161, 37, 62, 241, 178, 43, 62, 148, 154, 103, 62, 112, 211, 118, 62, 86, 0, 135, 61, 89, 84, 31, 190, 137, 238, 181, 189, 158, 189, 9, 62, 65, 18, 61, 190, 193, 229, 192, 60, 253, 10, 41, 190, 7, 238, 212, 189, 33, 193, 58, 189, 161, 157, 16, 190, 230, 201, 140, 61, 143, 181, 4, 190, 10, 23, 150, 61, 234, 229, 146, 61, 158, 195, 4, 190, 250, 187, 164, 189, 43, 51, 5, 62, 90, 232, 66, 190, 173, 53, 107, 190, 239, 36, 60, 61, 217, 3, 114, 189, 150, 2, 104, 188, 73, 35, 114, 189, 88, 134, 226, 61, 103, 26, 180, 189, 136, 35, 84, 61, 91, 125, 11, 62, 223, 215, 209, 189, 134, 221, 132, 188, 55, 60, 174, 61, 207, 192, 221, 189, 49, 42, 116, 190, 164, 244, 235, 61, 246, 246, 242, 61, 211, 211, 131, 60, 40, 141, 34, 62, 109, 153, 12, 189, 73, 134, 149, 191, 161, 134, 26, 190, 73, 3, 16, 62, 8, 63, 215, 190, 31, 180, 162, 62, 237, 246, 127, 61, 46, 44, 37, 191, 223, 242, 128, 62, 187, 154, 238, 189, 232, 173, 21, 190, 175, 137, 202, 188, 166, 149, 116, 62, 184, 135, 222, 188, 69, 18, 91, 62, 103, 169, 29, 62, 113, 247, 150, 188, 125, 93, 188, 60, 16, 82, 49, 62, 236, 181, 84, 188, 49, 58, 111, 188, 93, 86, 217, 188, 142, 244, 180, 62, 44, 136, 192, 61, 137, 141, 22, 189, 215, 246, 149, 189, 203, 63, 124, 190, 61, 251, 26, 191, 194, 15, 236, 189, 169, 30, 6, 62, 12, 63, 157, 189, 192, 1, 98, 190, 59, 86, 156, 190, 96, 238, 155, 62, 197, 247, 187, 62, 252, 115, 45, 191, 163, 77, 17, 190, 178, 222, 12, 61, 55, 32, 20, 61, 239, 251, 21, 62, 54, 61, 190, 61, 78, 81, 30, 190, 149, 9, 156, 190, 66, 152, 112, 190, 96, 119, 68, 190, 228, 175, 189, 62, 97, 177, 118, 62, 129, 102, 173, 189, 11, 2, 128, 190, 176, 246, 222, 61, 226, 179, 1, 191, 241, 58, 170, 62, 243, 196, 93, 189, 252, 207, 154, 191, 127, 149, 19, 191, 154, 219, 225, 60, 206, 204, 142, 190, 100, 187, 90, 62, 101, 216, 145, 62, 123, 119, 84, 190, 196, 28, 60, 190, 232, 24, 158, 61, 146, 66, 131, 62, 152, 99, 209, 190, 166, 207, 18, 61, 30, 121, 234, 62, 21, 2, 156, 62, 144, 105, 25, 190, 238, 79, 47, 62, 96, 224, 16, 190, 64, 165, 14, 190, 120, 105, 178, 62, 245, 231, 162, 190, 139, 119, 213, 191, 7, 219, 146, 61, 143, 175, 7, 61, 147, 137, 43, 61, 197, 158, 190, 190, 32, 197, 145, 61, 211, 252, 232, 190, 85, 120, 243, 61, 182, 161, 152, 62, 241, 168, 56, 61, 212, 89, 132, 190, 32, 62, 94, 62, 37, 60, 71, 62, 141, 3, 197, 190, 25, 209, 32, 190, 139, 39, 109, 62, 67, 84, 107, 62, 32, 114, 187, 62, 227, 23, 178, 189, 163, 151, 173, 61, 158, 47, 54, 189, 183, 150, 31, 189, 186, 45, 172, 62, 38, 75, 21, 190, 79, 53, 225, 189, 78, 226, 65, 190, 184, 152, 152, 190, 114, 161, 145, 190, 19, 96, 45, 62, 192, 197, 116, 62, 60, 167, 211, 189, 207, 84, 200, 62, 164, 66, 59, 62, 69, 117, 16, 62, 66, 162, 138, 190, 182, 207, 18, 62, 69, 60, 156, 62, 111, 63, 76, 190, 140, 156, 161, 62, 10, 84, 241, 187, 185, 79, 242, 60, 157, 168, 18, 189, 114, 227, 123, 60, 108, 111, 154, 189, 244, 144, 84, 190, 134, 105, 158, 62, 116, 0, 145, 62, 149, 105, 233, 189, 152, 113, 139, 190, 9, 29, 128, 189, 245, 194, 59, 190, 59, 21, 120, 62, 214, 197, 168, 62, 25, 40, 166, 61, 96, 139, 134, 62, 214, 122, 6, 190, 82, 46, 146, 189, 149, 68, 195, 190, 13, 14, 75, 190, 58, 152, 115, 190, 42, 132, 216, 62, 147, 141, 72, 188, 84, 70, 196, 60, 232, 57, 151, 62, 67, 33, 127, 191, 228, 89, 84, 190, 59, 35, 171, 191, 56, 198, 76, 62, 96, 164, 252, 61, 49, 225, 161, 189, 93, 158, 64, 190, 108, 159, 132, 61, 89, 102, 153, 61, 142, 48, 14, 190, 73, 101, 40, 189, 213, 93, 246, 61, 215, 155, 51, 190, 244, 70, 206, 62, 128, 156, 215, 61, 123, 196, 231, 189, 75, 47, 255, 61, 172, 14, 28, 62, 45, 198, 133, 191, 54, 155, 11, 190, 160, 85, 0, 190, 43, 185, 1, 189, 143, 249, 166, 61, 232, 60, 230, 189, 200, 133, 10, 190, 146, 39, 50, 61, 92, 44, 160, 61, 79, 14, 158, 187, 67, 177, 192, 188, 153, 53, 174, 61, 28, 190, 18, 190, 222, 60, 47, 190, 80, 1, 139, 61, 145, 170, 106, 190, 74, 13, 169, 61, 226, 198, 183, 189, 85, 190, 137, 189, 6, 83, 225, 189, 64, 62, 19, 190, 203, 180, 139, 61, 112, 92, 2, 61, 202, 101, 36, 190, 202, 182, 33, 62, 14, 124, 9, 62, 113, 160, 170, 189, 219, 9, 11, 62, 87, 3, 167, 61, 38, 28, 20, 60, 97, 54, 125, 61, 3, 212, 3, 190, 99, 29, 191, 189, 146, 203, 6, 62, 242, 216, 17, 62, 4, 125, 91, 190, 123, 66, 67, 61, 44, 162, 246, 60, 27, 250, 198, 190, 107, 166, 30, 60, 172, 243, 194, 61, 6, 157, 76, 188, 125, 169, 129, 62, 105, 215, 11, 189, 209, 10, 241, 189, 224, 24, 79, 61, 171, 85, 246, 62, 101, 197, 10, 189, 51, 134, 138, 190, 252, 220, 237, 62, 32, 61, 215, 189, 175, 145, 143, 190, 220, 115, 59, 191, 63, 118, 59, 62, 245, 47, 94, 61, 32, 252, 136, 62, 210, 247, 157, 61, 123, 3, 91, 61, 151, 225, 26, 62, 150, 201, 7, 62, 4, 118, 129, 188, 116, 190, 239, 186, 206, 40, 235, 190, 221, 193, 21, 190, 235, 133, 129, 190, 92, 26, 131, 189, 33, 68, 173, 189, 250, 121, 218, 61, 71, 118, 196, 60, 222, 64, 194, 60, 219, 147, 18, 62, 133, 126, 36, 190, 85, 131, 163, 61, 65, 23, 187, 61, 169, 147, 3, 62, 29, 242, 255, 189, 229, 94, 209, 187, 144, 64, 231, 61, 57, 131, 209, 59, 126, 138, 141, 62, 170, 220, 243, 61, 141, 197, 180, 188, 124, 58, 64, 188, 222, 53, 141, 189, 151, 7, 66, 62, 17, 210, 208, 189, 234, 100, 149, 61, 149, 128, 134, 61, 55, 121, 31, 190, 254, 15, 49, 62, 169, 28, 253, 61, 0, 102, 191, 189, 24, 246, 83, 62, 62, 225, 206, 189, 195, 132, 165, 189, 204, 60, 217, 58, 193, 3, 69, 62, 252, 21, 237, 189, 1, 41, 137, 61, 32, 208, 41, 190, 40, 221, 210, 61, 104, 241, 151, 61, 116, 246, 42, 190, 251, 27, 98, 61, 85, 171, 41, 61, 236, 31, 5, 62, 70, 92, 172, 189, 208, 217, 244, 189, 116, 127, 191, 189, 233, 245, 126, 189, 210, 5, 82, 188, 226, 214, 250, 187, 41, 151, 192, 189, 96, 60, 7, 189, 129, 207, 55, 190, 167, 150, 16, 190, 186, 17, 191, 189, 107, 216, 140, 61, 78, 62, 7, 61, 160, 255, 2, 190, 199, 36, 187, 61, 249, 233, 47, 189, 194, 14, 13, 190, 138, 119, 50, 61, 159, 43, 112, 189, 189, 97, 61, 190, 4, 164, 52, 190, 205, 173, 162, 59, 103, 117, 135, 189, 140, 59, 170, 61, 83, 182, 7, 62, 226, 205, 152, 190, 106, 228, 65, 189, 143, 172, 240, 190, 32, 212, 160, 61, 191, 151, 167, 62, 168, 95, 125, 191, 2, 231, 94, 61, 216, 115, 72, 189, 14, 127, 182, 189, 177, 245, 43, 62, 87, 226, 55, 60, 140, 75, 8, 190, 115, 47, 180, 189, 163, 72, 2, 190, 184, 247, 39, 62, 16, 112, 21, 62, 35, 201, 5, 62, 142, 58, 18, 62, 27, 38, 88, 191, 183, 249, 196, 190, 47, 241, 164, 61, 231, 212, 134, 190, 4, 59, 251, 188, 100, 22, 149, 191, 188, 195, 89, 61, 124, 249, 72, 188, 228, 225, 136, 60, 115, 76, 118, 60, 173, 214, 150, 190, 151, 193, 19, 62, 165, 17, 93, 61, 106, 27, 230, 189, 185, 107, 97, 189, 79, 105, 137, 189, 199, 13, 39, 62, 20, 122, 126, 61, 194, 219, 19, 62, 19, 155, 186, 60, 95, 208, 81, 189, 34, 236, 172, 188, 237, 145, 35, 190, 78, 205, 33, 190, 39, 102, 5, 190, 200, 253, 135, 61, 63, 169, 24, 190, 10, 227, 237, 187, 214, 25, 29, 189, 141, 190, 204, 189, 186, 83, 33, 190, 38, 141, 232, 189, 165, 37, 29, 61, 199, 193, 131, 189, 152, 78, 210, 189, 138, 214, 29, 62, 103, 101, 253, 61, 106, 81, 194, 189, 164, 24, 29, 190, 30, 111, 250, 60, 89, 32, 177, 61, 172, 69, 12, 62, 219, 80, 38, 189, 57, 186, 165, 189, 220, 9, 6, 190, 6, 89, 159, 189, 41, 109, 118, 61, 191, 81, 44, 190, 77, 177, 81, 62, 80, 114, 234, 188, 241, 119, 128, 61, 57, 12, 0, 62, 79, 87, 213, 61, 185, 160, 84, 191, 39, 40, 21, 191, 154, 99, 11, 62, 60, 4, 48, 191, 75, 112, 184, 191, 245, 229, 120, 62, 251, 78, 40, 60, 253, 2, 169, 188, 168, 154, 249, 189, 47, 86, 190, 61, 197, 224, 49, 191, 103, 16, 139, 62, 141, 211, 102, 62, 208, 242, 153, 62, 144, 241, 112, 189, 6, 38, 71, 189, 169, 86, 177, 61, 33, 36, 115, 190, 179, 247, 171, 190, 186, 87, 39, 62, 242, 133, 63, 62, 174, 76, 88, 62, 74, 45, 129, 190, 13, 184, 89, 61, 145, 25, 12, 62, 198, 229, 208, 189, 159, 116, 224, 61, 88, 15, 249, 190, 196, 131, 11, 62, 42, 209, 176, 62, 48, 126, 150, 191, 18, 64, 60, 187, 60, 95, 98, 62, 35, 242, 32, 190, 116, 127, 148, 62, 204, 64, 80, 61, 105, 223, 200, 189, 231, 134, 156, 190, 19, 217, 42, 189, 102, 212, 123, 61, 58, 129, 166, 189, 188, 131, 156, 61, 16, 250, 240, 58, 35, 132, 64, 191, 205, 207, 204, 190, 62, 246, 70, 190, 14, 183, 54, 188, 55, 192, 54, 62, 216, 27, 147, 191, 8, 29, 230, 60, 9, 94, 89, 188, 8, 231, 96, 60, 113, 164, 130, 61, 64, 103, 164, 190, 247, 121, 163, 61, 124, 24, 177, 61, 136, 6, 151, 189, 148, 230, 200, 61, 40, 36, 251, 188, 195, 108, 148, 189, 193, 15, 155, 188, 103, 255, 21, 190, 11, 115, 195, 61, 156, 166, 11, 190, 106, 209, 250, 61, 157, 44, 161, 61, 83, 48, 21, 60, 44, 52, 254, 59, 123, 130, 130, 189, 147, 156, 41, 190, 184, 8, 10, 190, 23, 253, 94, 189, 126, 126, 236, 61, 103, 89, 162, 189, 72, 182, 134, 188, 225, 81, 51, 190, 88, 144, 11, 190, 218, 199, 84, 188, 145, 138, 248, 61, 26, 112, 242, 189, 157, 148, 26, 190, 55, 142, 151, 61, 186, 87, 202, 189, 26, 162, 79, 61, 187, 26, 71, 188, 97, 44, 186, 61, 7, 176, 35, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 92, 135, 61, 96, 0, 50, 59, 208, 49, 207, 61, 204, 53, 215, 61, 88, 93, 145, 61, 184, 202, 195, 61, 171, 144, 78, 190, 124, 71, 105, 188, 67, 120, 93, 189, 252, 96, 1, 62, 94, 11, 177, 60, 96, 155, 160, 58, 245, 175, 53, 60, 178, 160, 27, 62, 29, 99, 49, 62, 68, 64, 91, 62, 53, 95, 78, 62, 140, 51, 142, 189, 190, 64, 84, 189, 64, 35, 56, 190, 79, 5, 75, 62, 204, 223, 134, 61, 6, 72, 136, 190, 87, 2, 245, 189, 107, 252, 122, 189, 138, 154, 70, 62, 226, 119, 212, 61, 87, 81, 21, 61, 120, 234, 154, 189, 213, 151, 48, 62, 209, 51, 92, 188, 221, 120, 52, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 195, 23, 191, 134, 131, 162, 61, 248, 178, 20, 63, 41, 250, 77, 191, 121, 75, 184, 190, 41, 130, 137, 190, 156, 135, 28, 63, 93, 152, 168, 190, 247, 223, 209, 189, 24, 57, 198, 62, 79, 79, 145, 191, 112, 2, 33, 191, 47, 128, 189, 189, 107, 55, 53, 191, 177, 125, 75, 63, 50, 71, 174, 62, 140, 86, 58, 62, 175, 223, 76, 61, 247, 97, 64, 63, 119, 33, 5, 63, 227, 129, 44, 63, 54, 74, 100, 190, 206, 75, 4, 191, 213, 129, 12, 61, 230, 76, 97, 190, 6, 229, 245, 60, 180, 66, 237, 61, 19, 102, 207, 62, 138, 74, 109, 189, 39, 120, 227, 62, 25, 243, 172, 62, 89, 146, 136, 61, 245, 101, 10, 62, 177, 112, 216, 190, 156, 214, 138, 62, 239, 124, 119, 60, 12, 160, 134, 190, 179, 143, 235, 189, 157, 205, 45, 62, 157, 142, 127, 190, 3, 77, 243, 60, 249, 70, 28, 190, 48, 138, 34, 189, 181, 13, 142, 58, 205, 42, 193, 61, 254, 129, 79, 62, 103, 91, 8, 62, 28, 242, 249, 188, 136, 9, 57, 190, 112, 38, 223, 61, 186, 90, 247, 60, 193, 54, 227, 62, 11, 80, 84, 62, 249, 39, 64, 190, 103, 183, 225, 61, 191, 60, 96, 61, 202, 185, 44, 62, 96, 72, 56, 190, 107, 211, 117, 61, 82, 109, 125, 189, 93, 235, 194, 189, 112, 61, 49, 190, 193, 187, 167, 188, 174, 139, 5, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 201, 1, 189, 95, 125, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {236, 73, 85, 61, 116, 78, 222, 191, 152, 209, 59, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {139, 115, 183, 63, 61, 124, 14, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0025/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}