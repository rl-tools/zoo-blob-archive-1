// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 3, 11, 61, 37, 240, 176, 62, 205, 93, 32, 63, 37, 158, 165, 62, 61, 186, 4, 191, 53, 38, 6, 63, 65, 231, 147, 190, 248, 50, 65, 63, 119, 233, 81, 190, 136, 23, 217, 62, 24, 103, 18, 62, 209, 101, 239, 62, 92, 6, 0, 191, 188, 45, 30, 63, 225, 191, 181, 59, 123, 88, 95, 63, 127, 100, 29, 191, 183, 77, 134, 190, 240, 152, 190, 62, 36, 90, 254, 190, 129, 28, 19, 191, 62, 118, 188, 190, 95, 82, 133, 62, 144, 115, 150, 61, 57, 64, 193, 190, 0, 94, 17, 191, 159, 144, 44, 62, 113, 94, 58, 62, 50, 125, 28, 63, 213, 220, 121, 190, 182, 83, 23, 59, 205, 21, 252, 62, 96, 177, 139, 190, 31, 125, 80, 63, 73, 224, 185, 190, 157, 70, 26, 191, 80, 5, 3, 190, 47, 198, 36, 63, 187, 214, 161, 190, 156, 83, 8, 191, 22, 173, 126, 191, 221, 168, 127, 190, 21, 224, 122, 190, 125, 7, 199, 62, 34, 64, 213, 189, 216, 179, 13, 191, 123, 217, 210, 190, 137, 21, 184, 188, 206, 140, 139, 62, 0, 241, 130, 63, 68, 41, 5, 189, 60, 192, 224, 62, 81, 41, 53, 191, 173, 202, 40, 63, 141, 182, 166, 62, 152, 212, 87, 188, 113, 243, 35, 191, 24, 204, 128, 190, 79, 20, 219, 61, 210, 216, 79, 191, 31, 163, 94, 190, 245, 231, 154, 62, 53, 119, 60, 63, 15, 129, 223, 189, 192, 208, 249, 190, 235, 75, 57, 63, 229, 95, 178, 189, 173, 175, 70, 62, 19, 10, 72, 63, 86, 142, 129, 190, 102, 251, 115, 190, 171, 128, 37, 63, 33, 154, 130, 62, 197, 96, 29, 191, 93, 242, 102, 63, 250, 21, 229, 190, 63, 2, 118, 62, 226, 187, 210, 61, 12, 111, 133, 63, 103, 110, 134, 63, 171, 166, 200, 62, 37, 143, 17, 63, 127, 183, 24, 63, 36, 220, 172, 190, 118, 103, 175, 190, 125, 97, 118, 62, 98, 30, 20, 63, 11, 121, 11, 190, 211, 20, 75, 62, 254, 93, 185, 190, 118, 31, 165, 190, 146, 238, 13, 191, 48, 218, 25, 63, 52, 181, 81, 190, 183, 116, 27, 191, 1, 154, 39, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 193, 25, 191, 200, 155, 201, 62, 67, 49, 77, 62, 149, 116, 121, 62, 60, 216, 114, 62, 37, 163, 171, 62, 140, 44, 66, 191, 205, 216, 232, 62, 107, 33, 193, 62, 164, 63, 147, 61, 187, 103, 88, 189, 99, 244, 127, 62, 24, 117, 71, 190, 249, 113, 102, 190, 134, 80, 47, 62, 181, 188, 128, 62, 198, 192, 6, 63, 122, 124, 180, 62, 170, 222, 162, 190, 234, 197, 219, 188, 9, 37, 0, 189, 230, 167, 96, 187, 95, 210, 162, 62, 249, 26, 211, 190, 176, 84, 190, 62, 80, 190, 18, 63, 72, 195, 209, 61, 123, 73, 17, 63, 53, 238, 74, 190, 89, 120, 91, 190, 205, 224, 109, 190, 162, 214, 254, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 101, 115, 61, 68, 21, 250, 190, 254, 167, 88, 62, 198, 221, 208, 62, 22, 56, 159, 60, 229, 165, 133, 190, 16, 151, 15, 191, 248, 78, 20, 62, 72, 121, 180, 61, 115, 16, 107, 62, 218, 228, 104, 62, 148, 73, 29, 189, 80, 20, 160, 62, 209, 211, 123, 62, 150, 134, 35, 62, 236, 136, 53, 189, 149, 158, 20, 62, 179, 133, 81, 62, 5, 22, 84, 190, 0, 107, 133, 62, 92, 124, 154, 190, 110, 252, 21, 191, 132, 142, 32, 189, 122, 115, 133, 188, 246, 122, 252, 190, 161, 235, 234, 189, 65, 126, 68, 62, 15, 105, 76, 62, 106, 4, 83, 190, 140, 236, 215, 190, 50, 94, 165, 190, 104, 23, 66, 188, 108, 5, 44, 190, 50, 63, 145, 57, 14, 214, 130, 61, 19, 27, 244, 61, 234, 147, 181, 190, 111, 40, 57, 62, 41, 252, 18, 189, 113, 65, 167, 189, 144, 253, 73, 189, 218, 249, 174, 189, 35, 173, 18, 190, 118, 149, 253, 187, 133, 133, 245, 61, 254, 77, 192, 61, 102, 129, 25, 61, 32, 238, 195, 61, 234, 139, 127, 58, 172, 98, 84, 62, 18, 217, 39, 190, 120, 254, 121, 62, 142, 75, 75, 190, 27, 154, 7, 190, 219, 92, 223, 61, 175, 226, 131, 61, 158, 171, 179, 61, 120, 176, 158, 189, 190, 89, 62, 61, 102, 240, 77, 61, 170, 160, 29, 190, 75, 166, 16, 190, 240, 84, 38, 189, 135, 27, 187, 60, 128, 133, 9, 191, 215, 134, 143, 62, 87, 158, 249, 60, 212, 93, 179, 190, 249, 72, 197, 60, 238, 49, 175, 62, 188, 81, 52, 62, 14, 19, 75, 61, 26, 88, 109, 62, 207, 46, 206, 190, 10, 8, 155, 190, 158, 239, 156, 62, 78, 83, 182, 190, 191, 10, 165, 189, 195, 162, 48, 62, 177, 16, 81, 62, 60, 74, 28, 62, 213, 253, 147, 190, 254, 42, 206, 62, 245, 40, 2, 190, 253, 53, 94, 62, 190, 104, 146, 62, 95, 243, 232, 61, 57, 27, 183, 190, 23, 81, 79, 61, 203, 122, 10, 190, 56, 164, 186, 190, 159, 98, 182, 190, 21, 46, 120, 62, 91, 49, 168, 62, 30, 175, 140, 62, 38, 9, 69, 189, 8, 134, 47, 62, 153, 106, 31, 191, 141, 201, 64, 189, 190, 169, 129, 61, 10, 64, 213, 61, 226, 116, 241, 186, 85, 145, 101, 61, 28, 145, 167, 62, 200, 145, 12, 62, 14, 228, 186, 189, 34, 80, 245, 189, 210, 99, 179, 189, 43, 177, 240, 61, 120, 241, 221, 61, 113, 81, 238, 189, 29, 193, 135, 62, 182, 30, 164, 190, 27, 121, 180, 62, 148, 87, 26, 62, 131, 53, 104, 62, 215, 179, 26, 191, 200, 22, 78, 191, 78, 96, 170, 190, 103, 114, 152, 189, 236, 46, 148, 191, 134, 114, 132, 62, 53, 129, 198, 190, 122, 187, 146, 60, 4, 254, 143, 190, 2, 44, 180, 188, 144, 7, 20, 191, 154, 27, 53, 62, 75, 185, 186, 189, 168, 46, 195, 60, 146, 38, 100, 190, 67, 0, 84, 62, 34, 241, 119, 190, 247, 78, 101, 62, 114, 19, 173, 61, 63, 96, 76, 190, 65, 87, 132, 190, 92, 129, 30, 62, 50, 102, 133, 188, 42, 179, 159, 60, 56, 147, 124, 61, 198, 14, 14, 61, 56, 2, 26, 190, 3, 222, 198, 190, 73, 186, 5, 62, 102, 47, 81, 62, 232, 162, 46, 61, 91, 127, 79, 190, 238, 14, 8, 190, 164, 96, 235, 61, 252, 207, 215, 59, 199, 6, 15, 190, 64, 196, 102, 189, 101, 141, 76, 189, 30, 83, 141, 61, 138, 95, 68, 62, 145, 174, 148, 189, 25, 47, 91, 61, 131, 39, 140, 190, 231, 187, 105, 61, 66, 55, 195, 189, 225, 235, 57, 62, 50, 82, 147, 190, 203, 155, 129, 61, 64, 12, 106, 190, 133, 182, 118, 59, 8, 37, 34, 190, 232, 141, 140, 61, 226, 225, 131, 61, 22, 19, 204, 60, 105, 179, 98, 190, 233, 251, 125, 189, 175, 7, 120, 188, 107, 110, 103, 62, 191, 250, 33, 190, 100, 96, 126, 190, 174, 196, 114, 62, 136, 61, 44, 62, 198, 69, 186, 189, 92, 93, 34, 190, 129, 97, 246, 61, 78, 77, 82, 61, 63, 21, 62, 62, 192, 158, 225, 188, 78, 51, 56, 62, 213, 118, 60, 60, 177, 70, 16, 189, 207, 46, 6, 189, 5, 59, 79, 59, 70, 127, 202, 189, 137, 141, 34, 62, 25, 167, 123, 61, 196, 180, 52, 189, 153, 167, 188, 188, 138, 26, 109, 190, 102, 204, 3, 62, 108, 246, 32, 189, 113, 34, 91, 190, 68, 96, 243, 187, 133, 79, 234, 189, 22, 84, 164, 190, 73, 54, 225, 189, 49, 187, 44, 190, 51, 221, 137, 188, 107, 208, 205, 188, 205, 0, 134, 189, 196, 127, 246, 189, 39, 7, 137, 190, 248, 196, 31, 62, 159, 4, 221, 61, 52, 166, 228, 188, 126, 247, 244, 61, 62, 43, 92, 189, 237, 124, 159, 189, 91, 166, 250, 61, 89, 96, 144, 188, 52, 215, 208, 189, 170, 120, 1, 190, 22, 138, 17, 62, 173, 116, 133, 61, 121, 244, 207, 61, 255, 167, 176, 189, 112, 252, 193, 61, 236, 250, 130, 190, 115, 146, 130, 189, 196, 31, 157, 189, 49, 89, 156, 190, 70, 134, 95, 62, 154, 95, 168, 189, 151, 126, 244, 61, 115, 90, 28, 62, 135, 8, 117, 60, 98, 250, 117, 190, 103, 64, 84, 62, 196, 87, 204, 189, 214, 180, 155, 61, 36, 116, 137, 190, 121, 37, 177, 189, 5, 92, 141, 190, 18, 154, 88, 190, 54, 57, 183, 61, 147, 41, 190, 186, 214, 149, 10, 190, 221, 113, 158, 189, 3, 111, 196, 61, 116, 111, 55, 190, 76, 237, 198, 188, 147, 89, 169, 189, 195, 153, 171, 188, 153, 104, 224, 189, 16, 83, 174, 62, 171, 86, 18, 189, 33, 44, 39, 190, 163, 74, 7, 189, 71, 47, 149, 190, 130, 174, 39, 190, 99, 166, 242, 189, 21, 253, 213, 189, 125, 158, 226, 187, 254, 101, 172, 61, 6, 172, 0, 190, 182, 220, 4, 190, 49, 110, 33, 61, 1, 40, 42, 190, 39, 250, 145, 189, 16, 1, 4, 190, 27, 18, 167, 188, 155, 35, 51, 190, 149, 219, 153, 189, 62, 234, 206, 189, 161, 174, 117, 61, 14, 52, 245, 61, 241, 180, 29, 190, 231, 15, 186, 189, 60, 229, 143, 61, 43, 57, 130, 60, 159, 218, 236, 189, 19, 50, 172, 61, 98, 191, 181, 188, 39, 168, 243, 61, 140, 7, 241, 189, 47, 39, 230, 61, 81, 41, 161, 61, 149, 120, 133, 189, 31, 69, 223, 188, 157, 210, 11, 62, 150, 60, 228, 59, 216, 116, 29, 61, 160, 149, 138, 189, 137, 115, 26, 62, 44, 238, 139, 190, 167, 183, 227, 189, 120, 123, 160, 190, 132, 39, 74, 62, 198, 255, 81, 61, 169, 234, 101, 190, 215, 91, 4, 190, 123, 124, 100, 190, 238, 134, 142, 190, 56, 31, 79, 62, 172, 226, 82, 61, 101, 96, 219, 61, 226, 13, 4, 61, 212, 100, 217, 189, 248, 145, 63, 188, 106, 223, 83, 62, 242, 105, 76, 62, 194, 60, 81, 189, 161, 1, 228, 189, 115, 247, 4, 62, 70, 205, 41, 190, 245, 214, 56, 62, 137, 233, 9, 62, 36, 10, 161, 190, 114, 51, 24, 190, 144, 86, 177, 61, 33, 63, 9, 190, 187, 90, 9, 62, 207, 87, 187, 189, 141, 127, 43, 62, 75, 213, 163, 61, 26, 152, 145, 191, 245, 253, 151, 189, 87, 13, 12, 62, 130, 88, 119, 62, 16, 251, 157, 190, 140, 142, 233, 186, 171, 152, 161, 62, 225, 142, 202, 61, 156, 80, 198, 190, 130, 145, 176, 189, 110, 200, 245, 60, 110, 238, 53, 190, 133, 130, 9, 62, 232, 171, 220, 61, 98, 57, 90, 62, 192, 173, 71, 191, 92, 93, 146, 61, 226, 63, 190, 59, 199, 31, 35, 62, 213, 187, 49, 191, 223, 25, 122, 191, 182, 104, 159, 190, 43, 174, 64, 62, 3, 167, 181, 191, 7, 29, 143, 62, 180, 49, 180, 190, 122, 231, 165, 190, 64, 37, 23, 191, 214, 23, 148, 190, 41, 137, 247, 190, 253, 14, 158, 62, 182, 202, 13, 61, 12, 94, 230, 189, 25, 3, 60, 62, 13, 213, 138, 62, 187, 173, 6, 62, 45, 223, 35, 60, 172, 25, 156, 190, 109, 237, 7, 62, 120, 233, 81, 190, 94, 68, 172, 62, 145, 3, 102, 62, 12, 213, 51, 190, 134, 86, 234, 62, 188, 219, 146, 61, 30, 198, 166, 188, 62, 252, 78, 190, 45, 105, 230, 187, 114, 112, 28, 189, 165, 128, 156, 190, 223, 176, 109, 62, 57, 102, 23, 190, 145, 146, 169, 190, 45, 90, 3, 189, 234, 136, 36, 60, 99, 198, 76, 190, 78, 213, 155, 61, 98, 95, 158, 62, 144, 60, 253, 61, 124, 149, 61, 190, 119, 251, 2, 191, 67, 255, 201, 190, 10, 199, 107, 61, 188, 16, 175, 60, 208, 71, 127, 59, 147, 26, 194, 190, 174, 213, 233, 61, 73, 174, 74, 190, 33, 204, 137, 190, 203, 253, 131, 188, 88, 37, 100, 61, 65, 107, 161, 188, 120, 168, 7, 62, 13, 136, 161, 61, 98, 184, 187, 188, 142, 107, 207, 189, 3, 110, 199, 62, 190, 182, 123, 190, 205, 204, 79, 60, 61, 54, 224, 62, 43, 116, 100, 62, 141, 106, 92, 61, 191, 158, 145, 190, 159, 126, 94, 61, 123, 227, 190, 61, 92, 75, 94, 62, 209, 99, 222, 61, 200, 139, 69, 62, 81, 34, 135, 61, 68, 2, 4, 61, 112, 249, 25, 62, 8, 37, 192, 188, 240, 56, 218, 61, 21, 173, 29, 61, 82, 68, 7, 190, 118, 31, 111, 61, 6, 183, 230, 190, 31, 50, 72, 60, 93, 69, 150, 62, 208, 242, 174, 189, 196, 175, 103, 190, 113, 204, 29, 190, 116, 27, 11, 61, 124, 193, 56, 61, 128, 99, 218, 62, 151, 133, 161, 61, 217, 106, 25, 190, 227, 195, 33, 62, 114, 209, 197, 61, 40, 124, 58, 62, 169, 235, 30, 62, 37, 167, 226, 189, 106, 210, 93, 62, 27, 66, 152, 190, 98, 57, 59, 62, 56, 122, 138, 190, 11, 149, 4, 191, 142, 65, 107, 189, 99, 188, 82, 189, 108, 255, 6, 191, 73, 72, 187, 61, 104, 149, 42, 189, 103, 135, 116, 62, 222, 128, 132, 190, 132, 87, 120, 190, 246, 63, 194, 190, 110, 36, 150, 61, 248, 158, 10, 191, 233, 249, 146, 62, 152, 147, 102, 189, 223, 216, 151, 190, 239, 58, 85, 61, 88, 190, 183, 62, 52, 69, 13, 62, 36, 42, 131, 61, 76, 104, 235, 61, 107, 71, 66, 190, 104, 30, 205, 190, 82, 9, 170, 62, 36, 212, 57, 189, 122, 214, 164, 190, 100, 242, 146, 61, 63, 188, 226, 189, 9, 231, 53, 62, 233, 109, 149, 190, 0, 153, 175, 61, 38, 8, 203, 190, 244, 45, 187, 61, 114, 195, 160, 62, 3, 41, 134, 62, 190, 48, 122, 190, 244, 58, 98, 62, 91, 58, 185, 189, 100, 32, 13, 191, 137, 1, 21, 190, 206, 238, 126, 61, 71, 46, 17, 62, 102, 92, 85, 62, 42, 83, 188, 60, 77, 26, 57, 190, 193, 63, 167, 62, 158, 64, 141, 61, 221, 39, 40, 190, 214, 223, 29, 189, 169, 205, 166, 62, 18, 222, 154, 189, 240, 163, 17, 62, 40, 50, 176, 187, 1, 122, 179, 190, 255, 192, 182, 190, 214, 46, 9, 62, 2, 68, 38, 191, 12, 70, 164, 190, 245, 177, 200, 189, 90, 249, 27, 62, 67, 249, 134, 62, 38, 55, 129, 189, 89, 126, 130, 61, 211, 180, 146, 190, 159, 103, 140, 62, 152, 100, 214, 60, 59, 202, 89, 189, 18, 236, 3, 189, 107, 196, 223, 59, 26, 8, 94, 61, 27, 46, 83, 190, 82, 180, 44, 190, 54, 19, 230, 188, 153, 167, 159, 62, 133, 53, 135, 62, 39, 84, 129, 61, 65, 216, 141, 190, 202, 116, 183, 62, 111, 92, 169, 187, 67, 156, 35, 190, 245, 182, 10, 187, 62, 35, 16, 61, 208, 216, 249, 189, 132, 25, 58, 61, 55, 223, 158, 62, 234, 97, 9, 190, 218, 91, 189, 189, 164, 100, 39, 62, 130, 252, 21, 190, 192, 240, 137, 61, 173, 46, 128, 62, 223, 80, 54, 62, 79, 41, 150, 188, 126, 125, 12, 190, 117, 201, 178, 61, 248, 119, 182, 61, 20, 193, 82, 62, 229, 131, 37, 62, 212, 34, 255, 188, 162, 252, 147, 190, 105, 169, 63, 61, 201, 22, 125, 187, 26, 180, 63, 190, 103, 57, 15, 190, 225, 12, 6, 62, 226, 84, 70, 62, 58, 114, 87, 62, 39, 194, 26, 62, 86, 0, 135, 61, 83, 84, 31, 190, 117, 238, 181, 189, 168, 189, 9, 62, 59, 18, 61, 190, 68, 230, 192, 60, 253, 10, 41, 190, 244, 237, 212, 189, 33, 193, 58, 189, 151, 157, 16, 190, 246, 201, 140, 61, 134, 181, 4, 190, 17, 23, 150, 61, 234, 229, 146, 61, 150, 195, 4, 190, 250, 187, 164, 189, 57, 51, 5, 62, 88, 232, 66, 190, 173, 53, 107, 190, 239, 36, 60, 61, 212, 3, 114, 189, 150, 2, 104, 188, 49, 35, 114, 189, 88, 134, 226, 61, 97, 26, 180, 189, 177, 35, 84, 61, 104, 125, 11, 62, 194, 215, 209, 189, 134, 221, 132, 188, 55, 60, 174, 61, 207, 192, 221, 189, 49, 42, 116, 190, 12, 220, 165, 61, 4, 184, 234, 61, 250, 220, 130, 190, 102, 62, 154, 61, 213, 128, 172, 188, 29, 141, 30, 190, 92, 191, 116, 188, 119, 9, 143, 61, 97, 131, 153, 190, 107, 206, 140, 60, 178, 159, 171, 189, 19, 226, 196, 189, 15, 24, 149, 61, 156, 116, 47, 189, 65, 170, 137, 190, 57, 177, 24, 190, 181, 213, 190, 58, 22, 131, 16, 189, 81, 12, 21, 62, 105, 185, 147, 61, 51, 3, 181, 189, 116, 36, 26, 61, 9, 206, 252, 61, 37, 32, 163, 61, 173, 146, 50, 189, 37, 248, 198, 189, 215, 5, 79, 62, 33, 224, 5, 190, 213, 4, 209, 189, 202, 76, 0, 190, 254, 96, 9, 190, 154, 161, 77, 190, 233, 90, 254, 189, 40, 66, 136, 190, 125, 138, 160, 189, 73, 200, 245, 189, 226, 141, 119, 190, 214, 166, 42, 62, 56, 209, 104, 62, 195, 70, 89, 190, 1, 63, 115, 190, 106, 32, 12, 61, 164, 99, 145, 188, 253, 58, 167, 61, 136, 228, 209, 60, 198, 105, 30, 189, 235, 153, 138, 190, 194, 215, 67, 189, 72, 152, 92, 189, 45, 210, 15, 190, 119, 165, 66, 62, 235, 105, 227, 189, 105, 110, 150, 188, 79, 99, 190, 61, 150, 208, 204, 184, 237, 101, 18, 62, 65, 230, 51, 190, 126, 139, 232, 190, 168, 169, 205, 188, 103, 216, 15, 61, 77, 67, 3, 190, 159, 167, 68, 62, 95, 44, 44, 62, 62, 226, 144, 190, 171, 158, 77, 190, 143, 185, 149, 61, 175, 23, 205, 61, 235, 71, 218, 190, 237, 35, 180, 60, 115, 9, 182, 62, 60, 171, 23, 62, 72, 23, 8, 190, 80, 151, 25, 62, 142, 66, 181, 190, 170, 70, 188, 190, 221, 190, 133, 62, 83, 226, 7, 191, 207, 113, 253, 190, 23, 51, 160, 59, 33, 211, 45, 61, 134, 38, 191, 189, 198, 251, 206, 190, 145, 180, 11, 61, 85, 70, 247, 190, 168, 108, 17, 62, 100, 26, 160, 62, 120, 210, 41, 61, 54, 113, 154, 190, 147, 211, 84, 62, 171, 169, 75, 62, 121, 130, 154, 190, 56, 190, 165, 190, 113, 48, 107, 62, 66, 118, 73, 62, 235, 85, 172, 62, 227, 46, 132, 189, 235, 241, 20, 61, 126, 59, 246, 189, 57, 145, 11, 189, 152, 160, 147, 62, 62, 240, 63, 188, 220, 43, 3, 190, 54, 93, 82, 190, 248, 165, 255, 189, 5, 53, 184, 60, 64, 220, 12, 62, 105, 215, 72, 62, 58, 111, 25, 190, 14, 135, 180, 62, 101, 142, 34, 62, 140, 3, 74, 62, 15, 34, 58, 189, 12, 40, 71, 62, 71, 10, 131, 62, 177, 206, 149, 190, 180, 191, 132, 62, 173, 24, 115, 61, 16, 228, 183, 189, 12, 228, 250, 188, 94, 204, 39, 189, 43, 182, 22, 190, 166, 197, 65, 189, 235, 59, 97, 62, 164, 250, 131, 62, 32, 219, 97, 60, 41, 140, 182, 190, 53, 143, 33, 190, 61, 199, 150, 189, 139, 240, 80, 62, 53, 126, 58, 62, 209, 69, 14, 189, 35, 47, 66, 62, 104, 176, 227, 61, 252, 14, 30, 189, 231, 94, 221, 189, 243, 128, 211, 60, 235, 117, 191, 189, 216, 109, 188, 62, 246, 101, 6, 190, 63, 241, 160, 61, 152, 255, 6, 62, 90, 221, 184, 190, 115, 32, 103, 190, 188, 201, 74, 191, 63, 108, 76, 62, 252, 246, 211, 187, 86, 37, 186, 189, 103, 218, 121, 190, 177, 49, 24, 62, 203, 87, 134, 189, 31, 61, 4, 190, 133, 153, 189, 189, 44, 206, 67, 60, 107, 193, 7, 61, 226, 191, 143, 62, 253, 8, 218, 61, 132, 2, 187, 61, 47, 81, 195, 187, 118, 205, 29, 61, 98, 83, 103, 191, 54, 155, 11, 190, 160, 85, 0, 190, 43, 185, 1, 189, 143, 249, 166, 61, 232, 60, 230, 189, 200, 133, 10, 190, 146, 39, 50, 61, 92, 44, 160, 61, 79, 14, 158, 187, 67, 177, 192, 188, 153, 53, 174, 61, 28, 190, 18, 190, 222, 60, 47, 190, 80, 1, 139, 61, 145, 170, 106, 190, 74, 13, 169, 61, 226, 198, 183, 189, 85, 190, 137, 189, 6, 83, 225, 189, 64, 62, 19, 190, 203, 180, 139, 61, 112, 92, 2, 61, 202, 101, 36, 190, 202, 182, 33, 62, 14, 124, 9, 62, 113, 160, 170, 189, 219, 9, 11, 62, 87, 3, 167, 61, 38, 28, 20, 60, 97, 54, 125, 61, 3, 212, 3, 190, 99, 29, 191, 189, 39, 224, 55, 62, 92, 27, 69, 62, 195, 157, 212, 190, 173, 71, 148, 61, 236, 166, 4, 190, 98, 220, 146, 190, 100, 141, 114, 61, 153, 24, 52, 61, 210, 74, 167, 61, 144, 64, 127, 62, 65, 133, 240, 189, 20, 4, 255, 58, 119, 225, 122, 188, 173, 83, 240, 62, 160, 48, 99, 190, 176, 137, 47, 190, 105, 175, 181, 62, 15, 207, 246, 188, 78, 35, 19, 62, 169, 83, 140, 190, 221, 204, 6, 62, 137, 159, 217, 61, 198, 48, 99, 62, 104, 206, 23, 62, 18, 24, 218, 61, 1, 129, 209, 61, 200, 233, 107, 59, 242, 16, 218, 59, 95, 85, 33, 188, 49, 5, 223, 60, 39, 190, 175, 189, 86, 21, 187, 189, 93, 98, 234, 188, 133, 21, 45, 189, 146, 82, 223, 61, 131, 244, 175, 60, 101, 11, 38, 61, 86, 17, 47, 62, 83, 48, 9, 190, 230, 194, 222, 61, 195, 138, 2, 187, 139, 228, 5, 62, 248, 111, 26, 190, 38, 82, 220, 187, 255, 44, 227, 61, 184, 248, 221, 60, 54, 105, 142, 62, 244, 106, 18, 189, 122, 178, 81, 189, 35, 146, 32, 60, 89, 162, 178, 189, 176, 61, 13, 62, 12, 130, 227, 188, 29, 5, 157, 61, 88, 48, 190, 61, 243, 6, 57, 190, 62, 59, 49, 62, 106, 110, 14, 62, 148, 139, 198, 189, 211, 114, 67, 62, 87, 82, 125, 189, 174, 25, 243, 189, 49, 50, 13, 59, 116, 3, 3, 62, 252, 21, 237, 189, 184, 106, 161, 61, 31, 177, 42, 190, 6, 53, 223, 61, 192, 250, 156, 61, 116, 246, 42, 190, 251, 27, 98, 61, 116, 223, 66, 61, 200, 81, 17, 62, 70, 92, 172, 189, 208, 217, 244, 189, 116, 127, 191, 189, 233, 245, 126, 189, 129, 135, 53, 188, 242, 183, 3, 188, 96, 79, 174, 189, 20, 63, 8, 189, 12, 8, 37, 190, 167, 150, 16, 190, 157, 101, 193, 189, 149, 148, 147, 61, 228, 225, 61, 61, 237, 75, 243, 189, 207, 227, 210, 61, 88, 128, 187, 188, 233, 105, 5, 190, 138, 119, 50, 61, 159, 43, 112, 189, 136, 4, 60, 190, 4, 164, 52, 190, 108, 113, 138, 60, 161, 0, 112, 189, 197, 73, 195, 61, 192, 26, 238, 61, 3, 178, 162, 190, 122, 92, 232, 189, 88, 64, 154, 190, 192, 147, 226, 60, 153, 229, 140, 62, 223, 34, 144, 190, 54, 155, 7, 190, 168, 225, 233, 189, 32, 134, 18, 190, 16, 77, 7, 62, 188, 255, 51, 189, 250, 123, 57, 189, 150, 243, 170, 189, 115, 79, 68, 189, 57, 31, 111, 61, 19, 21, 2, 62, 38, 237, 0, 62, 185, 198, 13, 62, 38, 218, 26, 190, 219, 202, 29, 190, 32, 113, 108, 61, 91, 108, 236, 189, 104, 72, 33, 189, 99, 58, 250, 190, 228, 2, 251, 187, 65, 197, 160, 189, 181, 84, 4, 61, 58, 80, 180, 60, 14, 16, 56, 190, 207, 126, 92, 62, 165, 17, 93, 61, 106, 27, 230, 189, 185, 107, 97, 189, 79, 105, 137, 189, 199, 13, 39, 62, 20, 122, 126, 61, 194, 219, 19, 62, 19, 155, 186, 60, 95, 208, 81, 189, 34, 236, 172, 188, 237, 145, 35, 190, 78, 205, 33, 190, 39, 102, 5, 190, 200, 253, 135, 61, 63, 169, 24, 190, 10, 227, 237, 187, 214, 25, 29, 189, 141, 190, 204, 189, 186, 83, 33, 190, 38, 141, 232, 189, 165, 37, 29, 61, 199, 193, 131, 189, 152, 78, 210, 189, 138, 214, 29, 62, 103, 101, 253, 61, 106, 81, 194, 189, 164, 24, 29, 190, 30, 111, 250, 60, 89, 32, 177, 61, 172, 69, 12, 62, 219, 80, 38, 189, 57, 186, 165, 189, 79, 90, 4, 190, 230, 26, 128, 189, 60, 148, 58, 61, 93, 20, 53, 190, 71, 230, 99, 62, 206, 155, 149, 60, 241, 119, 128, 61, 42, 248, 225, 61, 204, 107, 232, 61, 184, 2, 84, 191, 245, 126, 175, 190, 4, 63, 153, 61, 151, 167, 215, 190, 16, 183, 20, 191, 153, 212, 106, 62, 216, 81, 213, 59, 106, 230, 60, 190, 9, 220, 255, 189, 47, 86, 190, 61, 130, 184, 30, 191, 75, 32, 129, 62, 206, 205, 113, 62, 40, 119, 147, 62, 183, 169, 121, 189, 236, 21, 94, 189, 184, 153, 152, 61, 173, 219, 95, 190, 84, 22, 51, 191, 167, 246, 12, 62, 18, 105, 19, 190, 17, 191, 103, 62, 79, 49, 104, 190, 180, 135, 134, 61, 20, 42, 187, 61, 39, 194, 5, 190, 79, 142, 37, 61, 121, 106, 177, 190, 141, 60, 164, 61, 94, 211, 140, 62, 144, 240, 233, 190, 196, 87, 97, 190, 140, 140, 27, 62, 146, 111, 97, 190, 40, 252, 125, 62, 28, 170, 143, 188, 75, 219, 1, 188, 176, 48, 159, 190, 102, 41, 84, 61, 90, 7, 254, 188, 94, 220, 11, 190, 217, 52, 127, 61, 85, 225, 55, 188, 167, 87, 165, 61, 154, 136, 16, 190, 233, 57, 110, 190, 136, 175, 237, 61, 209, 210, 21, 62, 61, 85, 226, 190, 129, 22, 174, 58, 15, 8, 164, 189, 18, 126, 240, 60, 141, 10, 118, 61, 27, 229, 63, 190, 50, 27, 27, 62, 124, 24, 177, 61, 136, 6, 151, 189, 148, 230, 200, 61, 40, 36, 251, 188, 195, 108, 148, 189, 193, 15, 155, 188, 103, 255, 21, 190, 11, 115, 195, 61, 156, 166, 11, 190, 106, 209, 250, 61, 157, 44, 161, 61, 83, 48, 21, 60, 44, 52, 254, 59, 123, 130, 130, 189, 147, 156, 41, 190, 184, 8, 10, 190, 23, 253, 94, 189, 126, 126, 236, 61, 103, 89, 162, 189, 72, 182, 134, 188, 225, 81, 51, 190, 88, 144, 11, 190, 218, 199, 84, 188, 145, 138, 248, 61, 26, 112, 242, 189, 157, 148, 26, 190, 55, 142, 151, 61, 186, 87, 202, 189, 26, 162, 79, 61, 187, 26, 71, 188, 97, 44, 186, 61, 7, 176, 35, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 102, 17, 62, 100, 67, 53, 61, 139, 2, 228, 61, 8, 12, 182, 61, 17, 213, 157, 60, 102, 225, 172, 61, 94, 234, 136, 190, 152, 101, 25, 189, 67, 120, 93, 189, 199, 12, 12, 62, 171, 193, 161, 61, 112, 79, 32, 61, 76, 142, 76, 188, 61, 90, 243, 61, 58, 32, 32, 62, 14, 61, 128, 62, 232, 217, 29, 62, 111, 51, 142, 189, 216, 175, 56, 190, 122, 38, 208, 189, 63, 118, 50, 62, 166, 115, 0, 62, 192, 83, 106, 190, 87, 2, 245, 189, 71, 238, 95, 189, 187, 38, 52, 62, 89, 215, 228, 61, 4, 12, 51, 61, 120, 234, 154, 189, 120, 130, 51, 62, 244, 72, 201, 186, 221, 120, 52, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 197, 153, 190, 138, 133, 137, 61, 119, 98, 7, 63, 174, 191, 30, 191, 18, 6, 157, 190, 118, 183, 158, 190, 112, 73, 10, 62, 140, 184, 161, 190, 247, 223, 209, 189, 150, 126, 152, 62, 2, 47, 128, 191, 236, 128, 180, 190, 10, 147, 10, 190, 239, 107, 220, 190, 201, 155, 38, 63, 125, 236, 146, 62, 55, 162, 71, 62, 182, 223, 76, 61, 242, 4, 85, 62, 172, 80, 155, 61, 245, 224, 0, 63, 161, 49, 135, 190, 229, 237, 87, 190, 213, 129, 12, 61, 163, 140, 88, 190, 45, 69, 78, 61, 150, 216, 236, 61, 247, 210, 119, 62, 138, 74, 109, 189, 31, 7, 202, 62, 26, 19, 24, 62, 89, 146, 136, 61, 220, 7, 106, 61, 164, 103, 162, 190, 69, 251, 56, 62, 3, 10, 59, 61, 72, 92, 126, 190, 188, 160, 205, 189, 5, 67, 41, 62, 205, 252, 243, 60, 3, 77, 243, 60, 240, 98, 35, 190, 85, 92, 199, 186, 89, 186, 161, 189, 182, 65, 126, 61, 158, 41, 11, 62, 8, 214, 206, 61, 200, 177, 142, 189, 205, 4, 52, 190, 131, 38, 223, 61, 25, 219, 44, 62, 225, 200, 80, 62, 65, 150, 248, 61, 67, 189, 234, 189, 74, 248, 120, 60, 191, 60, 96, 61, 210, 44, 208, 61, 190, 127, 74, 190, 120, 144, 118, 61, 18, 148, 141, 60, 93, 235, 194, 189, 95, 3, 36, 190, 219, 40, 133, 61, 174, 139, 5, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 103, 151, 189, 197, 201, 161, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {98, 167, 175, 191, 43, 46, 139, 62, 199, 113, 116, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {138, 9, 63, 64, 118, 135, 12, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0025/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}