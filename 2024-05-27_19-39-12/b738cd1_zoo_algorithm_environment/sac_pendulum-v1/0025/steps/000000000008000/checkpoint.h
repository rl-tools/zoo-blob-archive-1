// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 236, 99, 188, 61, 188, 21, 63, 140, 116, 22, 63, 138, 157, 232, 62, 206, 5, 15, 191, 131, 57, 236, 62, 87, 144, 62, 190, 172, 230, 78, 63, 145, 56, 67, 190, 90, 97, 157, 62, 126, 51, 189, 62, 16, 165, 4, 63, 120, 0, 55, 191, 145, 219, 244, 62, 144, 224, 1, 61, 138, 87, 91, 63, 190, 54, 119, 191, 201, 87, 137, 190, 136, 189, 58, 63, 95, 74, 50, 191, 229, 20, 5, 191, 177, 251, 4, 191, 174, 239, 169, 62, 156, 129, 179, 61, 109, 179, 11, 191, 128, 49, 40, 191, 27, 158, 214, 61, 106, 214, 83, 62, 90, 29, 9, 63, 94, 63, 125, 190, 12, 177, 34, 188, 66, 184, 235, 62, 62, 93, 116, 190, 230, 55, 77, 63, 127, 140, 12, 191, 77, 66, 18, 191, 58, 106, 202, 189, 163, 103, 25, 63, 226, 69, 155, 190, 66, 132, 155, 190, 50, 197, 206, 191, 145, 38, 192, 190, 162, 88, 48, 190, 235, 26, 228, 62, 218, 187, 137, 188, 45, 249, 38, 191, 226, 151, 2, 191, 219, 1, 43, 187, 195, 112, 221, 61, 193, 169, 184, 63, 14, 216, 186, 189, 158, 40, 199, 62, 57, 170, 28, 191, 113, 207, 46, 63, 100, 236, 169, 62, 251, 193, 3, 190, 1, 197, 28, 191, 104, 208, 36, 190, 106, 137, 32, 190, 116, 155, 81, 191, 232, 133, 131, 190, 99, 50, 201, 63, 24, 56, 6, 63, 66, 156, 214, 188, 27, 28, 175, 190, 154, 200, 49, 63, 29, 87, 21, 188, 141, 40, 147, 63, 113, 48, 31, 63, 66, 115, 187, 190, 65, 254, 45, 190, 186, 175, 33, 63, 53, 146, 105, 62, 185, 91, 204, 190, 138, 183, 77, 63, 142, 183, 7, 191, 176, 21, 199, 62, 209, 255, 231, 61, 106, 177, 129, 63, 122, 154, 183, 63, 212, 159, 181, 62, 102, 212, 32, 63, 71, 28, 6, 63, 71, 224, 156, 190, 190, 160, 207, 190, 139, 187, 184, 63, 190, 136, 211, 62, 194, 187, 169, 189, 4, 5, 130, 61, 67, 170, 170, 190, 17, 19, 117, 190, 227, 9, 5, 191, 65, 18, 22, 63, 30, 247, 142, 190, 74, 83, 28, 191, 39, 244, 132, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 191, 31, 191, 242, 69, 137, 62, 14, 178, 39, 62, 28, 8, 103, 62, 91, 57, 132, 62, 93, 222, 194, 62, 210, 137, 86, 191, 43, 218, 2, 63, 31, 169, 229, 62, 86, 39, 16, 189, 46, 124, 30, 190, 71, 145, 153, 62, 160, 178, 145, 190, 183, 248, 141, 190, 232, 36, 107, 62, 16, 227, 215, 62, 27, 33, 17, 63, 206, 78, 192, 62, 20, 114, 194, 190, 74, 15, 34, 190, 122, 64, 180, 187, 136, 223, 44, 190, 94, 154, 125, 62, 84, 105, 200, 190, 145, 20, 197, 62, 2, 156, 34, 63, 31, 169, 220, 188, 113, 235, 4, 63, 176, 160, 59, 190, 157, 211, 139, 190, 82, 67, 186, 190, 34, 50, 243, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 5, 84, 190, 117, 152, 223, 190, 115, 132, 108, 62, 32, 56, 240, 62, 125, 14, 198, 60, 78, 255, 228, 190, 102, 17, 51, 191, 69, 204, 87, 62, 135, 157, 177, 189, 175, 79, 96, 62, 70, 116, 88, 62, 8, 14, 13, 190, 210, 122, 157, 62, 210, 226, 169, 61, 189, 157, 99, 62, 57, 54, 217, 189, 27, 58, 51, 62, 231, 139, 112, 62, 206, 100, 131, 190, 133, 153, 76, 62, 88, 74, 203, 190, 76, 1, 19, 191, 213, 33, 239, 61, 92, 235, 4, 62, 193, 253, 157, 190, 8, 92, 20, 189, 0, 198, 158, 62, 148, 157, 38, 62, 234, 121, 2, 191, 1, 48, 227, 190, 29, 214, 114, 190, 34, 50, 58, 190, 191, 142, 93, 190, 26, 216, 49, 189, 50, 237, 75, 61, 236, 209, 42, 62, 65, 174, 241, 190, 150, 35, 42, 62, 47, 48, 154, 189, 125, 167, 243, 190, 11, 214, 52, 190, 166, 216, 166, 189, 50, 204, 247, 189, 199, 58, 59, 188, 130, 167, 250, 61, 237, 206, 120, 61, 150, 80, 22, 59, 28, 238, 205, 61, 207, 13, 130, 61, 169, 216, 37, 62, 230, 129, 42, 190, 2, 16, 135, 62, 195, 99, 255, 190, 30, 19, 59, 190, 226, 111, 28, 189, 175, 54, 112, 61, 121, 246, 168, 61, 68, 20, 209, 190, 28, 203, 45, 62, 184, 187, 148, 61, 216, 48, 167, 190, 162, 22, 226, 189, 148, 224, 128, 189, 252, 65, 60, 189, 113, 74, 5, 191, 92, 6, 153, 62, 155, 95, 122, 61, 139, 127, 201, 190, 194, 188, 78, 189, 239, 71, 188, 62, 1, 147, 55, 62, 147, 160, 18, 59, 137, 58, 215, 62, 111, 173, 212, 190, 27, 2, 147, 190, 165, 197, 144, 62, 28, 66, 176, 190, 19, 218, 238, 189, 236, 103, 70, 62, 128, 4, 152, 62, 75, 249, 1, 62, 99, 121, 118, 190, 60, 19, 194, 62, 103, 242, 6, 190, 25, 195, 108, 62, 132, 116, 151, 62, 152, 80, 163, 61, 104, 139, 167, 190, 178, 202, 113, 61, 124, 44, 75, 190, 234, 219, 13, 191, 99, 189, 208, 190, 41, 31, 146, 62, 94, 182, 156, 62, 214, 53, 159, 62, 93, 91, 21, 61, 8, 134, 47, 62, 13, 216, 181, 190, 133, 169, 33, 190, 174, 176, 103, 62, 233, 214, 199, 61, 138, 183, 206, 61, 242, 198, 187, 61, 19, 151, 179, 62, 115, 188, 205, 59, 141, 151, 2, 190, 62, 42, 46, 190, 78, 5, 236, 188, 253, 175, 132, 61, 141, 10, 245, 61, 230, 190, 103, 190, 204, 41, 82, 62, 199, 136, 255, 190, 135, 7, 73, 63, 165, 188, 49, 62, 100, 224, 94, 62, 57, 140, 189, 191, 199, 10, 22, 191, 102, 237, 10, 191, 122, 156, 9, 63, 207, 158, 110, 191, 153, 241, 142, 62, 181, 241, 25, 191, 197, 114, 75, 61, 157, 124, 165, 191, 118, 207, 255, 188, 54, 141, 159, 190, 130, 26, 79, 62, 249, 148, 27, 189, 63, 184, 9, 62, 242, 169, 98, 190, 6, 78, 139, 62, 70, 29, 132, 190, 239, 32, 141, 62, 82, 22, 197, 188, 52, 181, 111, 190, 26, 234, 181, 190, 250, 154, 45, 62, 239, 254, 53, 188, 129, 25, 116, 61, 75, 188, 141, 61, 3, 212, 198, 189, 95, 84, 17, 190, 163, 86, 55, 191, 27, 19, 41, 62, 64, 109, 161, 62, 139, 254, 64, 61, 99, 75, 74, 190, 51, 147, 65, 190, 224, 133, 124, 62, 166, 237, 44, 60, 59, 218, 33, 189, 21, 40, 93, 61, 33, 252, 51, 189, 30, 205, 4, 62, 6, 36, 124, 62, 23, 44, 74, 190, 104, 127, 137, 61, 122, 130, 22, 190, 98, 65, 203, 188, 144, 188, 29, 190, 180, 82, 31, 62, 115, 45, 119, 190, 189, 78, 57, 61, 0, 0, 122, 188, 106, 43, 59, 189, 117, 189, 11, 191, 230, 4, 12, 62, 179, 146, 167, 188, 110, 195, 172, 60, 214, 97, 162, 189, 108, 160, 218, 189, 128, 186, 64, 62, 169, 66, 24, 61, 17, 28, 87, 189, 229, 20, 166, 190, 105, 201, 125, 62, 203, 70, 248, 61, 16, 205, 212, 189, 36, 95, 195, 190, 58, 55, 236, 61, 82, 57, 45, 61, 64, 188, 73, 62, 16, 157, 115, 189, 134, 91, 36, 62, 228, 9, 145, 61, 48, 225, 140, 187, 189, 89, 41, 189, 44, 81, 248, 188, 26, 235, 242, 189, 245, 38, 7, 62, 190, 29, 46, 189, 68, 189, 176, 189, 80, 155, 10, 190, 241, 180, 148, 59, 231, 6, 10, 62, 69, 45, 240, 189, 86, 233, 56, 191, 183, 25, 155, 189, 115, 1, 12, 190, 153, 142, 7, 191, 171, 40, 249, 61, 28, 238, 94, 189, 205, 106, 90, 190, 186, 45, 169, 61, 5, 174, 250, 189, 29, 31, 200, 187, 0, 215, 201, 190, 218, 155, 166, 62, 140, 41, 191, 185, 157, 4, 134, 189, 193, 18, 136, 61, 230, 209, 136, 189, 6, 127, 58, 190, 84, 75, 209, 61, 54, 158, 54, 190, 87, 173, 58, 190, 33, 223, 20, 190, 93, 4, 134, 62, 188, 64, 135, 62, 251, 15, 158, 61, 72, 23, 32, 190, 105, 6, 156, 189, 212, 68, 5, 191, 56, 124, 194, 190, 33, 185, 92, 59, 1, 62, 145, 190, 47, 5, 145, 62, 159, 167, 182, 190, 141, 21, 39, 62, 90, 61, 38, 62, 159, 235, 78, 189, 70, 185, 170, 190, 217, 196, 120, 62, 150, 73, 97, 189, 152, 183, 223, 61, 215, 149, 61, 190, 252, 251, 8, 62, 182, 250, 130, 190, 102, 123, 182, 190, 119, 140, 4, 62, 193, 122, 159, 61, 162, 209, 162, 189, 97, 9, 176, 188, 155, 116, 76, 189, 234, 107, 55, 189, 144, 36, 129, 60, 250, 34, 118, 190, 128, 223, 166, 61, 174, 100, 247, 189, 159, 247, 218, 62, 35, 253, 2, 60, 49, 43, 5, 191, 96, 30, 140, 61, 131, 175, 137, 190, 29, 205, 61, 190, 99, 166, 242, 189, 21, 253, 213, 189, 125, 158, 226, 187, 254, 101, 172, 61, 6, 172, 0, 190, 182, 220, 4, 190, 49, 110, 33, 61, 1, 40, 42, 190, 39, 250, 145, 189, 16, 1, 4, 190, 27, 18, 167, 188, 155, 35, 51, 190, 149, 219, 153, 189, 62, 234, 206, 189, 161, 174, 117, 61, 14, 52, 245, 61, 241, 180, 29, 190, 231, 15, 186, 189, 60, 229, 143, 61, 43, 57, 130, 60, 159, 218, 236, 189, 19, 50, 172, 61, 98, 191, 181, 188, 39, 168, 243, 61, 140, 7, 241, 189, 47, 39, 230, 61, 81, 41, 161, 61, 149, 120, 133, 189, 31, 69, 223, 188, 157, 210, 11, 62, 150, 60, 228, 59, 216, 116, 29, 61, 136, 87, 40, 190, 224, 74, 46, 62, 231, 161, 139, 190, 44, 39, 15, 190, 177, 239, 22, 191, 40, 125, 100, 62, 217, 65, 84, 61, 98, 55, 253, 190, 98, 139, 34, 61, 150, 38, 42, 190, 140, 206, 104, 190, 121, 188, 82, 62, 197, 31, 190, 61, 22, 109, 51, 61, 156, 184, 7, 60, 118, 103, 209, 59, 226, 227, 163, 61, 252, 193, 129, 62, 208, 190, 65, 62, 48, 250, 129, 189, 11, 22, 134, 190, 30, 155, 244, 61, 130, 73, 136, 190, 175, 138, 98, 62, 159, 250, 22, 62, 9, 191, 10, 191, 147, 172, 167, 190, 138, 124, 241, 61, 55, 52, 110, 190, 42, 76, 3, 62, 58, 216, 30, 189, 213, 203, 95, 62, 254, 6, 156, 61, 99, 13, 78, 191, 102, 161, 64, 61, 181, 171, 247, 62, 182, 33, 150, 62, 17, 73, 230, 190, 226, 212, 203, 61, 103, 107, 159, 62, 30, 18, 137, 58, 92, 174, 33, 190, 58, 199, 255, 61, 3, 7, 244, 59, 252, 63, 163, 61, 95, 237, 246, 61, 93, 51, 48, 62, 226, 207, 53, 62, 85, 196, 118, 191, 118, 213, 16, 63, 168, 34, 210, 61, 186, 223, 99, 62, 224, 20, 210, 191, 155, 69, 210, 190, 18, 47, 28, 191, 82, 165, 125, 63, 91, 117, 108, 191, 179, 85, 134, 62, 180, 49, 180, 190, 20, 128, 136, 190, 11, 44, 207, 191, 147, 62, 37, 190, 65, 129, 3, 62, 161, 29, 109, 62, 182, 243, 25, 190, 36, 14, 34, 190, 38, 39, 102, 62, 90, 79, 86, 62, 72, 217, 24, 62, 32, 2, 13, 190, 11, 146, 240, 190, 212, 131, 75, 62, 239, 98, 128, 190, 174, 107, 182, 62, 159, 28, 110, 62, 172, 182, 124, 190, 99, 226, 242, 62, 72, 41, 19, 190, 213, 67, 54, 61, 66, 220, 100, 190, 208, 92, 139, 61, 78, 47, 163, 189, 107, 119, 173, 190, 34, 60, 76, 62, 67, 144, 138, 190, 47, 17, 185, 190, 102, 243, 171, 188, 227, 215, 38, 188, 73, 231, 89, 190, 48, 199, 24, 62, 87, 215, 171, 62, 72, 103, 230, 61, 4, 216, 227, 190, 156, 116, 5, 191, 45, 147, 201, 190, 23, 227, 156, 189, 172, 53, 226, 188, 50, 136, 132, 187, 219, 11, 132, 190, 7, 120, 185, 61, 142, 124, 204, 189, 86, 136, 167, 190, 57, 118, 35, 190, 203, 242, 166, 61, 148, 247, 159, 189, 42, 201, 83, 62, 37, 69, 69, 62, 210, 65, 125, 189, 231, 221, 137, 61, 166, 204, 162, 62, 149, 105, 243, 189, 64, 45, 160, 189, 49, 33, 253, 62, 34, 174, 70, 62, 206, 143, 167, 61, 45, 111, 179, 190, 71, 137, 111, 61, 46, 246, 146, 61, 87, 98, 102, 62, 215, 49, 116, 61, 159, 32, 52, 62, 80, 174, 174, 61, 106, 252, 152, 61, 36, 119, 22, 62, 161, 184, 87, 189, 39, 132, 33, 62, 30, 43, 199, 59, 188, 73, 104, 190, 210, 63, 176, 61, 19, 213, 176, 190, 203, 195, 23, 189, 53, 62, 88, 62, 105, 70, 152, 189, 228, 43, 169, 190, 97, 232, 98, 190, 28, 209, 67, 61, 241, 101, 111, 61, 222, 80, 208, 62, 66, 91, 132, 61, 59, 253, 26, 190, 2, 2, 15, 62, 227, 165, 27, 62, 86, 186, 19, 62, 30, 72, 120, 62, 135, 206, 81, 190, 31, 158, 192, 62, 213, 228, 142, 190, 168, 117, 78, 62, 1, 106, 131, 191, 148, 192, 134, 190, 71, 68, 105, 190, 136, 208, 139, 62, 11, 114, 186, 190, 7, 69, 208, 61, 10, 161, 94, 188, 185, 70, 102, 62, 205, 146, 156, 191, 117, 176, 93, 190, 73, 230, 169, 189, 243, 54, 237, 61, 220, 194, 13, 191, 43, 46, 144, 62, 16, 151, 200, 60, 148, 152, 166, 190, 98, 211, 153, 57, 183, 1, 199, 62, 129, 4, 20, 62, 179, 100, 182, 60, 251, 27, 14, 62, 228, 205, 16, 190, 93, 70, 190, 190, 236, 31, 165, 62, 188, 220, 23, 189, 0, 67, 82, 191, 189, 219, 177, 61, 105, 7, 181, 189, 13, 95, 131, 62, 2, 208, 145, 190, 43, 205, 58, 61, 133, 163, 221, 190, 247, 112, 96, 60, 36, 123, 151, 62, 75, 229, 75, 62, 143, 168, 106, 190, 166, 40, 85, 62, 4, 141, 5, 190, 129, 159, 43, 191, 142, 66, 225, 189, 168, 173, 147, 60, 152, 172, 222, 61, 216, 207, 108, 62, 224, 44, 233, 60, 85, 244, 24, 190, 15, 223, 154, 62, 142, 51, 131, 62, 140, 219, 27, 190, 74, 25, 207, 188, 9, 197, 136, 62, 201, 114, 141, 190, 142, 79, 14, 62, 85, 43, 207, 189, 18, 99, 70, 190, 226, 28, 245, 189, 61, 229, 164, 61, 159, 20, 193, 190, 15, 138, 144, 191, 45, 75, 50, 59, 49, 7, 240, 60, 52, 204, 238, 62, 172, 162, 154, 189, 186, 37, 85, 189, 70, 93, 195, 190, 177, 120, 153, 62, 248, 247, 1, 60, 30, 28, 90, 189, 179, 14, 74, 188, 197, 110, 104, 187, 96, 90, 76, 61, 25, 223, 91, 190, 81, 235, 197, 189, 243, 14, 50, 61, 82, 82, 157, 62, 200, 124, 133, 62, 167, 233, 102, 189, 94, 179, 135, 190, 128, 214, 184, 62, 108, 98, 98, 57, 108, 201, 9, 190, 63, 191, 154, 188, 23, 140, 9, 61, 219, 66, 41, 190, 38, 34, 74, 61, 15, 84, 227, 62, 143, 12, 38, 190, 205, 114, 222, 189, 199, 104, 12, 62, 247, 63, 60, 190, 103, 74, 70, 61, 131, 58, 135, 62, 213, 191, 182, 62, 186, 2, 129, 61, 184, 68, 236, 189, 3, 155, 27, 61, 192, 190, 172, 61, 47, 168, 75, 62, 41, 68, 28, 62, 48, 126, 70, 189, 67, 9, 138, 190, 151, 3, 129, 61, 135, 168, 209, 59, 218, 95, 41, 190, 103, 83, 17, 190, 199, 198, 40, 62, 109, 234, 50, 62, 118, 130, 91, 62, 244, 105, 121, 62, 86, 0, 135, 61, 89, 84, 31, 190, 137, 238, 181, 189, 158, 189, 9, 62, 65, 18, 61, 190, 193, 229, 192, 60, 253, 10, 41, 190, 7, 238, 212, 189, 33, 193, 58, 189, 161, 157, 16, 190, 230, 201, 140, 61, 143, 181, 4, 190, 10, 23, 150, 61, 234, 229, 146, 61, 158, 195, 4, 190, 250, 187, 164, 189, 43, 51, 5, 62, 90, 232, 66, 190, 173, 53, 107, 190, 239, 36, 60, 61, 217, 3, 114, 189, 150, 2, 104, 188, 73, 35, 114, 189, 88, 134, 226, 61, 103, 26, 180, 189, 136, 35, 84, 61, 91, 125, 11, 62, 223, 215, 209, 189, 134, 221, 132, 188, 55, 60, 174, 61, 207, 192, 221, 189, 49, 42, 116, 190, 214, 106, 214, 61, 12, 225, 177, 61, 2, 142, 152, 188, 220, 201, 24, 62, 184, 160, 221, 189, 246, 69, 132, 191, 244, 151, 84, 189, 189, 76, 168, 61, 192, 159, 249, 190, 70, 90, 149, 62, 61, 27, 198, 60, 183, 120, 27, 191, 200, 52, 89, 62, 163, 134, 182, 189, 116, 25, 66, 190, 86, 206, 22, 190, 6, 245, 89, 62, 199, 205, 103, 189, 170, 55, 131, 62, 3, 126, 16, 62, 46, 245, 227, 188, 119, 155, 97, 187, 197, 136, 52, 62, 158, 5, 1, 189, 34, 80, 45, 189, 53, 108, 168, 189, 31, 218, 186, 62, 206, 228, 202, 61, 3, 225, 72, 189, 174, 231, 158, 189, 199, 129, 140, 190, 178, 188, 31, 191, 189, 3, 184, 189, 183, 163, 247, 61, 186, 251, 129, 189, 190, 122, 62, 190, 12, 173, 125, 190, 96, 82, 131, 62, 19, 151, 183, 62, 246, 76, 17, 191, 232, 14, 138, 190, 180, 140, 85, 61, 102, 17, 61, 61, 120, 167, 3, 62, 234, 83, 219, 61, 79, 4, 1, 190, 124, 181, 142, 190, 226, 138, 144, 190, 72, 40, 29, 190, 45, 133, 184, 62, 222, 118, 128, 62, 92, 48, 152, 189, 65, 241, 32, 190, 186, 195, 9, 62, 34, 57, 204, 190, 174, 78, 177, 62, 170, 0, 90, 189, 22, 48, 135, 191, 201, 153, 253, 190, 132, 164, 223, 60, 66, 160, 111, 190, 204, 47, 113, 62, 168, 190, 157, 62, 133, 126, 137, 190, 69, 10, 64, 190, 210, 183, 178, 61, 58, 231, 139, 62, 99, 180, 208, 190, 45, 71, 28, 61, 142, 221, 225, 62, 192, 70, 94, 62, 207, 98, 16, 190, 77, 242, 28, 62, 10, 217, 23, 190, 28, 117, 4, 190, 69, 33, 168, 62, 125, 70, 156, 190, 159, 203, 180, 191, 6, 6, 146, 61, 200, 154, 150, 59, 134, 76, 37, 61, 113, 222, 189, 190, 57, 39, 126, 61, 115, 67, 243, 190, 27, 67, 7, 62, 67, 239, 163, 62, 55, 93, 65, 61, 46, 223, 132, 190, 201, 114, 99, 62, 29, 59, 71, 62, 127, 233, 188, 190, 190, 73, 47, 190, 193, 120, 107, 62, 181, 202, 98, 62, 217, 115, 191, 62, 249, 98, 194, 189, 113, 114, 106, 61, 99, 70, 89, 189, 46, 2, 56, 189, 253, 71, 165, 62, 55, 242, 229, 189, 111, 41, 190, 189, 88, 78, 45, 190, 166, 140, 138, 190, 86, 132, 62, 190, 37, 210, 37, 62, 54, 163, 107, 62, 239, 213, 183, 189, 202, 29, 198, 62, 13, 182, 105, 62, 196, 117, 26, 62, 203, 98, 33, 190, 174, 52, 14, 62, 100, 38, 153, 62, 145, 76, 85, 190, 62, 207, 164, 62, 212, 18, 138, 188, 59, 109, 95, 188, 200, 97, 87, 189, 116, 251, 22, 188, 255, 240, 182, 189, 128, 94, 56, 190, 238, 236, 150, 62, 106, 232, 147, 62, 114, 163, 229, 189, 189, 129, 140, 190, 225, 40, 189, 189, 218, 208, 5, 190, 58, 192, 85, 62, 163, 151, 152, 62, 111, 49, 201, 61, 98, 156, 117, 62, 31, 162, 53, 189, 84, 174, 159, 189, 235, 244, 156, 190, 243, 105, 32, 190, 112, 27, 46, 190, 108, 21, 223, 62, 158, 3, 197, 187, 215, 74, 154, 60, 103, 71, 153, 62, 90, 98, 95, 191, 222, 12, 38, 190, 140, 24, 154, 191, 168, 10, 79, 62, 73, 165, 208, 61, 22, 11, 138, 189, 20, 237, 49, 190, 21, 187, 100, 61, 151, 101, 65, 61, 162, 197, 14, 190, 59, 127, 98, 189, 39, 125, 201, 61, 21, 70, 1, 190, 237, 135, 187, 62, 24, 219, 198, 61, 155, 176, 196, 189, 150, 192, 3, 62, 69, 15, 11, 62, 103, 152, 132, 191, 54, 155, 11, 190, 160, 85, 0, 190, 43, 185, 1, 189, 143, 249, 166, 61, 232, 60, 230, 189, 200, 133, 10, 190, 146, 39, 50, 61, 92, 44, 160, 61, 79, 14, 158, 187, 67, 177, 192, 188, 153, 53, 174, 61, 28, 190, 18, 190, 222, 60, 47, 190, 80, 1, 139, 61, 145, 170, 106, 190, 74, 13, 169, 61, 226, 198, 183, 189, 85, 190, 137, 189, 6, 83, 225, 189, 64, 62, 19, 190, 203, 180, 139, 61, 112, 92, 2, 61, 202, 101, 36, 190, 202, 182, 33, 62, 14, 124, 9, 62, 113, 160, 170, 189, 219, 9, 11, 62, 87, 3, 167, 61, 38, 28, 20, 60, 97, 54, 125, 61, 3, 212, 3, 190, 99, 29, 191, 189, 150, 231, 14, 62, 146, 16, 34, 62, 195, 221, 139, 190, 116, 86, 81, 61, 225, 251, 20, 60, 6, 113, 188, 190, 149, 221, 35, 60, 147, 137, 175, 61, 149, 183, 117, 60, 200, 131, 165, 62, 221, 155, 187, 61, 35, 252, 137, 189, 87, 15, 71, 62, 180, 98, 244, 62, 40, 201, 181, 189, 58, 74, 129, 190, 146, 30, 226, 62, 71, 249, 170, 189, 137, 210, 240, 189, 175, 229, 6, 191, 42, 143, 27, 62, 13, 134, 153, 61, 42, 80, 124, 62, 44, 242, 212, 61, 114, 1, 147, 61, 117, 159, 17, 62, 31, 208, 146, 61, 204, 208, 1, 186, 23, 133, 175, 188, 62, 154, 71, 190, 6, 162, 241, 189, 214, 4, 94, 190, 173, 54, 68, 189, 90, 32, 117, 189, 96, 185, 168, 61, 246, 218, 26, 61, 153, 149, 206, 60, 54, 211, 26, 62, 37, 34, 44, 190, 224, 82, 179, 61, 120, 36, 118, 61, 211, 86, 240, 61, 80, 191, 13, 190, 124, 208, 205, 187, 54, 9, 213, 61, 146, 168, 161, 60, 111, 106, 129, 62, 97, 248, 228, 61, 81, 25, 188, 188, 124, 85, 247, 59, 252, 210, 163, 189, 95, 3, 53, 62, 119, 224, 167, 189, 35, 219, 136, 61, 89, 199, 101, 61, 17, 202, 40, 190, 141, 199, 64, 62, 28, 75, 0, 62, 251, 49, 113, 189, 40, 207, 81, 62, 232, 141, 188, 189, 81, 131, 149, 189, 202, 36, 182, 186, 143, 239, 61, 62, 252, 21, 237, 189, 1, 41, 137, 61, 32, 208, 41, 190, 40, 221, 210, 61, 104, 241, 151, 61, 116, 246, 42, 190, 251, 27, 98, 61, 85, 171, 41, 61, 236, 31, 5, 62, 70, 92, 172, 189, 208, 217, 244, 189, 116, 127, 191, 189, 233, 245, 126, 189, 210, 5, 82, 188, 226, 214, 250, 187, 41, 151, 192, 189, 96, 60, 7, 189, 129, 207, 55, 190, 167, 150, 16, 190, 186, 17, 191, 189, 107, 216, 140, 61, 78, 62, 7, 61, 160, 255, 2, 190, 199, 36, 187, 61, 249, 233, 47, 189, 194, 14, 13, 190, 138, 119, 50, 61, 159, 43, 112, 189, 189, 97, 61, 190, 4, 164, 52, 190, 205, 173, 162, 59, 103, 117, 135, 189, 87, 18, 173, 61, 22, 225, 215, 61, 130, 142, 148, 190, 149, 252, 150, 189, 96, 224, 208, 190, 62, 62, 101, 61, 103, 159, 158, 62, 116, 225, 84, 191, 203, 244, 15, 190, 9, 82, 16, 189, 43, 94, 149, 189, 185, 202, 36, 62, 205, 94, 185, 60, 3, 13, 22, 190, 178, 93, 166, 189, 55, 9, 43, 190, 98, 134, 58, 62, 70, 225, 238, 61, 75, 61, 19, 62, 97, 142, 27, 62, 142, 175, 253, 190, 237, 221, 177, 190, 178, 102, 153, 188, 180, 10, 252, 189, 129, 151, 86, 189, 74, 222, 137, 191, 242, 195, 10, 61, 115, 59, 139, 188, 228, 225, 136, 60, 12, 23, 24, 61, 91, 172, 105, 190, 227, 57, 241, 61, 165, 17, 93, 61, 106, 27, 230, 189, 185, 107, 97, 189, 79, 105, 137, 189, 199, 13, 39, 62, 20, 122, 126, 61, 194, 219, 19, 62, 19, 155, 186, 60, 95, 208, 81, 189, 34, 236, 172, 188, 237, 145, 35, 190, 78, 205, 33, 190, 39, 102, 5, 190, 200, 253, 135, 61, 63, 169, 24, 190, 10, 227, 237, 187, 214, 25, 29, 189, 141, 190, 204, 189, 186, 83, 33, 190, 38, 141, 232, 189, 165, 37, 29, 61, 199, 193, 131, 189, 152, 78, 210, 189, 138, 214, 29, 62, 103, 101, 253, 61, 106, 81, 194, 189, 164, 24, 29, 190, 30, 111, 250, 60, 89, 32, 177, 61, 172, 69, 12, 62, 219, 80, 38, 189, 57, 186, 165, 189, 55, 47, 8, 190, 112, 83, 178, 189, 82, 218, 245, 61, 202, 184, 59, 190, 140, 19, 85, 62, 230, 13, 161, 187, 241, 119, 128, 61, 12, 77, 225, 61, 161, 12, 157, 61, 146, 28, 96, 191, 248, 79, 14, 191, 154, 99, 11, 62, 213, 3, 33, 191, 36, 84, 168, 191, 216, 205, 135, 62, 177, 21, 137, 188, 48, 123, 153, 188, 233, 94, 14, 190, 47, 86, 190, 61, 247, 23, 60, 191, 142, 204, 139, 62, 134, 8, 93, 62, 82, 136, 150, 62, 118, 54, 145, 189, 137, 244, 134, 189, 119, 231, 145, 61, 193, 230, 120, 190, 100, 71, 196, 190, 79, 172, 42, 62, 47, 179, 35, 187, 26, 181, 75, 62, 242, 191, 140, 190, 13, 184, 89, 61, 47, 181, 215, 61, 91, 195, 183, 189, 18, 53, 156, 61, 104, 167, 216, 190, 56, 209, 229, 61, 157, 107, 168, 62, 8, 177, 130, 191, 100, 68, 88, 190, 195, 195, 115, 62, 149, 228, 12, 190, 109, 53, 145, 62, 120, 239, 133, 61, 124, 210, 230, 189, 28, 48, 151, 190, 89, 133, 174, 189, 120, 243, 165, 61, 208, 123, 237, 189, 52, 130, 188, 61, 89, 211, 81, 60, 118, 228, 197, 190, 253, 123, 191, 190, 138, 240, 157, 190, 211, 255, 223, 61, 159, 106, 25, 62, 43, 102, 136, 191, 97, 173, 164, 59, 48, 178, 144, 188, 8, 231, 96, 60, 131, 42, 179, 61, 71, 19, 136, 190, 14, 249, 79, 61, 124, 24, 177, 61, 136, 6, 151, 189, 148, 230, 200, 61, 40, 36, 251, 188, 195, 108, 148, 189, 193, 15, 155, 188, 103, 255, 21, 190, 11, 115, 195, 61, 156, 166, 11, 190, 106, 209, 250, 61, 157, 44, 161, 61, 83, 48, 21, 60, 44, 52, 254, 59, 123, 130, 130, 189, 147, 156, 41, 190, 184, 8, 10, 190, 23, 253, 94, 189, 126, 126, 236, 61, 103, 89, 162, 189, 72, 182, 134, 188, 225, 81, 51, 190, 88, 144, 11, 190, 218, 199, 84, 188, 145, 138, 248, 61, 26, 112, 242, 189, 157, 148, 26, 190, 55, 142, 151, 61, 186, 87, 202, 189, 26, 162, 79, 61, 187, 26, 71, 188, 97, 44, 186, 61, 7, 176, 35, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 11, 188, 61, 187, 49, 22, 60, 31, 21, 205, 61, 247, 117, 225, 61, 35, 219, 148, 61, 114, 237, 184, 61, 190, 2, 93, 190, 143, 121, 3, 188, 67, 120, 93, 189, 216, 140, 17, 62, 190, 10, 37, 188, 195, 61, 178, 60, 121, 10, 2, 188, 77, 22, 234, 61, 203, 51, 34, 62, 132, 222, 78, 62, 125, 224, 74, 62, 140, 51, 142, 189, 235, 46, 215, 189, 248, 242, 72, 190, 38, 221, 67, 62, 117, 239, 185, 61, 41, 204, 136, 190, 87, 2, 245, 189, 187, 12, 113, 189, 41, 100, 73, 62, 226, 119, 212, 61, 83, 178, 161, 60, 120, 234, 154, 189, 240, 139, 25, 62, 174, 234, 2, 189, 221, 120, 52, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 222, 249, 190, 245, 166, 148, 61, 116, 212, 17, 63, 255, 243, 66, 191, 7, 217, 179, 190, 74, 176, 138, 190, 138, 229, 16, 63, 139, 73, 165, 190, 247, 223, 209, 189, 110, 221, 205, 62, 89, 240, 153, 191, 121, 191, 19, 191, 91, 0, 220, 189, 227, 104, 24, 191, 30, 209, 64, 63, 120, 52, 176, 62, 249, 67, 80, 62, 175, 223, 76, 61, 222, 120, 71, 63, 122, 102, 186, 62, 15, 163, 36, 63, 194, 115, 93, 190, 101, 64, 213, 190, 213, 129, 12, 61, 177, 111, 68, 190, 233, 191, 16, 61, 180, 66, 237, 61, 111, 194, 187, 62, 138, 74, 109, 189, 151, 202, 240, 62, 115, 161, 156, 62, 89, 146, 136, 61, 54, 222, 24, 62, 185, 112, 214, 190, 202, 152, 148, 62, 35, 121, 84, 61, 21, 33, 160, 190, 116, 23, 220, 189, 20, 110, 137, 62, 115, 5, 166, 190, 3, 77, 243, 60, 118, 39, 15, 190, 199, 195, 133, 189, 225, 231, 255, 60, 177, 202, 196, 61, 11, 214, 95, 62, 63, 1, 77, 62, 27, 228, 67, 189, 123, 140, 51, 190, 112, 38, 223, 61, 183, 64, 154, 61, 116, 122, 248, 62, 205, 136, 126, 62, 143, 20, 66, 190, 250, 45, 24, 61, 191, 60, 96, 61, 231, 234, 46, 62, 40, 198, 55, 190, 107, 211, 117, 61, 91, 141, 42, 189, 93, 235, 194, 189, 188, 208, 41, 190, 238, 4, 51, 185, 174, 139, 5, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 224, 20, 189, 182, 214, 183, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {247, 57, 140, 190, 145, 217, 196, 63, 212, 78, 208, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {127, 213, 178, 63, 64, 10, 89, 60};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0025/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}