// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 226, 43, 62, 58, 86, 67, 63, 132, 243, 6, 63, 194, 136, 243, 62, 30, 60, 9, 191, 143, 250, 204, 62, 15, 61, 59, 190, 170, 15, 58, 63, 154, 218, 76, 188, 68, 136, 155, 62, 218, 134, 236, 62, 251, 94, 2, 63, 133, 30, 134, 191, 102, 182, 8, 63, 182, 99, 19, 60, 79, 18, 77, 63, 144, 239, 149, 191, 249, 197, 63, 190, 150, 75, 80, 63, 233, 75, 119, 191, 122, 198, 226, 190, 215, 253, 58, 191, 39, 57, 115, 62, 246, 25, 255, 61, 61, 53, 61, 191, 168, 143, 57, 191, 240, 14, 70, 61, 93, 39, 2, 62, 222, 150, 58, 63, 62, 113, 104, 190, 249, 58, 137, 188, 138, 54, 10, 63, 202, 148, 64, 190, 49, 228, 72, 63, 157, 254, 36, 191, 114, 218, 29, 191, 128, 35, 250, 188, 210, 11, 55, 63, 244, 204, 126, 190, 12, 71, 183, 190, 139, 125, 242, 191, 172, 156, 184, 190, 177, 156, 221, 189, 180, 182, 54, 63, 188, 181, 6, 61, 115, 147, 70, 191, 213, 48, 229, 190, 212, 166, 38, 189, 184, 111, 190, 188, 76, 146, 154, 63, 162, 152, 15, 189, 141, 82, 136, 62, 20, 210, 66, 191, 64, 152, 66, 63, 219, 28, 71, 62, 241, 239, 52, 190, 42, 11, 21, 191, 10, 99, 36, 190, 92, 201, 159, 189, 202, 158, 69, 191, 47, 15, 11, 191, 225, 182, 244, 63, 202, 253, 0, 63, 120, 28, 151, 188, 31, 168, 29, 189, 246, 160, 56, 63, 44, 96, 107, 188, 141, 207, 162, 63, 17, 5, 253, 62, 165, 67, 247, 189, 142, 149, 158, 190, 111, 78, 27, 63, 255, 185, 129, 62, 151, 114, 87, 190, 215, 0, 52, 63, 187, 63, 23, 191, 123, 99, 153, 62, 41, 63, 16, 62, 75, 209, 118, 63, 38, 11, 217, 63, 245, 199, 161, 62, 192, 138, 8, 63, 214, 116, 47, 63, 113, 219, 40, 190, 94, 8, 193, 190, 20, 115, 240, 63, 161, 100, 157, 62, 251, 2, 250, 189, 173, 255, 103, 61, 115, 9, 159, 190, 195, 15, 180, 190, 222, 198, 203, 190, 203, 109, 21, 63, 219, 40, 156, 190, 81, 221, 55, 191, 104, 38, 252, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 66, 52, 191, 79, 84, 51, 62, 0, 184, 26, 62, 127, 162, 74, 62, 184, 24, 138, 62, 70, 123, 200, 62, 236, 112, 102, 191, 248, 11, 12, 63, 155, 217, 235, 62, 238, 196, 20, 190, 134, 237, 86, 190, 67, 30, 121, 62, 40, 200, 163, 190, 148, 52, 163, 190, 172, 225, 144, 62, 155, 37, 35, 63, 79, 9, 12, 63, 169, 13, 129, 62, 210, 135, 233, 190, 35, 181, 51, 190, 148, 215, 113, 61, 241, 31, 56, 190, 65, 107, 227, 62, 12, 53, 166, 190, 101, 132, 172, 62, 241, 104, 47, 63, 128, 139, 244, 187, 185, 208, 238, 62, 16, 105, 148, 59, 197, 236, 152, 190, 97, 46, 200, 190, 236, 8, 236, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 179, 189, 190, 40, 168, 9, 191, 233, 209, 125, 62, 72, 142, 178, 62, 52, 215, 2, 190, 20, 121, 219, 190, 6, 253, 56, 191, 251, 18, 1, 61, 61, 55, 169, 190, 158, 20, 129, 62, 139, 202, 104, 62, 184, 98, 188, 189, 203, 163, 164, 62, 201, 69, 134, 62, 7, 43, 118, 62, 164, 35, 165, 189, 36, 44, 89, 62, 222, 201, 151, 61, 67, 225, 65, 190, 207, 230, 112, 62, 192, 180, 67, 191, 79, 161, 12, 191, 182, 81, 121, 61, 87, 220, 6, 61, 104, 189, 208, 190, 241, 236, 42, 190, 63, 23, 224, 62, 236, 0, 68, 62, 54, 193, 120, 191, 88, 129, 199, 190, 136, 136, 115, 190, 201, 34, 129, 190, 152, 197, 99, 189, 12, 220, 81, 189, 35, 207, 46, 62, 45, 4, 58, 62, 214, 216, 254, 190, 237, 132, 68, 62, 72, 49, 156, 189, 173, 184, 46, 191, 24, 79, 161, 59, 12, 195, 216, 188, 174, 124, 215, 189, 197, 237, 205, 60, 136, 142, 6, 62, 216, 166, 114, 61, 197, 155, 154, 62, 159, 197, 46, 62, 198, 161, 12, 62, 55, 143, 23, 62, 34, 212, 20, 190, 57, 178, 142, 62, 195, 40, 102, 191, 196, 171, 147, 189, 224, 3, 249, 61, 106, 6, 76, 62, 217, 187, 65, 61, 133, 159, 220, 190, 124, 250, 30, 62, 223, 69, 4, 62, 246, 208, 253, 190, 144, 236, 23, 190, 230, 156, 108, 56, 111, 11, 35, 189, 242, 98, 6, 191, 86, 210, 151, 62, 253, 91, 173, 61, 166, 109, 219, 190, 58, 252, 187, 61, 168, 47, 168, 62, 201, 6, 113, 62, 34, 242, 143, 60, 173, 134, 2, 63, 155, 57, 190, 190, 8, 144, 105, 190, 195, 134, 159, 62, 208, 253, 151, 190, 191, 143, 143, 190, 207, 127, 61, 62, 136, 36, 191, 62, 54, 130, 94, 61, 31, 238, 96, 190, 171, 37, 212, 62, 188, 25, 157, 189, 108, 94, 188, 61, 163, 138, 151, 62, 128, 140, 9, 57, 167, 91, 150, 190, 41, 216, 95, 61, 2, 45, 86, 190, 122, 230, 108, 191, 11, 29, 194, 190, 139, 139, 94, 59, 158, 102, 174, 62, 18, 191, 155, 62, 13, 187, 196, 61, 107, 222, 80, 190, 208, 59, 178, 190, 107, 132, 49, 190, 16, 201, 152, 189, 193, 180, 208, 189, 158, 130, 82, 62, 115, 13, 18, 62, 246, 116, 171, 62, 37, 192, 30, 61, 242, 222, 220, 189, 246, 136, 57, 190, 110, 193, 208, 188, 211, 88, 45, 61, 32, 71, 124, 62, 146, 177, 129, 190, 184, 47, 136, 62, 198, 137, 245, 190, 105, 189, 110, 63, 161, 68, 81, 62, 153, 37, 100, 62, 204, 247, 21, 192, 32, 170, 151, 190, 79, 11, 143, 191, 148, 16, 43, 63, 205, 27, 52, 191, 72, 109, 151, 62, 248, 48, 208, 191, 249, 94, 223, 187, 68, 81, 201, 191, 115, 163, 219, 188, 85, 236, 12, 189, 108, 177, 141, 62, 199, 92, 181, 187, 55, 85, 98, 62, 87, 230, 89, 190, 16, 6, 154, 62, 110, 253, 33, 191, 7, 15, 155, 62, 44, 173, 116, 189, 108, 175, 161, 190, 188, 24, 171, 190, 77, 150, 123, 62, 208, 104, 166, 188, 193, 139, 32, 61, 187, 207, 37, 61, 15, 197, 254, 62, 146, 167, 108, 190, 143, 134, 82, 191, 145, 38, 30, 62, 83, 225, 204, 62, 126, 255, 181, 61, 74, 197, 64, 190, 249, 88, 112, 190, 172, 215, 181, 62, 149, 159, 86, 60, 107, 42, 50, 188, 247, 238, 30, 62, 144, 227, 152, 189, 149, 224, 47, 62, 220, 208, 105, 62, 255, 179, 68, 190, 16, 86, 135, 61, 27, 181, 225, 189, 125, 64, 177, 61, 111, 245, 46, 190, 44, 190, 95, 62, 220, 118, 60, 188, 197, 184, 48, 61, 162, 148, 214, 189, 126, 144, 84, 189, 17, 59, 197, 191, 56, 243, 31, 62, 137, 123, 235, 188, 81, 23, 156, 62, 221, 88, 8, 62, 222, 48, 68, 190, 243, 245, 215, 62, 49, 255, 18, 63, 43, 84, 218, 189, 180, 235, 169, 190, 160, 39, 130, 62, 204, 108, 50, 62, 33, 197, 43, 190, 54, 200, 234, 190, 161, 16, 36, 62, 88, 178, 179, 61, 15, 220, 85, 62, 141, 242, 198, 189, 164, 141, 100, 62, 66, 5, 140, 61, 2, 52, 132, 188, 200, 48, 192, 189, 179, 242, 133, 61, 76, 216, 139, 190, 158, 247, 225, 61, 142, 249, 136, 61, 85, 197, 217, 190, 133, 129, 69, 190, 52, 16, 27, 61, 101, 127, 25, 61, 87, 164, 239, 188, 24, 20, 135, 191, 34, 116, 184, 190, 39, 171, 156, 189, 134, 92, 129, 191, 162, 178, 49, 62, 142, 229, 190, 188, 133, 145, 146, 190, 60, 118, 219, 61, 91, 230, 88, 190, 93, 201, 45, 60, 13, 10, 180, 190, 18, 194, 180, 62, 51, 49, 46, 190, 26, 96, 48, 190, 179, 81, 12, 61, 169, 250, 43, 190, 116, 114, 28, 191, 189, 41, 139, 189, 145, 19, 233, 190, 60, 204, 176, 190, 121, 155, 232, 189, 146, 4, 120, 62, 102, 200, 155, 62, 204, 242, 145, 189, 144, 143, 68, 190, 171, 7, 129, 190, 113, 117, 56, 191, 1, 247, 0, 191, 186, 199, 108, 187, 3, 50, 138, 190, 50, 244, 87, 62, 205, 243, 254, 190, 115, 252, 16, 62, 142, 209, 50, 62, 53, 150, 2, 190, 123, 45, 67, 191, 33, 145, 189, 62, 191, 13, 94, 188, 179, 170, 164, 61, 206, 254, 45, 190, 211, 85, 60, 62, 98, 255, 185, 190, 156, 174, 99, 191, 39, 196, 179, 61, 158, 151, 154, 61, 89, 222, 51, 188, 18, 165, 202, 59, 117, 94, 17, 191, 30, 254, 12, 62, 134, 244, 223, 189, 197, 161, 157, 190, 215, 63, 192, 61, 113, 11, 71, 190, 60, 143, 184, 62, 99, 97, 24, 189, 104, 68, 113, 191, 57, 184, 206, 61, 113, 33, 155, 190, 136, 229, 103, 190, 99, 166, 242, 189, 21, 253, 213, 189, 125, 158, 226, 187, 254, 101, 172, 61, 6, 172, 0, 190, 182, 220, 4, 190, 49, 110, 33, 61, 1, 40, 42, 190, 39, 250, 145, 189, 16, 1, 4, 190, 27, 18, 167, 188, 155, 35, 51, 190, 149, 219, 153, 189, 62, 234, 206, 189, 161, 174, 117, 61, 14, 52, 245, 61, 241, 180, 29, 190, 231, 15, 186, 189, 60, 229, 143, 61, 43, 57, 130, 60, 159, 218, 236, 189, 19, 50, 172, 61, 98, 191, 181, 188, 39, 168, 243, 61, 140, 7, 241, 189, 47, 39, 230, 61, 81, 41, 161, 61, 149, 120, 133, 189, 31, 69, 223, 188, 157, 210, 11, 62, 150, 60, 228, 59, 216, 116, 29, 61, 173, 238, 214, 189, 215, 217, 10, 62, 178, 197, 120, 190, 95, 252, 15, 190, 235, 0, 21, 191, 237, 215, 56, 62, 180, 88, 161, 61, 254, 179, 37, 191, 240, 58, 129, 60, 2, 126, 78, 190, 126, 144, 86, 190, 227, 7, 87, 62, 68, 166, 233, 61, 18, 208, 103, 190, 2, 43, 195, 61, 184, 4, 169, 189, 216, 251, 172, 61, 144, 240, 99, 62, 72, 93, 54, 62, 195, 203, 140, 189, 155, 67, 162, 190, 33, 130, 218, 61, 75, 192, 109, 190, 104, 85, 140, 62, 156, 120, 192, 61, 28, 148, 33, 191, 41, 177, 190, 190, 249, 129, 28, 62, 3, 211, 32, 191, 112, 17, 226, 61, 88, 83, 148, 188, 168, 175, 166, 61, 236, 245, 0, 61, 71, 232, 125, 191, 194, 161, 209, 61, 209, 142, 49, 62, 132, 93, 114, 62, 69, 34, 144, 190, 191, 211, 247, 61, 83, 201, 151, 62, 96, 50, 46, 188, 29, 197, 186, 189, 155, 79, 35, 62, 26, 3, 126, 61, 189, 146, 232, 61, 235, 3, 28, 62, 176, 36, 135, 62, 252, 152, 79, 62, 115, 160, 71, 191, 65, 153, 176, 62, 35, 17, 220, 61, 122, 148, 91, 62, 27, 20, 3, 192, 14, 244, 24, 191, 184, 177, 124, 191, 206, 126, 50, 63, 46, 253, 139, 191, 96, 163, 126, 62, 155, 99, 181, 190, 57, 216, 84, 190, 46, 251, 219, 191, 149, 187, 50, 190, 103, 205, 40, 189, 123, 85, 151, 62, 205, 159, 146, 190, 65, 244, 137, 190, 175, 91, 128, 62, 226, 70, 229, 61, 35, 46, 94, 60, 169, 86, 8, 190, 220, 246, 254, 190, 238, 120, 82, 61, 72, 195, 196, 190, 128, 79, 201, 62, 178, 252, 127, 62, 82, 2, 84, 190, 248, 89, 250, 62, 242, 251, 36, 61, 83, 50, 174, 61, 203, 91, 80, 190, 150, 157, 238, 61, 200, 125, 113, 190, 94, 158, 142, 190, 7, 80, 107, 62, 210, 208, 28, 191, 163, 172, 183, 190, 246, 2, 182, 58, 191, 55, 8, 189, 21, 26, 156, 190, 20, 204, 118, 61, 42, 199, 230, 62, 218, 229, 18, 62, 148, 252, 83, 191, 183, 113, 241, 190, 45, 147, 201, 190, 112, 224, 31, 190, 97, 56, 130, 189, 251, 10, 94, 61, 15, 131, 87, 190, 209, 11, 79, 61, 197, 71, 116, 190, 84, 234, 153, 190, 237, 248, 144, 190, 66, 198, 86, 61, 186, 153, 210, 189, 119, 215, 128, 62, 40, 6, 90, 62, 75, 39, 162, 189, 248, 217, 240, 61, 227, 85, 70, 63, 144, 72, 53, 190, 104, 88, 180, 189, 234, 248, 255, 62, 7, 29, 109, 62, 52, 206, 192, 61, 244, 92, 180, 190, 251, 133, 21, 61, 77, 216, 153, 61, 29, 20, 39, 62, 220, 218, 247, 59, 133, 36, 85, 62, 8, 153, 8, 61, 19, 210, 85, 61, 156, 166, 233, 61, 124, 21, 25, 189, 198, 126, 63, 62, 101, 137, 151, 188, 210, 131, 251, 189, 228, 114, 25, 189, 138, 180, 143, 190, 57, 91, 160, 188, 161, 131, 52, 62, 124, 134, 155, 190, 168, 17, 168, 190, 8, 233, 184, 190, 162, 164, 162, 60, 118, 42, 219, 61, 104, 17, 207, 62, 163, 196, 34, 61, 100, 145, 58, 190, 167, 39, 239, 61, 146, 98, 141, 62, 186, 171, 90, 62, 102, 201, 144, 62, 40, 21, 253, 189, 211, 73, 251, 62, 112, 97, 156, 190, 42, 250, 37, 62, 0, 160, 0, 192, 51, 157, 3, 190, 59, 172, 2, 191, 4, 242, 172, 62, 135, 229, 107, 190, 178, 165, 227, 61, 33, 118, 149, 62, 245, 98, 84, 62, 206, 185, 254, 191, 111, 171, 128, 190, 69, 65, 205, 61, 13, 170, 235, 61, 219, 250, 2, 191, 23, 40, 136, 62, 196, 91, 173, 189, 86, 122, 173, 190, 159, 141, 5, 189, 17, 217, 217, 62, 196, 19, 201, 62, 118, 16, 45, 188, 91, 96, 161, 62, 254, 175, 162, 190, 230, 119, 248, 190, 64, 200, 208, 62, 213, 147, 64, 190, 4, 245, 136, 191, 209, 77, 216, 61, 66, 18, 253, 61, 243, 3, 132, 62, 149, 165, 148, 190, 31, 171, 63, 59, 36, 23, 231, 190, 181, 162, 92, 190, 33, 30, 148, 62, 65, 175, 23, 62, 123, 109, 30, 190, 27, 201, 43, 62, 5, 165, 20, 190, 7, 155, 49, 191, 86, 36, 49, 189, 176, 74, 16, 191, 160, 226, 153, 189, 163, 157, 146, 62, 39, 254, 227, 61, 246, 128, 33, 190, 124, 74, 132, 62, 189, 143, 64, 62, 126, 238, 39, 190, 43, 78, 202, 61, 193, 228, 152, 62, 247, 240, 62, 189, 172, 12, 49, 62, 171, 59, 73, 189, 10, 124, 138, 190, 71, 45, 9, 190, 19, 103, 16, 62, 122, 122, 212, 190, 103, 237, 245, 191, 168, 206, 185, 61, 194, 185, 197, 61, 184, 27, 243, 62, 63, 21, 207, 189, 7, 87, 165, 189, 155, 218, 188, 190, 190, 255, 151, 62, 11, 212, 132, 188, 141, 221, 159, 189, 140, 112, 204, 60, 193, 176, 58, 189, 115, 136, 190, 61, 249, 95, 105, 190, 60, 67, 70, 189, 9, 178, 223, 60, 134, 21, 133, 62, 51, 242, 144, 62, 106, 206, 166, 189, 142, 131, 142, 190, 173, 168, 147, 62, 166, 72, 190, 60, 3, 43, 23, 190, 222, 1, 174, 61, 234, 48, 90, 58, 7, 210, 46, 190, 242, 19, 33, 61, 1, 1, 251, 62, 11, 221, 58, 190, 222, 210, 210, 189, 44, 127, 28, 62, 53, 43, 58, 190, 157, 11, 131, 189, 153, 29, 199, 62, 56, 108, 199, 62, 240, 180, 165, 61, 65, 165, 60, 190, 195, 50, 189, 60, 166, 229, 208, 61, 172, 56, 46, 62, 131, 16, 213, 61, 112, 33, 57, 189, 6, 70, 139, 190, 207, 88, 122, 188, 150, 55, 86, 60, 17, 161, 43, 190, 176, 93, 217, 189, 80, 237, 243, 61, 253, 153, 30, 62, 68, 82, 60, 62, 88, 103, 71, 62, 86, 0, 135, 61, 89, 84, 31, 190, 137, 238, 181, 189, 158, 189, 9, 62, 65, 18, 61, 190, 193, 229, 192, 60, 253, 10, 41, 190, 7, 238, 212, 189, 33, 193, 58, 189, 161, 157, 16, 190, 230, 201, 140, 61, 143, 181, 4, 190, 10, 23, 150, 61, 234, 229, 146, 61, 158, 195, 4, 190, 250, 187, 164, 189, 43, 51, 5, 62, 90, 232, 66, 190, 173, 53, 107, 190, 239, 36, 60, 61, 217, 3, 114, 189, 150, 2, 104, 188, 73, 35, 114, 189, 88, 134, 226, 61, 103, 26, 180, 189, 136, 35, 84, 61, 91, 125, 11, 62, 223, 215, 209, 189, 134, 221, 132, 188, 55, 60, 174, 61, 207, 192, 221, 189, 49, 42, 116, 190, 64, 117, 30, 62, 48, 237, 134, 61, 71, 253, 163, 60, 113, 78, 68, 62, 127, 61, 155, 61, 199, 157, 170, 191, 155, 26, 91, 190, 249, 33, 64, 62, 43, 15, 8, 191, 221, 212, 217, 62, 236, 92, 236, 61, 241, 65, 28, 191, 125, 138, 147, 62, 169, 44, 218, 190, 27, 34, 155, 189, 255, 140, 29, 190, 147, 27, 147, 62, 90, 190, 71, 189, 72, 81, 71, 62, 28, 103, 27, 62, 6, 193, 65, 61, 5, 50, 28, 61, 175, 179, 62, 62, 203, 83, 22, 61, 151, 173, 144, 188, 170, 22, 30, 60, 185, 208, 215, 62, 133, 254, 14, 62, 18, 236, 191, 60, 30, 89, 144, 189, 175, 34, 46, 190, 61, 178, 113, 191, 45, 179, 39, 60, 166, 242, 30, 62, 115, 114, 157, 189, 161, 55, 74, 190, 226, 53, 214, 190, 128, 213, 152, 62, 42, 28, 224, 62, 227, 139, 77, 191, 58, 231, 133, 189, 11, 223, 40, 61, 190, 60, 48, 61, 7, 27, 25, 62, 204, 57, 185, 61, 62, 235, 134, 190, 23, 32, 159, 190, 68, 216, 86, 190, 16, 100, 119, 190, 104, 130, 215, 62, 107, 236, 123, 62, 37, 90, 152, 189, 31, 174, 112, 190, 174, 48, 69, 62, 227, 115, 242, 190, 3, 41, 213, 62, 135, 132, 69, 188, 92, 202, 166, 191, 81, 53, 92, 191, 244, 203, 8, 188, 49, 84, 66, 191, 146, 69, 83, 62, 57, 134, 172, 62, 142, 111, 57, 190, 125, 96, 214, 189, 135, 130, 126, 61, 35, 89, 17, 62, 81, 71, 197, 190, 253, 86, 34, 62, 15, 227, 253, 62, 247, 104, 241, 62, 48, 53, 188, 189, 195, 200, 126, 62, 20, 150, 170, 190, 143, 15, 113, 190, 238, 151, 202, 62, 222, 49, 224, 190, 122, 196, 17, 192, 22, 211, 33, 62, 114, 63, 255, 61, 50, 56, 171, 60, 113, 134, 185, 190, 57, 164, 125, 61, 203, 119, 238, 190, 79, 133, 78, 62, 166, 10, 168, 62, 181, 120, 124, 61, 24, 198, 67, 190, 138, 14, 95, 62, 207, 208, 122, 62, 122, 14, 204, 190, 178, 85, 32, 190, 78, 112, 157, 62, 71, 123, 52, 62, 103, 194, 206, 62, 25, 203, 128, 189, 220, 152, 43, 62, 10, 146, 48, 189, 90, 230, 109, 188, 65, 150, 179, 62, 49, 204, 165, 190, 36, 240, 51, 190, 77, 82, 88, 190, 203, 12, 214, 190, 40, 209, 226, 190, 98, 228, 121, 62, 118, 8, 121, 62, 75, 131, 10, 190, 85, 1, 202, 62, 194, 71, 35, 62, 162, 189, 191, 61, 50, 173, 238, 190, 208, 65, 25, 62, 13, 165, 154, 62, 255, 113, 33, 190, 90, 152, 169, 62, 170, 198, 134, 188, 186, 195, 137, 61, 45, 225, 158, 60, 132, 232, 212, 187, 238, 150, 67, 189, 124, 175, 149, 190, 41, 161, 174, 62, 0, 226, 137, 62, 224, 138, 206, 189, 17, 19, 123, 190, 239, 165, 160, 189, 253, 216, 149, 190, 249, 235, 160, 62, 183, 168, 193, 62, 144, 151, 205, 61, 198, 75, 141, 62, 45, 191, 185, 190, 148, 167, 161, 189, 45, 110, 212, 190, 61, 34, 161, 190, 93, 205, 176, 190, 106, 183, 2, 63, 133, 97, 193, 60, 227, 33, 247, 60, 8, 182, 177, 62, 156, 130, 147, 191, 236, 80, 157, 190, 11, 215, 199, 191, 149, 129, 68, 62, 133, 209, 37, 62, 42, 159, 3, 189, 179, 126, 29, 190, 12, 161, 215, 60, 148, 87, 224, 61, 49, 23, 1, 190, 233, 154, 74, 189, 237, 153, 49, 62, 205, 241, 141, 190, 57, 197, 208, 62, 148, 179, 217, 61, 150, 168, 251, 189, 183, 201, 57, 62, 206, 77, 27, 62, 197, 201, 136, 191, 54, 155, 11, 190, 160, 85, 0, 190, 43, 185, 1, 189, 143, 249, 166, 61, 232, 60, 230, 189, 200, 133, 10, 190, 146, 39, 50, 61, 92, 44, 160, 61, 79, 14, 158, 187, 67, 177, 192, 188, 153, 53, 174, 61, 28, 190, 18, 190, 222, 60, 47, 190, 80, 1, 139, 61, 145, 170, 106, 190, 74, 13, 169, 61, 226, 198, 183, 189, 85, 190, 137, 189, 6, 83, 225, 189, 64, 62, 19, 190, 203, 180, 139, 61, 112, 92, 2, 61, 202, 101, 36, 190, 202, 182, 33, 62, 14, 124, 9, 62, 113, 160, 170, 189, 219, 9, 11, 62, 87, 3, 167, 61, 38, 28, 20, 60, 97, 54, 125, 61, 3, 212, 3, 190, 99, 29, 191, 189, 94, 190, 20, 62, 215, 95, 232, 61, 206, 69, 125, 187, 24, 174, 36, 60, 228, 215, 158, 61, 187, 56, 75, 191, 107, 166, 30, 60, 122, 5, 10, 62, 43, 60, 159, 188, 90, 129, 136, 62, 99, 58, 21, 62, 255, 124, 155, 190, 176, 205, 143, 62, 213, 23, 191, 62, 245, 97, 17, 60, 174, 249, 125, 190, 139, 24, 10, 63, 120, 211, 16, 190, 167, 126, 201, 190, 9, 118, 30, 191, 239, 70, 103, 62, 57, 109, 45, 61, 87, 23, 140, 62, 238, 29, 95, 61, 146, 156, 197, 60, 223, 255, 54, 62, 131, 80, 211, 61, 227, 242, 187, 61, 173, 237, 116, 61, 48, 153, 5, 191, 124, 107, 40, 190, 214, 83, 170, 190, 11, 2, 215, 189, 180, 3, 46, 190, 141, 42, 206, 61, 144, 200, 137, 188, 131, 192, 11, 190, 155, 0, 224, 61, 3, 119, 74, 190, 3, 32, 180, 189, 69, 145, 184, 61, 99, 23, 2, 62, 108, 168, 59, 190, 54, 226, 29, 188, 169, 2, 56, 61, 225, 207, 59, 188, 171, 35, 164, 62, 191, 190, 165, 61, 21, 190, 141, 188, 209, 53, 234, 189, 89, 128, 167, 189, 209, 224, 49, 62, 26, 47, 79, 190, 97, 62, 255, 58, 48, 54, 54, 61, 4, 78, 109, 190, 193, 142, 138, 61, 21, 125, 9, 59, 168, 49, 171, 189, 213, 23, 93, 62, 181, 102, 81, 190, 205, 131, 8, 190, 6, 102, 188, 189, 110, 52, 11, 62, 252, 21, 237, 189, 1, 41, 137, 61, 32, 208, 41, 190, 40, 221, 210, 61, 104, 241, 151, 61, 116, 246, 42, 190, 251, 27, 98, 61, 85, 171, 41, 61, 236, 31, 5, 62, 70, 92, 172, 189, 208, 217, 244, 189, 116, 127, 191, 189, 233, 245, 126, 189, 210, 5, 82, 188, 226, 214, 250, 187, 41, 151, 192, 189, 96, 60, 7, 189, 129, 207, 55, 190, 167, 150, 16, 190, 186, 17, 191, 189, 107, 216, 140, 61, 78, 62, 7, 61, 160, 255, 2, 190, 199, 36, 187, 61, 249, 233, 47, 189, 194, 14, 13, 190, 138, 119, 50, 61, 159, 43, 112, 189, 189, 97, 61, 190, 4, 164, 52, 190, 205, 173, 162, 59, 103, 117, 135, 189, 124, 33, 37, 59, 54, 240, 253, 61, 184, 212, 154, 190, 43, 233, 139, 189, 156, 45, 227, 190, 30, 146, 177, 61, 12, 82, 167, 62, 18, 251, 135, 191, 106, 243, 129, 62, 252, 126, 222, 189, 160, 53, 186, 189, 144, 106, 55, 62, 29, 31, 24, 60, 138, 219, 30, 190, 6, 249, 48, 189, 112, 201, 240, 188, 187, 241, 32, 62, 66, 243, 3, 62, 214, 84, 212, 61, 82, 161, 1, 62, 125, 3, 68, 191, 233, 45, 2, 191, 81, 162, 53, 61, 179, 81, 0, 190, 75, 52, 175, 189, 115, 161, 154, 191, 252, 46, 26, 61, 226, 104, 150, 59, 170, 3, 215, 189, 98, 129, 51, 188, 22, 8, 150, 190, 130, 42, 12, 62, 165, 17, 93, 61, 106, 27, 230, 189, 185, 107, 97, 189, 79, 105, 137, 189, 199, 13, 39, 62, 20, 122, 126, 61, 194, 219, 19, 62, 19, 155, 186, 60, 95, 208, 81, 189, 34, 236, 172, 188, 237, 145, 35, 190, 78, 205, 33, 190, 39, 102, 5, 190, 200, 253, 135, 61, 63, 169, 24, 190, 10, 227, 237, 187, 214, 25, 29, 189, 141, 190, 204, 189, 186, 83, 33, 190, 38, 141, 232, 189, 165, 37, 29, 61, 199, 193, 131, 189, 152, 78, 210, 189, 138, 214, 29, 62, 103, 101, 253, 61, 106, 81, 194, 189, 164, 24, 29, 190, 30, 111, 250, 60, 89, 32, 177, 61, 172, 69, 12, 62, 219, 80, 38, 189, 57, 186, 165, 189, 173, 28, 248, 189, 12, 23, 237, 188, 201, 156, 212, 189, 86, 5, 0, 190, 109, 68, 151, 62, 160, 94, 60, 62, 138, 134, 209, 61, 149, 22, 47, 62, 83, 93, 58, 62, 14, 220, 114, 191, 15, 62, 113, 191, 234, 84, 132, 62, 73, 155, 141, 191, 111, 55, 225, 191, 82, 79, 139, 62, 235, 102, 193, 61, 237, 230, 208, 189, 7, 132, 108, 189, 242, 57, 190, 61, 96, 66, 49, 191, 64, 30, 136, 62, 126, 250, 135, 62, 88, 26, 161, 62, 175, 33, 23, 188, 116, 189, 14, 59, 213, 132, 14, 62, 74, 40, 153, 190, 134, 32, 50, 191, 135, 96, 12, 62, 123, 238, 103, 62, 162, 117, 126, 62, 8, 133, 220, 189, 83, 243, 249, 188, 110, 213, 235, 61, 125, 118, 209, 189, 88, 146, 159, 61, 129, 10, 234, 190, 38, 31, 8, 62, 14, 197, 175, 62, 183, 243, 159, 191, 54, 135, 20, 62, 30, 141, 40, 62, 54, 58, 29, 190, 180, 14, 152, 62, 168, 227, 96, 61, 199, 152, 16, 190, 62, 252, 133, 190, 255, 48, 219, 60, 93, 49, 95, 61, 190, 112, 239, 189, 15, 63, 82, 61, 15, 30, 76, 188, 3, 113, 51, 191, 0, 119, 31, 191, 30, 36, 113, 190, 51, 39, 247, 60, 33, 162, 219, 61, 189, 182, 154, 191, 124, 241, 226, 59, 152, 220, 212, 57, 8, 70, 178, 189, 197, 75, 41, 61, 116, 246, 203, 190, 200, 34, 71, 61, 124, 24, 177, 61, 136, 6, 151, 189, 148, 230, 200, 61, 40, 36, 251, 188, 195, 108, 148, 189, 193, 15, 155, 188, 103, 255, 21, 190, 11, 115, 195, 61, 156, 166, 11, 190, 106, 209, 250, 61, 157, 44, 161, 61, 83, 48, 21, 60, 44, 52, 254, 59, 123, 130, 130, 189, 147, 156, 41, 190, 184, 8, 10, 190, 23, 253, 94, 189, 126, 126, 236, 61, 103, 89, 162, 189, 72, 182, 134, 188, 225, 81, 51, 190, 88, 144, 11, 190, 218, 199, 84, 188, 145, 138, 248, 61, 26, 112, 242, 189, 157, 148, 26, 190, 55, 142, 151, 61, 186, 87, 202, 189, 26, 162, 79, 61, 187, 26, 71, 188, 97, 44, 186, 61, 7, 176, 35, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 35, 204, 61, 158, 192, 116, 61, 130, 223, 216, 61, 111, 195, 183, 61, 30, 27, 157, 61, 101, 154, 166, 61, 63, 199, 74, 190, 39, 33, 106, 189, 67, 120, 93, 189, 13, 77, 249, 61, 66, 28, 178, 61, 61, 145, 26, 61, 98, 127, 183, 187, 34, 54, 29, 62, 181, 79, 82, 62, 251, 167, 116, 62, 123, 51, 88, 62, 140, 51, 142, 189, 52, 237, 17, 189, 204, 38, 93, 190, 202, 255, 94, 62, 24, 88, 117, 60, 245, 155, 146, 190, 87, 2, 245, 189, 99, 59, 185, 189, 110, 251, 49, 62, 226, 119, 212, 61, 17, 72, 55, 61, 120, 234, 154, 189, 133, 124, 125, 62, 87, 31, 120, 188, 221, 120, 52, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 39, 38, 191, 204, 26, 232, 60, 199, 151, 19, 63, 144, 99, 110, 191, 107, 254, 207, 190, 46, 151, 153, 190, 171, 191, 86, 63, 220, 232, 173, 190, 247, 223, 209, 189, 89, 25, 162, 62, 190, 139, 118, 191, 35, 129, 27, 191, 1, 92, 203, 189, 226, 3, 96, 191, 166, 145, 88, 63, 96, 90, 176, 62, 26, 91, 167, 61, 175, 223, 76, 61, 194, 110, 73, 63, 251, 107, 79, 63, 96, 65, 67, 63, 44, 74, 76, 190, 43, 253, 37, 191, 213, 129, 12, 61, 152, 109, 137, 190, 57, 211, 71, 60, 180, 66, 237, 61, 18, 65, 174, 62, 138, 74, 109, 189, 241, 154, 254, 62, 151, 75, 137, 62, 89, 146, 136, 61, 72, 118, 81, 61, 211, 133, 0, 191, 133, 19, 70, 62, 222, 20, 20, 61, 52, 34, 174, 190, 93, 152, 225, 189, 98, 95, 155, 61, 114, 236, 101, 190, 3, 77, 243, 60, 75, 22, 20, 190, 127, 221, 130, 61, 218, 79, 203, 189, 114, 28, 226, 60, 147, 150, 187, 62, 240, 43, 10, 62, 64, 70, 197, 188, 237, 244, 16, 190, 112, 38, 223, 61, 231, 217, 159, 189, 13, 59, 2, 63, 91, 248, 104, 62, 177, 76, 192, 190, 25, 198, 114, 189, 191, 60, 96, 61, 222, 17, 17, 62, 9, 222, 94, 190, 107, 211, 117, 61, 253, 125, 120, 189, 93, 235, 194, 189, 110, 143, 168, 189, 71, 244, 250, 59, 174, 139, 5, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 191, 196, 188, 110, 55, 241, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 194, 148, 191, 144, 237, 136, 62, 214, 201, 220, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {121, 214, 137, 63, 81, 212, 29, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0025/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}